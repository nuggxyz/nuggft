{
  "address": "0x42069db1E5f041f679D73005cC6B5Ab7D39170F1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "bytesToAttribute",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "x",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "y",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Coordinate",
                  "name": "len",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "colorID",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "len",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Group[]",
                  "name": "groups",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "id",
                      "type": "uint8"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "r",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "g",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "b",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "a",
                          "type": "uint8"
                        }
                      ],
                      "internalType": "struct IDotNugg.RGBA8",
                      "name": "rgba",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint8",
                      "name": "layer",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bool",
                      "name": "exists",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct IDotNugg.Color[]",
                  "name": "colors",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IDotNugg.Display",
              "name": "display",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "x",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "y",
                  "type": "uint8"
                }
              ],
              "internalType": "struct IDotNugg.Coordinate",
              "name": "anchor",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "id",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "defaultLevel",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Feature",
                  "name": "feature",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "x",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "y",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Coordinate",
                  "name": "anchor",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "l",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "r",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "u",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "d",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "z",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "c",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Arguments",
                  "name": "arguments",
                  "type": "tuple"
                },
                {
                  "internalType": "bool",
                  "name": "exists",
                  "type": "bool"
                }
              ],
              "internalType": "struct IDotNugg.BaseFeature",
              "name": "baseFeature",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "id",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "defaultLevel",
                  "type": "uint8"
                }
              ],
              "internalType": "struct IDotNugg.Feature",
              "name": "feature",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "exists",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint8",
                      "name": "id",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "colorID",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Expander",
                  "name": "left",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "exists",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint8",
                      "name": "id",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "colorID",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Expander",
                  "name": "right",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "exists",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint8",
                      "name": "id",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "colorID",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Expander",
                  "name": "left2",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "exists",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint8",
                      "name": "id",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "colorID",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Expander",
                  "name": "right2",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "exists",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint8",
                      "name": "id",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "row",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.VerticalExpander",
                  "name": "up",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "exists",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint8",
                      "name": "id",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "row",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.VerticalExpander",
                  "name": "down",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IDotNugg.ExpanderGroup",
              "name": "expanders",
              "type": "tuple"
            }
          ],
          "internalType": "struct IDotNugg.Attribute",
          "name": "attribute",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "bytesToBase",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "id",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "defaultLevel",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Feature",
                  "name": "feature",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "x",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "y",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Coordinate",
                  "name": "anchor",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "l",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "r",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "u",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "d",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "z",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "c",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Arguments",
                  "name": "arguments",
                  "type": "tuple"
                },
                {
                  "internalType": "bool",
                  "name": "exists",
                  "type": "bool"
                }
              ],
              "internalType": "struct IDotNugg.BaseFeature[]",
              "name": "baseFeatures",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "x",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "y",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Coordinate",
                  "name": "len",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "colorID",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "len",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Group[]",
                  "name": "groups",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "id",
                      "type": "uint8"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "r",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "g",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "b",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "a",
                          "type": "uint8"
                        }
                      ],
                      "internalType": "struct IDotNugg.RGBA8",
                      "name": "rgba",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint8",
                      "name": "layer",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bool",
                      "name": "exists",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct IDotNugg.Color[]",
                  "name": "colors",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IDotNugg.Display",
              "name": "display",
              "type": "tuple"
            }
          ],
          "internalType": "struct IDotNugg.Base",
          "name": "base",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "bytesToCollection",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "id",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "defaultLevel",
                  "type": "uint8"
                }
              ],
              "internalType": "struct IDotNugg.Feature[]",
              "name": "features",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IDotNugg.Collection",
          "name": "collection",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "id",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "defaultLevel",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Feature",
                  "name": "feature",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "x",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "y",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Coordinate",
                  "name": "anchor",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "l",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "r",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "u",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "d",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "z",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "c",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Arguments",
                  "name": "arguments",
                  "type": "tuple"
                },
                {
                  "internalType": "bool",
                  "name": "exists",
                  "type": "bool"
                }
              ],
              "internalType": "struct IDotNugg.BaseFeature[]",
              "name": "baseFeatures",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "x",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "y",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Coordinate",
                  "name": "len",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "colorID",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "len",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Group[]",
                  "name": "groups",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "id",
                      "type": "uint8"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "r",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "g",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "b",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "a",
                          "type": "uint8"
                        }
                      ],
                      "internalType": "struct IDotNugg.RGBA8",
                      "name": "rgba",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint8",
                      "name": "layer",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bool",
                      "name": "exists",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct IDotNugg.Color[]",
                  "name": "colors",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IDotNugg.Display",
              "name": "display",
              "type": "tuple"
            }
          ],
          "internalType": "struct IDotNugg.Base",
          "name": "base",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "x",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "y",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Coordinate",
                  "name": "len",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "colorID",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "len",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Group[]",
                  "name": "groups",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "id",
                      "type": "uint8"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "r",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "g",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "b",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "a",
                          "type": "uint8"
                        }
                      ],
                      "internalType": "struct IDotNugg.RGBA8",
                      "name": "rgba",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint8",
                      "name": "layer",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bool",
                      "name": "exists",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct IDotNugg.Color[]",
                  "name": "colors",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IDotNugg.Display",
              "name": "display",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "x",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "y",
                  "type": "uint8"
                }
              ],
              "internalType": "struct IDotNugg.Coordinate",
              "name": "anchor",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "id",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "defaultLevel",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Feature",
                  "name": "feature",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "x",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "y",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Coordinate",
                  "name": "anchor",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "l",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "r",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "u",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "d",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "z",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "c",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Arguments",
                  "name": "arguments",
                  "type": "tuple"
                },
                {
                  "internalType": "bool",
                  "name": "exists",
                  "type": "bool"
                }
              ],
              "internalType": "struct IDotNugg.BaseFeature",
              "name": "baseFeature",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "id",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "defaultLevel",
                  "type": "uint8"
                }
              ],
              "internalType": "struct IDotNugg.Feature",
              "name": "feature",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "exists",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint8",
                      "name": "id",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "colorID",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Expander",
                  "name": "left",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "exists",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint8",
                      "name": "id",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "colorID",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Expander",
                  "name": "right",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "exists",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint8",
                      "name": "id",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "colorID",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Expander",
                  "name": "left2",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "exists",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint8",
                      "name": "id",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "colorID",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Expander",
                  "name": "right2",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "exists",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint8",
                      "name": "id",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "row",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.VerticalExpander",
                  "name": "up",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "exists",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint8",
                      "name": "id",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "row",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.VerticalExpander",
                  "name": "down",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IDotNugg.ExpanderGroup",
              "name": "expanders",
              "type": "tuple"
            }
          ],
          "internalType": "struct IDotNugg.Attribute[]",
          "name": "attrs",
          "type": "tuple[]"
        }
      ],
      "name": "newDisplay",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "x",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "y",
                  "type": "uint8"
                }
              ],
              "internalType": "struct IDotNugg.Coordinate",
              "name": "len",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "colorID",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "len",
                  "type": "uint8"
                }
              ],
              "internalType": "struct IDotNugg.Group[]",
              "name": "groups",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "id",
                  "type": "uint8"
                },
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "r",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "g",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "b",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "a",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.RGBA8",
                  "name": "rgba",
                  "type": "tuple"
                },
                {
                  "internalType": "uint8",
                  "name": "layer",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "exists",
                  "type": "bool"
                }
              ],
              "internalType": "struct IDotNugg.Color[]",
              "name": "colors",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IDotNugg.Display",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "x",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "y",
                  "type": "uint8"
                }
              ],
              "internalType": "struct IDotNugg.Coordinate",
              "name": "len",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "colorID",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "len",
                  "type": "uint8"
                }
              ],
              "internalType": "struct IDotNugg.Group[]",
              "name": "groups",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "id",
                  "type": "uint8"
                },
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "r",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "g",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "b",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "a",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.RGBA8",
                  "name": "rgba",
                  "type": "tuple"
                },
                {
                  "internalType": "uint8",
                  "name": "layer",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "exists",
                  "type": "bool"
                }
              ],
              "internalType": "struct IDotNugg.Color[]",
              "name": "colors",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IDotNugg.Display",
          "name": "display",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "pixWidth",
          "type": "uint256"
        }
      ],
      "name": "toSvg",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "res",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x29316e21693c83c5245265317459699dd7e8818eae042cfa498c699aa6c782d9",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xB666C13b621568FeC210724DF161604adccfA257",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "5327719",
    "logsBloom": "0x
    "blockHash": "0x3b1bd8839a1d682fc59bf8471f0de06f94af20185e83691f0a03604ff03974e7",
    "transactionHash": "0x29316e21693c83c5245265317459699dd7e8818eae042cfa498c699aa6c782d9",
    "logs": [],
    "blockNumber": 11240966,
    "cumulativeGasUsed": "5379181",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7d2a24011b2491b838d7c61bbf17b17b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"bytesToAttribute\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"y\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Coordinate\",\"name\":\"len\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"colorID\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"len\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Group[]\",\"name\":\"groups\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"g\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"a\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.RGBA8\",\"name\":\"rgba\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"layer\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct IDotNugg.Color[]\",\"name\":\"colors\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IDotNugg.Display\",\"name\":\"display\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"y\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Coordinate\",\"name\":\"anchor\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"defaultLevel\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Feature\",\"name\":\"feature\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"y\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Coordinate\",\"name\":\"anchor\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"l\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"u\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"d\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"z\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"c\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Arguments\",\"name\":\"arguments\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct IDotNugg.BaseFeature\",\"name\":\"baseFeature\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"defaultLevel\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Feature\",\"name\":\"feature\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"colorID\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Expander\",\"name\":\"left\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"colorID\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Expander\",\"name\":\"right\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"colorID\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Expander\",\"name\":\"left2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"colorID\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Expander\",\"name\":\"right2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.VerticalExpander\",\"name\":\"up\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.VerticalExpander\",\"name\":\"down\",\"type\":\"tuple\"}],\"internalType\":\"struct IDotNugg.ExpanderGroup\",\"name\":\"expanders\",\"type\":\"tuple\"}],\"internalType\":\"struct IDotNugg.Attribute\",\"name\":\"attribute\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"bytesToBase\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"defaultLevel\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Feature\",\"name\":\"feature\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"y\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Coordinate\",\"name\":\"anchor\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"l\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"u\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"d\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"z\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"c\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Arguments\",\"name\":\"arguments\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct IDotNugg.BaseFeature[]\",\"name\":\"baseFeatures\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"y\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Coordinate\",\"name\":\"len\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"colorID\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"len\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Group[]\",\"name\":\"groups\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"g\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"a\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.RGBA8\",\"name\":\"rgba\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"layer\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct IDotNugg.Color[]\",\"name\":\"colors\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IDotNugg.Display\",\"name\":\"display\",\"type\":\"tuple\"}],\"internalType\":\"struct IDotNugg.Base\",\"name\":\"base\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"bytesToCollection\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"defaultLevel\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Feature[]\",\"name\":\"features\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IDotNugg.Collection\",\"name\":\"collection\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"defaultLevel\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Feature\",\"name\":\"feature\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"y\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Coordinate\",\"name\":\"anchor\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"l\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"u\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"d\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"z\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"c\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Arguments\",\"name\":\"arguments\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct IDotNugg.BaseFeature[]\",\"name\":\"baseFeatures\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"y\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Coordinate\",\"name\":\"len\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"colorID\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"len\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Group[]\",\"name\":\"groups\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"g\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"a\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.RGBA8\",\"name\":\"rgba\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"layer\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct IDotNugg.Color[]\",\"name\":\"colors\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IDotNugg.Display\",\"name\":\"display\",\"type\":\"tuple\"}],\"internalType\":\"struct IDotNugg.Base\",\"name\":\"base\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"y\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Coordinate\",\"name\":\"len\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"colorID\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"len\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Group[]\",\"name\":\"groups\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"g\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"a\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.RGBA8\",\"name\":\"rgba\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"layer\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct IDotNugg.Color[]\",\"name\":\"colors\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IDotNugg.Display\",\"name\":\"display\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"y\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Coordinate\",\"name\":\"anchor\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"defaultLevel\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Feature\",\"name\":\"feature\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"y\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Coordinate\",\"name\":\"anchor\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"l\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"u\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"d\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"z\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"c\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Arguments\",\"name\":\"arguments\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct IDotNugg.BaseFeature\",\"name\":\"baseFeature\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"defaultLevel\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Feature\",\"name\":\"feature\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"colorID\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Expander\",\"name\":\"left\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"colorID\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Expander\",\"name\":\"right\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"colorID\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Expander\",\"name\":\"left2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"colorID\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Expander\",\"name\":\"right2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.VerticalExpander\",\"name\":\"up\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.VerticalExpander\",\"name\":\"down\",\"type\":\"tuple\"}],\"internalType\":\"struct IDotNugg.ExpanderGroup\",\"name\":\"expanders\",\"type\":\"tuple\"}],\"internalType\":\"struct IDotNugg.Attribute[]\",\"name\":\"attrs\",\"type\":\"tuple[]\"}],\"name\":\"newDisplay\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"y\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Coordinate\",\"name\":\"len\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"colorID\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"len\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Group[]\",\"name\":\"groups\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"g\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"a\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.RGBA8\",\"name\":\"rgba\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"layer\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct IDotNugg.Color[]\",\"name\":\"colors\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IDotNugg.Display\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"y\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Coordinate\",\"name\":\"len\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"colorID\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"len\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Group[]\",\"name\":\"groups\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"g\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"a\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.RGBA8\",\"name\":\"rgba\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"layer\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct IDotNugg.Color[]\",\"name\":\"colors\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IDotNugg.Display\",\"name\":\"display\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"pixWidth\",\"type\":\"uint256\"}],\"name\":\"toSvg\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"res\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Nugg Labs - @danny7even & @dub6ix\",\"details\":\"hold my margarita\",\"kind\":\"dev\",\"methods\":{},\"title\":\"DotNugg V1 - onchain encoder/decoder for dotnugg files\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"yoU CAN'T HaVe ImAgES oN THe BlOCkcHAIn\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/DotNugg.sol\":\"DotNugg\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"contracts/core/DotNugg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './DotNuggDecoder.sol';\\nimport './DotNuggCalculator.sol';\\n\\nimport './interfaces/IDotNugg.sol';\\n\\n/**\\n * @title DotNugg V1 - onchain encoder/decoder for dotnugg files\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice yoU CAN'T HaVe ImAgES oN THe BlOCkcHAIn\\n * @dev hold my margarita\\n */\\ncontract DotNugg is IDotNugg, DotNuggDecoder, DotNuggCalculator {\\n\\n}\\n\",\"keccak256\":\"0x1b13f6f65a432642856158b3430b934c1407ff9d47f10ba3d26c13028098f212\",\"license\":\"MIT\"},\"contracts/core/DotNuggCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './base/Calculator.sol';\\nimport './interfaces/IDotNuggCalculator.sol';\\n\\nabstract contract DotNuggCalculator is IDotNuggCalculator {\\n    function newDisplay(IDotNugg.Base memory base, IDotNugg.Attribute[] memory attrs) external pure override returns (IDotNugg.Display memory) {\\n        return Calculator._newDisplay(base, attrs);\\n    }\\n}\\n\",\"keccak256\":\"0x08d349aaa2e3853ec210b6a3ba542d69e239e9e7c2b0d58321b807d093a200cc\",\"license\":\"MIT\"},\"contracts/core/DotNuggDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './libraries/Svg.sol';\\n\\nimport './base/Decoder.sol';\\nimport './interfaces/IDotNuggDecoder.sol';\\n\\nabstract contract DotNuggDecoder is IDotNuggDecoder {\\n    // function validateFile(bytes memory data) external pure override returns (bytes memory res) {\\n    //     return Decoder._validateFile(data);\\n    // }\\n\\n    function bytesToCollection(bytes memory data) external pure override returns (IDotNugg.Collection memory collection) {\\n        return Decoder._bytesToCollection(data);\\n    }\\n\\n    function bytesToBase(bytes memory data) external pure override returns (IDotNugg.Base memory base) {\\n        return Decoder._bytesToBase(data);\\n    }\\n\\n    function bytesToAttribute(bytes memory data) external pure override returns (IDotNugg.Attribute memory attribute) {\\n        return Decoder._bytesToAttribute(data);\\n    }\\n\\n    function toSvg(IDotNugg.Display memory display, uint256 pixWidth) external view override returns (bytes memory res) {\\n        return Svg.toSvg(display, pixWidth);\\n    }\\n}\\n\",\"keccak256\":\"0xbd835dd0991811624f6193267b9ccc43d5886518da3ee57b8ed82bf49cff6bd6\",\"license\":\"MIT\"},\"contracts/core/base/Calculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\nimport '../libraries/Colors.sol';\\nimport '../../libraries/Uint.sol';\\n\\nimport './Iterator.sol';\\nimport './Constants.sol';\\n\\nimport '../interfaces/IDotNugg.sol';\\n\\n/**\\n * @dev  calculation.\\n */\\nlibrary Calculator {\\n    using Iterator for IDotNugg.OrderedGroups;\\n    using Iterator for IDotNugg.SimpleOrderedGroups;\\n\\n    using Uint256 for uint256;\\n    using Uint8 for uint8;\\n\\n    function _formatForBase(IDotNugg.Attribute memory attr, IDotNugg.Base memory base)\\n        internal\\n        pure\\n        returns (IDotNugg.Combinable memory res, IDotNugg.Base memory)\\n    {\\n        res.display.colors = attr.display.colors;\\n        if (_expanderLen(attr, base) > 0) {\\n            attr = _addHorizontalExpanders(attr, base);\\n        }\\n\\n        if (_verticalExpanderLen(attr, base) > 0) {\\n            attr = _addVerticalExpanders(attr, base);\\n        }\\n\\n        IDotNugg.Coordinate memory baseAnchor = base.baseFeatures[attr.feature.id].anchor;\\n\\n        IDotNugg.Coordinate memory offset = IDotNugg.Coordinate({x: baseAnchor.x - attr.anchor.x, y: baseAnchor.y - attr.anchor.y});\\n\\n        if (attr.baseFeature.exists) {\\n            attr.baseFeature.anchor = IDotNugg.Coordinate({x: offset.x + attr.baseFeature.anchor.x, y: offset.y + attr.baseFeature.anchor.y});\\n            base.baseFeatures[attr.feature.id] = attr.baseFeature;\\n        }\\n\\n        res.display.len = attr.display.len;\\n        res.display.groups = attr.display.groups;\\n        res.offset = offset;\\n        res.orderedGroups = Iterator._newOrderedGroup(attr.display.groups);\\n\\n        return (res, base);\\n    }\\n\\n    function _expanderLen(IDotNugg.Attribute memory attr, IDotNugg.Base memory) internal pure returns (uint8 res) {\\n        if (attr.expanders.left.exists) res++;\\n        if (attr.expanders.left2.exists) res++;\\n\\n        if (attr.expanders.right.exists) res++;\\n        if (attr.expanders.right2.exists) res++;\\n    }\\n\\n    function _verticalExpanderLen(IDotNugg.Attribute memory attr, IDotNugg.Base memory) internal pure returns (uint8 res) {\\n        if (attr.expanders.up.exists) res++;\\n\\n        if (attr.expanders.down.exists) res++;\\n    }\\n\\n    function _addHorizontalExpanders(IDotNugg.Attribute memory attr, IDotNugg.Base memory base) internal pure returns (IDotNugg.Attribute memory) {\\n        int8 expandedL = 0;\\n        int8 expandedR = 0;\\n\\n        IDotNugg.Group[] memory createdGroups = new IDotNugg.Group[](attr.display.groups.length);\\n        IDotNugg.SimpleOrderedGroups memory coGroups = Iterator._newSimpleOrderedGroup(attr.display.groups);\\n\\n        for (uint16 i = 0; coGroups._isNextS(); i++) {\\n            coGroups = coGroups._getNextS();\\n            IDotNugg.Group memory tmp = coGroups._currentGroupS();\\n\\n            uint8 checkedExp = _checkExpander(tmp.colorID);\\n\\n            if (checkedExp == 0) {\\n                createdGroups[i] = tmp;\\n            } else if (checkedExp == 76) {\\n                // L\\n                expandedL = int8(base.baseFeatures[attr.feature.id].arguments.l) - 1;\\n                tmp.colorID = attr.expanders.left.colorID;\\n                tmp.len = base.baseFeatures[attr.feature.id].arguments.l;\\n                createdGroups[i] = tmp;\\n            } else if (checkedExp == 108) {\\n                // l\\n                expandedL = int8(base.baseFeatures[attr.feature.id].arguments.l) - 1;\\n                tmp.colorID = attr.expanders.left2.colorID;\\n                tmp.len = base.baseFeatures[attr.feature.id].arguments.l;\\n                createdGroups[i] = tmp;\\n            } else if (checkedExp == 82) {\\n                // R\\n                expandedR = int8(base.baseFeatures[attr.feature.id].arguments.r) - 1;\\n                tmp.colorID = attr.expanders.right.colorID;\\n                tmp.len = base.baseFeatures[attr.feature.id].arguments.r;\\n                createdGroups[i] = tmp;\\n            } else if (checkedExp == 114) {\\n                // r\\n                expandedR = int8(base.baseFeatures[attr.feature.id].arguments.r) - 1;\\n                tmp.colorID = attr.expanders.right2.colorID;\\n                tmp.len = base.baseFeatures[attr.feature.id].arguments.r;\\n                createdGroups[i] = tmp;\\n            } else {\\n                require(false, '_addHorizontalExpanders: should not happen (1) ');\\n            }\\n        }\\n        attr.display.groups = createdGroups;\\n        attr.display.len.x = uint8(int8(attr.display.len.x) + expandedL + expandedR);\\n        attr.anchor.x = uint8(int8(attr.anchor.x) + expandedL);\\n        return attr;\\n    }\\n\\n    function _addVerticalExpanders(IDotNugg.Attribute memory attr, IDotNugg.Base memory base) internal pure returns (IDotNugg.Attribute memory) {\\n        IDotNugg.Group[] memory createdGroups = new IDotNugg.Group[](\\n            attr.display.groups.length + base.baseFeatures[attr.feature.id].arguments.u * 32 + base.baseFeatures[attr.feature.id].arguments.d * 32\\n        );\\n        IDotNugg.SimpleOrderedGroups memory coGroups = Iterator._newSimpleOrderedGroup(attr.display.groups);\\n\\n        IDotNugg.VerticalExpanderVars memory v;\\n\\n        v.indexU = 0;\\n        v.indexD = 0;\\n\\n        v.foundU = false;\\n        v.foundD = false;\\n\\n        if (attr.expanders.up.id != 0) {\\n            v.foundU = true;\\n            v.indexU = attr.expanders.up.row * attr.display.len.x;\\n        }\\n        if (attr.expanders.down.id != 0) {\\n            v.foundD = true;\\n            v.indexD = attr.expanders.down.row * attr.display.len.x;\\n        }\\n\\n        if (!v.foundU && !v.foundD) {\\n            return attr;\\n        }\\n\\n        v.lenU = base.baseFeatures[attr.feature.id].arguments.u;\\n        v.lenD = base.baseFeatures[attr.feature.id].arguments.d;\\n\\n        IDotNugg.Group[] memory rowD = new IDotNugg.Group[](32);\\n        IDotNugg.Group[] memory rowU = new IDotNugg.Group[](32);\\n\\n        v.rowUCount = 0;\\n        v.rowDCount = 0;\\n\\n        v.createdGroupsIndex = 0;\\n\\n        for (uint16 i = 0; coGroups._isNextS(); i++) {\\n            if (v.foundU) {\\n                if (coGroups.cumPasses < v.indexU && coGroups.cumPasses > v.indexU + attr.display.len.x) {\\n                    rowU[v.rowUCount++] = coGroups._currentGroupS();\\n                } else if (v.rowUCount > 0) {\\n                    for (uint8 j = 0; j < v.lenU; j++) {\\n                        for (uint8 k = 0; k < v.rowUCount; k++) {\\n                            createdGroups[v.createdGroupsIndex++] = rowU[k];\\n                        }\\n                    }\\n                    v.rowUCount = 0;\\n                }\\n            }\\n            if (v.foundD) {\\n                if (coGroups.cumPasses < v.indexD && coGroups.cumPasses > v.indexD + attr.display.len.x) {\\n                    rowD[v.rowDCount++] = coGroups._currentGroupS();\\n                } else if (v.rowDCount > 0) {\\n                    for (uint8 j = 0; j < v.lenD; j++) {\\n                        for (uint8 k = 0; k < v.rowDCount; k++) {\\n                            createdGroups[v.createdGroupsIndex++] = rowD[k];\\n                        }\\n                    }\\n                    v.rowDCount = 0;\\n                }\\n            }\\n            createdGroups[v.createdGroupsIndex++] = coGroups._currentGroupS();\\n        }\\n\\n        if (v.rowUCount > 0) {\\n            for (uint8 j = 0; j < v.lenU; j++) {\\n                for (uint8 k = 0; k < v.rowUCount; k++) {\\n                    createdGroups[v.createdGroupsIndex++] = rowU[k];\\n                }\\n            }\\n            v.rowUCount = 0;\\n        }\\n        if (v.rowDCount > 0) {\\n            for (uint8 j = 0; j < v.lenD; j++) {\\n                for (uint8 k = 0; k < v.rowDCount; k++) {\\n                    createdGroups[v.createdGroupsIndex++] = rowD[k];\\n                }\\n            }\\n            v.rowDCount = 0;\\n        }\\n\\n        IDotNugg.Group[] memory correctSizedGroupsArray = new IDotNugg.Group[](v.createdGroupsIndex);\\n\\n        for (uint16 i = 0; i < v.createdGroupsIndex; i++) {\\n            correctSizedGroupsArray[i] = createdGroups[i];\\n        }\\n\\n        attr.display.groups = correctSizedGroupsArray;\\n        attr.display.len.y = attr.display.len.y + v.lenU + v.lenD;\\n        attr.anchor.y = attr.anchor.y + v.lenU;\\n\\n        return attr;\\n    }\\n\\n    // returns 0 if false\\n    function _checkExpander(uint8 id) internal pure returns (uint8) {\\n        if (id == 82 || id == 114 || id == 76 || id == 108) return id;\\n        return 0;\\n    }\\n\\n    // returns 0 if false\\n    function _checkVerticalExpander(uint8 id) internal pure returns (uint8) {\\n        if (id == 85 || id == 68) return id;\\n        return 0;\\n    }\\n\\n    function _combine(IDotNugg.Combinable[] memory combinables, IDotNugg.Base memory base) internal pure returns (IDotNugg.Display memory res) {\\n        IDotNugg.Combinable memory combinableBase = IDotNugg.Combinable({\\n            display: base.display,\\n            orderedGroups: Iterator._newOrderedGroup(base.display.groups),\\n            offset: IDotNugg.Coordinate({x: 0, y: 0})\\n        });\\n\\n        IDotNugg.Color[][] memory matrix = new IDotNugg.Color[][](combinableBase.display.len.y);\\n        IDotNugg.Color[] memory colorArray = new IDotNugg.Color[](uint16(combinableBase.display.len.y) * uint16(combinableBase.display.len.x));\\n        uint16 colorIndex = 0;\\n        colorArray[colorIndex++] = IDotNugg.Color({id: 0, layer: 1, rgba: IDotNugg.RGBA8({r: 69, g: 69, b: 69, a: 0}), exists: true});\\n\\n        uint16[] memory baseColorMap = new uint16[](257);\\n\\n        for (uint8 y = 0; y < combinableBase.display.len.y; y++) {\\n            matrix[y] = new IDotNugg.Color[](combinableBase.display.len.x);\\n            for (uint8 x = 0; x < combinableBase.display.len.x; x++) {\\n                if (combinableBase.orderedGroups._isNext() || combinableBase.orderedGroups._len() == 1) {\\n                    combinableBase.orderedGroups = combinableBase.orderedGroups._getNext();\\n                    if (combinableBase.orderedGroups._currentGroup().colorID == Constants.TRANSPARENT_COLOR_ID) {\\n                        matrix[y][x] = colorArray[0];\\n                    } else {\\n                        // TODO MAKE SURE THIS COLOR WORKS\\n                        IDotNugg.Color memory tempColor = combinableBase.display.colors[combinableBase.orderedGroups._currentGroup().colorID];\\n                        if (baseColorMap[tempColor.id + 1] == 0) {\\n                            uint16 tempColorIndex = colorIndex++;\\n                            colorArray[tempColorIndex] = IDotNugg.Color({\\n                                id: uint8(tempColorIndex),\\n                                layer: tempColor.layer,\\n                                rgba: tempColor.rgba,\\n                                exists: true\\n                            });\\n                            baseColorMap[tempColor.id + 1] = tempColorIndex;\\n                            matrix[y][x] = colorArray[tempColorIndex];\\n                        } else {\\n                            matrix[y][x] = IDotNugg.Color({\\n                                id: uint8(baseColorMap[tempColor.id + 1]),\\n                                layer: tempColor.layer,\\n                                rgba: tempColor.rgba,\\n                                exists: true\\n                            });\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        for (uint8 i = 0; i < combinables.length; i++) {\\n            IDotNugg.Combinable memory combinable = combinables[i];\\n            uint16[] memory colorMap = new uint16[](257);\\n            for (uint8 y = combinable.offset.y; y < combinable.display.len.y + combinable.offset.y; y++) {\\n                for (int8 xInt = int8(combinable.offset.x); xInt < int8(combinable.display.len.x + combinable.offset.x); xInt++) {\\n                    uint8 x = uint8(xInt);\\n                    if (combinable.orderedGroups._isNext()) {\\n                        combinable.orderedGroups = combinable.orderedGroups._getNext();\\n\\n                        if (combinable.orderedGroups._currentGroup().len == 0) {\\n                            xInt--;\\n                            continue;\\n                        }\\n\\n                        if (combinable.orderedGroups._currentGroup().colorID == Constants.TRANSPARENT_COLOR_ID) {\\n                            continue;\\n                        }\\n                        require(combinable.orderedGroups._currentGroup().colorID < combinable.display.colors.length, 'color ID out of bounds ');\\n\\n                        // TODO MAKE SURE THIS COLOR WORKS\\n                        IDotNugg.Color memory tempColor = combinable.display.colors[combinable.orderedGroups._currentGroup().colorID];\\n\\n                        if (!tempColor.exists) {\\n                            continue;\\n                        }\\n                        if (tempColor.layer > matrix[y][x].layer) {\\n                            (IDotNugg.RGBA8 memory tempRGBA, bool modified) = Colors.combine(matrix[y][x].rgba, tempColor.rgba);\\n                            // ################################\\n                            // TODO: THIS LINE DISABLES COLOR BLENDING\\n                            // tempRGBA = tempColor.rgba;\\n                            // ################################\\n                            if (modified) {\\n                                uint16 tempColorIndex = colorIndex++;\\n                                colorArray[tempColorIndex] = IDotNugg.Color({id: uint8(tempColorIndex), layer: tempColor.layer, rgba: tempRGBA, exists: true});\\n                                matrix[y][x] = colorArray[tempColorIndex];\\n                            } else if (colorMap[tempColor.id + 1] == 0) {\\n                                uint16 tempColorIndex = colorIndex++;\\n                                colorArray[tempColorIndex] = IDotNugg.Color({id: uint8(tempColorIndex), layer: tempColor.layer, rgba: tempRGBA, exists: true});\\n                                matrix[y][x] = colorArray[tempColorIndex];\\n                                colorMap[tempColor.id + 1] = tempColorIndex;\\n                            } else {\\n                                matrix[y][x] = IDotNugg.Color({\\n                                    id: uint8(colorMap[tempColor.id + 1]),\\n                                    layer: tempColor.layer,\\n                                    rgba: tempColor.rgba,\\n                                    exists: true\\n                                });\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        IDotNugg.Group[] memory miniGroups = new IDotNugg.Group[](uint16(base.display.len.x) * uint16(base.display.len.y));\\n        uint16 miniGroupIndex = 0;\\n        for (uint16 y = 0; y < base.display.len.y; y++) {\\n            for (uint16 x = 0; x < base.display.len.x; x++) {\\n                miniGroups[miniGroupIndex] = IDotNugg.Group({len: 1, colorID: matrix[y][x].id});\\n                miniGroupIndex++;\\n            }\\n        }\\n\\n        IDotNugg.Color[] memory correctSizedColorArray = new IDotNugg.Color[](colorIndex);\\n\\n        for (uint16 i = 0; i < colorIndex; i++) {\\n            correctSizedColorArray[i] = colorArray[i];\\n        }\\n\\n        res.colors = correctSizedColorArray;\\n        res.groups = miniGroups;\\n        res.len = base.display.len;\\n    }\\n\\n    function _newDisplay(IDotNugg.Base memory base, IDotNugg.Attribute[] memory attrs) internal pure returns (IDotNugg.Display memory) {\\n        IDotNugg.Combinable[] memory combinables = new IDotNugg.Combinable[](attrs.length);\\n\\n        for (uint16 i = 0; i < attrs.length; i++) {\\n            (IDotNugg.Combinable memory temp, IDotNugg.Base memory tempBase) = _formatForBase(attrs[i], base);\\n\\n            combinables[i] = temp;\\n            base = tempBase;\\n        }\\n\\n        return _combine(combinables, base);\\n    }\\n\\n    function _compressGroups(IDotNugg.Display memory display) internal pure returns (IDotNugg.Display memory) {\\n        IDotNugg.Group[] memory res = new IDotNugg.Group[](display.groups.length);\\n        IDotNugg.OrderedGroups memory iter = Iterator._newOrderedGroup(display.groups);\\n        uint8 activeCount = 1;\\n        uint8 activeByte = display.groups[0].colorID;\\n        uint16 resIndex = 0;\\n        for (; iter._isNext(); ) {\\n            iter = iter._getNext();\\n            if (activeByte == iter._currentGroup().colorID) {\\n                if (activeCount < type(uint8).max) {\\n                    activeCount++;\\n                    continue;\\n                }\\n            }\\n            res[resIndex++] = IDotNugg.Group({len: activeCount, colorID: activeByte});\\n            activeCount = 1;\\n            activeByte = iter._currentGroup().colorID;\\n        }\\n        res[resIndex++] = IDotNugg.Group({len: activeCount, colorID: activeByte});\\n\\n        IDotNugg.Group[] memory correctSizedGroupArray = new IDotNugg.Group[](resIndex);\\n\\n        for (uint16 i = 0; i < resIndex; i++) {\\n            correctSizedGroupArray[i] = res[i];\\n        }\\n\\n        display.groups = correctSizedGroupArray;\\n\\n        return display;\\n    }\\n}\\n\",\"keccak256\":\"0xc72d13532fa4441091f66149372ab532c307043f642be60e0afec1d2e5c01421\",\"license\":\"MIT\"},\"contracts/core/base/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev DotNugg constants.\\n */\\nlibrary Constants {\\n    uint8 constant GROUP_BYTE_LEN = 2;\\n    uint8 constant COLOR_BYTE_LEN = 6;\\n    uint8 constant ROW_BYTE_LEN = 2;\\n    uint8 constant BASE_FEATURE_BYTE_LEN = 9;\\n    uint8 constant EXPANDER_BYTE_LEN = 2;\\n    uint8 constant FEATURE_BYTE_LEN = 2;\\n    uint8 constant ARGUMENTS_BYTE_LEN = 6;\\n    uint8 constant NUGG_FILETYPE_COLLECTION = 0;\\n    uint8 constant NUGG_FILETYPE_BASE = 1;\\n    uint8 constant NUGG_FILETYPE_ATTRIBUTE = 2;\\n    uint8 constant NUGG_FILETYPE_DISPLAY = 3;\\n\\n    bytes constant FILE_HEADER = hex'6e756767';\\n\\n    uint8 constant TRANSPARENT_COLOR_ID = 46; // 2e .\\n}\\n\",\"keccak256\":\"0xa54f095902bfb650330c16e28fe6ab829f8fdeb1da10ddaa7901cfa9a5e57bad\",\"license\":\"MIT\"},\"contracts/core/base/Decoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/Bytes.sol';\\nimport '../libraries/BytesLib.sol';\\nimport '../interfaces/IDotNugg.sol';\\n\\nimport '../../libraries/Uint.sol';\\n\\nimport './Constants.sol';\\n\\n/**\\n * @dev  operations.\\n */\\nlibrary Decoder {\\n    using Bytes for bytes;\\n    using BytesLib for bytes;\\n\\n    using Uint256 for uint256;\\n\\n    function _validateFile(bytes memory data) internal pure returns (bytes memory res) {\\n        require(data.length > 13);\\n        require(data.slice(0, Constants.FILE_HEADER.length).equal(Constants.FILE_HEADER));\\n        res = data.slice(Constants.FILE_HEADER.length, data.length - Constants.FILE_HEADER.length);\\n    }\\n\\n    function _bytesToCollection(bytes memory data) internal pure returns (IDotNugg.Collection memory collection) {\\n        data = _validateFile(data);\\n\\n        require(uint8(data[0]) == Constants.NUGG_FILETYPE_COLLECTION);\\n\\n        collection.features = _bytesToFeatures((data.slice(uint8(data[2]) - Constants.FILE_HEADER.length, uint8(data[1]) * Constants.FEATURE_BYTE_LEN)));\\n    }\\n\\n    function _bytesToBase(bytes memory data) internal pure returns (IDotNugg.Base memory base) {\\n        data = _validateFile(data);\\n\\n        require(uint8(data[0]) == Constants.NUGG_FILETYPE_BASE);\\n\\n        base.baseFeatures = _bytesToBaseFeatures((data.slice(uint8(data[4]) - Constants.FILE_HEADER.length, uint8(data[3]) * Constants.BASE_FEATURE_BYTE_LEN)));\\n\\n        base.display.colors = _bytesToColors(data.slice(uint8(data[2]) - Constants.FILE_HEADER.length, uint8(data[1]) * Constants.COLOR_BYTE_LEN));\\n\\n        base.display.len = _bytesToCoordinate(data[7], data[8]);\\n\\n        base.display.groups = _bytesToGroups(data.slice(uint8(data[6]) - Constants.FILE_HEADER.length, uint16(uint8(data[5])) * Constants.GROUP_BYTE_LEN));\\n    }\\n\\n    function _bytesToAttribute(bytes memory data) internal pure returns (IDotNugg.Attribute memory attribute) {\\n        data = _validateFile(data);\\n        require(uint8(data[0]) == Constants.NUGG_FILETYPE_ATTRIBUTE);\\n\\n        attribute.feature.id = uint8(data[11]);\\n        attribute.anchor = _bytesToCoordinate(data.slice(13 - Constants.FILE_HEADER.length, 2));\\n        attribute.expanders = _bytesToExpanderGroup(data.slice(uint8(data[4]) - Constants.FILE_HEADER.length, uint8(data[3]) * Constants.EXPANDER_BYTE_LEN));\\n        attribute.display.len = _bytesToCoordinate(data[7], data[8]);\\n        attribute.display.colors = _bytesToColors(data.slice(uint8(data[2]) - Constants.FILE_HEADER.length, uint8(data[1]) * Constants.COLOR_BYTE_LEN));\\n        attribute.display.groups = _bytesToGroups(data.slice(uint8(data[6]) - Constants.FILE_HEADER.length, uint8(data[5]) * Constants.GROUP_BYTE_LEN));\\n    }\\n\\n    function _bytesToFeatures(bytes memory data) internal pure returns (IDotNugg.Feature[] memory features) {\\n        require(data.length % Constants.FEATURE_BYTE_LEN == 0, 'DN_DECODER:ARGUMENTS: length of data must be 6');\\n        features = new IDotNugg.Feature[](data.length / Constants.FEATURE_BYTE_LEN);\\n        uint8 index = 0;\\n        for (uint8 i = 0; i < data.length; i += Constants.FEATURE_BYTE_LEN) {\\n            features[index++] = _bytesToFeature(data.slice(i, Constants.FEATURE_BYTE_LEN));\\n        }\\n    }\\n\\n    function _bytesToFeature(bytes memory data) internal pure returns (IDotNugg.Feature memory feature) {\\n        require(data.length == Constants.FEATURE_BYTE_LEN, 'DN_DECODER:FEATURE: length of data must be FEATURE_BYTE_LEN');\\n\\n        feature.id = uint8(data[0]);\\n    }\\n\\n    function _bytesToColors(bytes memory data) internal pure returns (IDotNugg.Color[] memory colors) {\\n        require(data.length % Constants.COLOR_BYTE_LEN == 0, 'DN_DECODER:COLORS: length of data must be ');\\n        colors = new IDotNugg.Color[](data.length / Constants.COLOR_BYTE_LEN);\\n        uint16 index = 0;\\n        for (uint16 i = 0; i < data.length; i += Constants.COLOR_BYTE_LEN) {\\n            colors[index++] = _bytesToColor(data.slice(i, Constants.COLOR_BYTE_LEN));\\n        }\\n    }\\n\\n    function _bytesToColor(bytes memory data) internal pure returns (IDotNugg.Color memory color) {\\n        require(data.length == Constants.COLOR_BYTE_LEN, 'DN_DECODER:COLOR: length of bytes must be Constants.COLOR_BYTE_LEN');\\n        color.exists = true;\\n        color.id = uint8(data[0]);\\n        color.layer = uint8(data[1]);\\n        color.rgba.r = uint8(data[2]);\\n        color.rgba.g = uint8(data[3]);\\n        color.rgba.b = uint8(data[4]);\\n        color.rgba.a = uint8(data[5]);\\n    }\\n\\n    function _bytesToExpanderGroup(bytes memory data) internal pure returns (IDotNugg.ExpanderGroup memory expanderGroup) {\\n        require(data.length % Constants.EXPANDER_BYTE_LEN == 0, 'DN_DECODER:EXPANDERGROUP: length of DATA invaliid');\\n        for (uint16 i = 0; i < data.length; i += Constants.EXPANDER_BYTE_LEN) {\\n            if (uint8(data[i]) == 82) {\\n                // R\\n                expanderGroup.right = _bytesToExpander(data.slice(i, Constants.EXPANDER_BYTE_LEN));\\n            } else if (uint8(data[i]) == 114) {\\n                // r\\n                expanderGroup.right2 = _bytesToExpander(data.slice(i, Constants.EXPANDER_BYTE_LEN));\\n            } else if (uint8(data[i]) == 76) {\\n                // L\\n                expanderGroup.left = _bytesToExpander(data.slice(i, Constants.EXPANDER_BYTE_LEN));\\n            } else if (uint8(data[i]) == 108) {\\n                // l\\n                expanderGroup.left2 = _bytesToExpander(data.slice(i, Constants.EXPANDER_BYTE_LEN));\\n            } else if (uint8(data[i]) == 85) {\\n                // U\\n                expanderGroup.up = _bytesToVerticalExpander(data.slice(i, Constants.EXPANDER_BYTE_LEN));\\n            } else if (uint8(data[i]) == 68) {\\n                // D\\n                expanderGroup.down = _bytesToVerticalExpander(data.slice(i, Constants.EXPANDER_BYTE_LEN));\\n            } else {\\n                require(false, 'DN_DECODER:EXPANDERGROUP: invalid expander type found');\\n            }\\n        }\\n    }\\n\\n    function _bytesToExpander(bytes memory data) internal pure returns (IDotNugg.Expander memory expander) {\\n        require(data.length == 2, 'DN_DECODER:EXPANDER: length of expander must be 2');\\n        expander.id = uint8(data[0]);\\n        expander.colorID = uint8(data[1]);\\n        expander.exists = true;\\n    }\\n\\n    function _bytesToVerticalExpander(bytes memory data) internal pure returns (IDotNugg.VerticalExpander memory verticalExpander) {\\n        require(data.length == 2, 'DN_DECODER:VEXPANDER: length of vert expander must be 2');\\n        verticalExpander.id = uint8(data[0]);\\n        verticalExpander.row = uint8(data[1]);\\n        verticalExpander.exists = true;\\n    }\\n\\n    function _bytesToGroups(bytes memory data) internal pure returns (IDotNugg.Group[] memory groups) {\\n        require(data.length % Constants.GROUP_BYTE_LEN == 0, 'DN_DECODER:GROUPS: length of data must be 6');\\n        groups = new IDotNugg.Group[](data.length / Constants.GROUP_BYTE_LEN);\\n        uint16 index = 0;\\n        for (uint16 i = 0; i < data.length; i += Constants.GROUP_BYTE_LEN) {\\n            groups[index++] = _bytesToGroup(data.slice(i, Constants.GROUP_BYTE_LEN));\\n        }\\n    }\\n\\n    function _bytesToGroup(bytes memory data) internal pure returns (IDotNugg.Group memory group) {\\n        require(data.length == 2, 'DN_DECODER:GROUP: length of group must be 2');\\n        group.colorID = uint8(data[0]);\\n        group.len = uint8(data[1]);\\n    }\\n\\n    function _bytesToBaseFeatures(bytes memory data) internal pure returns (IDotNugg.BaseFeature[] memory baseFeatures) {\\n        require(data.length % Constants.BASE_FEATURE_BYTE_LEN == 0, 'DN_DECODER:ARGUMENTS: length of data must be 6');\\n\\n        IDotNugg.BaseFeature[] memory tmp = new IDotNugg.BaseFeature[](data.length / Constants.BASE_FEATURE_BYTE_LEN);\\n        uint16 index = 0;\\n        for (uint16 i = 0; i < data.length; i += Constants.BASE_FEATURE_BYTE_LEN) {\\n            tmp[index++] = _bytesToBaseFeature(data.slice(i, Constants.BASE_FEATURE_BYTE_LEN));\\n        }\\n        baseFeatures = new IDotNugg.BaseFeature[](tmp.length);\\n        for (uint16 i = 0; i < tmp.length; i++) {\\n            baseFeatures[tmp[i].feature.id] = tmp[i];\\n        }\\n    }\\n\\n    function _bytesToBaseFeature(bytes memory data) internal pure returns (IDotNugg.BaseFeature memory baseFeature) {\\n        require(data.length == Constants.BASE_FEATURE_BYTE_LEN, 'DN_DECODER:BASEFEATURE: length of data must be Constants.BASE_FEATURE_BYTE_LEN');\\n        baseFeature.feature.id = uint8(data[0]);\\n        baseFeature.anchor = _bytesToCoordinate(data[1], data[2]);\\n        baseFeature.arguments = _bytesToArguments(data.slice(3, Constants.ARGUMENTS_BYTE_LEN));\\n        baseFeature.exists = true;\\n    }\\n\\n    function _bytesToArguments(bytes memory data) internal pure returns (IDotNugg.Arguments memory arguments) {\\n        require(data.length == 6, 'DN_DECODER:ARGUMENTS: length of data must be 6');\\n        arguments.l = uint8(data[0]);\\n        arguments.r = uint8(data[1]);\\n        arguments.u = uint8(data[2]);\\n        arguments.d = uint8(data[3]);\\n        arguments.z = uint8(data[4]);\\n        arguments.c = uint8(data[5]);\\n    }\\n\\n    function _bytesToCoordinate(bytes memory data) internal pure returns (IDotNugg.Coordinate memory coordinate) {\\n        require(data.length == 2, 'DN_DECODER:COORDINATE: length of data must be 2');\\n        coordinate = _bytesToCoordinate(data[0], data[1]);\\n    }\\n\\n    function _bytesToCoordinate(bytes1 x, bytes1 y) internal pure returns (IDotNugg.Coordinate memory coordinate) {\\n        coordinate.x = uint8(x);\\n        coordinate.y = uint8(y);\\n    }\\n}\\n\",\"keccak256\":\"0x42c075b1af937e10d5891714938098c5a3d566b484404eea4c1ac1ade9f1f079\",\"license\":\"MIT\"},\"contracts/core/base/Iterator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../interfaces/IDotNugg.sol';\\nimport '../../libraries/Uint.sol';\\n\\nimport '../libraries/Colors.sol';\\nimport '../interfaces/IDotNugg.sol';\\n\\n/**\\n * @dev DotNugg calculation.\\n */\\nlibrary Iterator {\\n    function _newOrderedGroup(IDotNugg.Group[] memory groups) internal pure returns (IDotNugg.OrderedGroups memory res) {\\n        require(groups.length > 0, 'NEWORDEREDGROUPS: group of len 0');\\n        res.groups = groups;\\n    }\\n\\n    function _len(IDotNugg.OrderedGroups memory itr) internal pure returns (uint256 res) {\\n        if (itr.idx >= itr.groups.length) return 0;\\n        return itr.groups.length - itr.idx + 1;\\n    }\\n\\n    function _isNext(IDotNugg.OrderedGroups memory itr) internal pure returns (bool res) {\\n        if (itr.idx + 1 < itr.groups.length) {\\n            res = true;\\n        } else if (itr.idx + 1 == itr.groups.length) {\\n            if (itr.passes < _currentGroup(itr).len) {\\n                return true;\\n            }\\n        }\\n    }\\n\\n    function _getNext(IDotNugg.OrderedGroups memory itr) internal pure returns (IDotNugg.OrderedGroups memory) {\\n        if (_isNext(itr)) {\\n            if (itr.started == 0) {\\n                itr.idx = 0;\\n                itr.passes = 1;\\n                itr.started = 1;\\n                return itr;\\n            }\\n\\n            IDotNugg.Group memory group = _currentGroup(itr);\\n\\n            if (itr.passes >= group.len) {\\n                itr.idx++;\\n                itr.passes = 1;\\n            } else {\\n                itr.passes++;\\n            }\\n            return itr;\\n        }\\n        itr.idx = uint16(itr.groups.length);\\n        return itr;\\n    }\\n\\n    function _currentGroup(IDotNugg.OrderedGroups memory itr) internal pure returns (IDotNugg.Group memory res) {\\n        require(itr.groups.length > 0, '_currentGroup: group of len 0');\\n        // if (itr.idx < itr.groups.length) {\\n        res = itr.groups[itr.idx];\\n        //     ok = true;\\n        // }\\n    }\\n\\n    function _newSimpleOrderedGroup(IDotNugg.Group[] memory groups) internal pure returns (IDotNugg.SimpleOrderedGroups memory res) {\\n        require(groups.length > 0, 'NEWSIMPLEORDEREDGROUPS: group of len 0');\\n        res.groups = groups;\\n    }\\n\\n    function _lenS(IDotNugg.SimpleOrderedGroups memory itr) internal pure returns (uint256 res) {\\n        if (itr.idx >= itr.groups.length) return 0;\\n        return itr.groups.length - itr.idx + 1;\\n    }\\n\\n    function _isNextS(IDotNugg.SimpleOrderedGroups memory itr) internal pure returns (bool res) {\\n        if (itr.idx + 1 < itr.groups.length) {\\n            res = true;\\n        }\\n    }\\n\\n    function _getNextS(IDotNugg.SimpleOrderedGroups memory itr) internal pure returns (IDotNugg.SimpleOrderedGroups memory) {\\n        if (_isNextS(itr)) {\\n            if (itr.started == 0) {\\n                itr.cumPasses = 0;\\n                itr.idx = 0;\\n                itr.started = 1;\\n                return itr;\\n            }\\n            IDotNugg.Group memory group = _currentGroupS(itr);\\n            itr.idx++;\\n            itr.cumPasses += group.len;\\n            return itr;\\n        }\\n        itr.idx = uint16(itr.groups.length);\\n        return itr;\\n    }\\n\\n    function _currentGroupS(IDotNugg.SimpleOrderedGroups memory itr) internal pure returns (IDotNugg.Group memory res) {\\n        require(itr.groups.length > 0, '_currentGroup: group of len 0');\\n        // if (itr.idx < itr.groups.length) {\\n        res = itr.groups[itr.idx];\\n        //     ok = true;\\n        // }\\n    }\\n}\\n\",\"keccak256\":\"0xfb22e9a9744e5d365e2d902b01aa34e12593e5061de08aa9dd134bee8de22f76\",\"license\":\"MIT\"},\"contracts/core/base/IteratorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../../libraries/Uint.sol';\\nimport '../interfaces/IDotNugg.sol';\\n\\nimport '../libraries/Colors.sol';\\nimport '../interfaces/IDotNugg.sol';\\n\\n/**\\n * @dev DotNugg calculation.\\n */\\nlibrary IteratorV2 {\\n    function newOrderedGroup(IDotNugg.Group[] memory groups) internal pure returns (IDotNugg.OrderedGroups memory res) {\\n        require(groups.length > 0, 'NEWORDEREDGROUPS: group of len 0');\\n        res.groups = groups;\\n    }\\n\\n    function len(IDotNugg.OrderedGroups memory itr) internal pure returns (uint256 res) {\\n        if (itr.idx >= itr.groups.length) return 0;\\n        return itr.groups.length - itr.idx + 1;\\n    }\\n\\n    function hasNext(IDotNugg.OrderedGroups memory itr) internal pure returns (bool res) {\\n        if (itr.idx + 1 < itr.groups.length) {\\n            res = true;\\n        } else if (itr.idx + 1 == itr.groups.length) {\\n            if (itr.passes < current(itr).len) {\\n                res = true;\\n            }\\n        }\\n\\n        if (res) {\\n            if (itr.started == 0) {\\n                itr.idx = 0;\\n                itr.passes = 1;\\n                itr.started = 1;\\n                return res;\\n            }\\n\\n            IDotNugg.Group memory group = current(itr);\\n\\n            if (itr.passes >= group.len) {\\n                itr.idx++;\\n                itr.passes = 1;\\n            } else {\\n                itr.passes++;\\n            }\\n            return res;\\n        }\\n\\n        itr.idx = uint16(itr.groups.length);\\n    }\\n\\n    function current(IDotNugg.OrderedGroups memory itr) internal pure returns (IDotNugg.Group memory res) {\\n        require(itr.groups.length > 0, 'current: group of len 0');\\n        res = itr.groups[itr.idx];\\n    }\\n\\n    function newSimpleOrderedGroup(IDotNugg.Group[] memory groups) internal pure returns (IDotNugg.SimpleOrderedGroups memory res) {\\n        require(groups.length > 0, 'NEWSIMPLEORDEREDGROUPS: group of len 0');\\n        res.groups = groups;\\n    }\\n\\n    function len(IDotNugg.SimpleOrderedGroups memory itr) internal pure returns (uint256 res) {\\n        if (itr.idx >= itr.groups.length) return 0;\\n        return itr.groups.length - itr.idx + 1;\\n    }\\n\\n    function hasNext(IDotNugg.SimpleOrderedGroups memory itr) internal pure returns (bool res) {\\n        if (itr.idx + 1 < itr.groups.length) {\\n            res = true;\\n        }\\n        if (res) {\\n            if (itr.started == 0) {\\n                itr.cumPasses = 0;\\n                itr.idx = 0;\\n                itr.started = 1;\\n                return res;\\n            }\\n            itr.cumPasses += current(itr).len;\\n            itr.idx++;\\n            return res;\\n        }\\n        itr.idx = uint16(itr.groups.length);\\n    }\\n\\n    function current(IDotNugg.SimpleOrderedGroups memory itr) internal pure returns (IDotNugg.Group memory res) {\\n        require(itr.groups.length > 0, 'current: group of len 0');\\n        res = itr.groups[itr.idx];\\n    }\\n}\\n\",\"keccak256\":\"0x229b5dfea2c335617781a6a9f2df395185db9a61ad19bb171b21abb08c6a3231\",\"license\":\"MIT\"},\"contracts/core/interfaces/IDotNugg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './IDotNuggDecoder.sol';\\nimport './IDotNuggCalculator.sol';\\n\\ninterface IDotNugg is IDotNuggDecoder, IDotNuggCalculator {\\n    struct Expander {\\n        bool exists;\\n        uint8 id;\\n        uint8 colorID;\\n    }\\n\\n    struct VerticalExpander {\\n        bool exists;\\n        uint8 id;\\n        uint8 row;\\n    }\\n\\n    struct Coordinate {\\n        uint8 x;\\n        uint8 y;\\n    }\\n\\n    struct Group {\\n        uint8 colorID;\\n        uint8 len;\\n    }\\n\\n    struct RGBA8 {\\n        uint8 r;\\n        uint8 g;\\n        uint8 b;\\n        uint8 a;\\n    }\\n\\n    struct RGBA16 {\\n        uint16 r;\\n        uint16 g;\\n        uint16 b;\\n        uint16 a;\\n    }\\n\\n    struct Color {\\n        uint8 id;\\n        RGBA8 rgba;\\n        uint8 layer;\\n        bool exists;\\n    }\\n\\n    struct Feature {\\n        uint8 id;\\n        uint8 defaultLevel;\\n    }\\n\\n    struct Arguments {\\n        uint8 l;\\n        uint8 r;\\n        uint8 u;\\n        uint8 d;\\n        uint8 z;\\n        uint8 c;\\n    }\\n\\n    struct BaseFeature {\\n        Feature feature;\\n        Coordinate anchor;\\n        Arguments arguments;\\n        bool exists;\\n    }\\n\\n    struct Collection {\\n        Feature[] features;\\n    }\\n\\n    struct Attribute {\\n        Display display;\\n        Coordinate anchor;\\n        BaseFeature baseFeature;\\n        Feature feature;\\n        ExpanderGroup expanders;\\n    }\\n\\n    struct Combinable {\\n        Display display;\\n        Coordinate offset;\\n        OrderedGroups orderedGroups;\\n    }\\n\\n    struct Base {\\n        BaseFeature[] baseFeatures;\\n        Display display;\\n    }\\n\\n    struct ExpanderGroup {\\n        Expander left;\\n        Expander right;\\n        Expander left2;\\n        Expander right2;\\n        VerticalExpander up;\\n        VerticalExpander down;\\n    }\\n\\n    struct Display {\\n        Coordinate len;\\n        Group[] groups;\\n        Color[] colors;\\n    }\\n\\n    struct OrderedGroups {\\n        uint16 idx;\\n        Group[] groups;\\n        uint16 passes;\\n        uint8 started;\\n    }\\n\\n    struct SimpleOrderedGroups {\\n        uint16 idx;\\n        Group[] groups;\\n        uint16 cumPasses;\\n        uint8 started;\\n    }\\n\\n    struct VerticalExpanderVars {\\n        uint8 indexU;\\n        uint8 indexD;\\n        bool foundU;\\n        bool foundD;\\n        uint8 lenU;\\n        uint8 lenD;\\n        uint8 rowUCount;\\n        uint8 rowDCount;\\n        uint8 createdGroupsIndex;\\n    }\\n}\\n\",\"keccak256\":\"0xf821276402628907aecc905b0140b3f6c1c113988ff171976d5abfa11b26f835\",\"license\":\"MIT\"},\"contracts/core/interfaces/IDotNuggCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './IDotNugg.sol';\\n\\ninterface IDotNuggCalculator {\\n    function newDisplay(IDotNugg.Base memory base, IDotNugg.Attribute[] memory attrs) external view returns (IDotNugg.Display memory);\\n}\\n\",\"keccak256\":\"0xefb10f154d226da8f3046b76b3cb066321c6a54248d9319870703c94cec43574\",\"license\":\"MIT\"},\"contracts/core/interfaces/IDotNuggDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './IDotNugg.sol';\\n\\ninterface IDotNuggDecoder {\\n    // function validateFile(bytes memory data) external view returns (bytes memory res);\\n\\n    function bytesToCollection(bytes memory data) external view returns (IDotNugg.Collection memory collection);\\n\\n    function bytesToBase(bytes memory data) external view returns (IDotNugg.Base memory base);\\n\\n    function bytesToAttribute(bytes memory data) external view returns (IDotNugg.Attribute memory attribute);\\n\\n    function toSvg(IDotNugg.Display memory display, uint256 pixwidth) external view returns (bytes memory res);\\n\\n    // function bytesToFeatures(bytes memory data) external view returns (IDotNugg.Feature[] memory features);\\n\\n    // function bytesToFeature(bytes memory data) external view returns (IDotNugg.Feature memory feature);\\n\\n    // function bytesToColors(bytes memory data) external view returns (IDotNugg.Color[] memory colors);\\n\\n    // function bytesToColor(bytes memory data) external view returns (IDotNugg.Color memory color);\\n\\n    // function bytesToExpanderGroup(bytes memory data) external view returns (IDotNugg.ExpanderGroup memory expanderGroup);\\n\\n    // function bytesToExpander(bytes memory data) external view returns (IDotNugg.Expander memory expander);\\n\\n    // function bytesToVerticalExpander(bytes memory data) external view returns (IDotNugg.VerticalExpander memory verticalExpander);\\n\\n    // function bytesToGroups(bytes memory data) external view returns (IDotNugg.Group[] memory groups);\\n\\n    // function bytesToGroup(bytes memory data) external view returns (IDotNugg.Group memory group);\\n\\n    // function bytesToBaseFeatures(bytes memory data) external view returns (IDotNugg.BaseFeature[] memory baseFeatures);\\n\\n    // function bytesToBaseFeature(bytes memory data) external view returns (IDotNugg.BaseFeature memory baseFeature);\\n\\n    // function bytesToArguments(bytes memory data) external view returns (IDotNugg.Arguments memory arguments);\\n\\n    // function bytesToCoordinate(bytes memory data) external view returns (IDotNugg.Coordinate memory coordinate);\\n\\n    // function bytesToCoordinate(bytes1 x, bytes1 y) external view returns (IDotNugg.Coordinate memory coordinate);\\n}\\n\",\"keccak256\":\"0xc765528c6c8a7ba2e31354ee3131d67f4ca56e3758bef72a61d756109362d5bb\",\"license\":\"MIT\"},\"contracts/core/libraries/Byte.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Bytes1 operations.\\n */\\nlibrary Byte {\\n    bytes32 internal constant ALPHABET = '0123456789abcdef';\\n\\n    function toAscii(bytes1 value) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2);\\n        for (uint256 i = 2; i > 0; i--) {\\n            buffer[i - 1] = ALPHABET[uint8(value) & 0xf];\\n            value >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x70187fc2acfa2c13f534f742ab38b7ca5036fdb069f8b4e1107ba5831944b362\",\"license\":\"MIT\"},\"contracts/core/libraries/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './Byte.sol';\\n\\n/**\\n * @dev Bytes operations.\\n */\\nlibrary Bytes {\\n    using Byte for bytes1;\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, 'toUint8_outOfBounds');\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toAscii(bytes memory val) internal pure returns (string memory res) {\\n        for (uint8 i = 0; i < val.length; i++) {\\n            res = string(abi.encodePacked(res, val[i].toAscii()));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28aa56c12029ba21773c924baa51ac5a81f2018354f38572ec50d1a83de14f56\",\"license\":\"MIT\"},\"contracts/core/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, 'slice_overflow');\\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xc69ad5f6b801c2435196435ad07b8a1b43a97433d2ffd27d42361e08cada8a02\",\"license\":\"Unlicense\"},\"contracts/core/libraries/Colors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\nimport './Bytes.sol';\\nimport '../interfaces/IDotNugg.sol';\\n\\nlibrary Colors {\\n    using Bytes for bytes;\\n\\n    function combine(IDotNugg.RGBA8 memory base, IDotNugg.RGBA8 memory mix) internal pure returns (IDotNugg.RGBA8 memory res, bool) {\\n        if (mix.a == 255) {\\n            return (mix, false);\\n        }\\n\\n        IDotNugg.RGBA16 memory baseRGB = IDotNugg.RGBA16({r: uint16(base.r), g: uint16(base.g), b: uint16(base.b), a: uint16(base.a)});\\n        IDotNugg.RGBA16 memory mixRGB = IDotNugg.RGBA16({r: uint16(mix.r), g: uint16(mix.g), b: uint16(mix.b), a: uint16(mix.a)});\\n\\n        // uint8 alpha = uint8(255 - (((255 - baseRGB.a) * (255 - mixRGB.a)) / 255));\\n        uint8 red = uint8((baseRGB.r * (255 - mixRGB.a) + mixRGB.r * mixRGB.a) / 255);\\n        uint8 green = uint8((baseRGB.g * (255 - mixRGB.a) + mixRGB.g * mixRGB.a) / 255);\\n        uint8 blue = uint8((baseRGB.b * (255 - mixRGB.a) + mixRGB.b * mixRGB.a) / 255);\\n\\n        return (IDotNugg.RGBA8({r: red, g: green, b: blue, a: 255}), true);\\n    }\\n\\n    function toAscii(IDotNugg.RGBA8 memory base) internal pure returns (string memory res) {\\n        bytes memory input = abi.encodePacked(base.r, base.g, base.b, base.a);\\n        return input.toAscii();\\n    }\\n\\n    function combine(bytes memory base, bytes memory mix) internal pure returns (IDotNugg.RGBA8 memory res, bool) {\\n        IDotNugg.RGBA8 memory baseRGB = IDotNugg.RGBA8({\\n            r: base.toUint8(0),\\n            g: base.toUint8(1),\\n            b: base.toUint8(2),\\n            a: base.length > 3 ? base.toUint8(3) : uint8(225)\\n        });\\n        IDotNugg.RGBA8 memory mixRGB = IDotNugg.RGBA8({\\n            r: mix.toUint8(0),\\n            g: mix.toUint8(1),\\n            b: mix.toUint8(2),\\n            a: mix.length > 3 ? mix.toUint8(3) : uint8(225)\\n        });\\n\\n        return combine(baseRGB, mixRGB);\\n    }\\n}\\n\",\"keccak256\":\"0x46ef7c7bf19238144b5a86bc923d671ec93751a7f075b9f61a5e9a06abdfe1d6\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/libraries/Svg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../interfaces/IDotNugg.sol';\\nimport '../base/IteratorV2.sol';\\nimport '../base/Constants.sol';\\nimport '../base/Calculator.sol';\\n\\nimport './Colors.sol';\\nimport '../../libraries/Uint.sol';\\n\\n\\n/**\\n * @dev Bytes1 operations.\\n */\\nlibrary Svg {\\n    using IteratorV2 for IDotNugg.OrderedGroups;\\n    using IteratorV2 for IDotNugg.SimpleOrderedGroups;\\n\\n    using Colors for IDotNugg.RGBA8;\\n    using Uint256 for uint256;\\n    using Uint8 for uint8;\\n\\n    function getSvgRects2(IDotNugg.Display memory display, uint256 pixelWidth) internal pure returns (bytes memory res) {\\n        IDotNugg.SimpleOrderedGroups memory ittr = IteratorV2.newSimpleOrderedGroup(Calculator._compressGroups(display).groups);\\n\\n        uint8 x = 0;\\n        uint8 y = 0;\\n\\n        while (ittr.hasNext()) {\\n            // if (ittr.current().colorID == 0) {\\n            //     continue;\\n            // }\\n            if (x == display.len.x) {\\n                y++;\\n                x = 0;\\n            }\\n            while (ittr.current().len > 0 && ittr.current().len + x >= display.len.x) {\\n                uint8 remaining = display.len.x - x;\\n                res = abi.encodePacked(\\n                    res,\\n                    getRekt(display.colors[ittr.current().colorID].rgba, x * pixelWidth, y * pixelWidth, pixelWidth, remaining * pixelWidth)\\n                );\\n                ittr.current().len -= display.len.x - x;\\n                y++;\\n                x = 0;\\n            }\\n            if (ittr.current().len == 0) {\\n                continue;\\n            }\\n\\n            uint256 x_offset = x * pixelWidth;\\n            uint256 y_offset = y * pixelWidth;\\n            uint256 size = pixelWidth;\\n            uint256 width = pixelWidth * ittr.current().len;\\n            res = abi.encodePacked(res, getRekt(display.colors[ittr.current().colorID].rgba, x_offset, y_offset, size, width));\\n\\n            x += ittr.current().len;\\n        }\\n    }\\n\\n    function getRekt(\\n        IDotNugg.RGBA8 memory rgba,\\n        uint256 x,\\n        uint256 y,\\n        uint256 xlen,\\n        uint256 ylen\\n    ) internal pure returns (bytes memory res) {\\n        if (rgba.a == 0) return '';\\n        res = abi.encodePacked(\\n            \\\"\\\\t<rect fill='#\\\",\\n            rgba.toAscii(),\\n            \\\"' x='\\\",\\n            x.toString(),\\n            \\\"' y='\\\",\\n            y.toString(),\\n            \\\"' height='\\\",\\n            xlen.toString(),\\n            \\\"' width='\\\",\\n            ylen.toString(),\\n            \\\"'/>\\\\n\\\"\\n        );\\n    }\\n\\n    function toSvg(IDotNugg.Display memory display, uint256 pixelWidth) internal view returns (bytes memory) {\\n        uint256 svgWidth = display.len.x * pixelWidth;\\n\\n        bytes memory header = abi.encodePacked(\\n            \\\"<svg viewBox='0 0 \\\",\\n            svgWidth.toString(),\\n            ' ',\\n            svgWidth.toString(),\\n            \\\"' width='\\\",\\n            svgWidth.toString(),\\n            \\\"' height='\\\",\\n            svgWidth.toString(),\\n            \\\"' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'>\\\\n\\\"\\n        );\\n\\n        bytes memory rects = getSvgRects2(display, pixelWidth);\\n\\n        return abi.encodePacked(header, rects, '</svg>');\\n    }\\n}\\n\",\"keccak256\":\"0x98083ddf85664189122101c46cf3a39a9c8ab7edf1d481146821fcee7fcdba01\",\"license\":\"MIT\"},\"contracts/libraries/Uint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/*\\n * @dev Uint operations.\\n */\\nlibrary Uint8 {\\n    function toByte(uint8 u) internal pure returns (bytes1 res) {\\n        res = bytes1(u);\\n    }\\n\\n    function toString(uint8 u) internal pure returns (string memory res) {\\n        res = Uint256.toString(uint256(u));\\n    }\\n}\\n\\n/*\\n * @dev Uint operations.\\n */\\nlibrary Uint256 {\\n    bytes16 private constant _HEX_SYMBOLS = '0123456789abcdef';\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return '0';\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, 'Strings: hex length insufficient');\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xfa26c3fb5f7d48a24967b53795836c403b999c0cb7a396392e1545dab19879e4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615f3980620000216000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806381e8c61f1461005c578063b4e1f09e14610085578063bd16de31146100a5578063cde5539f146100c5578063dc9efae7146100e5575b600080fd5b61006f61006a36600461524d565b610105565b60405161007c9190615909565b60405180910390f35b61009861009336600461524d565b61011c565b60405161007c9190615a72565b6100b86100b33660046153e9565b610134565b60405161007c9190615888565b6100d86100d336600461524d565b610147565b60405161007c91906159fc565b6100f86100f33660046152d9565b610158565b60405161007c9190615add565b61010d614af7565b6101168261016a565b92915050565b60408051602081019091526060815261011682610458565b60606101408383610530565b9392505050565b61014f614b43565b610116826105ce565b610160614b59565b61014083836107c9565b610172614af7565b61017b826108db565b9150600260ff16826000815181106101a357634e487b7160e01b600052603260045260246000fd5b016020015160f81c146101b557600080fd5b81600b815181106101d657634e487b7160e01b600052603260045260246000fd5b01602090810151606083015160f89190911c9052604080518082019091526004808252636e75676760e01b9190920152610227906102229061021990600d615d98565b8490600261099c565b610aae565b81602001819052506102cb6102c6604051806040016040528060048152602001636e75676760e01b815250518460048151811061027457634e487b7160e01b600052603260045260246000fd5b0160200151610286919060f81c615d98565b6002856003815181106102a957634e487b7160e01b600052603260045260246000fd5b01602001516102bb919060f81c615d0b565b85919060ff1661099c565b610b6f565b8160800181905250610337826007815181106102f757634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b8360088151811061032357634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916610e6d565b8160000151600001819052506103c26103bd604051806040016040528060048152602001636e75676760e01b815250518460028151811061038857634e487b7160e01b600052603260045260246000fd5b016020015161039a919060f81c615d98565b6006856001815181106102a957634e487b7160e01b600052603260045260246000fd5b610e86565b81600001516040018190525061044d610448604051806040016040528060048152602001636e75676760e01b815250518460068151811061041357634e487b7160e01b600052603260045260246000fd5b0160200151610425919060f81c615d98565b6002856005815181106102a957634e487b7160e01b600052603260045260246000fd5b610fe2565b815160200152919050565b604080516020810190915260608152610470826108db565b9150600060ff168260008151811061049857634e487b7160e01b600052603260045260246000fd5b016020015160f81c146104aa57600080fd5b610529610524604051806040016040528060048152602001636e75676760e01b81525051846002815181106104ef57634e487b7160e01b600052603260045260246000fd5b0160200151610501919060f81c615d98565b6002856001815181106102a957634e487b7160e01b600052603260045260246000fd5b611138565b8152919050565b81515160609060009061054790849060ff16615cec565b9050600061055482611247565b61055d83611247565b61056684611247565b61056f85611247565b604051602001610582949392919061576d565b6040516020818303038152906040529050600061059f8686611360565b905081816040516020016105b492919061563d565b604051602081830303815290604052935050505092915050565b6105d6614b43565b6105df826108db565b9150600160ff168260008151811061060757634e487b7160e01b600052603260045260246000fd5b016020015160f81c1461061957600080fd5b610698610693604051806040016040528060048152602001636e75676760e01b815250518460048151811061065e57634e487b7160e01b600052603260045260246000fd5b0160200151610670919060f81c615d98565b6009856003815181106102a957634e487b7160e01b600052603260045260246000fd5b6115d2565b81600001819052506106e56103bd604051806040016040528060048152602001636e75676760e01b815250518460028151811061038857634e487b7160e01b600052603260045260246000fd5b816020015160400181905250610715826007815181106102f757634e487b7160e01b600052603260045260246000fd5b8160200151600001819052506107bc610448604051806040016040528060048152602001636e75676760e01b815250518460068151811061076657634e487b7160e01b600052603260045260246000fd5b0160200151610778919060f81c615d98565b600260ff168560058151811061079e57634e487b7160e01b600052603260045260246000fd5b01602001516107b0919060f81c615cc2565b85919061ffff1661099c565b6020808301510152919050565b6107d1614b59565b600082516001600160401b038111156107fa57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561083357816020015b610820614b80565b8152602001906001900390816108185790505b50905060005b83518161ffff1610156108c85760008061087e868461ffff168151811061087057634e487b7160e01b600052603260045260246000fd5b602002602001015188611803565b9150915081848461ffff16815181106108a757634e487b7160e01b600052603260045260246000fd5b602090810291909101015295508190506108c081615e59565b915050610839565b506108d381856119c9565b949350505050565b6060600d8251116108eb57600080fd5b610944604051806040016040528060048152602001636e75676760e01b81525061093e6000604051806040016040528060048152602001636e75676760e01b815250518661099c9092919063ffffffff16565b90612923565b61094d57600080fd5b610116604051806040016040528060048152602001636e75676760e01b81525051604051806040016040528060048152602001636e75676760e01b8152505184516109989190615d98565b8491905b6060816109aa81601f615c50565b10156109ee5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064015b60405180910390fd5b6109f88284615c50565b84511015610a3c5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016109e5565b606082158015610a5b5760405191506000825260208201604052610aa5565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610a94578051835260209283019201610a7c565b5050858452601f01601f1916604052505b50949350505050565b610ab6614bad565b8151600214610b1f5760405162461bcd60e51b815260206004820152602f60248201527f444e5f4445434f4445523a434f4f5244494e4154453a206c656e677468206f6660448201526e103230ba309036bab9ba103132901960891b60648201526084016109e5565b61011682600081518110610b4357634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b8360018151811061032357634e487b7160e01b600052603260045260246000fd5b610b77614bc4565b8151610b8590600290615ead565b15610bec5760405162461bcd60e51b815260206004820152603160248201527f444e5f4445434f4445523a455850414e44455247524f55503a206c656e677468604482015270081bd98811105510481a5b9d985b1a5a59607a1b60648201526084016109e5565b60005b82518161ffff161015610e6757828161ffff1681518110610c2057634e487b7160e01b600052603260045260246000fd5b60209101015160f81c60521415610c5357610c49610c448461ffff8416600261099c565b612987565b6020830152610e55565b828161ffff1681518110610c7757634e487b7160e01b600052603260045260246000fd5b60209101015160f81c60721415610ca557610c9b610c448461ffff8416600261099c565b6060830152610e55565b828161ffff1681518110610cc957634e487b7160e01b600052603260045260246000fd5b60209101015160f81c604c1415610cf457610ced610c448461ffff8416600261099c565b8252610e55565b828161ffff1681518110610d1857634e487b7160e01b600052603260045260246000fd5b60209101015160f81c606c1415610d4657610d3c610c448461ffff8416600261099c565b6040830152610e55565b828161ffff1681518110610d6a57634e487b7160e01b600052603260045260246000fd5b60209101015160f81c60551415610d9d57610d93610d8e8461ffff8416600261099c565b612a62565b6080830152610e55565b828161ffff1681518110610dc157634e487b7160e01b600052603260045260246000fd5b60209101015160f81c60441415610def57610de5610d8e8461ffff8416600261099c565b60a0830152610e55565b60405162461bcd60e51b815260206004820152603560248201527f444e5f4445434f4445523a455850414e44455247524f55503a20696e76616c696044820152741908195e1c185b99195c881d1e5c1948199bdd5b99605a1b60648201526084016109e5565b610e60600282615c33565b9050610bef565b50919050565b610e75614bad565b60f892831c8152911c602082015290565b8051606090610e9790600690615ead565b15610ef75760405162461bcd60e51b815260206004820152602a60248201527f444e5f4445434f4445523a434f4c4f52533a206c656e677468206f66206461746044820152690309036bab9ba103132960b51b60648201526084016109e5565b8151610f0590600690615cae565b6001600160401b03811115610f2a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f6357816020015b610f50614c18565b815260200190600190039081610f485790505b5090506000805b83518161ffff161015610fdb57610f8f610f8a8561ffff8416600661099c565b612adb565b8383610f9a81615e59565b945061ffff1681518110610fbe57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610fd4600682615c33565b9050610f6a565b5050919050565b8051606090610ff390600290615ead565b156110545760405162461bcd60e51b815260206004820152602b60248201527f444e5f4445434f4445523a47524f5550533a206c656e677468206f662064617460448201526a309036bab9ba103132901b60a91b60648201526084016109e5565b815161106290600290615cae565b6001600160401b0381111561108757634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156110c057816020015b6110ad614bad565b8152602001906001900390816110a55790505b5090506000805b83518161ffff161015610fdb576110ec6110e78561ffff8416600261099c565b612cad565b83836110f781615e59565b945061ffff168151811061111b57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152611131600282615c33565b90506110c7565b805160609061114990600290615ead565b156111665760405162461bcd60e51b81526004016109e5906158bb565b815161117490600290615cae565b6001600160401b0381111561119957634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156111d257816020015b6111bf614bad565b8152602001906001900390816111b75790505b5090506000805b83518160ff161015610fdb576111fc6111f78560ff8416600261099c565b612d7b565b838361120781615e96565b945060ff168151811061122a57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152611240600282615c68565b90506111d9565b60608161126b5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611295578061127f81615e7b565b915061128e9050600a83615cae565b915061126f565b6000816001600160401b038111156112bd57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156112e7576020820181803683370190505b5090505b84156108d3576112fc600183615d98565b9150611309600a86615ead565b611314906030615c50565b60f81b81838151811061133757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611359600a86615cae565b94506112eb565b6060600061137961137085612e2a565b602001516130ea565b90506000805b6113888361315d565b156115c95785515160ff838116911614156113af57806113a781615e96565b915050600091505b60006113ba846131fd565b6020015160ff161180156113ed575085515160ff16826113d9856131fd565b602001516113e79190615c68565b60ff1610155b156114df57855151600090611403908490615daf565b9050846114778860400151611417876131fd565b6000015160ff168151811061143c57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151888660ff166114579190615cec565b6114648a60ff8816615cec565b8a6114728160ff8916615cec565b61328f565b60405160200161148892919061560e565b60408051601f198184030181529190528751519095506114a9908490615daf565b6114b2856131fd565b6020018181516114c29190615daf565b60ff16905250816114d281615e96565b92505060009250506113af565b6114e8836131fd565b6020015160ff166114f85761137f565b60006115078660ff8516615cec565b905060006115188760ff8516615cec565b9050866000611526876131fd565b602001516115379060ff168a615cec565b9050876115858b6040015161154b8a6131fd565b6000015160ff168151811061157057634e487b7160e01b600052603260045260246000fd5b6020026020010151602001518686868661328f565b60405160200161159692919061560e565b60405160208183030381529060405297506115b0876131fd565b602001516115be9087615c68565b95505050505061137f565b50505092915050565b80516060906115e390600990615ead565b156116005760405162461bcd60e51b81526004016109e5906158bb565b815160009061161190600990615cae565b6001600160401b0381111561163657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561166f57816020015b61165c614c49565b8152602001906001900390816116545790505b5090506000805b84518161ffff1610156116e75761169b6116968661ffff8416600961099c565b61330d565b83836116a681615e59565b945061ffff16815181106116ca57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526116e0600982615c33565b9050611676565b5081516001600160401b0381111561170f57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561174857816020015b611735614c49565b81526020019060019003908161172d5790505b50925060005b82518161ffff1610156117fb57828161ffff168151811061177f57634e487b7160e01b600052603260045260246000fd5b602002602001015184848361ffff16815181106117ac57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516000015160ff16815181106117dd57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806117f390615e59565b91505061174e565b505050919050565b61180b614b80565b611813614b43565b8351604090810151835190910152600061182d8585613451565b60ff1611156118435761184084846134c1565b93505b600061184f858561396d565b60ff1611156118655761186284846139a5565b93505b825160608501515181516000929160ff1690811061189357634e487b7160e01b600052603260045260246000fd5b60200260200101516020015190506000604051806040016040528087602001516000015184600001516118c69190615daf565b60ff16815260200187602001516020015184602001516118e69190615daf565b60ff16815250905085604001516060015115611991576040805180820182529087015160200151518251829161191b91615c68565b60ff16815260200187604001516020015160200151836020015161193f9190615c68565b60ff168152508660400151602001819052508560400151856000015187606001516000015160ff168151811061198557634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b85515184515285516020908101518551820152808501829052865101516119b79061434d565b604085015250839150505b9250929050565b6119d1614b59565b60006040518060600160405280846020015181526020016040518060400160405280600060ff168152602001600060ff168152508152602001611a1b85602001516020015161434d565b90528051516020015190915060009060ff166001600160401b03811115611a5257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611a8557816020015b6060815260200190600190039081611a705790505b508251518051602090910151919250600091611aa79160ff9081169116615cc2565b61ffff166001600160401b03811115611ad057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611b0957816020015b611af6614c18565b815260200190600190039081611aee5790505b5060408051608080820183526000808352835191820184526045808352602083810182905283860191909152606080840183905290840192909252600193830184905290820192909252919250908282611b6281615e59565b935061ffff1681518110611b8657634e487b7160e01b600052603260045260246000fd5b602090810291909101015260408051610101808252612040820190925260009181602001602082028036833701905050905060005b8551516020015160ff908116908216101561200b578551515160ff166001600160401b03811115611bfc57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611c3557816020015b611c22614c18565b815260200190600190039081611c1a5790505b50858260ff1681518110611c5957634e487b7160e01b600052603260045260246000fd5b602002602001018190525060005b8651515160ff9081169082161015611ff857611c8687604001516143a6565b80611c9d5750611c998760400151614418565b6001145b15611fe657611caf8760400151614457565b60408801819052602e90611cc290614500565b5160ff161415611d525784600081518110611ced57634e487b7160e01b600052603260045260246000fd5b6020026020010151868360ff1681518110611d1857634e487b7160e01b600052603260045260246000fd5b60200260200101518260ff1681518110611d4257634e487b7160e01b600052603260045260246000fd5b6020026020010181905250611fe6565b6000876000015160400151611d6a8960400151614500565b6000015160ff1681518110611d8f57634e487b7160e01b600052603260045260246000fd5b602002602001015190508381600001516001611dab9190615c68565b60ff1681518110611dcc57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1660001415611f1f57600085611dec81615e59565b9650905060405180608001604052808260ff16815260200183602001518152602001836040015160ff16815260200160011515815250878261ffff1681518110611e4657634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808583600001516001611e649190615c68565b60ff1681518110611e8557634e487b7160e01b600052603260045260246000fd5b61ffff9283166020918202929092010152875188918316908110611eb957634e487b7160e01b600052603260045260246000fd5b6020026020010151888560ff1681518110611ee457634e487b7160e01b600052603260045260246000fd5b60200260200101518460ff1681518110611f0e57634e487b7160e01b600052603260045260246000fd5b602002602001018190525050611fe4565b60405180608001604052808583600001516001611f3c9190615c68565b60ff1681518110611f5d57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff16815260200182602001518152602001826040015160ff16815260200160011515815250878460ff1681518110611fae57634e487b7160e01b600052603260045260246000fd5b60200260200101518360ff1681518110611fd857634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b505b80611ff081615e96565b915050611c67565b508061200381615e96565b915050611bbb565b5060005b88518160ff161015612684576000898260ff168151811061204057634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006101016001600160401b0381111561207457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561209d578160200160208202803683370190505b5060208084015101519091505b602080840151810151845151909101516120c49190615c68565b60ff168160ff16101561266e576020830151515b602084015151845151516120ec9190615c68565b60000b8160000b121561265b5760408401518190612109906143a6565b156126475761211b8560400151614457565b6040860181905261212b90614500565b6020015160ff16612149578161214081615e02565b92505050612649565b602e60ff1661215b8660400151614500565b5160ff16141561216b5750612649565b846000015160400151516121828660400151614500565b5160ff16106121cd5760405162461bcd60e51b8152602060048201526017602482015276031b7b637b91024a21037baba1037b3103137bab732399604d1b60448201526064016109e5565b60008560000151604001516121e58760400151614500565b6000015160ff168151811061220a57634e487b7160e01b600052603260045260246000fd5b602002602001015190508060600151612224575050612649565b8a8460ff168151811061224757634e487b7160e01b600052603260045260246000fd5b60200260200101518260ff168151811061227157634e487b7160e01b600052603260045260246000fd5b60200260200101516040015160ff16816040015160ff161115612645576000806122f78d8760ff16815181106122b757634e487b7160e01b600052603260045260246000fd5b60200260200101518560ff16815181106122e157634e487b7160e01b600052603260045260246000fd5b602002602001015160200151846020015161455d565b9150915080156123f85760008b61230d81615e59565b9c50905060405180608001604052808260ff168152602001848152602001856040015160ff168152602001600115158152508d8261ffff168151811061236357634e487b7160e01b600052603260045260246000fd5b60200260200101819052508c8161ffff168151811061239257634e487b7160e01b600052603260045260246000fd5b60200260200101518e8860ff16815181106123bd57634e487b7160e01b600052603260045260246000fd5b60200260200101518660ff16815181106123e757634e487b7160e01b600052603260045260246000fd5b602002602001018190525050612642565b82518790612407906001615c68565b60ff168151811061242857634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff166000141561257d5760008b61244881615e59565b9c50905060405180608001604052808260ff168152602001848152602001856040015160ff168152602001600115158152508d8261ffff168151811061249e57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508c8161ffff16815181106124cd57634e487b7160e01b600052603260045260246000fd5b60200260200101518e8860ff16815181106124f857634e487b7160e01b600052603260045260246000fd5b60200260200101518660ff168151811061252257634e487b7160e01b600052603260045260246000fd5b60200260200101819052508088856000015160016125409190615c68565b60ff168151811061256157634e487b7160e01b600052603260045260246000fd5b602002602001019061ffff16908161ffff168152505050612642565b6040518060800160405280888560000151600161259a9190615c68565b60ff16815181106125bb57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff16815260200184602001518152602001846040015160ff168152602001600115158152508d8760ff168151811061260c57634e487b7160e01b600052603260045260246000fd5b60200260200101518560ff168151811061263657634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b50505b505b505b8061265381615e3a565b9150506120d8565b508061266681615e96565b9150506120aa565b505050808061267c90615e96565b91505061200f565b50602080880151519081015190516000916126a59160ff9182169116615cc2565b61ffff166001600160401b038111156126ce57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561270757816020015b6126f4614bad565b8152602001906001900390816126ec5790505b5090506000805b6020808b015151015160ff1661ffff821610156128165760005b60208b0151515160ff1661ffff82161015612803576040518060400160405280898461ffff168151811061276c57634e487b7160e01b600052603260045260246000fd5b60200260200101518361ffff168151811061279757634e487b7160e01b600052603260045260246000fd5b60200260200101516000015160ff168152602001600160ff16815250848461ffff16815181106127d757634e487b7160e01b600052603260045260246000fd5b602002602001018190525082806127ed90615e59565b93505080806127fb90615e59565b915050612728565b508061280e81615e59565b91505061270e565b5060008461ffff166001600160401b0381111561284357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561287c57816020015b612869614c18565b8152602001906001900390816128615790505b50905060005b8561ffff168161ffff16101561290057868161ffff16815181106128b657634e487b7160e01b600052603260045260246000fd5b6020026020010151828261ffff16815181106128e257634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806128f890615e59565b915050612882565b506040890152506020808801919091529690960151518552509295945050505050565b81518151600091600191811480831461293f576000925061297d565b600160208701838101602088015b60028483851001141561297857805183511461296c5760009650600093505b6020928301920161294d565b505050505b5090949350505050565b61298f614c83565b81516002146129fa5760405162461bcd60e51b815260206004820152603160248201527f444e5f4445434f4445523a455850414e4445523a206c656e677468206f6620656044820152703c3830b73232b91036bab9ba103132901960791b60648201526084016109e5565b81600081518110612a1b57634e487b7160e01b600052603260045260246000fd5b0160209081015160f81c90820152815182906001908110612a4c57634e487b7160e01b600052603260045260246000fd5b016020015160f81c604082015260018152919050565b612a6a614c83565b81516002146129fa5760405162461bcd60e51b815260206004820152603760248201527f444e5f4445434f4445523a56455850414e4445523a206c656e677468206f66206044820152763b32b93a1032bc3830b73232b91036bab9ba103132901960491b60648201526084016109e5565b612ae3614c18565b8151600614612b655760405162461bcd60e51b815260206004820152604260248201527f444e5f4445434f4445523a434f4c4f523a206c656e677468206f66206279746560448201527f73206d75737420626520436f6e7374616e74732e434f4c4f525f425954455f4c60648201526122a760f11b608482015260a4016109e5565b6001606082015281518290600090612b8d57634e487b7160e01b600052603260045260246000fd5b016020015160f81c8152815182906001908110612bba57634e487b7160e01b600052603260045260246000fd5b016020015160f81c6040820152815182906002908110612bea57634e487b7160e01b600052603260045260246000fd5b016020908101519082015160f89190911c9052815182906003908110612c2057634e487b7160e01b600052603260045260246000fd5b016020908101518282015160f89190911c910152815182906004908110612c5757634e487b7160e01b600052603260045260246000fd5b016020908101519082015160f89190911c604090910152815182906005908110612c9157634e487b7160e01b600052603260045260246000fd5b016020908101519082015160f89190911c606090910152919050565b612cb5614bad565b8151600214612d1a5760405162461bcd60e51b815260206004820152602b60248201527f444e5f4445434f4445523a47524f55503a206c656e677468206f662067726f7560448201526a381036bab9ba103132901960a91b60648201526084016109e5565b81600081518110612d3b57634e487b7160e01b600052603260045260246000fd5b016020015160f81c8152815182906001908110612d6857634e487b7160e01b600052603260045260246000fd5b0160209081015160f81c90820152919050565b612d83614bad565b8151600214612dfa5760405162461bcd60e51b815260206004820152603b60248201527f444e5f4445434f4445523a464541545552453a206c656e677468206f6620646160448201527f7461206d75737420626520464541545552455f425954455f4c454e000000000060648201526084016109e5565b81600081518110612e1b57634e487b7160e01b600052603260045260246000fd5b016020015160f81c8152919050565b612e32614b59565b60008260200151516001600160401b03811115612e5f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612e9857816020015b612e85614bad565b815260200190600190039081612e7d5790505b5090506000612eaa846020015161434d565b905060006001905060008560200151600081518110612ed957634e487b7160e01b600052603260045260246000fd5b602002602001015160000151905060005b612ef3846143a6565b15612f9e57612f0184614457565b9350612f0c84614500565b5160ff83811691161415612f375760ff8381161015612f375782612f2f81615e96565b935050612eea565b6040805180820190915260ff8084168252841660208201528582612f5a81615e59565b935061ffff1681518110612f7e57634e487b7160e01b600052603260045260246000fd5b602002602001018190525060019250612f9684614500565b519150612eea565b6040805180820190915260ff8084168252841660208201528582612fc181615e59565b935061ffff1681518110612fe557634e487b7160e01b600052603260045260246000fd5b602002602001018190525060008161ffff166001600160401b0381111561301c57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561305557816020015b613042614bad565b81526020019060019003908161303a5790505b50905060005b8261ffff168161ffff1610156130d957868161ffff168151811061308f57634e487b7160e01b600052603260045260246000fd5b6020026020010151828261ffff16815181106130bb57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806130d190615e59565b91505061305b565b506020880152509495945050505050565b6130f2614ca3565b60008251116131525760405162461bcd60e51b815260206004820152602660248201527f4e455753494d504c454f52444552454447524f5550533a2067726f7570206f666044820152650206c656e20360d41b60648201526084016109e5565b602081019190915290565b602081015151815160009190613174906001615c33565b61ffff161015613182575060015b80156131ed57606082015160ff166131ad576000604083018190528252600160609092019190915290565b6131b6826131fd565b6020015160ff16826040018181516131ce9190615c33565b61ffff169052508151826131e182615e59565b61ffff16905250919050565b60208201515161ffff1690915290565b613205614bad565b6000826020015151116132545760405162461bcd60e51b8152602060048201526017602482015276063757272656e743a2067726f7570206f66206c656e203604c1b60448201526064016109e5565b8160200151826000015161ffff168151811061328057634e487b7160e01b600052603260045260246000fd5b60200260200101519050919050565b60608581015160ff166132b15750604080516020810190915260008152613304565b6132ba866146fc565b6132c386611247565b6132cc86611247565b6132d586611247565b6132de86611247565b6040516020016132f295949392919061567d565b60405160208183030381529060405290505b95945050505050565b613315614c49565b81516009146133a35760405162461bcd60e51b815260206004820152604e60248201527f444e5f4445434f4445523a42415345464541545552453a206c656e677468206f60448201527f662064617461206d75737420626520436f6e7374616e74732e424153455f464560648201526d20aa2aa922afa12caa22afa622a760911b608482015260a4016109e5565b816000815181106133c457634e487b7160e01b600052603260045260246000fd5b0160200151815160f89190911c9052815161342690839060019081106133fa57634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b8360028151811061032357634e487b7160e01b600052603260045260246000fd5b602082015261344061343b836003600661099c565b614762565b604082015260016060820152919050565b608082015151516000901561346e578061346a81615e96565b9150505b608083015160400151511561348b578061348781615e96565b9150505b60808301516020015151156134a857806134a481615e96565b9150505b608083015160600151511561011657806108d381615e96565b6134c9614af7565b6000806000856000015160200151516001600160401b038111156134fd57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561353657816020015b613523614bad565b81526020019060019003908161351b5790505b509050600061354c8760000151602001516130ea565b905060005b61355a826148ac565b1561391657613568826148d5565b9150600061357583614500565b90506000613586826000015161495a565b905060ff81166135c55781858461ffff16815181106135b557634e487b7160e01b600052603260045260246000fd5b6020026020010181905250613901565b8060ff16604c141561369857885160608b01515181516001929160ff169081106135ff57634e487b7160e01b600052603260045260246000fd5b602002602001015160400151600001516136199190615d34565b60808b0151516040015160ff90811684528a5160608d0151518151939a509092911690811061365857634e487b7160e01b600052603260045260246000fd5b602090810291909101810151604001515160ff169083015284518290869061ffff86169081106135b557634e487b7160e01b600052603260045260246000fd5b8060ff16606c141561372e57885160608b01515181516001929160ff169081106136d257634e487b7160e01b600052603260045260246000fd5b602002602001015160400151600001516136ec9190615d34565b60808b0151604090810151015160ff90811684528a5160608d0151518151939a509092911690811061365857634e487b7160e01b600052603260045260246000fd5b8060ff166052141561380a57885160608b01515181516001929160ff1690811061376857634e487b7160e01b600052603260045260246000fd5b602002602001015160400151602001516137829190615d34565b60808b0151602001516040015160ff90811684528a5160608d0151518151939950909291169081106137c457634e487b7160e01b600052603260045260246000fd5b60200260200101516040015160200151826020019060ff16908160ff168152505081858461ffff16815181106135b557634e487b7160e01b600052603260045260246000fd5b8060ff16607214156138a157885160608b01515181516001929160ff1690811061384457634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516020015161385e9190615d34565b60808b01516060908101516040015160ff90811685528b51918d0151518251939950919291169081106137c457634e487b7160e01b600052603260045260246000fd5b60405162461bcd60e51b815260206004820152602f60248201527f5f616464486f72697a6f6e74616c457870616e646572733a2073686f756c642060448201526e03737ba103430b83832b7101418949608d1b60648201526084016109e5565b5050808061390e90615e59565b915050613551565b508651602001829052865151518390613930908690615bf3565b61393a9190615bf3565b87515160ff9091169052602087015151613955908590615bf3565b602088015160ff919091169052509495945050505050565b6080808301510151516000901561398c578061398881615e96565b9150505b608083015160a00151511561011657806108d381615e96565b6139ad614af7565b815160608401515181516000929160ff169081106139db57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516060015160206139f79190615d0b565b60ff16836000015185606001516000015160ff1681518110613a2957634e487b7160e01b600052603260045260246000fd5b602002602001015160400151604001516020613a459190615d0b565b85516020015151613a599160ff1690615c50565b613a639190615c50565b6001600160401b03811115613a8857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613ac157816020015b613aae614bad565b815260200190600190039081613aa65790505b5090506000613ad78560000151602001516130ea565b60408051610120810182526000808252602080830182905292820181905260608201819052608080830182905260a0830182905260c0830182905260e08301829052610100830191909152888101510151909101519192509060ff1615613b6357600160408083019190915286515151608080890151015190910151613b5d9190615d0b565b60ff1681525b608086015160a001516020015160ff1615613ba3576001606082015285515151608087015160a0015160400151613b9a9190615d0b565b60ff1660208201525b8060400151158015613bb757508060600151155b15613bc757859350505050610116565b8451606087015151815160ff909116908110613bf357634e487b7160e01b600052603260045260246000fd5b6020908102919091010151604090810151015160ff908116608083015285516060880151518151919216908110613c3a57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516040908101516060015160ff1660a084015280518281526104208101909152600091816020015b613c75614bad565b815260200190600190039081613c6d5750506040805160208082526104208201909252919250600091908082015b613cab614bad565b815260200190600190039081613ca3575050600060c0850181905260e0850181905261010085018190529091505b613ce2856148ac565b1561403557836040015115613e5b57836000015160ff16856040015161ffff16108015613d285750885151518451613d1a9190615c68565b60ff16856040015161ffff16115b15613d8157613d3685614500565b60c0850180518491613d4782615e96565b60ff1660ff1681525060ff1681518110613d7157634e487b7160e01b600052603260045260246000fd5b6020026020010181905250613e5b565b60c084015160ff1615613e5b5760005b846080015160ff168160ff161015613e525760005b8560c0015160ff168160ff161015613e3f57838160ff1681518110613ddb57634e487b7160e01b600052603260045260246000fd5b60200260200101518887610100018051809190613df790615e96565b60ff1660ff1681525060ff1681518110613e2157634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080613e3790615e96565b915050613da6565b5080613e4a81615e96565b915050613d91565b50600060c08501525b836060015115613fd257836020015160ff16856040015161ffff16108015613e9f5750885151516020850151613e919190615c68565b60ff16856040015161ffff16115b15613ef857613ead85614500565b60e0850180518591613ebe82615e96565b60ff1660ff1681525060ff1681518110613ee857634e487b7160e01b600052603260045260246000fd5b6020026020010181905250613fd2565b60e084015160ff1615613fd25760005b8460a0015160ff168160ff161015613fc95760005b8560e0015160ff168160ff161015613fb657848160ff1681518110613f5257634e487b7160e01b600052603260045260246000fd5b60200260200101518887610100018051809190613f6e90615e96565b60ff1660ff1681525060ff1681518110613f9857634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080613fae90615e96565b915050613f1d565b5080613fc181615e96565b915050613f08565b50600060e08501525b613fdb85614500565b610100850180518891613fed82615e96565b60ff1660ff1681525060ff168151811061401757634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061402d90615e59565b915050613cd9565b5060c083015160ff16156141105760005b836080015160ff168160ff1610156141075760005b8460c0015160ff168160ff1610156140f457828160ff168151811061409057634e487b7160e01b600052603260045260246000fd5b602002602001015187866101000180518091906140ac90615e96565b60ff1660ff1681525060ff16815181106140d657634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806140ec90615e96565b91505061405b565b50806140ff81615e96565b915050614046565b50600060c08401525b60e083015160ff16156141ea5760005b8360a0015160ff168160ff1610156141e15760005b8460e0015160ff168160ff1610156141ce57838160ff168151811061416a57634e487b7160e01b600052603260045260246000fd5b6020026020010151878661010001805180919061418690615e96565b60ff1660ff1681525060ff16815181106141b057634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806141c690615e96565b915050614135565b50806141d981615e96565b915050614120565b50600060e08401525b600083610100015160ff166001600160401b0381111561421a57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561425357816020015b614240614bad565b8152602001906001900390816142385790505b50905060005b84610100015160ff168161ffff1610156142db57868161ffff168151811061429157634e487b7160e01b600052603260045260246000fd5b6020026020010151828261ffff16815181106142bd57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806142d390615e59565b915050614259565b508851602090810182905260a085015160808601518b515190920151909161430291615c68565b61430c9190615c68565b89515160ff9091166020918201526080850151818b0151909101516143319190615c68565b60208a81015160ff929092169101525096979650505050505050565b614355614ca3565b60008251116131525760405162461bcd60e51b815260206004820181905260248201527f4e45574f52444552454447524f5550533a2067726f7570206f66206c656e203060448201526064016109e5565b6020810151518151600091906143bd906001615c33565b61ffff1610156143cf57506001919050565b60208201515182516143e2906001615c33565b61ffff161415614413576143f582614500565b6020015160ff16826040015161ffff16101561441357506001919050565b919050565b6000816020015151826000015161ffff161061443657506000919050565b815160208301515161444c9161ffff1690615d98565b610116906001615c50565b61445f614ca3565b614468826143a6565b156144f057606082015160ff1661448f575060008152600160408201819052606082015290565b600061449a83614500565b9050806020015160ff16836040015161ffff16106144d1578251836144be82615e59565b61ffff16905250600160408401526144e9565b604083018051906144e182615e59565b61ffff169052505b5090919050565b5060208101515161ffff16815290565b614508614bad565b6000826020015151116132545760405162461bcd60e51b815260206004820152601d60248201527f5f63757272656e7447726f75703a2067726f7570206f66206c656e203000000060448201526064016109e5565b614565614ccb565b6000826060015160ff1660ff1415614582575081905060006119c2565b6040805160808082018352865160ff9081168352602080890151821681850152888501518216848601526060808a015183168186015285519384018652885183168085528983015184169285019290925288860151831695840195909552878501518216948301859052929391926000926145fc91615cc2565b606084015161460c9060ff615d75565b85516146189190615cc2565b6146229190615c33565b61462c9190615c8d565b9050600060ff836060015184602001516146469190615cc2565b60608501516146569060ff615d75565b86602001516146659190615cc2565b61466f9190615c33565b6146799190615c8d565b9050600060ff846060015185604001516146939190615cc2565b60608601516146a39060ff615d75565b87604001516146b29190615cc2565b6146bc9190615c33565b6146c69190615c8d565b6040805160808101825260ff95861681529385166020850152908416908301525060608101919091529660019650945050505050565b805160208083015160408085015160608087015183516001600160f81b031960f898891b81169782019790975294871b8616602186015291861b85166022850152941b90921660238201528151808203600401815260249091019091526101408161499e565b61476a614cf2565b815160061461478b5760405162461bcd60e51b81526004016109e5906158bb565b816000815181106147ac57634e487b7160e01b600052603260045260246000fd5b016020015160f81c81528151829060019081106147d957634e487b7160e01b600052603260045260246000fd5b0160209081015160f81c9082015281518290600290811061480a57634e487b7160e01b600052603260045260246000fd5b016020015160f81c604082015281518290600390811061483a57634e487b7160e01b600052603260045260246000fd5b016020015160f81c606082015281518290600490811061486a57634e487b7160e01b600052603260045260246000fd5b016020015160f81c608082015281518290600590811061489a57634e487b7160e01b600052603260045260246000fd5b016020015160f81c60a0820152919050565b6020810151518151600091906148c3906001615c33565b61ffff16101561441357506001919050565b6148dd614ca3565b6148e6826148ac565b156144f057606082015160ff1661490d575060006040820181905281526001606082015290565b600061491883614500565b83519091508361492782615e59565b61ffff1661ffff1681525050806020015160ff168360400181815161494c9190615c33565b61ffff169052509192915050565b60008160ff166052148061497157508160ff166072145b8061497f57508160ff16604c145b8061498d57508160ff16606c145b15614996575090565b506000919050565b606060005b82518160ff161015610e6757816149ea848360ff16815181106149d657634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916614a1f565b6040516020016149fb92919061560e565b60405160208183030381529060405291508080614a1790615e96565b9150506149a3565b6040805160028082528183019092526060916000919060208201818036833701905050905060025b8015614af0576f181899199a1a9b1b9c1cb0b131b232b360811b600f60f886901c1660208110614a8757634e487b7160e01b600052603260045260246000fd5b1a60f81b82614a97600184615d98565b81518110614ab557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506004846001600160f81b031916901c93508080614ae890615e23565b915050614a47565b5092915050565b6040518060a00160405280614b0a614b59565b8152602001614b17614bad565b8152602001614b24614c49565b8152602001614b31614bad565b8152602001614b3e614bc4565b905290565b604051806040016040528060608152602001614b3e5b6040518060600160405280614b6c614bad565b815260200160608152602001606081525090565b6040518060600160405280614b93614b59565b8152602001614ba0614bad565b8152602001614b3e614ca3565b604080518082019091526000808252602082015290565b6040518060c00160405280614bd7614c83565b8152602001614be4614c83565b8152602001614bf1614c83565b8152602001614bfe614c83565b8152602001614c0b614c83565b8152602001614b3e614c83565b6040518060800160405280600060ff168152602001614c35614ccb565b815260006020820181905260409091015290565b6040518060800160405280614c5c614bad565b8152602001614c69614bad565b8152602001614c76614cf2565b8152600060209091015290565b604080516060810182526000808252602082018190529181019190915290565b6040805160808101825260008082526060602083018190529282018190529181019190915290565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b600082601f830112614d37578081fd5b81356020614d4c614d4783615bd0565b615ba0565b80838252828201915082860187848660051b8901011115614d6b578586fd5b855b85811015614ea95781356001600160401b0380821115614d8b578889fd5b90890190818b03610440601f1982011215614da457898afd5b614dac615af0565b8884013583811115614dbc578b8cfd5b614dca8e8b83880101615106565b82525060409250614ddd8d8486016150aa565b898201526080614def8e828701614fd2565b84830152614e018e6101e087016150aa565b606083015261024061021f1984011215614e19578b8cfd5b614e21615b18565b9250614e318e61022087016151ee565b8352614e418e61028087016151ee565b8a840152614e538e6102e087016151ee565b84840152614e658e61034087016151ee565b6060840152614e788e6103a087016151ee565b81840152614e8a8e61040087016151ee565b60a0840152810191909152865250509284019290840190600101614d6d565b5090979650505050505050565b600082601f830112614ec6578081fd5b81356020614ed6614d4783615bd0565b8281528181019085830160e080860288018501891015614ef4578687fd5b865b86811015614fb457828a0382811215614f0d578889fd5b614f15615b3a565b614f1e8561523c565b8152608080601f1984011215614f32578a8bfd5b614f3a615b3a565b9250614f4789870161523c565b83526040614f5681880161523c565b8a8501526060614f6781890161523c565b82860152614f7683890161523c565b81860152848b850152614f8b60a0890161523c565b82850152614f9b60c08901614fc2565b9084015250508652509385019391810191600101614ef6565b509198975050505050505050565b8035801515811461441357600080fd5b6000818303610160811215614fe5578182fd5b614fed615b3a565b9150614ff984846150aa565b825261500884604085016150aa565b602083015260c0607f198201121561501f57600080fd5b50615028615b18565b6150346080840161523c565b815261504260a0840161523c565b602082015261505360c0840161523c565b604082015261506460e0840161523c565b6060820152615076610100840161523c565b6080820152615088610120840161523c565b60a0820152604082015261509f6101408301614fc2565b606082015292915050565b6000604082840312156150bb578081fd5b604051604081018181106001600160401b03821117156150dd576150dd615eed565b6040529050806150ec8361523c565b81526150fa6020840161523c565b60208201525092915050565b600060808284031215615117578081fd5b61511f615b5c565b905061512b83836150aa565b81526040808301356001600160401b038082111561514857600080fd5b818501915085601f83011261515c57600080fd5b8135602061516c614d4783615bd0565b8083825282820191508286018a848660061b890101111561518c57600080fd5b600096505b848710156151b7576151a38b826150aa565b835260019690960195918301918701615191565b5080838901525050505060608501359150808211156151d557600080fd5b506151e285828601614eb6565b82840152505092915050565b6000606082840312156151ff578081fd5b615207615b5c565b905061521282614fc2565b81526152206020830161523c565b60208201526152316040830161523c565b604082015292915050565b803560ff8116811461441357600080fd5b6000602080838503121561525f578182fd5b82356001600160401b0380821115615275578384fd5b818501915085601f830112615288578384fd5b81358181111561529a5761529a615eed565b6152ac601f8201601f19168501615ba0565b915080825286848285010111156152c1578485fd5b80848401858401378101909201929092529392505050565b600080604083850312156152eb578081fd5b82356001600160401b0380821115615301578283fd5b9084019060408287031215615314578283fd5b61531c615b7e565b82358281111561532a578485fd5b8301601f8101881361533a578485fd5b8035602061534a614d4783615bd0565b82815281810190848301610160808602870185018e1015615369578a8bfd5b8a96505b858710156153955761537f8e83614fd2565b845260019690960195928401929081019061536d565b5050855250858101359250848311156153ac578687fd5b6153b88a848801615106565b8482015292965050508501359150808211156153d2578283fd5b506153df85828601614d27565b9150509250929050565b600080604083850312156153fb578182fd5b82356001600160401b03811115615410578283fd5b61541c85828601615106565b95602094909401359450505050565b615446828251805160ff908116835260209182015116910152565b60208101516154686040840182805160ff908116835260209182015116910152565b50604081015160ff8082511660808501528060208301511660a08501528060408301511660c08501528060608301511660e0850152806080830151166101008501528060a083015116610120850152505060608101516154cd61014084018215159052565b505050565b600060808084016154f4858551805160ff908116835260209182015116910152565b602084810151604087810185905281519384905260a0939183019184890190875b8181101561554857615538838651805160ff908116835260209182015116910152565b9385019391830191600101615515565b50508188015192506060898203818b0152818451808452868401915086860195508993505b808410156155db578551805160ff908116845288820151805182168a860152808a015182168886015287810151821686860152850151168a840152858101516155ba8a85018260ff169052565b50830151151560c0830152948601946001939093019260e09091019061556d565b509a9950505050505050505050565b80511515825260ff602082015116602083015260ff60408201511660408301525050565b60008351615620818460208801615dd2565b835190830190615634818360208801615dd2565b01949350505050565b6000835161564f818460208801615dd2565b835190830190615663818360208801615dd2565b651e17b9bb339f60d11b9101908152600601949350505050565b6d093c726563742066696c6c3d272360901b815285516000906156a781600e850160208b01615dd2565b642720783d2760d81b600e9184019182015286516156cc816013840160208b01615dd2565b642720793d2760d81b6013929091019182015285516156f2816018840160208a01615dd2565b6927206865696768743d2760b01b60189290910191820152845161571d816022840160208901615dd2565b68272077696474683d2760b81b60229290910191820152835161574781602b840160208801615dd2565b615760602b828401016313979f0560e11b815260040190565b9998505050505050505050565b7101e39bb33903b34b2bba137bc1e93981018160751b81526000855161579a816012850160208a01615dd2565b600160fd1b60129184019182015285516157bb816013840160208a01615dd2565b68272077696474683d2760b81b6013929091019182015284516157e581601c840160208901615dd2565b6927206865696768743d2760b01b601c92909101918201528351615810816026840160208801615dd2565b7f2720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323030302f602692909101918201527f7376672720786d6c6e733a786c696e6b3d27687474703a2f2f7777772e77332e60468201527037b93397989c9c9c97bc3634b735939f0560791b60668201526077019695505050505050565b60208152600082518060208401526158a7816040850160208701615dd2565b601f01601f19169190910160400192915050565b6020808252602e908201527f444e5f4445434f4445523a415247554d454e54533a206c656e677468206f662060408201526d3230ba309036bab9ba103132901b60911b606082015260800190565b602081526000825161044060208401526159276104608401826154d2565b9050602084015161594b6040850182805160ff908116835260209182015116910152565b50604084015161595e608085018261542b565b506060840151805160ff9081166101e0860152602082015116610200850152506080840151615992610220850182516155ea565b60208101516159a56102808601826155ea565b5060408101516159b96102e08601826155ea565b5060608101516159cd6103408601826155ea565b5060808101516159e16103a08601826155ea565b5060a001516159f46104008501826155ea565b509392505050565b6020808252825160408383015280516060840181905260009291820190839060808601905b80831015615a4b57615a3482855161542b565b610160820191508484019350600183019250615a21565b5092860151858403601f1901604087015292615a6781856154d2565b979650505050505050565b6000602080835260408084018551838487015281815180845260608801915085830193508692505b80831015615ad157615abd828551805160ff908116835260209182015116910152565b928501926001929092019190840190615a9a565b50979650505050505050565b60208152600061014060208301846154d2565b60405160a081016001600160401b0381118282101715615b1257615b12615eed565b60405290565b60405160c081016001600160401b0381118282101715615b1257615b12615eed565b604051608081016001600160401b0381118282101715615b1257615b12615eed565b604051606081016001600160401b0381118282101715615b1257615b12615eed565b604080519081016001600160401b0381118282101715615b1257615b12615eed565b604051601f8201601f191681016001600160401b0381118282101715615bc857615bc8615eed565b604052919050565b60006001600160401b03821115615be957615be9615eed565b5060051b60200190565b600081810b83820b82821282607f03821381151615615c1457615c14615ec1565b82607f19038212811615615c2a57615c2a615ec1565b50019392505050565b600061ffff80831681851680830382111561563457615634615ec1565b60008219821115615c6357615c63615ec1565b500190565b600060ff821660ff84168060ff03821115615c8557615c85615ec1565b019392505050565b600061ffff80841680615ca257615ca2615ed7565b92169190910492915050565b600082615cbd57615cbd615ed7565b500490565b600061ffff80831681851681830481118215151615615ce357615ce3615ec1565b02949350505050565b6000816000190483118215151615615d0657615d06615ec1565b500290565b600060ff821660ff84168160ff0481118215151615615d2c57615d2c615ec1565b029392505050565b600081810b83820b8281128015607f19830184121615615d5657615d56615ec1565b81607f018313811615615d6b57615d6b615ec1565b5090039392505050565b600061ffff83811690831681811015615d9057615d90615ec1565b039392505050565b600082821015615daa57615daa615ec1565b500390565b600060ff821660ff841680821015615dc957615dc9615ec1565b90039392505050565b60005b83811015615ded578181015183820152602001615dd5565b83811115615dfc576000848401525b50505050565b600081810b607f19811415615e1957615e19615ec1565b6000190192915050565b600081615e3257615e32615ec1565b506000190190565b600081810b607f811415615e5057615e50615ec1565b60010192915050565b600061ffff80831681811415615e7157615e71615ec1565b6001019392505050565b6000600019821415615e8f57615e8f615ec1565b5060010190565b600060ff821660ff811415615e5057615e50615ec1565b600082615ebc57615ebc615ed7565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122033f8b1fd0425c0b86e636873b94eb93f4c8a2c5c84acf4f34172e7aefc36467764736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806381e8c61f1461005c578063b4e1f09e14610085578063bd16de31146100a5578063cde5539f146100c5578063dc9efae7146100e5575b600080fd5b61006f61006a36600461524d565b610105565b60405161007c9190615909565b60405180910390f35b61009861009336600461524d565b61011c565b60405161007c9190615a72565b6100b86100b33660046153e9565b610134565b60405161007c9190615888565b6100d86100d336600461524d565b610147565b60405161007c91906159fc565b6100f86100f33660046152d9565b610158565b60405161007c9190615add565b61010d614af7565b6101168261016a565b92915050565b60408051602081019091526060815261011682610458565b60606101408383610530565b9392505050565b61014f614b43565b610116826105ce565b610160614b59565b61014083836107c9565b610172614af7565b61017b826108db565b9150600260ff16826000815181106101a357634e487b7160e01b600052603260045260246000fd5b016020015160f81c146101b557600080fd5b81600b815181106101d657634e487b7160e01b600052603260045260246000fd5b01602090810151606083015160f89190911c9052604080518082019091526004808252636e75676760e01b9190920152610227906102229061021990600d615d98565b8490600261099c565b610aae565b81602001819052506102cb6102c6604051806040016040528060048152602001636e75676760e01b815250518460048151811061027457634e487b7160e01b600052603260045260246000fd5b0160200151610286919060f81c615d98565b6002856003815181106102a957634e487b7160e01b600052603260045260246000fd5b01602001516102bb919060f81c615d0b565b85919060ff1661099c565b610b6f565b8160800181905250610337826007815181106102f757634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b8360088151811061032357634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916610e6d565b8160000151600001819052506103c26103bd604051806040016040528060048152602001636e75676760e01b815250518460028151811061038857634e487b7160e01b600052603260045260246000fd5b016020015161039a919060f81c615d98565b6006856001815181106102a957634e487b7160e01b600052603260045260246000fd5b610e86565b81600001516040018190525061044d610448604051806040016040528060048152602001636e75676760e01b815250518460068151811061041357634e487b7160e01b600052603260045260246000fd5b0160200151610425919060f81c615d98565b6002856005815181106102a957634e487b7160e01b600052603260045260246000fd5b610fe2565b815160200152919050565b604080516020810190915260608152610470826108db565b9150600060ff168260008151811061049857634e487b7160e01b600052603260045260246000fd5b016020015160f81c146104aa57600080fd5b610529610524604051806040016040528060048152602001636e75676760e01b81525051846002815181106104ef57634e487b7160e01b600052603260045260246000fd5b0160200151610501919060f81c615d98565b6002856001815181106102a957634e487b7160e01b600052603260045260246000fd5b611138565b8152919050565b81515160609060009061054790849060ff16615cec565b9050600061055482611247565b61055d83611247565b61056684611247565b61056f85611247565b604051602001610582949392919061576d565b6040516020818303038152906040529050600061059f8686611360565b905081816040516020016105b492919061563d565b604051602081830303815290604052935050505092915050565b6105d6614b43565b6105df826108db565b9150600160ff168260008151811061060757634e487b7160e01b600052603260045260246000fd5b016020015160f81c1461061957600080fd5b610698610693604051806040016040528060048152602001636e75676760e01b815250518460048151811061065e57634e487b7160e01b600052603260045260246000fd5b0160200151610670919060f81c615d98565b6009856003815181106102a957634e487b7160e01b600052603260045260246000fd5b6115d2565b81600001819052506106e56103bd604051806040016040528060048152602001636e75676760e01b815250518460028151811061038857634e487b7160e01b600052603260045260246000fd5b816020015160400181905250610715826007815181106102f757634e487b7160e01b600052603260045260246000fd5b8160200151600001819052506107bc610448604051806040016040528060048152602001636e75676760e01b815250518460068151811061076657634e487b7160e01b600052603260045260246000fd5b0160200151610778919060f81c615d98565b600260ff168560058151811061079e57634e487b7160e01b600052603260045260246000fd5b01602001516107b0919060f81c615cc2565b85919061ffff1661099c565b6020808301510152919050565b6107d1614b59565b600082516001600160401b038111156107fa57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561083357816020015b610820614b80565b8152602001906001900390816108185790505b50905060005b83518161ffff1610156108c85760008061087e868461ffff168151811061087057634e487b7160e01b600052603260045260246000fd5b602002602001015188611803565b9150915081848461ffff16815181106108a757634e487b7160e01b600052603260045260246000fd5b602090810291909101015295508190506108c081615e59565b915050610839565b506108d381856119c9565b949350505050565b6060600d8251116108eb57600080fd5b610944604051806040016040528060048152602001636e75676760e01b81525061093e6000604051806040016040528060048152602001636e75676760e01b815250518661099c9092919063ffffffff16565b90612923565b61094d57600080fd5b610116604051806040016040528060048152602001636e75676760e01b81525051604051806040016040528060048152602001636e75676760e01b8152505184516109989190615d98565b8491905b6060816109aa81601f615c50565b10156109ee5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064015b60405180910390fd5b6109f88284615c50565b84511015610a3c5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016109e5565b606082158015610a5b5760405191506000825260208201604052610aa5565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610a94578051835260209283019201610a7c565b5050858452601f01601f1916604052505b50949350505050565b610ab6614bad565b8151600214610b1f5760405162461bcd60e51b815260206004820152602f60248201527f444e5f4445434f4445523a434f4f5244494e4154453a206c656e677468206f6660448201526e103230ba309036bab9ba103132901960891b60648201526084016109e5565b61011682600081518110610b4357634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b8360018151811061032357634e487b7160e01b600052603260045260246000fd5b610b77614bc4565b8151610b8590600290615ead565b15610bec5760405162461bcd60e51b815260206004820152603160248201527f444e5f4445434f4445523a455850414e44455247524f55503a206c656e677468604482015270081bd98811105510481a5b9d985b1a5a59607a1b60648201526084016109e5565b60005b82518161ffff161015610e6757828161ffff1681518110610c2057634e487b7160e01b600052603260045260246000fd5b60209101015160f81c60521415610c5357610c49610c448461ffff8416600261099c565b612987565b6020830152610e55565b828161ffff1681518110610c7757634e487b7160e01b600052603260045260246000fd5b60209101015160f81c60721415610ca557610c9b610c448461ffff8416600261099c565b6060830152610e55565b828161ffff1681518110610cc957634e487b7160e01b600052603260045260246000fd5b60209101015160f81c604c1415610cf457610ced610c448461ffff8416600261099c565b8252610e55565b828161ffff1681518110610d1857634e487b7160e01b600052603260045260246000fd5b60209101015160f81c606c1415610d4657610d3c610c448461ffff8416600261099c565b6040830152610e55565b828161ffff1681518110610d6a57634e487b7160e01b600052603260045260246000fd5b60209101015160f81c60551415610d9d57610d93610d8e8461ffff8416600261099c565b612a62565b6080830152610e55565b828161ffff1681518110610dc157634e487b7160e01b600052603260045260246000fd5b60209101015160f81c60441415610def57610de5610d8e8461ffff8416600261099c565b60a0830152610e55565b60405162461bcd60e51b815260206004820152603560248201527f444e5f4445434f4445523a455850414e44455247524f55503a20696e76616c696044820152741908195e1c185b99195c881d1e5c1948199bdd5b99605a1b60648201526084016109e5565b610e60600282615c33565b9050610bef565b50919050565b610e75614bad565b60f892831c8152911c602082015290565b8051606090610e9790600690615ead565b15610ef75760405162461bcd60e51b815260206004820152602a60248201527f444e5f4445434f4445523a434f4c4f52533a206c656e677468206f66206461746044820152690309036bab9ba103132960b51b60648201526084016109e5565b8151610f0590600690615cae565b6001600160401b03811115610f2a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f6357816020015b610f50614c18565b815260200190600190039081610f485790505b5090506000805b83518161ffff161015610fdb57610f8f610f8a8561ffff8416600661099c565b612adb565b8383610f9a81615e59565b945061ffff1681518110610fbe57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610fd4600682615c33565b9050610f6a565b5050919050565b8051606090610ff390600290615ead565b156110545760405162461bcd60e51b815260206004820152602b60248201527f444e5f4445434f4445523a47524f5550533a206c656e677468206f662064617460448201526a309036bab9ba103132901b60a91b60648201526084016109e5565b815161106290600290615cae565b6001600160401b0381111561108757634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156110c057816020015b6110ad614bad565b8152602001906001900390816110a55790505b5090506000805b83518161ffff161015610fdb576110ec6110e78561ffff8416600261099c565b612cad565b83836110f781615e59565b945061ffff168151811061111b57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152611131600282615c33565b90506110c7565b805160609061114990600290615ead565b156111665760405162461bcd60e51b81526004016109e5906158bb565b815161117490600290615cae565b6001600160401b0381111561119957634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156111d257816020015b6111bf614bad565b8152602001906001900390816111b75790505b5090506000805b83518160ff161015610fdb576111fc6111f78560ff8416600261099c565b612d7b565b838361120781615e96565b945060ff168151811061122a57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152611240600282615c68565b90506111d9565b60608161126b5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611295578061127f81615e7b565b915061128e9050600a83615cae565b915061126f565b6000816001600160401b038111156112bd57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156112e7576020820181803683370190505b5090505b84156108d3576112fc600183615d98565b9150611309600a86615ead565b611314906030615c50565b60f81b81838151811061133757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611359600a86615cae565b94506112eb565b6060600061137961137085612e2a565b602001516130ea565b90506000805b6113888361315d565b156115c95785515160ff838116911614156113af57806113a781615e96565b915050600091505b60006113ba846131fd565b6020015160ff161180156113ed575085515160ff16826113d9856131fd565b602001516113e79190615c68565b60ff1610155b156114df57855151600090611403908490615daf565b9050846114778860400151611417876131fd565b6000015160ff168151811061143c57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151888660ff166114579190615cec565b6114648a60ff8816615cec565b8a6114728160ff8916615cec565b61328f565b60405160200161148892919061560e565b60408051601f198184030181529190528751519095506114a9908490615daf565b6114b2856131fd565b6020018181516114c29190615daf565b60ff16905250816114d281615e96565b92505060009250506113af565b6114e8836131fd565b6020015160ff166114f85761137f565b60006115078660ff8516615cec565b905060006115188760ff8516615cec565b9050866000611526876131fd565b602001516115379060ff168a615cec565b9050876115858b6040015161154b8a6131fd565b6000015160ff168151811061157057634e487b7160e01b600052603260045260246000fd5b6020026020010151602001518686868661328f565b60405160200161159692919061560e565b60405160208183030381529060405297506115b0876131fd565b602001516115be9087615c68565b95505050505061137f565b50505092915050565b80516060906115e390600990615ead565b156116005760405162461bcd60e51b81526004016109e5906158bb565b815160009061161190600990615cae565b6001600160401b0381111561163657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561166f57816020015b61165c614c49565b8152602001906001900390816116545790505b5090506000805b84518161ffff1610156116e75761169b6116968661ffff8416600961099c565b61330d565b83836116a681615e59565b945061ffff16815181106116ca57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526116e0600982615c33565b9050611676565b5081516001600160401b0381111561170f57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561174857816020015b611735614c49565b81526020019060019003908161172d5790505b50925060005b82518161ffff1610156117fb57828161ffff168151811061177f57634e487b7160e01b600052603260045260246000fd5b602002602001015184848361ffff16815181106117ac57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516000015160ff16815181106117dd57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806117f390615e59565b91505061174e565b505050919050565b61180b614b80565b611813614b43565b8351604090810151835190910152600061182d8585613451565b60ff1611156118435761184084846134c1565b93505b600061184f858561396d565b60ff1611156118655761186284846139a5565b93505b825160608501515181516000929160ff1690811061189357634e487b7160e01b600052603260045260246000fd5b60200260200101516020015190506000604051806040016040528087602001516000015184600001516118c69190615daf565b60ff16815260200187602001516020015184602001516118e69190615daf565b60ff16815250905085604001516060015115611991576040805180820182529087015160200151518251829161191b91615c68565b60ff16815260200187604001516020015160200151836020015161193f9190615c68565b60ff168152508660400151602001819052508560400151856000015187606001516000015160ff168151811061198557634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b85515184515285516020908101518551820152808501829052865101516119b79061434d565b604085015250839150505b9250929050565b6119d1614b59565b60006040518060600160405280846020015181526020016040518060400160405280600060ff168152602001600060ff168152508152602001611a1b85602001516020015161434d565b90528051516020015190915060009060ff166001600160401b03811115611a5257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611a8557816020015b6060815260200190600190039081611a705790505b508251518051602090910151919250600091611aa79160ff9081169116615cc2565b61ffff166001600160401b03811115611ad057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611b0957816020015b611af6614c18565b815260200190600190039081611aee5790505b5060408051608080820183526000808352835191820184526045808352602083810182905283860191909152606080840183905290840192909252600193830184905290820192909252919250908282611b6281615e59565b935061ffff1681518110611b8657634e487b7160e01b600052603260045260246000fd5b602090810291909101015260408051610101808252612040820190925260009181602001602082028036833701905050905060005b8551516020015160ff908116908216101561200b578551515160ff166001600160401b03811115611bfc57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611c3557816020015b611c22614c18565b815260200190600190039081611c1a5790505b50858260ff1681518110611c5957634e487b7160e01b600052603260045260246000fd5b602002602001018190525060005b8651515160ff9081169082161015611ff857611c8687604001516143a6565b80611c9d5750611c998760400151614418565b6001145b15611fe657611caf8760400151614457565b60408801819052602e90611cc290614500565b5160ff161415611d525784600081518110611ced57634e487b7160e01b600052603260045260246000fd5b6020026020010151868360ff1681518110611d1857634e487b7160e01b600052603260045260246000fd5b60200260200101518260ff1681518110611d4257634e487b7160e01b600052603260045260246000fd5b6020026020010181905250611fe6565b6000876000015160400151611d6a8960400151614500565b6000015160ff1681518110611d8f57634e487b7160e01b600052603260045260246000fd5b602002602001015190508381600001516001611dab9190615c68565b60ff1681518110611dcc57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1660001415611f1f57600085611dec81615e59565b9650905060405180608001604052808260ff16815260200183602001518152602001836040015160ff16815260200160011515815250878261ffff1681518110611e4657634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808583600001516001611e649190615c68565b60ff1681518110611e8557634e487b7160e01b600052603260045260246000fd5b61ffff9283166020918202929092010152875188918316908110611eb957634e487b7160e01b600052603260045260246000fd5b6020026020010151888560ff1681518110611ee457634e487b7160e01b600052603260045260246000fd5b60200260200101518460ff1681518110611f0e57634e487b7160e01b600052603260045260246000fd5b602002602001018190525050611fe4565b60405180608001604052808583600001516001611f3c9190615c68565b60ff1681518110611f5d57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff16815260200182602001518152602001826040015160ff16815260200160011515815250878460ff1681518110611fae57634e487b7160e01b600052603260045260246000fd5b60200260200101518360ff1681518110611fd857634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b505b80611ff081615e96565b915050611c67565b508061200381615e96565b915050611bbb565b5060005b88518160ff161015612684576000898260ff168151811061204057634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006101016001600160401b0381111561207457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561209d578160200160208202803683370190505b5060208084015101519091505b602080840151810151845151909101516120c49190615c68565b60ff168160ff16101561266e576020830151515b602084015151845151516120ec9190615c68565b60000b8160000b121561265b5760408401518190612109906143a6565b156126475761211b8560400151614457565b6040860181905261212b90614500565b6020015160ff16612149578161214081615e02565b92505050612649565b602e60ff1661215b8660400151614500565b5160ff16141561216b5750612649565b846000015160400151516121828660400151614500565b5160ff16106121cd5760405162461bcd60e51b8152602060048201526017602482015276031b7b637b91024a21037baba1037b3103137bab732399604d1b60448201526064016109e5565b60008560000151604001516121e58760400151614500565b6000015160ff168151811061220a57634e487b7160e01b600052603260045260246000fd5b602002602001015190508060600151612224575050612649565b8a8460ff168151811061224757634e487b7160e01b600052603260045260246000fd5b60200260200101518260ff168151811061227157634e487b7160e01b600052603260045260246000fd5b60200260200101516040015160ff16816040015160ff161115612645576000806122f78d8760ff16815181106122b757634e487b7160e01b600052603260045260246000fd5b60200260200101518560ff16815181106122e157634e487b7160e01b600052603260045260246000fd5b602002602001015160200151846020015161455d565b9150915080156123f85760008b61230d81615e59565b9c50905060405180608001604052808260ff168152602001848152602001856040015160ff168152602001600115158152508d8261ffff168151811061236357634e487b7160e01b600052603260045260246000fd5b60200260200101819052508c8161ffff168151811061239257634e487b7160e01b600052603260045260246000fd5b60200260200101518e8860ff16815181106123bd57634e487b7160e01b600052603260045260246000fd5b60200260200101518660ff16815181106123e757634e487b7160e01b600052603260045260246000fd5b602002602001018190525050612642565b82518790612407906001615c68565b60ff168151811061242857634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff166000141561257d5760008b61244881615e59565b9c50905060405180608001604052808260ff168152602001848152602001856040015160ff168152602001600115158152508d8261ffff168151811061249e57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508c8161ffff16815181106124cd57634e487b7160e01b600052603260045260246000fd5b60200260200101518e8860ff16815181106124f857634e487b7160e01b600052603260045260246000fd5b60200260200101518660ff168151811061252257634e487b7160e01b600052603260045260246000fd5b60200260200101819052508088856000015160016125409190615c68565b60ff168151811061256157634e487b7160e01b600052603260045260246000fd5b602002602001019061ffff16908161ffff168152505050612642565b6040518060800160405280888560000151600161259a9190615c68565b60ff16815181106125bb57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff16815260200184602001518152602001846040015160ff168152602001600115158152508d8760ff168151811061260c57634e487b7160e01b600052603260045260246000fd5b60200260200101518560ff168151811061263657634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b50505b505b505b8061265381615e3a565b9150506120d8565b508061266681615e96565b9150506120aa565b505050808061267c90615e96565b91505061200f565b50602080880151519081015190516000916126a59160ff9182169116615cc2565b61ffff166001600160401b038111156126ce57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561270757816020015b6126f4614bad565b8152602001906001900390816126ec5790505b5090506000805b6020808b015151015160ff1661ffff821610156128165760005b60208b0151515160ff1661ffff82161015612803576040518060400160405280898461ffff168151811061276c57634e487b7160e01b600052603260045260246000fd5b60200260200101518361ffff168151811061279757634e487b7160e01b600052603260045260246000fd5b60200260200101516000015160ff168152602001600160ff16815250848461ffff16815181106127d757634e487b7160e01b600052603260045260246000fd5b602002602001018190525082806127ed90615e59565b93505080806127fb90615e59565b915050612728565b508061280e81615e59565b91505061270e565b5060008461ffff166001600160401b0381111561284357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561287c57816020015b612869614c18565b8152602001906001900390816128615790505b50905060005b8561ffff168161ffff16101561290057868161ffff16815181106128b657634e487b7160e01b600052603260045260246000fd5b6020026020010151828261ffff16815181106128e257634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806128f890615e59565b915050612882565b506040890152506020808801919091529690960151518552509295945050505050565b81518151600091600191811480831461293f576000925061297d565b600160208701838101602088015b60028483851001141561297857805183511461296c5760009650600093505b6020928301920161294d565b505050505b5090949350505050565b61298f614c83565b81516002146129fa5760405162461bcd60e51b815260206004820152603160248201527f444e5f4445434f4445523a455850414e4445523a206c656e677468206f6620656044820152703c3830b73232b91036bab9ba103132901960791b60648201526084016109e5565b81600081518110612a1b57634e487b7160e01b600052603260045260246000fd5b0160209081015160f81c90820152815182906001908110612a4c57634e487b7160e01b600052603260045260246000fd5b016020015160f81c604082015260018152919050565b612a6a614c83565b81516002146129fa5760405162461bcd60e51b815260206004820152603760248201527f444e5f4445434f4445523a56455850414e4445523a206c656e677468206f66206044820152763b32b93a1032bc3830b73232b91036bab9ba103132901960491b60648201526084016109e5565b612ae3614c18565b8151600614612b655760405162461bcd60e51b815260206004820152604260248201527f444e5f4445434f4445523a434f4c4f523a206c656e677468206f66206279746560448201527f73206d75737420626520436f6e7374616e74732e434f4c4f525f425954455f4c60648201526122a760f11b608482015260a4016109e5565b6001606082015281518290600090612b8d57634e487b7160e01b600052603260045260246000fd5b016020015160f81c8152815182906001908110612bba57634e487b7160e01b600052603260045260246000fd5b016020015160f81c6040820152815182906002908110612bea57634e487b7160e01b600052603260045260246000fd5b016020908101519082015160f89190911c9052815182906003908110612c2057634e487b7160e01b600052603260045260246000fd5b016020908101518282015160f89190911c910152815182906004908110612c5757634e487b7160e01b600052603260045260246000fd5b016020908101519082015160f89190911c604090910152815182906005908110612c9157634e487b7160e01b600052603260045260246000fd5b016020908101519082015160f89190911c606090910152919050565b612cb5614bad565b8151600214612d1a5760405162461bcd60e51b815260206004820152602b60248201527f444e5f4445434f4445523a47524f55503a206c656e677468206f662067726f7560448201526a381036bab9ba103132901960a91b60648201526084016109e5565b81600081518110612d3b57634e487b7160e01b600052603260045260246000fd5b016020015160f81c8152815182906001908110612d6857634e487b7160e01b600052603260045260246000fd5b0160209081015160f81c90820152919050565b612d83614bad565b8151600214612dfa5760405162461bcd60e51b815260206004820152603b60248201527f444e5f4445434f4445523a464541545552453a206c656e677468206f6620646160448201527f7461206d75737420626520464541545552455f425954455f4c454e000000000060648201526084016109e5565b81600081518110612e1b57634e487b7160e01b600052603260045260246000fd5b016020015160f81c8152919050565b612e32614b59565b60008260200151516001600160401b03811115612e5f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612e9857816020015b612e85614bad565b815260200190600190039081612e7d5790505b5090506000612eaa846020015161434d565b905060006001905060008560200151600081518110612ed957634e487b7160e01b600052603260045260246000fd5b602002602001015160000151905060005b612ef3846143a6565b15612f9e57612f0184614457565b9350612f0c84614500565b5160ff83811691161415612f375760ff8381161015612f375782612f2f81615e96565b935050612eea565b6040805180820190915260ff8084168252841660208201528582612f5a81615e59565b935061ffff1681518110612f7e57634e487b7160e01b600052603260045260246000fd5b602002602001018190525060019250612f9684614500565b519150612eea565b6040805180820190915260ff8084168252841660208201528582612fc181615e59565b935061ffff1681518110612fe557634e487b7160e01b600052603260045260246000fd5b602002602001018190525060008161ffff166001600160401b0381111561301c57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561305557816020015b613042614bad565b81526020019060019003908161303a5790505b50905060005b8261ffff168161ffff1610156130d957868161ffff168151811061308f57634e487b7160e01b600052603260045260246000fd5b6020026020010151828261ffff16815181106130bb57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806130d190615e59565b91505061305b565b506020880152509495945050505050565b6130f2614ca3565b60008251116131525760405162461bcd60e51b815260206004820152602660248201527f4e455753494d504c454f52444552454447524f5550533a2067726f7570206f666044820152650206c656e20360d41b60648201526084016109e5565b602081019190915290565b602081015151815160009190613174906001615c33565b61ffff161015613182575060015b80156131ed57606082015160ff166131ad576000604083018190528252600160609092019190915290565b6131b6826131fd565b6020015160ff16826040018181516131ce9190615c33565b61ffff169052508151826131e182615e59565b61ffff16905250919050565b60208201515161ffff1690915290565b613205614bad565b6000826020015151116132545760405162461bcd60e51b8152602060048201526017602482015276063757272656e743a2067726f7570206f66206c656e203604c1b60448201526064016109e5565b8160200151826000015161ffff168151811061328057634e487b7160e01b600052603260045260246000fd5b60200260200101519050919050565b60608581015160ff166132b15750604080516020810190915260008152613304565b6132ba866146fc565b6132c386611247565b6132cc86611247565b6132d586611247565b6132de86611247565b6040516020016132f295949392919061567d565b60405160208183030381529060405290505b95945050505050565b613315614c49565b81516009146133a35760405162461bcd60e51b815260206004820152604e60248201527f444e5f4445434f4445523a42415345464541545552453a206c656e677468206f60448201527f662064617461206d75737420626520436f6e7374616e74732e424153455f464560648201526d20aa2aa922afa12caa22afa622a760911b608482015260a4016109e5565b816000815181106133c457634e487b7160e01b600052603260045260246000fd5b0160200151815160f89190911c9052815161342690839060019081106133fa57634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b8360028151811061032357634e487b7160e01b600052603260045260246000fd5b602082015261344061343b836003600661099c565b614762565b604082015260016060820152919050565b608082015151516000901561346e578061346a81615e96565b9150505b608083015160400151511561348b578061348781615e96565b9150505b60808301516020015151156134a857806134a481615e96565b9150505b608083015160600151511561011657806108d381615e96565b6134c9614af7565b6000806000856000015160200151516001600160401b038111156134fd57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561353657816020015b613523614bad565b81526020019060019003908161351b5790505b509050600061354c8760000151602001516130ea565b905060005b61355a826148ac565b1561391657613568826148d5565b9150600061357583614500565b90506000613586826000015161495a565b905060ff81166135c55781858461ffff16815181106135b557634e487b7160e01b600052603260045260246000fd5b6020026020010181905250613901565b8060ff16604c141561369857885160608b01515181516001929160ff169081106135ff57634e487b7160e01b600052603260045260246000fd5b602002602001015160400151600001516136199190615d34565b60808b0151516040015160ff90811684528a5160608d0151518151939a509092911690811061365857634e487b7160e01b600052603260045260246000fd5b602090810291909101810151604001515160ff169083015284518290869061ffff86169081106135b557634e487b7160e01b600052603260045260246000fd5b8060ff16606c141561372e57885160608b01515181516001929160ff169081106136d257634e487b7160e01b600052603260045260246000fd5b602002602001015160400151600001516136ec9190615d34565b60808b0151604090810151015160ff90811684528a5160608d0151518151939a509092911690811061365857634e487b7160e01b600052603260045260246000fd5b8060ff166052141561380a57885160608b01515181516001929160ff1690811061376857634e487b7160e01b600052603260045260246000fd5b602002602001015160400151602001516137829190615d34565b60808b0151602001516040015160ff90811684528a5160608d0151518151939950909291169081106137c457634e487b7160e01b600052603260045260246000fd5b60200260200101516040015160200151826020019060ff16908160ff168152505081858461ffff16815181106135b557634e487b7160e01b600052603260045260246000fd5b8060ff16607214156138a157885160608b01515181516001929160ff1690811061384457634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516020015161385e9190615d34565b60808b01516060908101516040015160ff90811685528b51918d0151518251939950919291169081106137c457634e487b7160e01b600052603260045260246000fd5b60405162461bcd60e51b815260206004820152602f60248201527f5f616464486f72697a6f6e74616c457870616e646572733a2073686f756c642060448201526e03737ba103430b83832b7101418949608d1b60648201526084016109e5565b5050808061390e90615e59565b915050613551565b508651602001829052865151518390613930908690615bf3565b61393a9190615bf3565b87515160ff9091169052602087015151613955908590615bf3565b602088015160ff919091169052509495945050505050565b6080808301510151516000901561398c578061398881615e96565b9150505b608083015160a00151511561011657806108d381615e96565b6139ad614af7565b815160608401515181516000929160ff169081106139db57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516060015160206139f79190615d0b565b60ff16836000015185606001516000015160ff1681518110613a2957634e487b7160e01b600052603260045260246000fd5b602002602001015160400151604001516020613a459190615d0b565b85516020015151613a599160ff1690615c50565b613a639190615c50565b6001600160401b03811115613a8857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613ac157816020015b613aae614bad565b815260200190600190039081613aa65790505b5090506000613ad78560000151602001516130ea565b60408051610120810182526000808252602080830182905292820181905260608201819052608080830182905260a0830182905260c0830182905260e08301829052610100830191909152888101510151909101519192509060ff1615613b6357600160408083019190915286515151608080890151015190910151613b5d9190615d0b565b60ff1681525b608086015160a001516020015160ff1615613ba3576001606082015285515151608087015160a0015160400151613b9a9190615d0b565b60ff1660208201525b8060400151158015613bb757508060600151155b15613bc757859350505050610116565b8451606087015151815160ff909116908110613bf357634e487b7160e01b600052603260045260246000fd5b6020908102919091010151604090810151015160ff908116608083015285516060880151518151919216908110613c3a57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516040908101516060015160ff1660a084015280518281526104208101909152600091816020015b613c75614bad565b815260200190600190039081613c6d5750506040805160208082526104208201909252919250600091908082015b613cab614bad565b815260200190600190039081613ca3575050600060c0850181905260e0850181905261010085018190529091505b613ce2856148ac565b1561403557836040015115613e5b57836000015160ff16856040015161ffff16108015613d285750885151518451613d1a9190615c68565b60ff16856040015161ffff16115b15613d8157613d3685614500565b60c0850180518491613d4782615e96565b60ff1660ff1681525060ff1681518110613d7157634e487b7160e01b600052603260045260246000fd5b6020026020010181905250613e5b565b60c084015160ff1615613e5b5760005b846080015160ff168160ff161015613e525760005b8560c0015160ff168160ff161015613e3f57838160ff1681518110613ddb57634e487b7160e01b600052603260045260246000fd5b60200260200101518887610100018051809190613df790615e96565b60ff1660ff1681525060ff1681518110613e2157634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080613e3790615e96565b915050613da6565b5080613e4a81615e96565b915050613d91565b50600060c08501525b836060015115613fd257836020015160ff16856040015161ffff16108015613e9f5750885151516020850151613e919190615c68565b60ff16856040015161ffff16115b15613ef857613ead85614500565b60e0850180518591613ebe82615e96565b60ff1660ff1681525060ff1681518110613ee857634e487b7160e01b600052603260045260246000fd5b6020026020010181905250613fd2565b60e084015160ff1615613fd25760005b8460a0015160ff168160ff161015613fc95760005b8560e0015160ff168160ff161015613fb657848160ff1681518110613f5257634e487b7160e01b600052603260045260246000fd5b60200260200101518887610100018051809190613f6e90615e96565b60ff1660ff1681525060ff1681518110613f9857634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080613fae90615e96565b915050613f1d565b5080613fc181615e96565b915050613f08565b50600060e08501525b613fdb85614500565b610100850180518891613fed82615e96565b60ff1660ff1681525060ff168151811061401757634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061402d90615e59565b915050613cd9565b5060c083015160ff16156141105760005b836080015160ff168160ff1610156141075760005b8460c0015160ff168160ff1610156140f457828160ff168151811061409057634e487b7160e01b600052603260045260246000fd5b602002602001015187866101000180518091906140ac90615e96565b60ff1660ff1681525060ff16815181106140d657634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806140ec90615e96565b91505061405b565b50806140ff81615e96565b915050614046565b50600060c08401525b60e083015160ff16156141ea5760005b8360a0015160ff168160ff1610156141e15760005b8460e0015160ff168160ff1610156141ce57838160ff168151811061416a57634e487b7160e01b600052603260045260246000fd5b6020026020010151878661010001805180919061418690615e96565b60ff1660ff1681525060ff16815181106141b057634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806141c690615e96565b915050614135565b50806141d981615e96565b915050614120565b50600060e08401525b600083610100015160ff166001600160401b0381111561421a57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561425357816020015b614240614bad565b8152602001906001900390816142385790505b50905060005b84610100015160ff168161ffff1610156142db57868161ffff168151811061429157634e487b7160e01b600052603260045260246000fd5b6020026020010151828261ffff16815181106142bd57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806142d390615e59565b915050614259565b508851602090810182905260a085015160808601518b515190920151909161430291615c68565b61430c9190615c68565b89515160ff9091166020918201526080850151818b0151909101516143319190615c68565b60208a81015160ff929092169101525096979650505050505050565b614355614ca3565b60008251116131525760405162461bcd60e51b815260206004820181905260248201527f4e45574f52444552454447524f5550533a2067726f7570206f66206c656e203060448201526064016109e5565b6020810151518151600091906143bd906001615c33565b61ffff1610156143cf57506001919050565b60208201515182516143e2906001615c33565b61ffff161415614413576143f582614500565b6020015160ff16826040015161ffff16101561441357506001919050565b919050565b6000816020015151826000015161ffff161061443657506000919050565b815160208301515161444c9161ffff1690615d98565b610116906001615c50565b61445f614ca3565b614468826143a6565b156144f057606082015160ff1661448f575060008152600160408201819052606082015290565b600061449a83614500565b9050806020015160ff16836040015161ffff16106144d1578251836144be82615e59565b61ffff16905250600160408401526144e9565b604083018051906144e182615e59565b61ffff169052505b5090919050565b5060208101515161ffff16815290565b614508614bad565b6000826020015151116132545760405162461bcd60e51b815260206004820152601d60248201527f5f63757272656e7447726f75703a2067726f7570206f66206c656e203000000060448201526064016109e5565b614565614ccb565b6000826060015160ff1660ff1415614582575081905060006119c2565b6040805160808082018352865160ff9081168352602080890151821681850152888501518216848601526060808a015183168186015285519384018652885183168085528983015184169285019290925288860151831695840195909552878501518216948301859052929391926000926145fc91615cc2565b606084015161460c9060ff615d75565b85516146189190615cc2565b6146229190615c33565b61462c9190615c8d565b9050600060ff836060015184602001516146469190615cc2565b60608501516146569060ff615d75565b86602001516146659190615cc2565b61466f9190615c33565b6146799190615c8d565b9050600060ff846060015185604001516146939190615cc2565b60608601516146a39060ff615d75565b87604001516146b29190615cc2565b6146bc9190615c33565b6146c69190615c8d565b6040805160808101825260ff95861681529385166020850152908416908301525060608101919091529660019650945050505050565b805160208083015160408085015160608087015183516001600160f81b031960f898891b81169782019790975294871b8616602186015291861b85166022850152941b90921660238201528151808203600401815260249091019091526101408161499e565b61476a614cf2565b815160061461478b5760405162461bcd60e51b81526004016109e5906158bb565b816000815181106147ac57634e487b7160e01b600052603260045260246000fd5b016020015160f81c81528151829060019081106147d957634e487b7160e01b600052603260045260246000fd5b0160209081015160f81c9082015281518290600290811061480a57634e487b7160e01b600052603260045260246000fd5b016020015160f81c604082015281518290600390811061483a57634e487b7160e01b600052603260045260246000fd5b016020015160f81c606082015281518290600490811061486a57634e487b7160e01b600052603260045260246000fd5b016020015160f81c608082015281518290600590811061489a57634e487b7160e01b600052603260045260246000fd5b016020015160f81c60a0820152919050565b6020810151518151600091906148c3906001615c33565b61ffff16101561441357506001919050565b6148dd614ca3565b6148e6826148ac565b156144f057606082015160ff1661490d575060006040820181905281526001606082015290565b600061491883614500565b83519091508361492782615e59565b61ffff1661ffff1681525050806020015160ff168360400181815161494c9190615c33565b61ffff169052509192915050565b60008160ff166052148061497157508160ff166072145b8061497f57508160ff16604c145b8061498d57508160ff16606c145b15614996575090565b506000919050565b606060005b82518160ff161015610e6757816149ea848360ff16815181106149d657634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916614a1f565b6040516020016149fb92919061560e565b60405160208183030381529060405291508080614a1790615e96565b9150506149a3565b6040805160028082528183019092526060916000919060208201818036833701905050905060025b8015614af0576f181899199a1a9b1b9c1cb0b131b232b360811b600f60f886901c1660208110614a8757634e487b7160e01b600052603260045260246000fd5b1a60f81b82614a97600184615d98565b81518110614ab557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506004846001600160f81b031916901c93508080614ae890615e23565b915050614a47565b5092915050565b6040518060a00160405280614b0a614b59565b8152602001614b17614bad565b8152602001614b24614c49565b8152602001614b31614bad565b8152602001614b3e614bc4565b905290565b604051806040016040528060608152602001614b3e5b6040518060600160405280614b6c614bad565b815260200160608152602001606081525090565b6040518060600160405280614b93614b59565b8152602001614ba0614bad565b8152602001614b3e614ca3565b604080518082019091526000808252602082015290565b6040518060c00160405280614bd7614c83565b8152602001614be4614c83565b8152602001614bf1614c83565b8152602001614bfe614c83565b8152602001614c0b614c83565b8152602001614b3e614c83565b6040518060800160405280600060ff168152602001614c35614ccb565b815260006020820181905260409091015290565b6040518060800160405280614c5c614bad565b8152602001614c69614bad565b8152602001614c76614cf2565b8152600060209091015290565b604080516060810182526000808252602082018190529181019190915290565b6040805160808101825260008082526060602083018190529282018190529181019190915290565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b600082601f830112614d37578081fd5b81356020614d4c614d4783615bd0565b615ba0565b80838252828201915082860187848660051b8901011115614d6b578586fd5b855b85811015614ea95781356001600160401b0380821115614d8b578889fd5b90890190818b03610440601f1982011215614da457898afd5b614dac615af0565b8884013583811115614dbc578b8cfd5b614dca8e8b83880101615106565b82525060409250614ddd8d8486016150aa565b898201526080614def8e828701614fd2565b84830152614e018e6101e087016150aa565b606083015261024061021f1984011215614e19578b8cfd5b614e21615b18565b9250614e318e61022087016151ee565b8352614e418e61028087016151ee565b8a840152614e538e6102e087016151ee565b84840152614e658e61034087016151ee565b6060840152614e788e6103a087016151ee565b81840152614e8a8e61040087016151ee565b60a0840152810191909152865250509284019290840190600101614d6d565b5090979650505050505050565b600082601f830112614ec6578081fd5b81356020614ed6614d4783615bd0565b8281528181019085830160e080860288018501891015614ef4578687fd5b865b86811015614fb457828a0382811215614f0d578889fd5b614f15615b3a565b614f1e8561523c565b8152608080601f1984011215614f32578a8bfd5b614f3a615b3a565b9250614f4789870161523c565b83526040614f5681880161523c565b8a8501526060614f6781890161523c565b82860152614f7683890161523c565b81860152848b850152614f8b60a0890161523c565b82850152614f9b60c08901614fc2565b9084015250508652509385019391810191600101614ef6565b509198975050505050505050565b8035801515811461441357600080fd5b6000818303610160811215614fe5578182fd5b614fed615b3a565b9150614ff984846150aa565b825261500884604085016150aa565b602083015260c0607f198201121561501f57600080fd5b50615028615b18565b6150346080840161523c565b815261504260a0840161523c565b602082015261505360c0840161523c565b604082015261506460e0840161523c565b6060820152615076610100840161523c565b6080820152615088610120840161523c565b60a0820152604082015261509f6101408301614fc2565b606082015292915050565b6000604082840312156150bb578081fd5b604051604081018181106001600160401b03821117156150dd576150dd615eed565b6040529050806150ec8361523c565b81526150fa6020840161523c565b60208201525092915050565b600060808284031215615117578081fd5b61511f615b5c565b905061512b83836150aa565b81526040808301356001600160401b038082111561514857600080fd5b818501915085601f83011261515c57600080fd5b8135602061516c614d4783615bd0565b8083825282820191508286018a848660061b890101111561518c57600080fd5b600096505b848710156151b7576151a38b826150aa565b835260019690960195918301918701615191565b5080838901525050505060608501359150808211156151d557600080fd5b506151e285828601614eb6565b82840152505092915050565b6000606082840312156151ff578081fd5b615207615b5c565b905061521282614fc2565b81526152206020830161523c565b60208201526152316040830161523c565b604082015292915050565b803560ff8116811461441357600080fd5b6000602080838503121561525f578182fd5b82356001600160401b0380821115615275578384fd5b818501915085601f830112615288578384fd5b81358181111561529a5761529a615eed565b6152ac601f8201601f19168501615ba0565b915080825286848285010111156152c1578485fd5b80848401858401378101909201929092529392505050565b600080604083850312156152eb578081fd5b82356001600160401b0380821115615301578283fd5b9084019060408287031215615314578283fd5b61531c615b7e565b82358281111561532a578485fd5b8301601f8101881361533a578485fd5b8035602061534a614d4783615bd0565b82815281810190848301610160808602870185018e1015615369578a8bfd5b8a96505b858710156153955761537f8e83614fd2565b845260019690960195928401929081019061536d565b5050855250858101359250848311156153ac578687fd5b6153b88a848801615106565b8482015292965050508501359150808211156153d2578283fd5b506153df85828601614d27565b9150509250929050565b600080604083850312156153fb578182fd5b82356001600160401b03811115615410578283fd5b61541c85828601615106565b95602094909401359450505050565b615446828251805160ff908116835260209182015116910152565b60208101516154686040840182805160ff908116835260209182015116910152565b50604081015160ff8082511660808501528060208301511660a08501528060408301511660c08501528060608301511660e0850152806080830151166101008501528060a083015116610120850152505060608101516154cd61014084018215159052565b505050565b600060808084016154f4858551805160ff908116835260209182015116910152565b602084810151604087810185905281519384905260a0939183019184890190875b8181101561554857615538838651805160ff908116835260209182015116910152565b9385019391830191600101615515565b50508188015192506060898203818b0152818451808452868401915086860195508993505b808410156155db578551805160ff908116845288820151805182168a860152808a015182168886015287810151821686860152850151168a840152858101516155ba8a85018260ff169052565b50830151151560c0830152948601946001939093019260e09091019061556d565b509a9950505050505050505050565b80511515825260ff602082015116602083015260ff60408201511660408301525050565b60008351615620818460208801615dd2565b835190830190615634818360208801615dd2565b01949350505050565b6000835161564f818460208801615dd2565b835190830190615663818360208801615dd2565b651e17b9bb339f60d11b9101908152600601949350505050565b6d093c726563742066696c6c3d272360901b815285516000906156a781600e850160208b01615dd2565b642720783d2760d81b600e9184019182015286516156cc816013840160208b01615dd2565b642720793d2760d81b6013929091019182015285516156f2816018840160208a01615dd2565b6927206865696768743d2760b01b60189290910191820152845161571d816022840160208901615dd2565b68272077696474683d2760b81b60229290910191820152835161574781602b840160208801615dd2565b615760602b828401016313979f0560e11b815260040190565b9998505050505050505050565b7101e39bb33903b34b2bba137bc1e93981018160751b81526000855161579a816012850160208a01615dd2565b600160fd1b60129184019182015285516157bb816013840160208a01615dd2565b68272077696474683d2760b81b6013929091019182015284516157e581601c840160208901615dd2565b6927206865696768743d2760b01b601c92909101918201528351615810816026840160208801615dd2565b7f2720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323030302f602692909101918201527f7376672720786d6c6e733a786c696e6b3d27687474703a2f2f7777772e77332e60468201527037b93397989c9c9c97bc3634b735939f0560791b60668201526077019695505050505050565b60208152600082518060208401526158a7816040850160208701615dd2565b601f01601f19169190910160400192915050565b6020808252602e908201527f444e5f4445434f4445523a415247554d454e54533a206c656e677468206f662060408201526d3230ba309036bab9ba103132901b60911b606082015260800190565b602081526000825161044060208401526159276104608401826154d2565b9050602084015161594b6040850182805160ff908116835260209182015116910152565b50604084015161595e608085018261542b565b506060840151805160ff9081166101e0860152602082015116610200850152506080840151615992610220850182516155ea565b60208101516159a56102808601826155ea565b5060408101516159b96102e08601826155ea565b5060608101516159cd6103408601826155ea565b5060808101516159e16103a08601826155ea565b5060a001516159f46104008501826155ea565b509392505050565b6020808252825160408383015280516060840181905260009291820190839060808601905b80831015615a4b57615a3482855161542b565b610160820191508484019350600183019250615a21565b5092860151858403601f1901604087015292615a6781856154d2565b979650505050505050565b6000602080835260408084018551838487015281815180845260608801915085830193508692505b80831015615ad157615abd828551805160ff908116835260209182015116910152565b928501926001929092019190840190615a9a565b50979650505050505050565b60208152600061014060208301846154d2565b60405160a081016001600160401b0381118282101715615b1257615b12615eed565b60405290565b60405160c081016001600160401b0381118282101715615b1257615b12615eed565b604051608081016001600160401b0381118282101715615b1257615b12615eed565b604051606081016001600160401b0381118282101715615b1257615b12615eed565b604080519081016001600160401b0381118282101715615b1257615b12615eed565b604051601f8201601f191681016001600160401b0381118282101715615bc857615bc8615eed565b604052919050565b60006001600160401b03821115615be957615be9615eed565b5060051b60200190565b600081810b83820b82821282607f03821381151615615c1457615c14615ec1565b82607f19038212811615615c2a57615c2a615ec1565b50019392505050565b600061ffff80831681851680830382111561563457615634615ec1565b60008219821115615c6357615c63615ec1565b500190565b600060ff821660ff84168060ff03821115615c8557615c85615ec1565b019392505050565b600061ffff80841680615ca257615ca2615ed7565b92169190910492915050565b600082615cbd57615cbd615ed7565b500490565b600061ffff80831681851681830481118215151615615ce357615ce3615ec1565b02949350505050565b6000816000190483118215151615615d0657615d06615ec1565b500290565b600060ff821660ff84168160ff0481118215151615615d2c57615d2c615ec1565b029392505050565b600081810b83820b8281128015607f19830184121615615d5657615d56615ec1565b81607f018313811615615d6b57615d6b615ec1565b5090039392505050565b600061ffff83811690831681811015615d9057615d90615ec1565b039392505050565b600082821015615daa57615daa615ec1565b500390565b600060ff821660ff841680821015615dc957615dc9615ec1565b90039392505050565b60005b83811015615ded578181015183820152602001615dd5565b83811115615dfc576000848401525b50505050565b600081810b607f19811415615e1957615e19615ec1565b6000190192915050565b600081615e3257615e32615ec1565b506000190190565b600081810b607f811415615e5057615e50615ec1565b60010192915050565b600061ffff80831681811415615e7157615e71615ec1565b6001019392505050565b6000600019821415615e8f57615e8f615ec1565b5060010190565b600060ff821660ff811415615e5057615e50615ec1565b600082615ebc57615ebc615ed7565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122033f8b1fd0425c0b86e636873b94eb93f4c8a2c5c84acf4f34172e7aefc36467764736f6c63430008040033",
  "devdoc": {
    "author": "Nugg Labs - @danny7even & @dub6ix",
    "details": "hold my margarita",
    "kind": "dev",
    "methods": {},
    "title": "DotNugg V1 - onchain encoder/decoder for dotnugg files",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "yoU CAN'T HaVe ImAgES oN THe BlOCkcHAIn",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}