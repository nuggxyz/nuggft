{
  "address": "0xE97b42Fb6753a806DeDc318e56fCb076d0676793",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "byebye",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nuggftv1",
          "type": "address"
        },
        {
          "internalType": "uint160",
          "name": "start",
          "type": "uint160"
        },
        {
          "internalType": "uint160",
          "name": "amount",
          "type": "uint160"
        }
      ],
      "name": "claimem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nuggftv1",
          "type": "address"
        },
        {
          "internalType": "uint160",
          "name": "start",
          "type": "uint160"
        },
        {
          "internalType": "uint160",
          "name": "amount",
          "type": "uint160"
        }
      ],
      "name": "mintem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e84ed1b6b4678b10d5a82672a1fc1c3779cb464344e163bc219b1acd0625d5a",
  "receipt": {
    "to": null,
    "from": "0xB666C13b621568FeC210724DF161604adccfA257",
    "contractAddress": "0xE97b42Fb6753a806DeDc318e56fCb076d0676793",
    "transactionIndex": 0,
    "gasUsed": "675785",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xde16250dd8e6f647b0fd93fde232c2781f817808032f9567acb018b10ad66789",
    "transactionHash": "0x1e84ed1b6b4678b10d5a82672a1fc1c3779cb464344e163bc219b1acd0625d5a",
    "logs": [],
    "blockNumber": 11739984,
    "cumulativeGasUsed": "675785",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "485fe23b7a4998f77285a6267cc109b7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"byebye\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nuggftv1\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"start\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"}],\"name\":\"claimem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nuggftv1\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"start\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"}],\"name\":\"mintem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/_test/dev/Minter.sol\":\"NuggftV1Minter\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"src/_test/dev/Minter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '../../interfaces/nuggftv1/INuggftV1.sol';\\n\\ncontract NuggftV1MinterHelper {\\n    function delegateem(address nuggftv1, uint160 id) external payable {\\n        INuggftV1(nuggftv1).delegate{value: msg.value}(address(this), id);\\n    }\\n\\n    function claimem(address nuggftv1, uint160 id) external {\\n        INuggftV1(nuggftv1).claim(address(this), id);\\n\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n}\\n\\ncontract NuggftV1Minter {\\n    address immutable minterHelper;\\n    address immutable deployer;\\n\\n    constructor() {\\n        minterHelper = address(new NuggftV1MinterHelper());\\n        deployer = msg.sender;\\n    }\\n\\n    function mintem(\\n        address nuggftv1,\\n        uint160 start,\\n        uint160 amount\\n    ) external payable {\\n        for (uint160 i = start; i < start + amount; i++) {\\n            INuggftV1(nuggftv1).mint{value: INuggftV1(nuggftv1).minSharePrice()}(uint160(i));\\n            uint96 floor = INuggftV1(nuggftv1).ethPerShare() * 3;\\n            INuggftV1(nuggftv1).approve(nuggftv1, uint160(i));\\n            INuggftV1(nuggftv1).swap(uint160(i), floor);\\n\\n            (, uint96 amt, ) = INuggftV1(nuggftv1).valueForDelegate(minterHelper, uint160(i));\\n\\n            NuggftV1MinterHelper(minterHelper).delegateem{value: amt}(nuggftv1, i);\\n        }\\n    }\\n\\n    function claimem(\\n        address nuggftv1,\\n        uint160 start,\\n        uint160 amount\\n    ) external {\\n        for (uint160 i = start; i < start + amount; i++) {\\n            NuggftV1MinterHelper(minterHelper).claimem(nuggftv1, i);\\n        }\\n    }\\n\\n    function byebye() external {\\n        require(msg.sender == deployer);\\n        selfdestruct(payable(msg.sender));\\n    }\\n}\\n\",\"keccak256\":\"0x66f354424f93b5625671d8f51b1bcba678352d79feb77ddca4775ebce1a85147\",\"license\":\"MIT\"},\"src/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\\n/// @title ERC-721 Non-Fungible Token Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 is IERC165 {\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\n    ///  may be created and assigned without emitting Transfer. At the time of\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when the approved address for an NFT is changed or\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\n    ///  When a Transfer event emits, this also indicates that the approved\\n    ///  address for that NFT (if any) is reset to none.\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\n    ///  The operator can manage all NFTs of the owner.\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n    /// @notice Count all NFTs assigned to an owner\\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\\n    ///  function throws for queries about the zero address.\\n    /// @param _owner An address for whom to query the balance\\n    /// @return The number of NFTs owned by `_owner`, possibly zero\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Find the owner of an NFT\\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\\n    ///  about them do throw.\\n    /// @param _tokenId The identifier for an NFT\\n    /// @return The address of the owner of the NFT\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n    ///  `onERC721Received` on `_to` and throws if the return value is not\\n    ///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes memory data\\n    ) external payable;\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev This works identically to the other function with an extra data parameter,\\n    ///  except this function just sets data to \\\"\\\".\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external payable;\\n\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n    ///  THEY MAY BE PERMANENTLY LOST\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external payable;\\n\\n    /// @notice Change or reaffirm the approved address for an NFT\\n    /// @dev The zero address indicates there is no approved address.\\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\n    ///  operator of the current owner.\\n    /// @param _approved The new approved NFT controller\\n    /// @param _tokenId The NFT to approve\\n    function approve(address _approved, uint256 _tokenId) external payable;\\n\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\n    ///  all of `msg.sender`'s assets\\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\\n    ///  multiple operators per owner.\\n    /// @param _operator Address to add to the set of authorized operators\\n    /// @param _approved True if the operator is approved, false to revoke approval\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /// @notice Get the approved address for a single NFT\\n    /// @dev Throws if `_tokenId` is not a valid NFT.\\n    /// @param _tokenId The NFT to find the approved address for\\n    /// @return The approved address for this NFT, or the zero address if there is none\\n    function getApproved(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Query if an address is an authorized operator for another address\\n    /// @param _owner The address that owns the NFTs\\n    /// @param _operator The address that acts on behalf of the owner\\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata is IERC721 {\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\n    function name() external view returns (string memory _name);\\n\\n    /// @notice An abbreviated name for NFTs in this contract\\n    function symbol() external view returns (string memory _symbol);\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe2d5f8f2ad6b005a82fe8370c7685b7c20d5d23788d7efd83e6ec347dbe48d87\",\"license\":\"MIT\"},\"src/interfaces/dotnuggv1/IDotnuggV1Implementer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata} from './IDotnuggV1Metadata.sol';\\n\\ninterface IDotnuggV1Implementer {\\n    function dotnuggV1Callback(uint256 tokenId) external view returns (IDotnuggV1Metadata.Memory memory data);\\n\\n    function dotnuggV1StoreFiles(uint256[][] calldata data, uint8 feature) external;\\n}\\n\",\"keccak256\":\"0x10c073976228eeba301841b321ba13c81d82f9dfdede02228b42820306fcbe9a\",\"license\":\"MIT\"},\"src/interfaces/dotnuggv1/IDotnuggV1ImplementerMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IDotnuggV1ImplementerMetadata {\\n    event DotnuggV1ResolverUpdated(uint256 tokenId, address to);\\n\\n    function setDotnuggV1Resolver(uint256 tokenId, address to) external;\\n\\n    function dotnuggV1ResolverOf(uint256 tokenId) external view returns (address resolver);\\n\\n    function dotnuggV1Processor() external returns (address);\\n\\n    function dotnuggV1DefaultWidth() external returns (uint8);\\n\\n    function dotnuggV1DefaultZoom() external returns (uint8);\\n}\\n\",\"keccak256\":\"0x87b58826daefab43ffe388e5fca78d0e2b2f04e876f63759ea4e5b200afc7f5b\",\"license\":\"MIT\"},\"src/interfaces/dotnuggv1/IDotnuggV1Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IDotnuggV1Metadata {\\n    struct Memory {\\n        uint256 version;\\n        uint256 renderedAt;\\n        string name;\\n        string desc;\\n        address owner;\\n        uint256 tokenId;\\n        uint8[] ids;\\n        uint8[] xovers;\\n        uint8[] yovers;\\n        string[] labels;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0x3b623a767c633838703eb2cd59602e5e55ac3a7d75c267882d4bed714dcf5824\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggftV1Token} from './INuggftV1Token.sol';\\nimport {INuggftV1Stake} from './INuggftV1Stake.sol';\\nimport {INuggftV1Proof} from './INuggftV1Proof.sol';\\nimport {INuggftV1Dotnugg} from './INuggftV1Dotnugg.sol';\\nimport {INuggftV1Swap} from './INuggftV1Swap.sol';\\nimport {INuggftV1Loan} from './INuggftV1Loan.sol';\\nimport {INuggftV1Epoch} from './INuggftV1Epoch.sol';\\n\\nimport {IERC721Metadata} from '../IERC721.sol';\\n\\ninterface INuggftV1 is\\n    IERC721Metadata,\\n    INuggftV1Token,\\n    INuggftV1Stake,\\n    INuggftV1Proof,\\n    INuggftV1Dotnugg,\\n    INuggftV1Swap,\\n    INuggftV1Loan,\\n    INuggftV1Epoch\\n{}\\n\",\"keccak256\":\"0xc9fcd03f3fc8de3ac97bca0d64c7cbdcddb48d464789a0ba1cf7b72b4634c2a4\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Dotnugg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Implementer} from '../dotnuggv1/IDotnuggV1Implementer.sol';\\nimport {IDotnuggV1ImplementerMetadata} from '../dotnuggv1/IDotnuggV1ImplementerMetadata.sol';\\n\\ninterface INuggftV1Dotnugg is IDotnuggV1Implementer, IDotnuggV1ImplementerMetadata {}\\n\",\"keccak256\":\"0xb91cda40f8d4c12dc9dbdb113c3cce234fd27e8dc640330f5a930f51d1b910d7\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Epoch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Epoch {\\n    /// @notice Explain to an end user what this does\\n    /// @dev Explain to a developer any extra details\\n    event Genesis(uint256 blocknum, uint32 interval, uint32 offset);\\n\\n    function epoch() external view returns (uint32 res);\\n}\\n\",\"keccak256\":\"0x504d60cddf03de5e1f3ed4bd2dd6f23a00fbe7b9ed391723478a29eecceada6b\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Loan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Loan {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    // event TakeLoan(uint160 tokenId, uint96 principal);\\n    // event Payoff(uint160 tokenId, address account, uint96 payoffAmount);\\n    // event Rebalance(uint160 tokenId, uint96 fee, uint96 earned);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function rebalance(uint160 tokenId) external payable;\\n\\n    function loan(uint160 tokenId) external;\\n\\n    function payoff(uint160 tokenId) external payable;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @notice for a nugg's active loan: calculates the current min eth a user must send to payoff or rebalance\\n    /// @dev contract ->\\n    /// @dev frontend -> used to set the amount of eth for user\\n    /// @param tokenId the token who's current loan to check\\n    /// @return toPayoff ->  the current amount loaned out, plus the final rebalance fee\\n    /// @return toRebalance ->  the fee a user must pay to rebalance (and extend) the loan on their nugg\\n    /// @return earned -> the amount of eth the minSharePrice has increased since loan was last rebalanced\\n    /// @return epochDue -> the final epoch a user is safe from liquidation (inclusive)\\n    /// @return loaner -> the user responsable for the loan\\n    function loanInfo(uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 toPayoff,\\n            uint96 toRebalance,\\n            uint96 earned,\\n            uint32 epochDue,\\n            address loaner\\n        );\\n\\n    /// @notice \\\"toPayoff\\\" value from \\\"loanInfo\\\"\\n    /// @dev should be used to tell user how much eth to send for payoff\\n    function valueForPayoff(uint160 tokenId) external view returns (uint96 res);\\n\\n    /// @notice \\\"toRebalance\\\" value from \\\"loanInfo\\\"\\n    /// @dev should be used to tell user how much eth to send for rebalance\\n    function valueForRebalance(uint160 tokenId) external view returns (uint96 res);\\n}\\n\",\"keccak256\":\"0x565779b2a5c4b39587b4a0dd9121b811bc4d7158b60160a81060cde046bc4712\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Proof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Proof {\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                             STATE CHANGING\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function rotate(\\n        uint160 tokenId,\\n        uint8 index0,\\n        uint8 index1\\n    ) external;\\n\\n    function anchor(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        uint256 x,\\n        uint256 y\\n    ) external;\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                               VIEW FUNCTIONS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function proofOf(uint160 tokenId) external view returns (uint256);\\n\\n    function proofToDotnuggMetadata(uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            uint256 proof,\\n            uint8[] memory defaultIds,\\n            uint8[] memory overxs,\\n            uint8[] memory overys\\n        );\\n}\\n\",\"keccak256\":\"0xa8982b8892625d65e2b82dd098214186522b14942fb17616d55f90ba927e40d4\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Stake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Stake {\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    event ProtocolEthExtracted(uint96 eth);\\n    event MigratorV1Updated(address migrator);\\n    event MigrateV1Sent(address v2, uint160 tokenId, uint256 proof, address owner, uint96 eth);\\n    event Burn(uint160 tokenId, address owner, uint96 ethOwed);\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function migrate(uint160 tokenId) external;\\n\\n    /// @notice burns a nugg from existance, dealing the eth worth of that share to the user\\n    /// @dev should only be called directly\\n    /// @param tokenId the id of the nugg being burned\\n    function burn(uint160 tokenId) external;\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @notice returns the minimum eth that must be added to create a new share\\n    /// @dev premium here is used to push against dillution of supply through ensuring the price always increases\\n    /// @dev used by the front end\\n    /// @return res -> premium + protcolFee + ethPerShare\\n    function minSharePrice() external view returns (uint96 res);\\n\\n    /// @notice returns the amount of eth extractable by protocol\\n    /// @dev this will be\\n    /// @return res -> (PROTOCOL_FEE_BPS * [all eth staked] / 10000) - [all previously extracted eth]\\n    function protocolEth() external view returns (uint96);\\n\\n    /// @notice returns the total number of staked shares held by the contract\\n    /// @dev this is equivilent to the amount of nuggs in existance\\n    function stakedShares() external view returns (uint64);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice returns the total amount of staked eth held by the contract\\n    /// @dev can be used as the market-cap or tvl of all nuggft v1\\n    /// @dev not equivilent to the balance of eth the contract holds, which also hs protocolEth and\\n    /// unclaimed eth from unsuccessful swaps\\n    function stakedEth() external view returns (uint96);\\n\\n    /// @notice returns the total \\\"ethPerShare\\\" held by the contract\\n    /// @dev this value not always equivilent to the \\\"floor\\\" price which can consist of perceived value.\\n    /// can be looked at as an \\\"intrinsic floor\\\"\\n    /// @dev this is the value that users will receive when their either burn or loan out nuggs\\n    /// @return res -> [current staked eth] / [current staked shares]\\n    function ethPerShare() external view returns (uint96);\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TRUSTED\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @notice sends the current protocolEth to the user and resets the value to zero\\n    /// @dev caller must be a trusted user\\n    function extractProtocolEth() external;\\n\\n    /// @notice sets the migrator contract\\n    /// @dev caller must be a trusted user\\n    /// @param migrator the address to set as the migrator contract\\n    function setMigrator(address migrator) external;\\n}\\n\",\"keccak256\":\"0x9462b2533b105f2ac63e54d0b0fc827936001a11e0c0f356309bf1624f443329\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Swap {\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function delegate(address sender, uint160 tokenId) external payable;\\n\\n    function delegateItem(\\n        uint160 buyerTokenId,\\n        uint160 sellerTokenId,\\n        uint16 itemId\\n    ) external payable;\\n\\n    function claim(address sender, uint160 tokenId) external;\\n\\n    function claimItem(\\n        uint160 buyerTokenId,\\n        uint160 sellerTokenId,\\n        uint16 itemid\\n    ) external;\\n\\n    function swap(uint160 tokenId, uint96 floor) external;\\n\\n    function swapItem(\\n        uint160 sellerTokenId,\\n        uint16 itemid,\\n        uint96 floor\\n    ) external;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @notice calculates the minimum eth that must be sent with a delegate call\\n    /// @dev returns 0 if no delegate can be made for this oken\\n    /// @param tokenId -> the token to be delegated to\\n    /// @param sender -> the address of the user who will be delegating\\n    /// @return canDelegate -> instead of reverting this function will return false\\n    /// @return nextSwapAmount -> the minimum value that must be sent with a delegate call\\n    /// @return senderCurrentOffer ->\\n    function valueForDelegate(address sender, uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            bool canDelegate,\\n            uint96 nextSwapAmount,\\n            uint96 senderCurrentOffer\\n        );\\n}\\n\",\"keccak256\":\"0xe3609bac347c2ad35088b04ca3c7aea9e65b8e2d5003bdd84f839d44df89e241\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721} from '../IERC721.sol';\\n\\ninterface INuggftV1Token is IERC721 {\\n    function mint(uint160 tokenId) external payable;\\n\\n    function trustedMint(uint160 tokenId, address to) external payable;\\n}\\n\",\"keccak256\":\"0xf2725afb8caeb9e24b19d11985b8e9f678960284e87b5d402c166617e4d9c87a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161001d9061004f565b604051809103906000f080158015610039573d6000803e3d6000fd5b506001600160a01b03166080523360a05261005c565b61025d8061090c83390190565b60805160a05161087d61008f60003960006105530152600081816103d1015281816104b1015261060c015261087d6000f3fe6080604052600436106100345760003560e01c806303e1624514610039578063a01ffdff1461004e578063ee96083514610063575b600080fd5b61004c6100473660046106a0565b610083565b005b34801561005a57600080fd5b5061004c61053b565b34801561006f57600080fd5b5061004c61007e3660046106a0565b610580565b815b61008f828461071a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161015610535578373ffffffffffffffffffffffffffffffffffffffff1663750656f68573ffffffffffffffffffffffffffffffffffffffff16639531b94d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561012457600080fd5b505afa158015610138573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015c9190610773565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff851660048201526bffffffffffffffffffffffff91909116906024016000604051808303818588803b1580156101d257600080fd5b505af11580156101e6573d6000803e3d6000fd5b505050505060008473ffffffffffffffffffffffffffffffffffffffff1663f71d09046040518163ffffffff1660e01b815260040160206040518083038186803b15801561023357600080fd5b505afa158015610247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026b9190610773565b610276906003610795565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301819052908516602483015291925063095ea7b390604401600060405180830381600087803b1580156102e957600080fd5b505af11580156102fd573d6000803e3d6000fd5b50506040517fc5c8beeb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526bffffffffffffffffffffffff851660248301528816925063c5c8beeb9150604401600060405180830381600087803b15801561037e57600080fd5b505af1158015610392573d6000803e3d6000fd5b50506040517f99081a2600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152858116602483015260009350881691506399081a269060440160606040518083038186803b15801561042857600080fd5b505afa15801561043c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046091906107c9565b506040517fa59d071900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015286811660248301529193507f0000000000000000000000000000000000000000000000000000000000000000909116915063a59d0719906bffffffffffffffffffffffff8416906044016000604051808303818588803b15801561050757600080fd5b505af115801561051b573d6000803e3d6000fd5b50505050505050808061052d90610813565b915050610085565b50505050565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461057d57600080fd5b33ff5b815b61058c828461071a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161015610535576040517fd6b2f31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015282811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063d6b2f31590604401600060405180830381600087803b15801561065057600080fd5b505af1158015610664573d6000803e3d6000fd5b50505050808061067390610813565b915050610582565b73ffffffffffffffffffffffffffffffffffffffff8116811461069d57600080fd5b50565b6000806000606084860312156106b557600080fd5b83356106c08161067b565b925060208401356106d08161067b565b915060408401356106e08161067b565b809150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff808316818516808303821115610749576107496106eb565b01949350505050565b80516bffffffffffffffffffffffff8116811461076e57600080fd5b919050565b60006020828403121561078557600080fd5b61078e82610752565b9392505050565b60006bffffffffffffffffffffffff808316818516818304811182151516156107c0576107c06106eb565b02949350505050565b6000806000606084860312156107de57600080fd5b835180151581146107ee57600080fd5b92506107fc60208501610752565b915061080a60408501610752565b90509250925092565b600073ffffffffffffffffffffffffffffffffffffffff8083168181141561083d5761083d6106eb565b600101939250505056fea264697066735822122096a4681b0445a096e3bac3bd6023530ec51b2706979f6fe5037c41e6a42fb6b664736f6c63430008090033608060405234801561001057600080fd5b5061023d806100206000396000f3fe6080604052600436106100295760003560e01c8063a59d07191461002e578063d6b2f31514610043575b600080fd5b61004161003c3660046101ce565b610063565b005b34801561004f57600080fd5b5061004161005e3660046101ce565b6100f0565b6040517fa2c7172700000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff828116602483015283169063a2c717279034906044016000604051808303818588803b1580156100d357600080fd5b505af11580156100e7573d6000803e3d6000fd5b50505050505050565b6040517f51d4d67e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff82811660248301528316906351d4d67e90604401600060405180830381600087803b15801561015f57600080fd5b505af1158015610173573d6000803e3d6000fd5b50506040513392504780156108fc029250906000818181858888f193505050501580156101a4573d6000803e3d6000fd5b505050565b73ffffffffffffffffffffffffffffffffffffffff811681146101cb57600080fd5b50565b600080604083850312156101e157600080fd5b82356101ec816101a9565b915060208301356101fc816101a9565b80915050925092905056fea2646970667358221220ee917d730c467c44c0e792ffe8276fa07f71c616da57b26f16d14ee7609873f664736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c806303e1624514610039578063a01ffdff1461004e578063ee96083514610063575b600080fd5b61004c6100473660046106a0565b610083565b005b34801561005a57600080fd5b5061004c61053b565b34801561006f57600080fd5b5061004c61007e3660046106a0565b610580565b815b61008f828461071a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161015610535578373ffffffffffffffffffffffffffffffffffffffff1663750656f68573ffffffffffffffffffffffffffffffffffffffff16639531b94d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561012457600080fd5b505afa158015610138573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015c9190610773565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff851660048201526bffffffffffffffffffffffff91909116906024016000604051808303818588803b1580156101d257600080fd5b505af11580156101e6573d6000803e3d6000fd5b505050505060008473ffffffffffffffffffffffffffffffffffffffff1663f71d09046040518163ffffffff1660e01b815260040160206040518083038186803b15801561023357600080fd5b505afa158015610247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026b9190610773565b610276906003610795565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301819052908516602483015291925063095ea7b390604401600060405180830381600087803b1580156102e957600080fd5b505af11580156102fd573d6000803e3d6000fd5b50506040517fc5c8beeb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526bffffffffffffffffffffffff851660248301528816925063c5c8beeb9150604401600060405180830381600087803b15801561037e57600080fd5b505af1158015610392573d6000803e3d6000fd5b50506040517f99081a2600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152858116602483015260009350881691506399081a269060440160606040518083038186803b15801561042857600080fd5b505afa15801561043c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046091906107c9565b506040517fa59d071900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015286811660248301529193507f0000000000000000000000000000000000000000000000000000000000000000909116915063a59d0719906bffffffffffffffffffffffff8416906044016000604051808303818588803b15801561050757600080fd5b505af115801561051b573d6000803e3d6000fd5b50505050505050808061052d90610813565b915050610085565b50505050565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461057d57600080fd5b33ff5b815b61058c828461071a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161015610535576040517fd6b2f31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015282811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063d6b2f31590604401600060405180830381600087803b15801561065057600080fd5b505af1158015610664573d6000803e3d6000fd5b50505050808061067390610813565b915050610582565b73ffffffffffffffffffffffffffffffffffffffff8116811461069d57600080fd5b50565b6000806000606084860312156106b557600080fd5b83356106c08161067b565b925060208401356106d08161067b565b915060408401356106e08161067b565b809150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff808316818516808303821115610749576107496106eb565b01949350505050565b80516bffffffffffffffffffffffff8116811461076e57600080fd5b919050565b60006020828403121561078557600080fd5b61078e82610752565b9392505050565b60006bffffffffffffffffffffffff808316818516818304811182151516156107c0576107c06106eb565b02949350505050565b6000806000606084860312156107de57600080fd5b835180151581146107ee57600080fd5b92506107fc60208501610752565b915061080a60408501610752565b90509250925092565b600073ffffffffffffffffffffffffffffffffffffffff8083168181141561083d5761083d6106eb565b600101939250505056fea264697066735822122096a4681b0445a096e3bac3bd6023530ec51b2706979f6fe5037c41e6a42fb6b664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}