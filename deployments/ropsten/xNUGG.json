{
  "address": "0x84500Cc78ce2fF2A9c17af6cdCa2c92ca49682Ca",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Genesis",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth",
          "type": "uint256"
        }
      ],
      "name": "Receive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth",
          "type": "uint256"
        }
      ],
      "name": "Send",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ethOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "genesis",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ownershipOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x20a391321fd64025f94cb1e457eead8299440e1afb66255a6d85afcb4bd2aee0",
  "receipt": {
    "to": null,
    "from": "0xB666C13b621568FeC210724DF161604adccfA257",
    "contractAddress": "0x84500Cc78ce2fF2A9c17af6cdCa2c92ca49682Ca",
    "transactionIndex": 3,
    "gasUsed": "1064821",
    "logsBloom": "0x
    "blockHash": "0xb620c50eb7902b1ce155a362a4c0b8368111c5c27b5cdafea626a7596f22af2e",
    "transactionHash": "0x20a391321fd64025f94cb1e457eead8299440e1afb66255a6d85afcb4bd2aee0",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 11515787,
        "transactionHash": "0x20a391321fd64025f94cb1e457eead8299440e1afb66255a6d85afcb4bd2aee0",
        "address": "0x84500Cc78ce2fF2A9c17af6cdCa2c92ca49682Ca",
        "topics": [
          "0x6bf6eaff5e9af8fbccb949f4c38cc016936f8775363ccf4224db160365785d52"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xb620c50eb7902b1ce155a362a4c0b8368111c5c27b5cdafea626a7596f22af2e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11515787,
        "transactionHash": "0x20a391321fd64025f94cb1e457eead8299440e1afb66255a6d85afcb4bd2aee0",
        "address": "0x84500Cc78ce2fF2A9c17af6cdCa2c92ca49682Ca",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b666c13b621568fec210724df161604adccfa257"
        ],
        "data": "0x0000000000000000000000000000000000000000000000056bc75e2d63100000",
        "logIndex": 7,
        "blockHash": "0xb620c50eb7902b1ce155a362a4c0b8368111c5c27b5cdafea626a7596f22af2e"
      }
    ],
    "blockNumber": 11515787,
    "cumulativeGasUsed": "1403179",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7fce83e726ae901840dc1c4edd658001",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Genesis\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Receive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Send\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ethOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ownershipOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Nugg Labs - @danny7even & @dub6ix\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"in regards to this contract, this could just be earningsOf + sharesOf\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"ethOf(address)\":{\"details\":\"public wrapper for _shares - to save on gas\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalEth()\":{\"details\":\"public wrapper for _shares - to save on gas\"},\"totalSupply()\":{\"details\":\"in regards to this contract, this could just be earningsOf + sharesOf\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"title\":\"xNUGG\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"leggo\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/xNUGG.sol\":\"xNUGG\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/src/interfaces/IxNUGG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title ISeedable\\n * @dev interface for Seedable.sol\\n */\\ninterface IxNUGG is IERC20 {\\n    event Receive(address sender, uint256 eth);\\n\\n    event Send(address receiver, uint256 eth);\\n\\n    event Genesis();\\n\\n    function genesis() external view returns (uint256 res);\\n\\n    function ownershipOf(address account) external view returns (uint256 res);\\n\\n    function totalEth() external view returns (uint256 res);\\n\\n    function ethOf(address account) external view returns (uint256 res);\\n\\n    function mint() external payable;\\n\\n    function burn(uint256 amount) external;\\n\\n    function totalSupply() external view override(IERC20) returns (uint256 res);\\n\\n    function balanceOf(address from) external view override(IERC20) returns (uint256 res);\\n}\\n\",\"keccak256\":\"0x5f9dd15ad87139d498b02da9a911ef4c6c24346e3db5b86c6373e1843ec0ee69\",\"license\":\"MIT\"},\"contracts/src/libraries/QuadMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title QuadMath\\n * @notice a library for performing Quadruple-precision floating-point format math operations\\n * @dev #TODO\\n */\\nlibrary QuadMath {\\n    /**\\n     * @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @param a The multiplicand\\n     * @param b The multiplier\\n     * @param denominator The divisor\\n     * @return result The 256-bit result\\n     * @dev Credit to Uniswap under MIT license https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol\\n     */\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @param a The multiplicand\\n     * @param b The multiplier\\n     * @param denominator The divisor\\n     * @return result The 256-bit result\\n     * @dev Credit to Remco Bloemen under MIT license https:/an--2-umb.com/21/muldiv\\n     */\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        // fix for negation braking change in Solidity v8 - https://ethereum.stackexchange.com/a/96646\\n        uint256 twos = denominator & (~denominator + 1);\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n\\n        // this unchecked block is required for this to work with Solidity v8\\n        unchecked {\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xabfe5a4833bdb7d13403e55305444f033b31ff9cf50da4799175b8b26138bb2e\",\"license\":\"MIT\"},\"contracts/src/libraries/StakeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './QuadMath.sol';\\n\\n/**\\n * @title StakeMath\\n * @notice a library for performing staking operations\\n * @dev #TODO\\n */\\nlibrary StakeLib {\\n    using QuadMath for uint256;\\n\\n    struct Storage {\\n        uint256 shares;\\n        mapping(address => uint256) owned;\\n    }\\n\\n    // function load() internal pure returns (Storage storage s) {\\n    //     uint256 ptr = StorageLib.pointer('epoch');\\n    //     assembly {\\n    //         s.slot := ptr\\n    //     }\\n    // }\\n\\n    function getActiveEth() internal view returns (uint256 res) {\\n        assembly {\\n            res := selfbalance()\\n        }\\n    }\\n\\n    function getActiveValue() internal view returns (uint256 res) {\\n        res = getActiveEth() + 10**20;\\n    }\\n\\n    function getActiveEthOf(Storage storage s, address account) internal view returns (uint256 res) {\\n        res = sharesToSupply(s.owned[account], getActiveEth(), s.shares, false);\\n    }\\n\\n    function getActiveSharesOf(Storage storage s, address account) internal view returns (uint256 res) {\\n        res = s.owned[account];\\n    }\\n\\n    function getActiveShares(Storage storage s) internal view returns (uint256 res) {\\n        res = s.shares;\\n    }\\n\\n    /**\\n     * @notice #TODO\\n     * @return res shares\\n     * @dev #TODO\\n     */\\n    function getActiveOwnershipOf(Storage storage s, address account) internal view returns (uint256 res) {\\n        return s.owned[account].mulDiv(0x100000000000000000000000000000000, s.shares);\\n    }\\n\\n    function start(Storage storage s, address account) internal returns (uint256 res) {\\n        uint256 ethBalance = getActiveEth();\\n        uint256 activeShares = s.shares;\\n\\n        require(ethBalance == 0);\\n        require(activeShares == s.shares);\\n\\n        res = 10**20;\\n\\n        s.shares = res;\\n        s.owned[account] = res;\\n    }\\n\\n    function add(\\n        Storage storage s,\\n        address account,\\n        uint256 eth\\n    ) internal returns (uint256 shares) {\\n        // uint256 eth = msg.value;\\n        require(eth > 0, 'SL:ADD:0');\\n\\n        uint256 ethBalance = getActiveValue();\\n        uint256 activeShares = s.shares;\\n\\n        if (activeShares == 0) {\\n            require(ethBalance == eth, 'SL:SA:0');\\n            shares = eth;\\n        } else {\\n            uint256 prev_eth_balance = ethBalance - eth;\\n            shares = supplyToShares(eth, prev_eth_balance, activeShares, false);\\n        }\\n\\n        s.shares += shares;\\n        s.owned[account] += shares;\\n    }\\n\\n    function sub(\\n        Storage storage s,\\n        address account,\\n        uint256 shares\\n    ) internal returns (uint256 eth) {\\n        uint256 ethBalance = getActiveValue();\\n        uint256 activeShares = s.shares;\\n\\n        // require(shares <= s.owned[account], 'SL:SUB:0');\\n\\n        eth = sharesToSupply(shares, ethBalance, activeShares, false);\\n\\n        s.shares -= shares;\\n        s.owned[account] -= shares;\\n    }\\n\\n    function move(\\n        Storage storage s,\\n        address from,\\n        address to,\\n        uint256 shares\\n    ) internal {\\n        // require(shares <= s.owned[from], 'SL:SUB:0');\\n\\n        s.owned[from] -= shares;\\n        s.owned[to] += shares;\\n    }\\n\\n    function supplyToShares(\\n        uint256 eth,\\n        uint256 active_eth_supply,\\n        uint256 active_shares,\\n        bool roundup\\n    ) private pure returns (uint256 res) {\\n        res = roundup\\n            ? eth.mulDivRoundingUp(active_shares, active_eth_supply)\\n            : eth.mulDiv(active_shares, active_eth_supply);\\n    }\\n\\n    function sharesToSupply(\\n        uint256 share_amount,\\n        uint256 active_eth_supply,\\n        uint256 active_shares,\\n        bool roundup\\n    ) private pure returns (uint256 res) {\\n        res = roundup\\n            ? share_amount.mulDivRoundingUp(active_eth_supply, active_shares)\\n            : share_amount.mulDiv(active_eth_supply, active_shares);\\n    }\\n}\\n\",\"keccak256\":\"0x89503c3adc41baeba26fecb900fb42fae83230f1288dfebbbaba4e5560d4fc29\",\"license\":\"MIT\"},\"contracts/src/xNUGG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport './interfaces/IxNUGG.sol';\\n\\nimport './libraries/StakeLib.sol';\\n\\n/**\\n * @title xNUGG\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice leggo\\n */\\ncontract xNUGG is IxNUGG, ERC20 {\\n    using Address for address payable;\\n    using StakeLib for StakeLib.Storage;\\n\\n    StakeLib.Storage internal sl_state;\\n\\n    uint256 public immutable override genesis;\\n\\n    constructor() ERC20('Staked NUGG', 'xNUGG') {\\n        emit Genesis();\\n\\n        uint256 shares = sl_state.start(msg.sender);\\n\\n        emit Transfer(address(0), msg.sender, shares);\\n\\n        genesis = block.number;\\n    }\\n\\n    receive() external payable {\\n        emit Receive(msg.sender, msg.value);\\n    }\\n\\n    fallback() external payable {\\n        emit Receive(msg.sender, msg.value);\\n    }\\n\\n    function mint() public payable override {\\n        uint256 mintedShares = sl_state.add(msg.sender, msg.value);\\n\\n        emit Transfer(address(0), msg.sender, mintedShares);\\n        emit Receive(msg.sender, msg.value);\\n    }\\n\\n    function burn(uint256 shares) public override {\\n        uint256 eth = sl_state.sub(msg.sender, shares);\\n\\n        payable(msg.sender).sendValue(eth);\\n\\n        emit Transfer(msg.sender, address(0), shares);\\n        emit Send(msg.sender, eth);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 shares\\n    ) internal override {\\n        sl_state.move(from, to, shares);\\n\\n        emit Transfer(from, to, shares);\\n    }\\n\\n    /**\\n     * @dev in regards to this contract, this could just be earningsOf + sharesOf\\n     */\\n    function totalSupply() public view virtual override(ERC20, IxNUGG) returns (uint256 res) {\\n        res = sl_state.getActiveShares();\\n    }\\n\\n    /**\\n     * @dev in regards to this contract, this could just be earningsOf + sharesOf\\n     */\\n    function balanceOf(address account) public view override(ERC20, IxNUGG) returns (uint256 res) {\\n        res = sl_state.getActiveSharesOf(account);\\n    }\\n\\n    /**\\n     * @dev public wrapper for _shares - to save on gas\\n     */\\n    function totalEth() public view override returns (uint256 res) {\\n        res = StakeLib.getActiveEth();\\n    }\\n\\n    /**\\n     * @dev public wrapper for _shares - to save on gas\\n     */\\n    function ethOf(address account) public view override returns (uint256 res) {\\n        res = sl_state.getActiveEthOf(account);\\n    }\\n\\n    function ownershipOf(address account) public view override returns (uint256 res) {\\n        res = sl_state.getActiveOwnershipOf(account);\\n    }\\n}\\n\",\"keccak256\":\"0xae0481ee3739f28d3bcd6844e640ab68bf82c33bf2ae5e8c4f8518c1f0a1bf75\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604080518082018252600b81526a5374616b6564204e55474760a81b602080830191825283518085019094526005845264784e55474760d81b90840152815191929162000062916003916200015b565b508051620000789060049060208401906200015b565b50506040517f6bf6eaff5e9af8fbccb949f4c38cc016936f8775363ccf4224db160365785d529150600090a16000620000c13360056200010760201b620007a11790919060201c565b60405181815290915033906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350436080526200023e565b8154600090479081156200011a57600080fd5b845481146200012857600080fd5b505068056bc75e2d631000008084556001600160a01b039092166000908152600190930160205250604090912081905590565b828054620001699062000201565b90600052602060002090601f0160209004810192826200018d5760008555620001d8565b82601f10620001a857805160ff1916838001178555620001d8565b82800160010185558215620001d8579182015b82811115620001d8578251825591602001919060010190620001bb565b50620001e6929150620001ea565b5090565b5b80821115620001e65760008155600101620001eb565b600181811c908216806200021657607f821691505b602082108114156200023857634e487b7160e01b600052602260045260246000fd5b50919050565b6080516110856200025a600039600061034501526110856000f3fe6080604052600436106101125760003560e01c806342966c68116100a5578063a0ffafd111610074578063a7f0b3de11610059578063a7f0b3de14610333578063a9059cbb14610367578063dd62ed3e1461038757610152565b8063a0ffafd1146102f3578063a457c2d71461031357610152565b806342966c681461027e57806370a082311461029e5780638fb08e2c146102be57806395d89b41146102de57610152565b806323b872dd116100e157806323b872dd1461020f578063313ce5671461022f578063395093511461024b5780633c3c9c231461026b57610152565b806306fdde0314610187578063095ea7b3146101b25780631249c58b146101e257806318160ddd146101ec57610152565b3661015257604080513381523460208201527fd6717f327e0cb88b4a97a7f67a453e9258252c34937ccbdd86de7cb840e7def391015b60405180910390a1005b604080513381523460208201527fd6717f327e0cb88b4a97a7f67a453e9258252c34937ccbdd86de7cb840e7def39101610148565b34801561019357600080fd5b5061019c6103cd565b6040516101a99190610f61565b60405180910390f35b3480156101be57600080fd5b506101d26101cd366004610f20565b61045f565b60405190151581526020016101a9565b6101ea610475565b005b3480156101f857600080fd5b506102016104f9565b6040519081526020016101a9565b34801561021b57600080fd5b506101d261022a366004610ee5565b610509565b34801561023b57600080fd5b50604051601281526020016101a9565b34801561025757600080fd5b506101d2610266366004610f20565b6105cf565b34801561027757600080fd5b5047610201565b34801561028a57600080fd5b506101ea610299366004610f49565b61060b565b3480156102aa57600080fd5b506102016102b9366004610e99565b61069a565b3480156102ca57600080fd5b506102016102d9366004610e99565b6106ba565b3480156102ea57600080fd5b5061019c6106c7565b3480156102ff57600080fd5b5061020161030e366004610e99565b6106d6565b34801561031f57600080fd5b506101d261032e366004610f20565b6106e3565b34801561033f57600080fd5b506102017f000000000000000000000000000000000000000000000000000000000000000081565b34801561037357600080fd5b506101d2610382366004610f20565b610794565b34801561039357600080fd5b506102016103a2366004610eb3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546103dc90610fe3565b80601f016020809104026020016040519081016040528092919081815260200182805461040890610fe3565b80156104555780601f1061042a57610100808354040283529160200191610455565b820191906000526020600020905b81548152906001019060200180831161043857829003601f168201915b5050505050905090565b600061046c3384846107f3565b50600192915050565b60006104836005333461094c565b60405181815290915033906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3604080513381523460208201527fd6717f327e0cb88b4a97a7f67a453e9258252c34937ccbdd86de7cb840e7def3910160405180910390a150565b600061050460055490565b905090565b6000610516848484610a79565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156105b55760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6105c285338584036107f3565b60019150505b9392505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161046c918590610606908690610fb4565b6107f3565b600061061960053384610acb565b90506106253382610b2d565b60405182815260009033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a360408051338152602081018390527f30a3c50752f2552dcc2b93f5b96866280816a986c0c0408cb6778b9fa198288f910160405180910390a15050565b6001600160a01b0381166000908152600660205260408120545b92915050565b60006106b4600583610c4b565b6060600480546103dc90610fe3565b60006106b4600583610c74565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561077d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016105ac565b61078a33858584036107f3565b5060019392505050565b600061046c338484610a79565b8154600090479081156107b357600080fd5b845481146107c057600080fd5b505068056bc75e2d631000008084556001600160a01b039092166000908152600190930160205250604090912081905590565b6001600160a01b03831661086e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016105ac565b6001600160a01b0382166108ea5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016105ac565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600080821161099d5760405162461bcd60e51b815260206004820152600860248201527f534c3a4144443a3000000000000000000000000000000000000000000000000060448201526064016105ac565b60006109a7610cb0565b855490915080610a0857838214610a005760405162461bcd60e51b815260206004820152600760248201527f534c3a53413a300000000000000000000000000000000000000000000000000060448201526064016105ac565b839250610a27565b6000610a148584610fcc565b9050610a238582846000610cc5565b9350505b82866000016000828254610a3b9190610fb4565b90915550506001600160a01b038516600090815260018701602052604081208054859290610a6a908490610fb4565b90915550929695505050505050565b610a866005848484610cf0565b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161093f91815260200190565b600080610ad6610cb0565b8554909150610ae88483836000610d54565b925083866000016000828254610afe9190610fcc565b90915550506001600160a01b038516600090815260018701602052604081208054869290610a6a908490610fcc565b80471015610b7d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016105ac565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610bca576040519150601f19603f3d011682016040523d82523d6000602084013e610bcf565b606091505b5050905080610c465760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016105ac565b505050565b6001600160a01b03811660009081526001830160205260408120546105c8904785546000610d54565b81546001600160a01b038216600090815260018401602052604081205490916105c8919070010000000000000000000000000000000090610d71565b60006105044768056bc75e2d63100000610fb4565b600081610cdc57610cd7858486610d71565b610ce7565b610ce7858486610e2f565b95945050505050565b6001600160a01b038316600090815260018501602052604081208054839290610d1a908490610fcc565b90915550506001600160a01b038216600090815260018501602052604081208054839290610d49908490610fb4565b909155505050505050565b600081610d6657610cd7858585610d71565b610ce7858585610e2f565b600080806000198587098587029250828110838203039150508060001415610dab5760008411610da057600080fd5b5082900490506105c8565b808411610db757600080fd5b6000848688098084039381119092039190506000610dd786196001610fb4565b8616958690049560026003880281188089028203028089028203028089028203028089028203028089028203028089029091030260008290038290046001019490940294049390931791909102925050509392505050565b6000610e3c848484610d71565b905060008280610e5c57634e487b7160e01b600052601260045260246000fd5b84860911156105c8576000198110610e7357600080fd5b80610ce78161101e565b80356001600160a01b0381168114610e9457600080fd5b919050565b600060208284031215610eaa578081fd5b6105c882610e7d565b60008060408385031215610ec5578081fd5b610ece83610e7d565b9150610edc60208401610e7d565b90509250929050565b600080600060608486031215610ef9578081fd5b610f0284610e7d565b9250610f1060208501610e7d565b9150604084013590509250925092565b60008060408385031215610f32578182fd5b610f3b83610e7d565b946020939093013593505050565b600060208284031215610f5a578081fd5b5035919050565b6000602080835283518082850152825b81811015610f8d57858101830151858201604001528201610f71565b81811115610f9e5783604083870101525b50601f01601f1916929092016040019392505050565b60008219821115610fc757610fc7611039565b500190565b600082821015610fde57610fde611039565b500390565b600181811c90821680610ff757607f821691505b6020821081141561101857634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561103257611032611039565b5060010190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212205d151b450830d7a90f2821cb99a811d65e9c58630c54f8c516fbe54b4738d67364736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101125760003560e01c806342966c68116100a5578063a0ffafd111610074578063a7f0b3de11610059578063a7f0b3de14610333578063a9059cbb14610367578063dd62ed3e1461038757610152565b8063a0ffafd1146102f3578063a457c2d71461031357610152565b806342966c681461027e57806370a082311461029e5780638fb08e2c146102be57806395d89b41146102de57610152565b806323b872dd116100e157806323b872dd1461020f578063313ce5671461022f578063395093511461024b5780633c3c9c231461026b57610152565b806306fdde0314610187578063095ea7b3146101b25780631249c58b146101e257806318160ddd146101ec57610152565b3661015257604080513381523460208201527fd6717f327e0cb88b4a97a7f67a453e9258252c34937ccbdd86de7cb840e7def391015b60405180910390a1005b604080513381523460208201527fd6717f327e0cb88b4a97a7f67a453e9258252c34937ccbdd86de7cb840e7def39101610148565b34801561019357600080fd5b5061019c6103cd565b6040516101a99190610f61565b60405180910390f35b3480156101be57600080fd5b506101d26101cd366004610f20565b61045f565b60405190151581526020016101a9565b6101ea610475565b005b3480156101f857600080fd5b506102016104f9565b6040519081526020016101a9565b34801561021b57600080fd5b506101d261022a366004610ee5565b610509565b34801561023b57600080fd5b50604051601281526020016101a9565b34801561025757600080fd5b506101d2610266366004610f20565b6105cf565b34801561027757600080fd5b5047610201565b34801561028a57600080fd5b506101ea610299366004610f49565b61060b565b3480156102aa57600080fd5b506102016102b9366004610e99565b61069a565b3480156102ca57600080fd5b506102016102d9366004610e99565b6106ba565b3480156102ea57600080fd5b5061019c6106c7565b3480156102ff57600080fd5b5061020161030e366004610e99565b6106d6565b34801561031f57600080fd5b506101d261032e366004610f20565b6106e3565b34801561033f57600080fd5b506102017f000000000000000000000000000000000000000000000000000000000000000081565b34801561037357600080fd5b506101d2610382366004610f20565b610794565b34801561039357600080fd5b506102016103a2366004610eb3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546103dc90610fe3565b80601f016020809104026020016040519081016040528092919081815260200182805461040890610fe3565b80156104555780601f1061042a57610100808354040283529160200191610455565b820191906000526020600020905b81548152906001019060200180831161043857829003601f168201915b5050505050905090565b600061046c3384846107f3565b50600192915050565b60006104836005333461094c565b60405181815290915033906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3604080513381523460208201527fd6717f327e0cb88b4a97a7f67a453e9258252c34937ccbdd86de7cb840e7def3910160405180910390a150565b600061050460055490565b905090565b6000610516848484610a79565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156105b55760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6105c285338584036107f3565b60019150505b9392505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161046c918590610606908690610fb4565b6107f3565b600061061960053384610acb565b90506106253382610b2d565b60405182815260009033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a360408051338152602081018390527f30a3c50752f2552dcc2b93f5b96866280816a986c0c0408cb6778b9fa198288f910160405180910390a15050565b6001600160a01b0381166000908152600660205260408120545b92915050565b60006106b4600583610c4b565b6060600480546103dc90610fe3565b60006106b4600583610c74565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561077d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016105ac565b61078a33858584036107f3565b5060019392505050565b600061046c338484610a79565b8154600090479081156107b357600080fd5b845481146107c057600080fd5b505068056bc75e2d631000008084556001600160a01b039092166000908152600190930160205250604090912081905590565b6001600160a01b03831661086e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016105ac565b6001600160a01b0382166108ea5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016105ac565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600080821161099d5760405162461bcd60e51b815260206004820152600860248201527f534c3a4144443a3000000000000000000000000000000000000000000000000060448201526064016105ac565b60006109a7610cb0565b855490915080610a0857838214610a005760405162461bcd60e51b815260206004820152600760248201527f534c3a53413a300000000000000000000000000000000000000000000000000060448201526064016105ac565b839250610a27565b6000610a148584610fcc565b9050610a238582846000610cc5565b9350505b82866000016000828254610a3b9190610fb4565b90915550506001600160a01b038516600090815260018701602052604081208054859290610a6a908490610fb4565b90915550929695505050505050565b610a866005848484610cf0565b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161093f91815260200190565b600080610ad6610cb0565b8554909150610ae88483836000610d54565b925083866000016000828254610afe9190610fcc565b90915550506001600160a01b038516600090815260018701602052604081208054869290610a6a908490610fcc565b80471015610b7d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016105ac565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610bca576040519150601f19603f3d011682016040523d82523d6000602084013e610bcf565b606091505b5050905080610c465760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016105ac565b505050565b6001600160a01b03811660009081526001830160205260408120546105c8904785546000610d54565b81546001600160a01b038216600090815260018401602052604081205490916105c8919070010000000000000000000000000000000090610d71565b60006105044768056bc75e2d63100000610fb4565b600081610cdc57610cd7858486610d71565b610ce7565b610ce7858486610e2f565b95945050505050565b6001600160a01b038316600090815260018501602052604081208054839290610d1a908490610fcc565b90915550506001600160a01b038216600090815260018501602052604081208054839290610d49908490610fb4565b909155505050505050565b600081610d6657610cd7858585610d71565b610ce7858585610e2f565b600080806000198587098587029250828110838203039150508060001415610dab5760008411610da057600080fd5b5082900490506105c8565b808411610db757600080fd5b6000848688098084039381119092039190506000610dd786196001610fb4565b8616958690049560026003880281188089028203028089028203028089028203028089028203028089028203028089029091030260008290038290046001019490940294049390931791909102925050509392505050565b6000610e3c848484610d71565b905060008280610e5c57634e487b7160e01b600052601260045260246000fd5b84860911156105c8576000198110610e7357600080fd5b80610ce78161101e565b80356001600160a01b0381168114610e9457600080fd5b919050565b600060208284031215610eaa578081fd5b6105c882610e7d565b60008060408385031215610ec5578081fd5b610ece83610e7d565b9150610edc60208401610e7d565b90509250929050565b600080600060608486031215610ef9578081fd5b610f0284610e7d565b9250610f1060208501610e7d565b9150604084013590509250925092565b60008060408385031215610f32578182fd5b610f3b83610e7d565b946020939093013593505050565b600060208284031215610f5a578081fd5b5035919050565b6000602080835283518082850152825b81811015610f8d57858101830151858201604001528201610f71565b81811115610f9e5783604083870101525b50601f01601f1916929092016040019392505050565b60008219821115610fc757610fc7611039565b500190565b600082821015610fde57610fde611039565b500390565b600181811c90821680610ff757607f821691505b6020821081141561101857634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561103257611032611039565b5060010190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212205d151b450830d7a90f2821cb99a811d65e9c58630c54f8c516fbe54b4738d67364736f6c63430008040033",
  "devdoc": {
    "author": "Nugg Labs - @danny7even & @dub6ix",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "in regards to this contract, this could just be earningsOf + sharesOf"
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "ethOf(address)": {
        "details": "public wrapper for _shares - to save on gas"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalEth()": {
        "details": "public wrapper for _shares - to save on gas"
      },
      "totalSupply()": {
        "details": "in regards to this contract, this could just be earningsOf + sharesOf"
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "title": "xNUGG",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "leggo",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 193,
        "contract": "contracts/src/xNUGG.sol:xNUGG",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 199,
        "contract": "contracts/src/xNUGG.sol:xNUGG",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 201,
        "contract": "contracts/src/xNUGG.sol:xNUGG",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 203,
        "contract": "contracts/src/xNUGG.sol:xNUGG",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 205,
        "contract": "contracts/src/xNUGG.sol:xNUGG",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 9470,
        "contract": "contracts/src/xNUGG.sol:xNUGG",
        "label": "sl_state",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Storage)8732_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Storage)8732_storage": {
        "encoding": "inplace",
        "label": "struct StakeLib.Storage",
        "members": [
          {
            "astId": 8727,
            "contract": "contracts/src/xNUGG.sol:xNUGG",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8731,
            "contract": "contracts/src/xNUGG.sol:xNUGG",
            "label": "owned",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}