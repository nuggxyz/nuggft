{
  "address": "0x42069bd5C2db737e4eED18d3c697De2829E8E380",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        }
      ],
      "name": "Launched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardIncrease",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SharesDecrease",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SharesIncrease",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenEarn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "_supplyOfBefore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "balanceOfMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "depositRewards",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "depositTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositWeth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositWethTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "launch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launched",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nuggGet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nuggSet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ownershipOfX128",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relay",
      "outputs": [
        {
          "internalType": "contract INuggETHRelay",
          "name": "res",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "sharesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "supplyOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupplyMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tummy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawWeth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawWethFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe3a0c3aa5835ae4ff991d7381fc6ab89582c3d224bdafa188a2724683cc023c1",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xB666C13b621568FeC210724DF161604adccfA257",
    "contractAddress": null,
    "transactionIndex": 12,
    "gasUsed": "3225676",
    "logsBloom": "0x
    "blockHash": "0x84dd4e7e9a91305b744b567361d56464a11b675530debb00c0bd8f4240f45eff",
    "transactionHash": "0xe3a0c3aa5835ae4ff991d7381fc6ab89582c3d224bdafa188a2724683cc023c1",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 11243275,
        "transactionHash": "0xe3a0c3aa5835ae4ff991d7381fc6ab89582c3d224bdafa188a2724683cc023c1",
        "address": "0xDF1A5A9e4AA359B6973B426DeC131F1be6b8e2A0",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x5749544844524157455200000000000000000000000000000000000000000000",
          "0x00000000000000000000000058c59716840b9f2ef87a92b31c12e55c19ac85fb",
          "0x00000000000000000000000042069bd5c2db737e4eed18d3c697de2829e8e380"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x84dd4e7e9a91305b744b567361d56464a11b675530debb00c0bd8f4240f45eff"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 11243275,
        "transactionHash": "0xe3a0c3aa5835ae4ff991d7381fc6ab89582c3d224bdafa188a2724683cc023c1",
        "address": "0xDF1A5A9e4AA359B6973B426DeC131F1be6b8e2A0",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x4445504f53495445520000000000000000000000000000000000000000000000",
          "0x00000000000000000000000042069bd5c2db737e4eed18d3c697de2829e8e380",
          "0x00000000000000000000000042069bd5c2db737e4eed18d3c697de2829e8e380"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x84dd4e7e9a91305b744b567361d56464a11b675530debb00c0bd8f4240f45eff"
      }
    ],
    "blockNumber": 11243275,
    "cumulativeGasUsed": "3684563",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "24ac09d9bc97ff10fe4e0604109f49d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"Launched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SharesDecrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SharesIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenEarn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_supplyOfBefore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"balanceOfMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"depositRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositWethTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nuggGet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nuggSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ownershipOfX128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relay\",\"outputs\":[{\"internalType\":\"contract INuggETHRelay\",\"name\":\"res\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"supplyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tummy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawWethFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Nugg Labs - @danny7even & @dub6ix\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deployer()\":{\"details\":\"#TODO\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"launched()\":{\"details\":\"#TODO\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"ownershipOfX128(address)\":{\"details\":\"external wrapper for _shares - to save on gas\"},\"sharesOf(address)\":{\"details\":\"external wrapper for _shares - to save on gas\"},\"supplyOf(address)\":{\"details\":\"in regards to this contract, this could just be earningsOf + sharesOf\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalShares()\":{\"details\":\"external wrapper for _shares - to save on gas\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"tummy()\":{\"details\":\"returns user's current reward balance\",\"returns\":{\"_0\":\"balance\"}}},\"title\":\"NuggETH\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit()\":{\"notice\":\"Deposit ether to get wrapped ether\"}},\"notice\":\"leggo\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/weth/NuggETH.sol\":\"NuggETH\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\",\"keccak256\":\"0x313834fba9dbefee1df7717a5e3063ebf567d276e67bc925a03c7f8423f4c50e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a9a31f278ee3ed0568ab7e3c09ecb72bf92f922475a274760b4c58f87f9ad0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/base/Escrowable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\n\\nimport '../libraries/Address.sol';\\nimport './Mutexable.sol';\\nimport '../interfaces/IEscrowable.sol';\\nimport '../erc20/IERC20.sol';\\nimport './Testable.sol';\\n\\n/**\\n * @title Escrowable\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice allows withdrawer to have access to funds without any ownership/control over the depositer\\n * @dev adapted from Openzeppelin's Escrow.sol\\n */\\nabstract contract Escrowable is IEscrowable, Mutexable {\\n    Escrow internal immutable _TUMMY;\\n\\n    constructor() {\\n        _TUMMY = new Escrow();\\n    }\\n\\n    /**\\n     * @dev returns user's current reward balance\\n     * @return balance\\n     */\\n    function tummy() external view override returns (address) {\\n        return address(_TUMMY);\\n    }\\n}\\n\\n/**\\n * @title Escrow\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice allows withdrawer to have access to funds without any ownership/control over the depositer\\n * @dev adapted from Openzeppelin's Escrow.sol\\n */\\ncontract Escrow is IEscrow, AccessControlEnumerable, Mutexable, Testable {\\n    using Address for address payable;\\n\\n    uint256 private _deposits;\\n\\n    constructor() {\\n        _setupRole('WITHDRAWER', 0x58C59716840b9f2ef87a92b31C12e55c19aC85fb);\\n        _setupRole('DEPOSITER', msg.sender);\\n    }\\n\\n    /**\\n     * @inheritdoc IEscrow\\n     */\\n    function deposit() external payable override onlyRole('DEPOSITER') lock(global) {\\n        uint256 amount = msg_value();\\n        _deposits += amount;\\n        emit Deposited(msg_sender(), amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IEscrow\\n     */\\n    function withdraw() external override onlyRole('WITHDRAWER') lock(global) {\\n        uint256 payment = _deposits;\\n        _deposits = 0;\\n        address payable withdrawer = payable(msg_sender());\\n        send_eth(withdrawer, payment);\\n        emit Withdrawn(withdrawer, payment);\\n    }\\n\\n    /**\\n     * @inheritdoc IEscrow\\n     */\\n    function rescueERC20(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external override onlyRole('WITHDRAWER') lock(global) {\\n        token.transferFrom(from, to, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IEscrow\\n     */\\n    function deposits() external view override returns (uint256) {\\n        return _deposits;\\n    }\\n}\\n\",\"keccak256\":\"0xe91b19aac9dd6d8c0a00b67fe8f7705404c9f30f5b1511ce290fccb95483cbc3\",\"license\":\"MIT\"},\"contracts/base/Fallbackable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title Testable\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice commonly used and current exec context functions that sometimes require simple overriding in testing\\n */\\nabstract contract Fallbackable {\\n    receive() external payable {\\n        if (_fallback_ok()) _fallback();\\n    }\\n\\n    fallback() external payable {\\n        if (_fallback_ok()) _fallback();\\n    }\\n\\n    function _fallback() internal virtual;\\n\\n    function _fallback_ok() internal virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x6c0ce9f4428e6a4f75fe6cf0f67ed7021c6f9d32d9e489934e89e9494c3b03c2\",\"license\":\"MIT\"},\"contracts/base/Launchable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../interfaces/ILaunchable.sol';\\nimport './Testable.sol';\\n\\n/**\\n * @title Launchable (AKA: ChrisBlecable)\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice enables init of items that cannot be initalized in constructor\\n * @dev only callable once by deployer, reason for this is to avoid having to implement Ownable.sol\\n */\\nabstract contract Launchable is ILaunchable, Testable {\\n    address private _deployer;\\n    address private _deployerContract;\\n\\n    bool private _launched = false;\\n\\n    event Launched(address indexed deployer);\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    modifier isLaunched() {\\n        require(_launched, 'LAU:IL:0');\\n        _;\\n    }\\n\\n    constructor() {\\n        _deployer = tx.origin;\\n        _deployerContract = msg.sender;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function deployer() external view override returns (address) {\\n        return _deployer;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function launched() external view override returns (bool) {\\n        return _launched;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function launch(bytes memory) public virtual {\\n        require(_deployer == msg_sender() || _deployerContract == msg_sender(), 'LAU:LAU:0');\\n        require(!_launched, 'LAU:LAU:1');\\n        _launched = true;\\n        emit Launched(_deployer);\\n    }\\n}\\n\",\"keccak256\":\"0xc27d996d2eb8d39ad1ce96fae81d410b0f64669c5fa8c9176e6d306ff2c3394b\",\"license\":\"MIT\"},\"contracts/base/Mutexable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract Mutexable {\\n    struct Mutex {\\n        uint8 status;\\n    }\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint8 private constant _NOT_LOCKED = 1;\\n    uint8 private constant _LOCKED = 2;\\n\\n    // uint256 private _lockblock;\\n    Mutex internal global;\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier lock(Mutex storage m) {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(m.status != _LOCKED, 'MUTEX:LOCKED:0');\\n\\n        // Any calls to nonReentrant after this point will fail\\n        m.status = _LOCKED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        m.status = _NOT_LOCKED;\\n    }\\n\\n    constructor() {\\n        // _lockblock = block.number;\\n        global = initMutex();\\n    }\\n\\n    function initMutex() internal pure returns (Mutex memory res) {\\n        /** require(block.number == _lockblock, 'MUTEX:IM:0'); */\\n        res = Mutex({status: _NOT_LOCKED});\\n    }\\n\\n    function locked(Mutex memory m) internal pure returns (bool res) {\\n        /** require(block.number == _lockblock, 'MUTEX:IM:0'); */\\n        res = m.status == _LOCKED;\\n    }\\n}\\n\",\"keccak256\":\"0xc36f8f1db8aadf79bbdf0e072faa5a01cc39b796280fa9727c7dcdc967e48c61\",\"license\":\"MIT\"},\"contracts/base/Stakeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../interfaces/IStakeable.sol';\\nimport '../libraries/StakeMath.sol';\\n\\nimport './Testable.sol';\\nimport './Mutexable.sol';\\n\\n\\n\\n/**\\n * @title Stakeable\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice implementable by other contracts to make them stakeable\\n//  * @dev overall value of reward per epoch is not kept track of - see StakeMath.sol for logic\\n */\\nabstract contract Stakeable is IStakeable, Mutexable, Testable {\\n    using StakeMath for StakeMath.State;\\n\\n    /*\\n     * @dev two aggregate values are kept track of:\\n     * 1. Total Shares (_supply): the total amount of user deposts, represting their percent share of the epoch pool\\n     * 2. Earnings Per Share (_shares): - the earnings per user invested wei\\n     **/\\n    uint256 internal _supply;\\n    uint256 internal _shares;\\n\\n    /*\\n     * @dev keeps track of individual user info\\n     * shares: the amount a user has invested, also represents their share of total supply\\n     * earnings: used to properly weight eps based on when the user invested\\n     **/\\n    // mapping(address => uint256) internal _posShares;\\n    mapping(address => uint256) internal _shares_owned;\\n\\n    modifier validateSupply() {\\n        _;\\n        require(getState().tSupply == address(this).balance, 'STAKE:TS:0');\\n    }\\n\\n    constructor() {}\\n\\n    /**\\n     * @dev external wrapper for _invest() - to save on gas\\n     * @inheritdoc IStakeable\\n     */\\n    function depositRewards(address from) external payable virtual override;\\n\\n    /**\\n     * @dev external wrapper for _shares - to save on gas\\n     */\\n    function totalSupply() public view virtual override returns (uint256 res) {\\n        res = getState().tSupply;\\n    }\\n\\n    /**\\n     * @dev in regards to this contract, this could just be earningsOf + sharesOf\\n     */\\n    function supplyOf(address account) public view override returns (uint256 res) {\\n        res = StakeMath.getBalance(getState(), getPosition(account));\\n    }\\n\\n    function _supplyOfBefore(address account, uint256 amount) public view returns (uint256 res) {\\n        res = StakeMath.getBalance(getStateBeforeDeposit(amount), getPosition(account));\\n    }\\n\\n    /**\\n     * @dev external wrapper for _shares - to save on gas\\n     */\\n    function totalShares() public view override returns (uint256 res) {\\n        res = getState().rSupply;\\n    }\\n\\n    /**\\n     * @dev external wrapper for _shares - to save on gas\\n     */\\n    function sharesOf(address account) public view override returns (uint256 res) {\\n        res = _shares_owned[account];\\n    }\\n\\n    /**\\n     * @dev external wrapper for _shares - to save on gas\\n     */\\n    function ownershipOfX128(address account) public view override returns (uint256 res) {\\n        res = StakeMath.getOwnershipX128(getState(), getPosition(account));\\n    }\\n\\n    /**\\n     * @dev external wrapper for _positions[account]\\n     */\\n    function getStateBeforeDeposit(uint256 amount) internal view returns (StakeMath.State memory res) {\\n        // res.tSupply = address(this).balance > 0 ? address(this).balance - amount : 0;\\n        res.tSupply = _supply;\\n        res.rSupply = _shares;\\n    }\\n\\n    function getState() internal view returns (StakeMath.State memory res) {\\n        res.tSupply = _supply;\\n        res.rSupply = _shares;\\n    }\\n\\n    function getPosition(address account) internal view returns (StakeMath.Position memory res) {\\n        res.rOwned = _shares_owned[account];\\n    }\\n\\n    function setState(StakeMath.State memory update) internal {\\n        _shares = update.rSupply;\\n        _supply = update.tSupply;\\n    }\\n\\n    function setPosition(StakeMath.Position memory update, address account) internal {\\n        _shares_owned[account] = update.rOwned;\\n    }\\n\\n    /*\\n     *  LOGIC\\n     * * * * * */\\n\\n    /**\\n     * @dev increases a users total staked shares in a given epoch\\n     * @param account the user who is adding shares\\n     * @param amount the amount shares is being increased\\n     * @custom:assump earnings should stay same\\n     */\\n    function _onShareIncrease(address account, uint256 amount) internal {\\n        StakeMath.State memory state = getStateBeforeDeposit(amount);\\n        StakeMath.Position memory pos = getPosition(account);\\n\\n        StakeMath.applyShareIncrease(state, pos, amount);\\n\\n        setState(state);\\n        setPosition(pos, account);\\n\\n        emit SharesIncrease(account, msg_sender(), amount);\\n    }\\n\\n    function _onShareDecrease(address account, uint256 amount) internal {\\n        StakeMath.State memory state = getState();\\n        StakeMath.Position memory pos = getPosition(account);\\n\\n        StakeMath.applyShareDecrease(state, pos, amount);\\n\\n        setState(state);\\n        setPosition(pos, account);\\n\\n        emit SharesDecrease(account, msg_sender(), amount);\\n    }\\n\\n    /**\\n     * @notice increases the overall eps from an increase in total rewards\\n     * @param amount the amount the total reward is being increased\\n     */\\n    function _onRewardIncrease(address sender, uint256 amount) internal virtual {\\n        StakeMath.State memory state = getState();\\n\\n        StakeMath.applyRewardIncrease(state, amount);\\n\\n        setState(state);\\n\\n        emit RewardIncrease(sender, amount);\\n    }\\n\\n    function _onEarn(address account, uint256 amount) internal {\\n        emit TokenEarn(account, msg_sender(), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5585099b7028069ac9efac99e33d1480316976b41c40b9a4879a73cfd150de04\",\"license\":\"MIT\"},\"contracts/base/Testable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/Address.sol';\\n\\n/**\\n * @title Testable\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice commonly used and current exec context functions that sometimes require simple overriding in testing\\n */\\nabstract contract Testable {\\n    using Address for address payable;\\n\\n    bool inTesting = false;\\n\\n    constructor() {\\n        if (chain_id() != 1) inTesting = true;\\n    }\\n\\n    address pw;\\n\\n    function nuggSet() external {\\n        require(inTesting);\\n        pw = msg_sender();\\n    }\\n\\n    function nuggGet() external {\\n        require(inTesting && pw == msg_sender());\\n        send_eth(payable(msg_sender()), address(this).balance);\\n    }\\n\\n    function send_eth(address payable account, uint256 amount) internal virtual {\\n        account.sendValue(amount);\\n    }\\n\\n    function block_num() internal view virtual returns (uint256 res) {\\n        res = block.number;\\n    }\\n\\n    function msg_sender() internal view virtual returns (address res) {\\n        res = msg.sender;\\n    }\\n\\n    function msg_data() internal view virtual returns (bytes calldata res) {\\n        res = msg.data;\\n    }\\n\\n    function block_hash(uint256 id) internal view virtual returns (bytes32 res) {\\n        res = blockhash(id);\\n    }\\n\\n    function msg_value() internal view virtual returns (uint256 res) {\\n        res = msg.value;\\n    }\\n\\n    function chain_id() internal view virtual returns (uint256 res) {\\n        res = block.chainid;\\n    }\\n}\\n\",\"keccak256\":\"0x895de30f67246a2d03269a7011f67917dd21834fce2d5685edaa38234ee672f0\",\"license\":\"MIT\"},\"contracts/erc20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport './IERC20.sol';\\nimport './IERC20Metadata.sol';\\n\\nimport '../base/Testable.sol';\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is IERC20, IERC20Metadata, Testable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg_sender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(msg_sender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][msg_sender()];\\n        require(currentAllowance >= amount, 'ERC20: transfer amount exceeds allowance');\\n        unchecked {\\n            _approve(sender, msg_sender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(msg_sender(), spender, _allowances[msg_sender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[msg_sender()][spender];\\n        require(currentAllowance >= subtractedValue, 'ERC20: decreased allowance below zero');\\n        unchecked {\\n            _approve(msg_sender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev internal non-virtual version {IERC20-balanceOf}\\n     */\\n    function _balanceOf(address account) internal view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), 'ERC20: transfer from the zero address');\\n        require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, 'ERC20: transfer amount exceeds balance');\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), 'ERC20: mint to the zero address');\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _assign(address account, uint256 amount) internal virtual {\\n        require(account != address(0), 'ERC20: assign to the zero address');\\n\\n        // _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        // _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), 'ERC20: burn from the zero address');\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, 'ERC20: burn amount exceeds balance');\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), 'ERC20: approve from the zero address');\\n        require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x6989dbe8fa97d0298ab864075c21f2c14fb4267c27f5d153a096f797a1eace9f\",\"license\":\"MIT\"},\"contracts/erc20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/erc20/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport './IERC20.sol';\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xf269589815b092215b1e2246a2f70d3342af6247d3796ade6fff7c235b412abf\",\"license\":\"MIT\"},\"contracts/interfaces/IEscrowable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/access/IAccessControlEnumerable.sol';\\nimport '../erc20/IERC20.sol';\\n\\n/**\\n * @title IEscrowable\\n * @dev interface for Escrow.sol\\n */\\ninterface IEscrowable {\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     */\\n    function tummy() external returns (address);\\n}\\n\\n/**\\n * @title IEscrow\\n * @dev interface for Escrow.sol\\n */\\ninterface IEscrow is IAccessControlEnumerable {\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     */\\n    function withdraw() external;\\n\\n    function rescueERC20(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function deposits() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4129d1f3bfb6a4351a84ccef4d8006e478c22fcaa158dbcd2cf84ea28dbad390\",\"license\":\"MIT\"},\"contracts/interfaces/ILaunchable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title ILaunchable\\n * @dev interface for Launchable.sol\\n */\\ninterface ILaunchable {\\n    function deployer() external returns (address);\\n\\n    function launched() external returns (bool);\\n}\\n\",\"keccak256\":\"0xac6ca876faf4b1eca8ad74f31692d225790dc0a89a0cafaafe8a442e7d42b997\",\"license\":\"MIT\"},\"contracts/interfaces/IStakeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/StakeMath.sol';\\n\\n/**\\n * @title IStakeable\\n * @dev interface for Stakeable.sol\\n */\\ninterface IStakeable {\\n    event TokenEarn(address indexed account, address sender, uint256 amount);\\n    event SharesIncrease(address indexed account, address sender, uint256 amount);\\n    event SharesDecrease(address indexed account, address sender, uint256 amount);\\n    event RewardIncrease(address indexed sender, uint256 amount);\\n\\n    /**\\n     * @notice returns user's current reward balance\\n     */\\n    function depositRewards(address sender) external payable;\\n\\n    /**\\n     * @dev in regards to this contract, this could just be earningsOf + sharesOf\\n     */\\n    function supplyOf(address account) external returns (uint256 res);\\n\\n    function ownershipOfX128(address account) external view returns (uint256 res);\\n\\n    function sharesOf(address account) external view returns (uint256 res);\\n\\n    /**\\n     * @notice returns user's current reward balance\\n     * @return res\\n     */\\n    function totalSupply() external view returns (uint256 res);\\n\\n    /**\\n     * @notice returns user's current reward balance\\n     * @return res\\n     */\\n\\n    function totalShares() external view returns (uint256 res);\\n}\\n\",\"keccak256\":\"0xe52beef96aadbb38218bd934c9854e4c6f51f920ed82f049790c30fcfc3c6e70\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.8.4;\\n\\nimport '../erc20/IERC20.sol';\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xdabc63d01df5c9318a91b8504dc6e76f48afc6182e5bdecda8b9365843d9f5ac\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'Address: unable to send value, recipient may have reverted');\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x477d6c378d4e07a3171fbf5be37420d63402088e5d16af7c632d46231789a694\",\"license\":\"MIT\"},\"contracts/libraries/Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\nimport '../libraries/Address.sol';\\n\\nimport '../interfaces/IWETH9.sol';\\nimport '../weth/interfaces/INuggETH.sol';\\n\\nlibrary Exchange {\\n    using Address for address payable;\\n\\n    function take_eth(address account, uint256 amount) internal {\\n        require(msg.value == amount && msg.sender == account, 'EX:TE:0');\\n    }\\n\\n    function give_eth(address payable account, uint256 amount) internal {\\n        account.sendValue(amount);\\n    }\\n\\n    function give_weth(\\n        IWETH9 weth,\\n        address account,\\n        uint256 amount\\n    ) internal {\\n        weth.deposit{value: amount}();\\n        weth.transfer(account, amount);\\n    }\\n\\n    function take_weth(\\n        IWETH9 weth,\\n        address account,\\n        uint256 amount\\n    ) internal {\\n        require(weth.allowance(account, address(this)) >= amount, 'EXC:TW:0'); // only for better handling on front end\\n        weth.transferFrom(account, address(this), amount);\\n        weth.withdraw(amount);\\n    }\\n\\n    function give_nuggeth(\\n        INuggETH nuggeth,\\n        address account,\\n        uint256 amount\\n    ) internal {\\n        nuggeth.depositTo{value: amount}(account);\\n    }\\n\\n    function take_nuggeth(\\n        INuggETH nuggeth,\\n        address account,\\n        uint256 amount\\n    ) internal {\\n        require(nuggeth.allowance(account, address(this)) >= amount, 'EXC:TW:0'); // only for better handling on front end\\n        nuggeth.withdrawFrom(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x58e41bbd76740fcd1ff28d73a1ff1f988117f9a7af86c07a052524272f64897c\",\"license\":\"MIT\"},\"contracts/libraries/QuadMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title QuadMath\\n * @notice a library for performing Quadruple-precision floating-point format math operations\\n * @dev #TODO\\n */\\nlibrary QuadMath {\\n    struct Uint512 {\\n        uint256 a;\\n        uint256 b;\\n    }\\n    /**\\n     * Max Value of Quad Percion Binary 128\\n     * Equal to 340282366920938463463374607431768211456 or 2^128\\n     */\\n    // uint256 internal constant _BINARY128 = 0x100000000000000000000000000000000;\\n    uint256 internal constant _BINARY128 = 0x100000000000000000000000000000000;\\n\\n    /**\\n     * @notice #TODO\\n     * @param base_ the amount to take a percent of\\n     * @param percent_ the percent out of 100 to be taken\\n     * @return res precent_ of base_\\n     * @dev #TODO\\n     */\\n    function percent(uint256 base_, uint8 percent_) internal pure returns (uint256 res) {\\n        require(percent_ <= 100);\\n        res = mulDiv(base_, percent_ * _BINARY128, 100 * _BINARY128);\\n    }\\n\\n    function mulDivRoundingUnsafe(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) >= denominator / 2) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n\\n    function mulDivQuad(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(mulDiv(a, _BINARY128, denominator), b, _BINARY128);\\n    }\\n\\n    function mulDivQuadUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDivRoundingUp(mulDivRoundingUp(a, _BINARY128, denominator), b, _BINARY128);\\n    }\\n\\n    /**\\n     * @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @param a The multiplicand\\n     * @param b The multiplier\\n     * @param denominator The divisor\\n     * @return result The 256-bit result\\n     * @dev Credit to Uniswap under MIT license https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol\\n     */\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @param a The multiplicand\\n     * @param b The multiplier\\n     * @param denominator The divisor\\n     * @return result The 256-bit result\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     */\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        // fix for negation braking change in Solidity v8 - https://ethereum.stackexchange.com/a/96646\\n        uint256 twos = denominator & (~denominator + 1);\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n\\n        // this unchecked block is required for this to work with Solidity v8\\n        unchecked {\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x91db32f050f38f38f875b8addbd3975f4006815e4c9c366e4e1f505aba126095\",\"license\":\"MIT\"},\"contracts/libraries/StakeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\nimport './QuadMath.sol';\\n\\n\\n\\n/**\\n * @title StakeMath\\n * @notice a library for performing staking operations\\n * @dev #TODO\\n */\\nlibrary StakeMath {\\n    using QuadMath for uint256;\\n\\n    struct Position {\\n        uint256 rOwned;\\n    }\\n\\n    struct State {\\n        uint256 tSupply;\\n        uint256 rSupply;\\n    }\\n\\n    /**\\n     * @notice #TODO\\n     * @param state the percent out of 100 to be taken\\n     * @param pos the percent out of 100 to be taken\\n     * @return res shares\\n     * @dev #TODO\\n     */\\n    function getBalance(State memory state, Position memory pos) internal pure returns (uint256 res) {\\n        return pos.rOwned > 0 ? _safeRtoT(state, pos.rOwned) : 0;\\n    }\\n\\n    /**\\n     * @notice #TODO\\n     * @param state the percent out of 100 to be taken\\n     * @param pos the percent out of 100 to be taken\\n     * @return res shares\\n     * @dev #TODO\\n     */\\n    function getOwnershipX128(State memory state, Position memory pos) internal pure returns (uint256 res) {\\n        return pos.rOwned.mulDiv(QuadMath._BINARY128, state.rSupply);\\n    }\\n\\n    function _safeRtoT(State memory state, uint256 rAmount) private pure returns (uint256) {\\n        return rAmount.mulDiv(state.tSupply, state.rSupply);\\n    }\\n\\n    function _safeTtoR(State memory state, uint256 tAmount) private pure returns (uint256) {\\n        return tAmount.mulDiv(state.rSupply, state.tSupply);\\n    }\\n\\n    // function _safeRtoTRoundingUnsafe(State memory state, uint256 rAmount) private pure returns (uint256) {\\n    //     return rAmount.mulDivRoundingUnsafe(state.tSupply, state.rSupply);\\n    // }\\n\\n    // function _safeTtoRRoundingUnsafe(State memory state, uint256 tAmount) private pure returns (uint256) {\\n    //     return tAmount.mulDivRoundingUnsafe(state.rSupply, state.tSupply);\\n    // }\\n\\n    function _safeRtoTRoundingUp(State memory state, uint256 rAmount) private pure returns (uint256) {\\n        return rAmount.mulDivRoundingUp(state.tSupply, state.rSupply);\\n    }\\n\\n    function _safeTtoRRoundingUp(State memory state, uint256 tAmount) private pure returns (uint256) {\\n        return tAmount.mulDivRoundingUp(state.rSupply, state.tSupply);\\n    }\\n\\n    function applyShareIncrease(\\n        State memory state,\\n        Position memory pos,\\n        uint256 tAmount\\n    ) internal pure {\\n        if (state.rSupply == 0 && state.tSupply == 0) {\\n            pos.rOwned = tAmount;\\n            state.rSupply = tAmount;\\n            state.tSupply = tAmount;\\n        } else {\\n            uint256 amountR = _safeTtoR(state, tAmount);\\n            pos.rOwned += amountR;\\n            state.rSupply += amountR;\\n            state.tSupply += tAmount;\\n        }\\n    }\\n\\n    function applyShareDecrease(\\n        State memory state,\\n        Position memory pos,\\n        uint256 tAmount\\n    ) internal pure {\\n        uint256 amountR = _safeTtoRRoundingUp(state, tAmount);\\n        pos.rOwned -= amountR;\\n        state.rSupply -= amountR;\\n        state.tSupply -= tAmount;\\n    }\\n\\n    function applyRewardIncrease(State memory state, uint256 amount) internal pure {\\n        state.tSupply += amount;\\n    }\\n}\\n\",\"keccak256\":\"0xfab927dbe77ab0d570d59eabf870c9dd948bd44b5f319ab0d24403cc7189c847\",\"license\":\"MIT\"},\"contracts/weth/NuggETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../base/Stakeable.sol';\\nimport '../base/Escrowable.sol';\\nimport '../base/Launchable.sol';\\nimport '../base/Fallbackable.sol';\\n\\nimport '../libraries/Exchange.sol';\\n\\nimport './interfaces/INuggETH.sol';\\nimport '../erc20/ERC20.sol';\\nimport './NuggETHRelay.sol';\\nimport './NuggETHRelay.sol';\\n\\n/**\\n * @title NuggETH\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice leggo\\n */\\ncontract NuggETH is INuggETH, ERC20, Escrowable, Launchable, Fallbackable, Stakeable {\\n    using Exchange for IWETH9;\\n    INuggETHRelay private _RELAY;\\n    IWETH9 private _WETH;\\n\\n    Mutex local;\\n\\n    constructor() ERC20('Nugg Wrapped Ether', 'NuggETH') {\\n        local = initMutex();\\n    }\\n\\n    function launch(bytes memory data) public override(Launchable) {\\n        super.launch(data);\\n        (address nuggethrelay, address weth) = abi.decode(data, (address, address));\\n        _RELAY = INuggETHRelay(nuggethrelay);\\n        _WETH = IWETH9(weth);\\n    }\\n\\n    function depositRewards(address sender) external payable override(INuggETH, Stakeable) lock(local) {\\n        uint256 tuck = (msg_value() * 1000) / 10000;\\n        _TUMMY.deposit{value: tuck}();\\n        Stakeable._onRewardIncrease(sender, msg_value() - tuck);\\n    }\\n\\n    function deposit() public payable override(INuggETH) {\\n        _deposit(msg_sender(), msg_value());\\n    }\\n\\n    function withdraw(uint256 amount) public override(INuggETH) {\\n        _withdraw(msg_sender(), amount);\\n    }\\n\\n    function depositTo(address to) public payable override(INuggETH) {\\n        _deposit(to, msg_value());\\n    }\\n\\n    function withdrawFrom(address from, uint256 amount) public override(INuggETH) {\\n        _withdraw(from, amount);\\n    }\\n\\n    function depositWeth(uint256 amount) public override(INuggETH) lock(local) {\\n        _depositWeth(msg_sender(), amount);\\n    }\\n\\n    function withdrawWeth(uint256 amount) public override(INuggETH) lock(local) {\\n        _withdrawWeth(msg_sender(), amount);\\n    }\\n\\n    function depositWethTo(address to, uint256 amount) public override(INuggETH) lock(local) {\\n        _depositWeth(to, amount);\\n    }\\n\\n    function withdrawWethFrom(address account, uint256 amount) public override(INuggETH) lock(local) {\\n        _withdrawWeth(account, amount);\\n    }\\n\\n    function relay() public view override(INuggETH) returns (INuggETHRelay res) {\\n        res = _RELAY;\\n    }\\n\\n    function totalSupply() public view override(INuggETH, ERC20, Stakeable) returns (uint256 res) {\\n        res = Stakeable.totalSupply();\\n    }\\n\\n    function totalSupplyMinted() public view override returns (uint256 res) {\\n        res = ERC20.totalSupply();\\n    }\\n\\n    function balanceOfMinted(address from) public view override returns (uint256 res) {\\n        res = ERC20.balanceOf(from);\\n    }\\n\\n    function balanceOf(address from) public view override(INuggETH, ERC20) returns (uint256 res) {\\n        res = Stakeable.supplyOf(from);\\n    }\\n\\n    function _deposit(address to, uint256 amount) internal validateSupply {\\n        ERC20._mint(to, amount);\\n    }\\n\\n    function _withdraw(address from, uint256 amount) internal validateSupply {\\n        ERC20._burn(from, amount);\\n        Exchange.give_eth(payable(msg_sender()), amount);\\n    }\\n\\n    function _depositWeth(address to, uint256 amount) internal validateSupply {\\n        Exchange.take_weth(_WETH, msg_sender(), amount);\\n        ERC20._mint(to, amount);\\n    }\\n\\n    function _withdrawWeth(address from, uint256 amount) internal validateSupply {\\n        ERC20._burn(from, amount);\\n        Exchange.give_weth(_WETH, msg_sender(), amount);\\n    }\\n\\n    function _fallback() internal override(Fallbackable) {\\n        deposit();\\n    }\\n\\n    function _fallback_ok() internal view override(Fallbackable) returns (bool) {\\n        return msg_sender() != address(_WETH);\\n    }\\n\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override(ERC20) {\\n        if (to != address(0)) Stakeable._onShareIncrease(to, amount);\\n        if (from != address(0)) Stakeable._onShareDecrease(from, amount);\\n\\n\\n\\n\\n        require(Stakeable.supplyOf(from) <= ERC20.balanceOf(from), 'NETH:ATT:0');\\n        require(Stakeable.supplyOf(to) <= ERC20.balanceOf(to), 'NETH:ATT:1');\\n    }\\n\\n    function _realize(address account) internal {\\n        uint256 minted = ERC20.balanceOf(account);\\n        uint256 owned = Stakeable.supplyOf(account);\\n\\n\\n\\n        if (owned > minted) {\\n            _assign(account, owned - minted);\\n            _onEarn(account, owned - minted);\\n        }\\n\\n\\n\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256\\n    ) internal override(ERC20) {\\n        if (to != address(0)) _realize(to);\\n        if (from != address(0)) _realize(from);\\n    }\\n}\\n\",\"keccak256\":\"0xd0411aee2cfb44f4de0430a3e5096eb0a910365fc26a55f1fc77a0650f748290\",\"license\":\"MIT\"},\"contracts/weth/NuggETHRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './interfaces/INuggETH.sol';\\nimport './interfaces/INuggETHRelay.sol';\\nimport '../base/Mutexable.sol';\\nimport '../base/Launchable.sol';\\n\\n\\n/**\\n * @title Testable\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice commonly used and current exec context functions that sometimes require simple overriding in testing\\n */\\ncontract NuggETHRelay is INuggETHRelay, Mutexable, Launchable {\\n    INuggETH private _NUGGETH;\\n    IWETH9 private _WETH;\\n\\n    constructor() {}\\n\\n    receive() external payable {\\n        if (msg_sender() != address(_WETH)) depositETH();\\n    }\\n\\n    fallback() external payable {\\n        if (msg_sender() != address(_WETH)) depositETH();\\n    }\\n\\n    function launch(bytes memory data) public override {\\n        super.launch(data);\\n        (address nuggeth, address weth) = abi.decode(data, (address, address));\\n        _NUGGETH = INuggETH(nuggeth);\\n        _WETH = IWETH9(weth);\\n    }\\n\\n    function depositETH() public payable override lock(global) {\\n        _depositETH(msg_sender(), msg_value());\\n    }\\n\\n    function rescueETH() public override lock(global) {\\n        _depositETH(address(this), address(this).balance);\\n        require(true, 'D');\\n    }\\n\\n    function depositWETH(uint256 amount) public override lock(global) {\\n        require(_WETH.allowance(msg_sender(), address(this)) >= amount, 'NER:DW:0');\\n        _WETH.transferFrom(msg_sender(), address(this), amount);\\n        _WETH.withdraw(amount);\\n        _depositETH(msg_sender(), amount);\\n    }\\n\\n    function rescueWETH() public override lock(global) {\\n        uint256 amount = _WETH.balanceOf(address(this));\\n        _WETH.withdraw(amount);\\n        _depositETH(address(this), amount);\\n    }\\n\\n    function rescueERC20(IERC20 token, uint256 amount) public override lock(global) {\\n        token.approve(_NUGGETH.tummy(), amount);\\n    }\\n\\n    function _depositETH(address account, uint256 amount) internal {\\n        _NUGGETH.depositRewards{value: amount}(account);\\n    }\\n\\n    // @todo neeed to have catch for erc20 and other shit\\n}\\n\",\"keccak256\":\"0x6c36a16c0d52491aed2f4c2c9d9684c42512cd1ba16c693bb4fea2529831d7c1\",\"license\":\"MIT\"},\"contracts/weth/interfaces/INuggETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../../interfaces/IStakeable.sol';\\nimport '../../interfaces/IEscrowable.sol';\\nimport '../../interfaces/IWETH9.sol';\\nimport '../../erc20/IERC20.sol';\\nimport './INuggETHRelay.sol';\\n\\n/**\\n * @title ISeedable\\n * @dev interface for Seedable.sol\\n */\\ninterface INuggETH is IERC20, IWETH9, IStakeable, IEscrowable {\\n    function depositRewards(address sender) external payable override(IStakeable);\\n\\n    function deposit() external payable override(IWETH9);\\n\\n    function depositTo(address account) external payable;\\n\\n    function withdrawFrom(address account, uint256 amount) external;\\n\\n    function depositWethTo(address account, uint256 amount) external;\\n\\n    function withdrawWethFrom(address account, uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external override(IWETH9);\\n\\n    function depositWeth(uint256 amount) external;\\n\\n    function withdrawWeth(uint256 amount) external;\\n\\n    function relay() external view returns (INuggETHRelay res);\\n\\n    function totalSupply() external view override(IERC20, IStakeable) returns (uint256 res);\\n\\n    function balanceOf(address from) external view override(IERC20) returns (uint256 res);\\n\\n    function balanceOfMinted(address from) external view returns (uint256 res);\\n\\n    function totalSupplyMinted() external view returns (uint256 res);\\n}\\n\",\"keccak256\":\"0xc108b28eb29561fb2cf2fe0b3100f71e5c2adef667f066d9c4561c585b5cc0eb\",\"license\":\"MIT\"},\"contracts/weth/interfaces/INuggETHRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../../erc20/IERC20.sol';\\n\\ninterface INuggETHRelay {\\n    function depositETH() external payable;\\n\\n    function rescueETH() external;\\n\\n    function depositWETH(uint256 amount) external;\\n\\n    function rescueWETH() external;\\n\\n    function rescueERC20(IERC20 token, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x838b372cb8948fdf9713d59e64e068447cd406c71b903270ce21b0c3da9daa97\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526001805460ff191690556008805460ff60a01b191690553480156200002857600080fd5b5060405180604001604052806012815260200171273ab3b3902bb930b83832b21022ba3432b960711b8152506040518060400160405280600781526020016609ceacece8aa8960cb1b815250620000846200017e60201b60201c565b516000805460ff191660ff909216919091179055620000a04690565b600114620000b5576001805460ff1916811790555b8151620000ca9060059060208501906200019d565b508051620000e09060069060208401906200019d565b505050604051620000f1906200022c565b604051809103906000f0801580156200010e573d6000803e3d6000fd5b5060601b6001600160601b03191660805260078054326001600160a01b03199182161790915560088054339216919091179055620001646040805160208082018352600090915281519081019091526001815290565b51600e805460ff191660ff9092169190911790556200028e565b6040805160208082018352600090915281519081019091526001815290565b828054620001ab9062000251565b90600052602060002090601f016020900481019282620001cf57600085556200021a565b82601f10620001ea57805160ff19168380011785556200021a565b828001600101855582156200021a579182015b828111156200021a578251825591602001919060010190620001fd565b50620002289291506200023a565b5090565b61126180620023dd83390190565b5b808211156200022857600081556001016200023b565b600181811c908216806200026657607f821691505b602082108114156200028857634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c612129620002b4600039600081816105fc015261090b01526121296000f3fe6080604052600436106101bd5760003560e01c80638e2b3ff6116100ed578063c415f75911610090578063c415f759146104eb578063d0e30db01461050b578063d5f3948814610513578063dbe8706214610531578063dd0bea1314610551578063dd62ed3e14610571578063f5eb42dc146105b7578063f9a03881146105ed578063fd2ec49b14610620576101e1565b80638e2b3ff6146103fc578063933e95b21461041c5780639470b0bd1461043157806395d89b4114610451578063a457c2d714610466578063a9059cbb14610486578063b59589d1146104a6578063b760faf9146104d8576101e1565b80633950935111610160578063395093511461030b5780633a98ef391461032b5780633beba2ee146103405780633febada714610355578063547612141461036857806362400e4c1461037d578063690e0dda1461039d57806370a08231146103bd5780638091f3bf146103dd576101e1565b806305e9fe50146101f557806306fdde0314610228578063095ea7b31461024a57806318160ddd1461027a5780631fdc772d1461028f57806323b872dd146102af5780632e1a7d4d146102cf578063313ce567146102ef576101e1565b366101e157600d546001600160a01b03163314155b156101df576101df610640565b005b600d546001600160a01b03163314156101d2565b34801561020157600080fd5b50610215610210366004611d53565b61064a565b6040519081526020015b60405180910390f35b34801561023457600080fd5b5061023d61066b565b60405161021f9190611f53565b34801561025657600080fd5b5061026a610265366004611e15565b6106fd565b604051901515815260200161021f565b34801561028657600080fd5b50610215610713565b34801561029b57600080fd5b506101df6102aa366004611e15565b610722565b3480156102bb57600080fd5b5061026a6102ca366004611dd5565b610776565b3480156102db57600080fd5b506101df6102ea366004611f0a565b610822565b3480156102fb57600080fd5b506040516012815260200161021f565b34801561031757600080fd5b5061026a610326366004611e15565b61082f565b34801561033757600080fd5b5061021561086b565b34801561034c57600080fd5b506101df61087e565b6101df610363366004611d53565b6108b3565b34801561037457600080fd5b506101df6109a7565b34801561038957600080fd5b50610215610398366004611d53565b6109cf565b3480156103a957600080fd5b506101df6103b8366004611f0a565b6109ea565b3480156103c957600080fd5b506102156103d8366004611d53565b610a3a565b3480156103e957600080fd5b50600854600160a01b900460ff1661026a565b34801561040857600080fd5b50610215610417366004611d53565b610a45565b34801561042857600080fd5b50610215610a50565b34801561043d57600080fd5b506101df61044c366004611e15565b610a5b565b34801561045d57600080fd5b5061023d610a69565b34801561047257600080fd5b5061026a610481366004611e15565b610a78565b34801561049257600080fd5b5061026a6104a1366004611e15565b610b11565b3480156104b257600080fd5b50600c546001600160a01b03165b6040516001600160a01b03909116815260200161021f565b6101df6104e6366004611d53565b610b1e565b3480156104f757600080fd5b506101df610506366004611e60565b610b28565b6101df610b79565b34801561051f57600080fd5b506007546001600160a01b03166104c0565b34801561053d57600080fd5b506101df61054c366004611e15565b610b83565b34801561055d57600080fd5b506101df61056c366004611f0a565b610bbf565b34801561057d57600080fd5b5061021561058c366004611da8565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b3480156105c357600080fd5b506102156105d2366004611d53565b6001600160a01b03166000908152600b602052604090205490565b3480156105f957600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006104c0565b34801561062c57600080fd5b5061021561063b366004611e15565b610c01565b610648610b79565b565b6000610665610657610c2c565b61066084610c46565b610c70565b92915050565b60606005805461067a9061203c565b80601f01602080910402602001604051908101604052809291908181526020018280546106a69061203c565b80156106f35780601f106106c8576101008083540402835291602001916106f3565b820191906000526020600020905b8154815290600101906020018083116106d657829003601f168201915b5050505050905090565b600061070a338484610c8a565b50600192915050565b600061071d610dae565b905090565b600e805460ff16600214156107525760405162461bcd60e51b815260040161074990611fa6565b60405180910390fd5b805460ff191660021781556107678383610dbe565b805460ff191660011790555050565b6000610783848484610e23565b6001600160a01b0384166000908152600360209081526040808320338452909152902054828110156108085760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610749565b6108158533858403610c8a565b60019150505b9392505050565b61082c3382610ff6565b50565b3360008181526003602090815260408083206001600160a01b0387168452909152812054909161070a918590610866908690611fce565b610c8a565b6000610875610c2c565b60200151905090565b60015460ff1680156108a057506001546001600160a01b036101009091041633145b6108a957600080fd5b6106483347611006565b600e805460ff16600214156108da5760405162461bcd60e51b815260040161074990611fa6565b805460ff1916600217815560006127106108f13490565b6108fd906103e8612006565b6109079190611fe6565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561096457600080fd5b505af1158015610978573d6000803e3d6000fd5b505050505061099883826109893490565b6109939190612025565b611019565b50805460ff1916600117905550565b60015460ff166109b657600080fd5b60018054610100600160a81b0319163361010002179055565b60006106656109dc610c2c565b6109e584610c46565b611089565b600e805460ff1660021415610a115760405162461bcd60e51b815260040161074990611fa6565b805460ff19166002178155610a2c610a263390565b836110a7565b805460ff1916600117905550565b6000610665826109cf565b6000610665826110c8565b600061071d60045490565b610a658282610ff6565b5050565b60606006805461067a9061203c565b3360009081526003602090815260408083206001600160a01b038616845290915281205482811015610afa5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610749565b610b073385858403610c8a565b5060019392505050565b600061070a338484610e23565b61082c81346110be565b610b31816110e3565b60008082806020019051810190610b489190611d6f565b600c80546001600160a01b039384166001600160a01b031991821617909155600d8054929093169116179055505050565b61064833346110be565b600e805460ff1660021415610baa5760405162461bcd60e51b815260040161074990611fa6565b805460ff1916600217815561076783836110a7565b600e805460ff1660021415610be65760405162461bcd60e51b815260040161074990611fa6565b805460ff19166002178155610a2c610bfb3390565b83610dbe565b600061081b610c23604080518082019091526009548152600a54602082015290565b6109e585610c46565b604080518082019091526009548152600a54602082015290565b604080516020808201835260008083526001600160a01b03949094168452600b9052912054815290565b6020820151815160009161081b9190600160801b906111d2565b6001600160a01b038316610cec5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610749565b6001600160a01b038216610d4d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610749565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610db8610c2c565b51919050565b610dc88282611290565b600d54610ddf906001600160a01b031633836113e4565b47610de8610c2c565b5114610a655760405162461bcd60e51b815260206004820152600a60248201526905354414b453a54533a360b41b6044820152606401610749565b6001600160a01b038316610e875760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610749565b6001600160a01b038216610ee95760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610749565b610ef48383836114b8565b6001600160a01b03831660009081526002602052604090205481811015610f6c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610749565b6001600160a01b03808516600090815260026020526040808220858503905591851681529081208054849290610fa3908490611fce565b92505081905550826001600160a01b0316846001600160a01b03166000805160206120d483398151915284604051610fdd91815260200190565b60405180910390a3610ff08484846114e8565b50505050565b6110008282611290565b610ddf33825b610a656001600160a01b038316826115b4565b6000611023610c2c565b905061102f81836116ca565b611041816020810151600a5551600955565b826001600160a01b03167f12fb2f8eef64b903d84b091fd56a1542266638be3201f0a7c94246bf8948b08c8360405161107c91815260200190565b60405180910390a2505050565b805160009061109957600061081b565b61081b8383600001516116e3565b600d546110be906001600160a01b031633836116f9565b610ddf828261189c565b6001600160a01b031660009081526002602052604090205490565b6007546001600160a01b031633148061110657506008546001600160a01b031633145b61113e5760405162461bcd60e51b815260206004820152600960248201526804c41553a4c41553a360bc1b6044820152606401610749565b600854600160a01b900460ff16156111845760405162461bcd60e51b81526020600482015260096024820152684c41553a4c41553a3160b81b6044820152606401610749565b6008805460ff60a01b1916600160a01b1790556007546040516001600160a01b03909116907fb900795bb40f8a7bc484866009ca19ebf7b277001a839428e1b8e1a21d8e216c90600090a250565b60008080600019858709858702925082811083820303915050806000141561120c576000841161120157600080fd5b50829004905061081b565b80841161121857600080fd5b600084868809808403938111909203919050600061123886196001611fce565b8616958690049560026003880281188089028203028089028203028089028203028089028203028089028203028089029091030260008290038290046001019490940294049390931791909102925050509392505050565b6001600160a01b0382166112f05760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610749565b6112fc826000836114b8565b6001600160a01b038216600090815260026020526040902054818110156113705760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610749565b6001600160a01b038316600090815260026020526040812083830390556004805484929061139f908490612025565b90915550506040518281526000906001600160a01b038516906000805160206120d48339815191529060200160405180910390a36113df836000846114e8565b505050565b826001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561141f57600080fd5b505af1158015611433573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038716935063a9059cbb9250611466915085908590600401611f3a565b602060405180830381600087803b15801561148057600080fd5b505af1158015611494573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff09190611e40565b6001600160a01b038216156114d0576114d08261197d565b6001600160a01b038316156113df576113df8361197d565b6001600160a01b038216156115015761150182826119c5565b6001600160a01b0383161561151a5761151a8382611a64565b611523836110c8565b61152c846109cf565b11156115675760405162461bcd60e51b815260206004820152600a60248201526904e4554483a4154543a360b41b6044820152606401610749565b611570826110c8565b611579836109cf565b11156113df5760405162461bcd60e51b815260206004820152600a6024820152694e4554483a4154543a3160b01b6044820152606401610749565b804710156116045760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610749565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611651576040519150601f19603f3d011682016040523d82523d6000602084013e611656565b606091505b50509050806113df5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610749565b80826000018181516116dc9190611fce565b9052505050565b8151602083015160009161081b918491906111d2565b604051636eb1769f60e11b81526001600160a01b03838116600483015230602483015282919085169063dd62ed3e9060440160206040518083038186803b15801561174357600080fd5b505afa158015611757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177b9190611f22565b10156117b45760405162461bcd60e51b815260206004820152600860248201526704558433a54573a360c41b6044820152606401610749565b6040516323b872dd60e01b81526001600160a01b038381166004830152306024830152604482018390528416906323b872dd90606401602060405180830381600087803b15801561180457600080fd5b505af1158015611818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183c9190611e40565b50604051632e1a7d4d60e01b8152600481018290526001600160a01b03841690632e1a7d4d90602401600060405180830381600087803b15801561187f57600080fd5b505af1158015611893573d6000803e3d6000fd5b50505050505050565b6001600160a01b0382166118f25760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610749565b6118fe600083836114b8565b80600460008282546119109190611fce565b90915550506001600160a01b0382166000908152600260205260408120805483929061193d908490611fce565b90915550506040518181526001600160a01b038316906000906000805160206120d48339815191529060200160405180910390a3610a65600083836114e8565b6000611988826110c8565b90506000611995836109cf565b9050818111156113df576119b2836119ad8484612025565b611ad5565b6113df836119c08484612025565b611bac565b60006119e4604080518082019091526009548152600a54602082015290565b905060006119f184610c46565b90506119fe828285611bf3565b611a10826020810151600a5551600955565b611a1a8185611c6c565b6001600160a01b0384167ff79618b9b212291398a0530b20c102f3c78e36669656305b218bc3dccb5f6f69335b85604051611a56929190611f3a565b60405180910390a250505050565b6000611a6e610c2c565b90506000611a7b84610c46565b9050611a88828285611c8a565b611a9a826020810151600a5551600955565b611aa48185611c6c565b6001600160a01b0384167f82b453f2dbd611a3a6856c2fc1ab4e809b7ccc59cbf1a3caa930e0f5d151e19033611a47565b6001600160a01b038216611b355760405162461bcd60e51b815260206004820152602160248201527f45524332303a2061737369676e20746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610749565b8060046000828254611b479190611fce565b90915550506001600160a01b03821660009081526002602052604081208054839290611b74908490611fce565b90915550506040518181526001600160a01b038316906000906000805160206120d48339815191529060200160405180910390a35050565b6001600160a01b0382167f0ccd6ee46b8056d511b00b106fc14ff895945afa6d998954a71c51c47fca55ca3383604051611be7929190611f3a565b60405180910390a25050565b6020830151158015611c0457508251155b15611c185790819052602082018190529052565b6000611c248483611cd5565b90508083600001818151611c389190611fce565b905250602084018051829190611c4f908390611fce565b905250835182908590611c63908390611fce565b90525050505050565b90516001600160a01b039091166000908152600b6020526040902055565b6000611c968483611ceb565b90508083600001818151611caa9190612025565b905250602084018051829190611cc1908390612025565b905250835182908590611c63908390612025565b6020820151825160009161081b918491906111d2565b6020820151825160009161081b918491906000611d098484846111d2565b905060008280611d2957634e487b7160e01b600052601260045260246000fd5b848609111561081b576000198110611d4057600080fd5b80611d4a81612077565b95945050505050565b600060208284031215611d64578081fd5b813561081b816120be565b60008060408385031215611d81578081fd5b8251611d8c816120be565b6020840151909250611d9d816120be565b809150509250929050565b60008060408385031215611dba578182fd5b8235611dc5816120be565b91506020830135611d9d816120be565b600080600060608486031215611de9578081fd5b8335611df4816120be565b92506020840135611e04816120be565b929592945050506040919091013590565b60008060408385031215611e27578182fd5b8235611e32816120be565b946020939093013593505050565b600060208284031215611e51578081fd5b8151801515811461081b578182fd5b600060208284031215611e71578081fd5b813567ffffffffffffffff80821115611e88578283fd5b818401915084601f830112611e9b578283fd5b813581811115611ead57611ead6120a8565b604051601f8201601f19908116603f01168101908382118183101715611ed557611ed56120a8565b81604052828152876020848701011115611eed578586fd5b826020860160208301379182016020019490945295945050505050565b600060208284031215611f1b578081fd5b5035919050565b600060208284031215611f33578081fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b6000602080835283518082850152825b81811015611f7f57858101830151858201604001528201611f63565b81811115611f905783604083870101525b50601f01601f1916929092016040019392505050565b6020808252600e908201526d04d555445583a4c4f434b45443a360941b604082015260600190565b60008219821115611fe157611fe1612092565b500190565b60008261200157634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561202057612020612092565b500290565b60008282101561203757612037612092565b500390565b600181811c9082168061205057607f821691505b6020821081141561207157634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561208b5761208b612092565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461082c57600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212209bba426d7140c195974e146aadfb02a3a5cfc087723ad5ffb04e87f2f10c3cb264736f6c6343000804003360806040526003805460ff191690553480156200001b57600080fd5b506040805160208082018352600090915281519081019091526001908190526002805460ff19168217905546146200005b576003805460ff191660011790555b62000088692ba4aa24222920aba2a960b11b7358c59716840b9f2ef87a92b31c12e55c19ac85fb620000a6565b620000a0682222a827a9a4aa22a960b91b33620000a6565b6200020b565b620000bd8282620000e960201b6200063e1760201c565b6000828152600160209081526040909120620000e49183906200064c620000f9821b17901c565b505050565b620000f5828262000119565b5050565b600062000110836001600160a01b038416620001b9565b90505b92915050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000f5576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001753390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152600183016020526040812054620002025750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000113565b50600062000113565b611046806200021b6000396000f3fe6080604052600436106100c85760003560e01c80633ccfd60b1161007a5780633ccfd60b146101cc57806354761214146101e15780639010d07c146101f657806391d148541461022e578063a217fddf1461024e578063ca15c87314610263578063d0e30db014610283578063d547741f1461028b57600080fd5b806301ffc9a7146100cd5780630d1859f614610102578063248a9ca3146101245780632f2ff15d14610162578063323a5e0b1461018257806336568abe146101975780633beba2ee146101b7575b600080fd5b3480156100d957600080fd5b506100ed6100e8366004610e0b565b6102ab565b60405190151581526020015b60405180910390f35b34801561010e57600080fd5b5061012261011d366004610e33565b6102d6565b005b34801561013057600080fd5b5061015461013f366004610da3565b60009081526020819052604090206001015490565b6040519081526020016100f9565b34801561016e57600080fd5b5061012261017d366004610dbb565b6103c5565b34801561018e57600080fd5b50600454610154565b3480156101a357600080fd5b506101226101b2366004610dbb565b6103ec565b3480156101c357600080fd5b5061012261040e565b3480156101d857600080fd5b50610122610445565b3480156101ed57600080fd5b506101226104ff565b34801561020257600080fd5b50610216610211366004610dea565b610527565b6040516001600160a01b0390911681526020016100f9565b34801561023a57600080fd5b506100ed610249366004610dbb565b610546565b34801561025a57600080fd5b50610154600081565b34801561026f57600080fd5b5061015461027e366004610da3565b61056f565b610122610586565b34801561029757600080fd5b506101226102a6366004610dbb565b610634565b60006001600160e01b03198216635a05180f60e01b14806102d057506102d082610661565b92915050565b692ba4aa24222920aba2a960b11b6102ee8133610696565b6002805460ff1681141561031d5760405162461bcd60e51b815260040161031490610f25565b60405180910390fd5b805460ff191660021781556040516323b872dd60e01b81526001600160a01b0386811660048301528581166024830152604482018590528716906323b872dd90606401602060405180830381600087803b15801561037a57600080fd5b505af115801561038e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b29190610d83565b50805460ff191660011790555050505050565b6103cf82826106fa565b60008281526001602052604090206103e7908261064c565b505050565b6103f68282610720565b60008281526001602052604090206103e7908261079a565b60035460ff16801561043057506003546001600160a01b036101009091041633145b61043957600080fd5b61044333476107af565b565b692ba4aa24222920aba2a960b11b61045d8133610696565b6002805460ff168114156104835760405162461bcd60e51b815260040161031490610f25565b805460ff1916600217815560048054600091829055906104a03390565b90506104ac81836107af565b806001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5836040516104e791815260200190565b60405180910390a25050805460ff1916600117905550565b60035460ff1661050e57600080fd5b60038054610100600160a81b0319163361010002179055565b600082815260016020526040812061053f90836107c2565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008181526001602052604081206102d0906107ce565b682222a827a9a4aa22a960b91b61059d8133610696565b6002805460ff168114156105c35760405162461bcd60e51b815260040161031490610f25565b805460ff1916600217815560006105d73490565b905080600460008282546105eb9190610f4d565b909155505060405181815233907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c49060200160405180910390a250805460ff1916600117905550565b6103f682826107d8565b61064882826107fe565b5050565b600061053f836001600160a01b038416610882565b60006001600160e01b03198216637965db0b60e01b14806102d057506301ffc9a760e01b6001600160e01b03198316146102d0565b6106a08282610546565b610648576106b8816001600160a01b031660146108d1565b6106c38360206108d1565b6040516020016106d4929190610e83565b60408051601f198184030181529082905262461bcd60e51b825261031491600401610ef2565b6000828152602081905260409020600101546107168133610696565b6103e783836107fe565b6001600160a01b03811633146107905760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610314565b6106488282610ab3565b600061053f836001600160a01b038416610b18565b6106486001600160a01b03831682610c35565b600061053f8383610d4b565b60006102d0825490565b6000828152602081905260409020600101546107f48133610696565b6103e78383610ab3565b6108088282610546565b610648576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561083e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008181526001830160205260408120546108c9575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102d0565b5060006102d0565b606060006108e0836002610f65565b6108eb906002610f4d565b67ffffffffffffffff81111561091157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561093b576020820181803683370190505b509050600360fc1b8160008151811061096457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106109a157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006109c5846002610f65565b6109d0906001610f4d565b90505b6001811115610a64576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610a1257634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110610a3657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93610a5d81610fcb565b90506109d3565b50831561053f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610314565b610abd8282610546565b15610648576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015610c2b576000610b3c600183610f84565b8554909150600090610b5090600190610f84565b9050818114610bd1576000866000018281548110610b7e57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110610baf57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610bf057634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506102d0565b60009150506102d0565b80471015610c855760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610314565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610cd2576040519150601f19603f3d011682016040523d82523d6000602084013e610cd7565b606091505b50509050806103e75760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610314565b6000826000018281548110610d7057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b600060208284031215610d94578081fd5b8151801515811461053f578182fd5b600060208284031215610db4578081fd5b5035919050565b60008060408385031215610dcd578081fd5b823591506020830135610ddf81610ff8565b809150509250929050565b60008060408385031215610dfc578182fd5b50508035926020909101359150565b600060208284031215610e1c578081fd5b81356001600160e01b03198116811461053f578182fd5b60008060008060808587031215610e48578182fd5b8435610e5381610ff8565b93506020850135610e6381610ff8565b92506040850135610e7381610ff8565b9396929550929360600135925050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351610eb5816017850160208801610f9b565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610ee6816028840160208801610f9b565b01602801949350505050565b6020815260008251806020840152610f11816040850160208701610f9b565b601f01601f19169190910160400192915050565b6020808252600e908201526d04d555445583a4c4f434b45443a360941b604082015260600190565b60008219821115610f6057610f60610fe2565b500190565b6000816000190483118215151615610f7f57610f7f610fe2565b500290565b600082821015610f9657610f96610fe2565b500390565b60005b83811015610fb6578181015183820152602001610f9e565b83811115610fc5576000848401525b50505050565b600081610fda57610fda610fe2565b506000190190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461100d57600080fd5b5056fea2646970667358221220944a175e092220cb0968c7d5a61859a9e671696d0b9d18a89b58327692b972e364736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101bd5760003560e01c80638e2b3ff6116100ed578063c415f75911610090578063c415f759146104eb578063d0e30db01461050b578063d5f3948814610513578063dbe8706214610531578063dd0bea1314610551578063dd62ed3e14610571578063f5eb42dc146105b7578063f9a03881146105ed578063fd2ec49b14610620576101e1565b80638e2b3ff6146103fc578063933e95b21461041c5780639470b0bd1461043157806395d89b4114610451578063a457c2d714610466578063a9059cbb14610486578063b59589d1146104a6578063b760faf9146104d8576101e1565b80633950935111610160578063395093511461030b5780633a98ef391461032b5780633beba2ee146103405780633febada714610355578063547612141461036857806362400e4c1461037d578063690e0dda1461039d57806370a08231146103bd5780638091f3bf146103dd576101e1565b806305e9fe50146101f557806306fdde0314610228578063095ea7b31461024a57806318160ddd1461027a5780631fdc772d1461028f57806323b872dd146102af5780632e1a7d4d146102cf578063313ce567146102ef576101e1565b366101e157600d546001600160a01b03163314155b156101df576101df610640565b005b600d546001600160a01b03163314156101d2565b34801561020157600080fd5b50610215610210366004611d53565b61064a565b6040519081526020015b60405180910390f35b34801561023457600080fd5b5061023d61066b565b60405161021f9190611f53565b34801561025657600080fd5b5061026a610265366004611e15565b6106fd565b604051901515815260200161021f565b34801561028657600080fd5b50610215610713565b34801561029b57600080fd5b506101df6102aa366004611e15565b610722565b3480156102bb57600080fd5b5061026a6102ca366004611dd5565b610776565b3480156102db57600080fd5b506101df6102ea366004611f0a565b610822565b3480156102fb57600080fd5b506040516012815260200161021f565b34801561031757600080fd5b5061026a610326366004611e15565b61082f565b34801561033757600080fd5b5061021561086b565b34801561034c57600080fd5b506101df61087e565b6101df610363366004611d53565b6108b3565b34801561037457600080fd5b506101df6109a7565b34801561038957600080fd5b50610215610398366004611d53565b6109cf565b3480156103a957600080fd5b506101df6103b8366004611f0a565b6109ea565b3480156103c957600080fd5b506102156103d8366004611d53565b610a3a565b3480156103e957600080fd5b50600854600160a01b900460ff1661026a565b34801561040857600080fd5b50610215610417366004611d53565b610a45565b34801561042857600080fd5b50610215610a50565b34801561043d57600080fd5b506101df61044c366004611e15565b610a5b565b34801561045d57600080fd5b5061023d610a69565b34801561047257600080fd5b5061026a610481366004611e15565b610a78565b34801561049257600080fd5b5061026a6104a1366004611e15565b610b11565b3480156104b257600080fd5b50600c546001600160a01b03165b6040516001600160a01b03909116815260200161021f565b6101df6104e6366004611d53565b610b1e565b3480156104f757600080fd5b506101df610506366004611e60565b610b28565b6101df610b79565b34801561051f57600080fd5b506007546001600160a01b03166104c0565b34801561053d57600080fd5b506101df61054c366004611e15565b610b83565b34801561055d57600080fd5b506101df61056c366004611f0a565b610bbf565b34801561057d57600080fd5b5061021561058c366004611da8565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b3480156105c357600080fd5b506102156105d2366004611d53565b6001600160a01b03166000908152600b602052604090205490565b3480156105f957600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006104c0565b34801561062c57600080fd5b5061021561063b366004611e15565b610c01565b610648610b79565b565b6000610665610657610c2c565b61066084610c46565b610c70565b92915050565b60606005805461067a9061203c565b80601f01602080910402602001604051908101604052809291908181526020018280546106a69061203c565b80156106f35780601f106106c8576101008083540402835291602001916106f3565b820191906000526020600020905b8154815290600101906020018083116106d657829003601f168201915b5050505050905090565b600061070a338484610c8a565b50600192915050565b600061071d610dae565b905090565b600e805460ff16600214156107525760405162461bcd60e51b815260040161074990611fa6565b60405180910390fd5b805460ff191660021781556107678383610dbe565b805460ff191660011790555050565b6000610783848484610e23565b6001600160a01b0384166000908152600360209081526040808320338452909152902054828110156108085760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610749565b6108158533858403610c8a565b60019150505b9392505050565b61082c3382610ff6565b50565b3360008181526003602090815260408083206001600160a01b0387168452909152812054909161070a918590610866908690611fce565b610c8a565b6000610875610c2c565b60200151905090565b60015460ff1680156108a057506001546001600160a01b036101009091041633145b6108a957600080fd5b6106483347611006565b600e805460ff16600214156108da5760405162461bcd60e51b815260040161074990611fa6565b805460ff1916600217815560006127106108f13490565b6108fd906103e8612006565b6109079190611fe6565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561096457600080fd5b505af1158015610978573d6000803e3d6000fd5b505050505061099883826109893490565b6109939190612025565b611019565b50805460ff1916600117905550565b60015460ff166109b657600080fd5b60018054610100600160a81b0319163361010002179055565b60006106656109dc610c2c565b6109e584610c46565b611089565b600e805460ff1660021415610a115760405162461bcd60e51b815260040161074990611fa6565b805460ff19166002178155610a2c610a263390565b836110a7565b805460ff1916600117905550565b6000610665826109cf565b6000610665826110c8565b600061071d60045490565b610a658282610ff6565b5050565b60606006805461067a9061203c565b3360009081526003602090815260408083206001600160a01b038616845290915281205482811015610afa5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610749565b610b073385858403610c8a565b5060019392505050565b600061070a338484610e23565b61082c81346110be565b610b31816110e3565b60008082806020019051810190610b489190611d6f565b600c80546001600160a01b039384166001600160a01b031991821617909155600d8054929093169116179055505050565b61064833346110be565b600e805460ff1660021415610baa5760405162461bcd60e51b815260040161074990611fa6565b805460ff1916600217815561076783836110a7565b600e805460ff1660021415610be65760405162461bcd60e51b815260040161074990611fa6565b805460ff19166002178155610a2c610bfb3390565b83610dbe565b600061081b610c23604080518082019091526009548152600a54602082015290565b6109e585610c46565b604080518082019091526009548152600a54602082015290565b604080516020808201835260008083526001600160a01b03949094168452600b9052912054815290565b6020820151815160009161081b9190600160801b906111d2565b6001600160a01b038316610cec5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610749565b6001600160a01b038216610d4d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610749565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610db8610c2c565b51919050565b610dc88282611290565b600d54610ddf906001600160a01b031633836113e4565b47610de8610c2c565b5114610a655760405162461bcd60e51b815260206004820152600a60248201526905354414b453a54533a360b41b6044820152606401610749565b6001600160a01b038316610e875760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610749565b6001600160a01b038216610ee95760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610749565b610ef48383836114b8565b6001600160a01b03831660009081526002602052604090205481811015610f6c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610749565b6001600160a01b03808516600090815260026020526040808220858503905591851681529081208054849290610fa3908490611fce565b92505081905550826001600160a01b0316846001600160a01b03166000805160206120d483398151915284604051610fdd91815260200190565b60405180910390a3610ff08484846114e8565b50505050565b6110008282611290565b610ddf33825b610a656001600160a01b038316826115b4565b6000611023610c2c565b905061102f81836116ca565b611041816020810151600a5551600955565b826001600160a01b03167f12fb2f8eef64b903d84b091fd56a1542266638be3201f0a7c94246bf8948b08c8360405161107c91815260200190565b60405180910390a2505050565b805160009061109957600061081b565b61081b8383600001516116e3565b600d546110be906001600160a01b031633836116f9565b610ddf828261189c565b6001600160a01b031660009081526002602052604090205490565b6007546001600160a01b031633148061110657506008546001600160a01b031633145b61113e5760405162461bcd60e51b815260206004820152600960248201526804c41553a4c41553a360bc1b6044820152606401610749565b600854600160a01b900460ff16156111845760405162461bcd60e51b81526020600482015260096024820152684c41553a4c41553a3160b81b6044820152606401610749565b6008805460ff60a01b1916600160a01b1790556007546040516001600160a01b03909116907fb900795bb40f8a7bc484866009ca19ebf7b277001a839428e1b8e1a21d8e216c90600090a250565b60008080600019858709858702925082811083820303915050806000141561120c576000841161120157600080fd5b50829004905061081b565b80841161121857600080fd5b600084868809808403938111909203919050600061123886196001611fce565b8616958690049560026003880281188089028203028089028203028089028203028089028203028089028203028089029091030260008290038290046001019490940294049390931791909102925050509392505050565b6001600160a01b0382166112f05760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610749565b6112fc826000836114b8565b6001600160a01b038216600090815260026020526040902054818110156113705760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610749565b6001600160a01b038316600090815260026020526040812083830390556004805484929061139f908490612025565b90915550506040518281526000906001600160a01b038516906000805160206120d48339815191529060200160405180910390a36113df836000846114e8565b505050565b826001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561141f57600080fd5b505af1158015611433573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038716935063a9059cbb9250611466915085908590600401611f3a565b602060405180830381600087803b15801561148057600080fd5b505af1158015611494573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff09190611e40565b6001600160a01b038216156114d0576114d08261197d565b6001600160a01b038316156113df576113df8361197d565b6001600160a01b038216156115015761150182826119c5565b6001600160a01b0383161561151a5761151a8382611a64565b611523836110c8565b61152c846109cf565b11156115675760405162461bcd60e51b815260206004820152600a60248201526904e4554483a4154543a360b41b6044820152606401610749565b611570826110c8565b611579836109cf565b11156113df5760405162461bcd60e51b815260206004820152600a6024820152694e4554483a4154543a3160b01b6044820152606401610749565b804710156116045760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610749565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611651576040519150601f19603f3d011682016040523d82523d6000602084013e611656565b606091505b50509050806113df5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610749565b80826000018181516116dc9190611fce565b9052505050565b8151602083015160009161081b918491906111d2565b604051636eb1769f60e11b81526001600160a01b03838116600483015230602483015282919085169063dd62ed3e9060440160206040518083038186803b15801561174357600080fd5b505afa158015611757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177b9190611f22565b10156117b45760405162461bcd60e51b815260206004820152600860248201526704558433a54573a360c41b6044820152606401610749565b6040516323b872dd60e01b81526001600160a01b038381166004830152306024830152604482018390528416906323b872dd90606401602060405180830381600087803b15801561180457600080fd5b505af1158015611818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183c9190611e40565b50604051632e1a7d4d60e01b8152600481018290526001600160a01b03841690632e1a7d4d90602401600060405180830381600087803b15801561187f57600080fd5b505af1158015611893573d6000803e3d6000fd5b50505050505050565b6001600160a01b0382166118f25760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610749565b6118fe600083836114b8565b80600460008282546119109190611fce565b90915550506001600160a01b0382166000908152600260205260408120805483929061193d908490611fce565b90915550506040518181526001600160a01b038316906000906000805160206120d48339815191529060200160405180910390a3610a65600083836114e8565b6000611988826110c8565b90506000611995836109cf565b9050818111156113df576119b2836119ad8484612025565b611ad5565b6113df836119c08484612025565b611bac565b60006119e4604080518082019091526009548152600a54602082015290565b905060006119f184610c46565b90506119fe828285611bf3565b611a10826020810151600a5551600955565b611a1a8185611c6c565b6001600160a01b0384167ff79618b9b212291398a0530b20c102f3c78e36669656305b218bc3dccb5f6f69335b85604051611a56929190611f3a565b60405180910390a250505050565b6000611a6e610c2c565b90506000611a7b84610c46565b9050611a88828285611c8a565b611a9a826020810151600a5551600955565b611aa48185611c6c565b6001600160a01b0384167f82b453f2dbd611a3a6856c2fc1ab4e809b7ccc59cbf1a3caa930e0f5d151e19033611a47565b6001600160a01b038216611b355760405162461bcd60e51b815260206004820152602160248201527f45524332303a2061737369676e20746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610749565b8060046000828254611b479190611fce565b90915550506001600160a01b03821660009081526002602052604081208054839290611b74908490611fce565b90915550506040518181526001600160a01b038316906000906000805160206120d48339815191529060200160405180910390a35050565b6001600160a01b0382167f0ccd6ee46b8056d511b00b106fc14ff895945afa6d998954a71c51c47fca55ca3383604051611be7929190611f3a565b60405180910390a25050565b6020830151158015611c0457508251155b15611c185790819052602082018190529052565b6000611c248483611cd5565b90508083600001818151611c389190611fce565b905250602084018051829190611c4f908390611fce565b905250835182908590611c63908390611fce565b90525050505050565b90516001600160a01b039091166000908152600b6020526040902055565b6000611c968483611ceb565b90508083600001818151611caa9190612025565b905250602084018051829190611cc1908390612025565b905250835182908590611c63908390612025565b6020820151825160009161081b918491906111d2565b6020820151825160009161081b918491906000611d098484846111d2565b905060008280611d2957634e487b7160e01b600052601260045260246000fd5b848609111561081b576000198110611d4057600080fd5b80611d4a81612077565b95945050505050565b600060208284031215611d64578081fd5b813561081b816120be565b60008060408385031215611d81578081fd5b8251611d8c816120be565b6020840151909250611d9d816120be565b809150509250929050565b60008060408385031215611dba578182fd5b8235611dc5816120be565b91506020830135611d9d816120be565b600080600060608486031215611de9578081fd5b8335611df4816120be565b92506020840135611e04816120be565b929592945050506040919091013590565b60008060408385031215611e27578182fd5b8235611e32816120be565b946020939093013593505050565b600060208284031215611e51578081fd5b8151801515811461081b578182fd5b600060208284031215611e71578081fd5b813567ffffffffffffffff80821115611e88578283fd5b818401915084601f830112611e9b578283fd5b813581811115611ead57611ead6120a8565b604051601f8201601f19908116603f01168101908382118183101715611ed557611ed56120a8565b81604052828152876020848701011115611eed578586fd5b826020860160208301379182016020019490945295945050505050565b600060208284031215611f1b578081fd5b5035919050565b600060208284031215611f33578081fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b6000602080835283518082850152825b81811015611f7f57858101830151858201604001528201611f63565b81811115611f905783604083870101525b50601f01601f1916929092016040019392505050565b6020808252600e908201526d04d555445583a4c4f434b45443a360941b604082015260600190565b60008219821115611fe157611fe1612092565b500190565b60008261200157634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561202057612020612092565b500290565b60008282101561203757612037612092565b500390565b600181811c9082168061205057607f821691505b6020821081141561207157634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561208b5761208b612092565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461082c57600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212209bba426d7140c195974e146aadfb02a3a5cfc087723ad5ffb04e87f2f10c3cb264736f6c63430008040033",
  "devdoc": {
    "author": "Nugg Labs - @danny7even & @dub6ix",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deployer()": {
        "details": "#TODO"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "launched()": {
        "details": "#TODO"
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "ownershipOfX128(address)": {
        "details": "external wrapper for _shares - to save on gas"
      },
      "sharesOf(address)": {
        "details": "external wrapper for _shares - to save on gas"
      },
      "supplyOf(address)": {
        "details": "in regards to this contract, this could just be earningsOf + sharesOf"
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalShares()": {
        "details": "external wrapper for _shares - to save on gas"
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "tummy()": {
        "details": "returns user's current reward balance",
        "returns": {
          "_0": "balance"
        }
      }
    },
    "title": "NuggETH",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit()": {
        "notice": "Deposit ether to get wrapped ether"
      }
    },
    "notice": "leggo",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4767,
        "contract": "contracts/weth/NuggETH.sol:NuggETH",
        "label": "global",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Mutex)4758_storage"
      },
      {
        "astId": 5341,
        "contract": "contracts/weth/NuggETH.sol:NuggETH",
        "label": "inTesting",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 5356,
        "contract": "contracts/weth/NuggETH.sol:NuggETH",
        "label": "pw",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11619,
        "contract": "contracts/weth/NuggETH.sol:NuggETH",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11625,
        "contract": "contracts/weth/NuggETH.sol:NuggETH",
        "label": "_allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 11627,
        "contract": "contracts/weth/NuggETH.sol:NuggETH",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 11629,
        "contract": "contracts/weth/NuggETH.sol:NuggETH",
        "label": "_name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 11631,
        "contract": "contracts/weth/NuggETH.sol:NuggETH",
        "label": "_symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 4664,
        "contract": "contracts/weth/NuggETH.sol:NuggETH",
        "label": "_deployer",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4666,
        "contract": "contracts/weth/NuggETH.sol:NuggETH",
        "label": "_deployerContract",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 4669,
        "contract": "contracts/weth/NuggETH.sol:NuggETH",
        "label": "_launched",
        "offset": 20,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 4949,
        "contract": "contracts/weth/NuggETH.sol:NuggETH",
        "label": "_supply",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4951,
        "contract": "contracts/weth/NuggETH.sol:NuggETH",
        "label": "_shares",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4955,
        "contract": "contracts/weth/NuggETH.sol:NuggETH",
        "label": "_shares_owned",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16466,
        "contract": "contracts/weth/NuggETH.sol:NuggETH",
        "label": "_RELAY",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(INuggETHRelay)17413"
      },
      {
        "astId": 16469,
        "contract": "contracts/weth/NuggETH.sol:NuggETH",
        "label": "_WETH",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IWETH9)14068"
      },
      {
        "astId": 16472,
        "contract": "contracts/weth/NuggETH.sol:NuggETH",
        "label": "local",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(Mutex)4758_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(INuggETHRelay)17413": {
        "encoding": "inplace",
        "label": "contract INuggETHRelay",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH9)14068": {
        "encoding": "inplace",
        "label": "contract IWETH9",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Mutex)4758_storage": {
        "encoding": "inplace",
        "label": "struct Mutexable.Mutex",
        "members": [
          {
            "astId": 4757,
            "contract": "contracts/weth/NuggETH.sol:NuggETH",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}