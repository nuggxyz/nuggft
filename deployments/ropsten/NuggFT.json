{
  "address": "0x726d53FD72Fc16DcF4C62CE098e4A94705f1EC5F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultResolver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endingEpoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellingTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyingTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endingEpoch",
          "type": "uint256"
        }
      ],
      "name": "ClaimItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth",
          "type": "uint256"
        }
      ],
      "name": "Commit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellingTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyingTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth",
          "type": "uint256"
        }
      ],
      "name": "CommitItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Genesis",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth",
          "type": "uint256"
        }
      ],
      "name": "Offer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellingTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyingTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth",
          "type": "uint256"
        }
      ],
      "name": "OfferItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "OpenSlot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "PopItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "items",
          "type": "uint256[]"
        }
      ],
      "name": "PreMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "PushItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeEth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellingTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth",
          "type": "uint256"
        }
      ],
      "name": "SwapItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UnStakeEth",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "activeEthPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[][]",
          "name": "data",
          "type": "uint256[][]"
        }
      ],
      "name": "addToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endingEpoch",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sellingTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "itemid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyingTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endingEpoch",
          "type": "uint256"
        }
      ],
      "name": "claimItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "commit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sellingTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "itemid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyingTokenId",
          "type": "uint256"
        }
      ],
      "name": "commitItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultResolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sellingTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "itemid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyingTokenId",
          "type": "uint256"
        }
      ],
      "name": "delegateItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "genesis",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "getActiveSwap",
      "outputs": [
        {
          "internalType": "address",
          "name": "leader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isOwner",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getOfferByAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "offer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sellingTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "itemid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyingTokenId",
          "type": "uint256"
        }
      ],
      "name": "offerItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "parsedProofOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "defaultIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "extraIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "overrides",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "proofOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "rawProcessURI",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "res",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "resolverOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "floor",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sellingTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "itemid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "floor",
          "type": "uint256"
        }
      ],
      "name": "swapItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "res",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2d6bffd036b9f4f01a71bc3d70296f8bedacc01e7736c6db53ae1a9ab6c18905",
  "receipt": {
    "to": null,
    "from": "0xB666C13b621568FeC210724DF161604adccfA257",
    "contractAddress": "0x726d53FD72Fc16DcF4C62CE098e4A94705f1EC5F",
    "transactionIndex": 2,
    "gasUsed": "4682855",
    "logsBloom": "0x
    "blockHash": "0xa030a4f7f2fed7425280dee3949615eb170e560b2a2bf238d00830297c344592",
    "transactionHash": "0x2d6bffd036b9f4f01a71bc3d70296f8bedacc01e7736c6db53ae1a9ab6c18905",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 11610791,
        "transactionHash": "0x2d6bffd036b9f4f01a71bc3d70296f8bedacc01e7736c6db53ae1a9ab6c18905",
        "address": "0x726d53FD72Fc16DcF4C62CE098e4A94705f1EC5F",
        "topics": [
          "0x6bf6eaff5e9af8fbccb949f4c38cc016936f8775363ccf4224db160365785d52"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xa030a4f7f2fed7425280dee3949615eb170e560b2a2bf238d00830297c344592"
      }
    ],
    "blockNumber": 11610791,
    "cumulativeGasUsed": "4852082",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x47cE00De0bd8Ed8FAbd335FE1EA8283284FfeC68"
  ],
  "solcInputHash": "e2075a753da4c3d17dd19a1cde4926f4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultResolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endingEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endingEpoch\",\"type\":\"uint256\"}],\"name\":\"ClaimItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Commit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"CommitItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Genesis\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Offer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"OfferItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OpenSlot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"PopItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"items\",\"type\":\"uint256[]\"}],\"name\":\"PreMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"PushItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"SwapItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnStakeEth\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeEthPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"data\",\"type\":\"uint256[][]\"}],\"name\":\"addToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingEpoch\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingEpoch\",\"type\":\"uint256\"}],\"name\":\"claimItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyingTokenId\",\"type\":\"uint256\"}],\"name\":\"commitItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultResolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyingTokenId\",\"type\":\"uint256\"}],\"name\":\"delegateItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getActiveSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"leader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOwner\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOfferByAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"offer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyingTokenId\",\"type\":\"uint256\"}],\"name\":\"offerItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"parsedProofOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"defaultIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"extraIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"overrides\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"proofOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rawProcessURI\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"res\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"resolverOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floor\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floor\",\"type\":\"uint256\"}],\"name\":\"swapItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"res\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-_}.\"},\"burn(uint256)\":{\"details\":\"Destroys `tokenId`. The approval is cleared when the token is burned. Requirements: - `tokenId` must exist. Emits a {Transfer} event.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"parsedProofOf(uint256)\":{\"details\":\"See {IERC721-_}.\"},\"proofOf(uint256)\":{\"details\":\"See {IERC721-_}.\"},\"resolverOf(uint256)\":{\"details\":\"See {IERC721-_}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/NuggFT.sol\":\"NuggFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf920acc579a6c2067ca587b8d3993f6e737ac54f2dc3c4cd179d8df0e3f351d9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x872ba21af7c1f0ae04a715beca31e8fcac764d6c8762940b0fe1bfb6ed8e86f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x483b106386dd309f168672928252a19f30c30efb4d17d4b8e2b0f587ca784a11\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6052c25b1021f2b0e733fb52ca11948cb2f08cb66076397507243a6e8a8d7776\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x905cd0ecd91d1de79a4679d745b79cf852ca8ccda5d25d1c49c6bd17a5edc0cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6aa521718bf139b44ce56f194f6aea1d590cacef995b5a84703fb1579fa49be9\",\"license\":\"MIT\"},\"contracts/src/NuggFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './interfaces/INuggFT.sol';\\nimport './interfaces/IResolver.sol';\\n\\nimport './token/Token.sol';\\nimport './token/Tokenable.sol';\\nimport './swap/Swapable.sol';\\nimport './stake/Stakeable.sol';\\nimport './swap/Swap.sol';\\n\\ncontract NuggFT is INuggFT, Tokenable, Swapable, Stakeable {\\n    using EpochLib for uint256;\\n    using Vault for Vault.Storage;\\n    using Token for Token.Storage;\\n    using TokenLib for Token.Storage;\\n\\n    address public immutable override defaultResolver;\\n\\n    uint256 internal immutable _genesis;\\n\\n    Token.Storage internal _nuggft;\\n\\n    constructor(address _defaultResolver) Tokenable('NUGGFT', 'Nugg Fungible Token') {\\n        defaultResolver = _defaultResolver;\\n\\n        _genesis = block.number;\\n\\n        emit Genesis();\\n    }\\n\\n    function nuggft() internal view override(Swapable, Tokenable, Stakeable) returns (Token.Storage storage) {\\n        return _nuggft;\\n    }\\n\\n    function genesis() public view override(Swapable, ISwapable, Tokenable) returns (uint256) {\\n        return _genesis;\\n    }\\n\\n    function addToVault(uint256[][] calldata data) external {\\n        _nuggft._vault.set(data);\\n    }\\n\\n    function rawProcessURI(uint256 tokenId) public view returns (uint256[] memory res) {\\n        require(_nuggft._exists(tokenId) || tokenId == _genesis.activeEpoch(), 'NFT:NTM:0');\\n\\n        (, uint256[] memory ids, , uint256[] memory overrides) = _nuggft._exists(tokenId) ? parsedProofOf(tokenId) : ProofLib.pendingProof(_nuggft, _genesis);\\n\\n        bytes memory data = abi.encode(tokenId, ids, overrides, address(this));\\n\\n        uint256[][] memory files = _nuggft._vault.getBatch(ids);\\n\\n        res = IProcessResolver(defaultResolver).process(files, data, '');\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override(IERC721Metadata, Tokenable) returns (string memory res) {\\n        res = string(tokenURI(tokenId, _nuggft._hasResolver(tokenId) ? _nuggft._resolverOf(tokenId) : defaultResolver));\\n    }\\n\\n    function tokenURI(uint256 tokenId, address resolver) public view returns (bytes memory res) {\\n        require(_nuggft._exists(tokenId) || tokenId == _genesis.activeEpoch(), 'NFT:NTM:0');\\n\\n        (, uint256[] memory ids, , uint256[] memory overrides) = _nuggft._exists(tokenId) ? parsedProofOf(tokenId) : ProofLib.pendingProof(_nuggft, _genesis);\\n\\n        uint256[][] memory files = _nuggft._vault.getBatch(ids);\\n\\n        bytes memory data = abi.encode(tokenId, ids, overrides, address(this));\\n\\n        bytes memory customData = IPreProcessResolver(resolver).preProcess(data);\\n\\n        uint256[] memory processedFile = IProcessResolver(resolver).process(files, data, customData);\\n\\n        return IPostProcessResolver(resolver).postProcess(processedFile, data, customData);\\n    }\\n}\\n\",\"keccak256\":\"0x0535cb04a23412f2f1b4684f3b6a9ce9249fd558446ae6b8959657be96c4e552\",\"license\":\"MIT\"},\"contracts/src/interfaces/INuggFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\n\\ninterface IStakeable {\\n    event StakeEth(uint256 amount);\\n    event UnStakeEth(uint256 amount);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalStakedShares() external view returns (uint256);\\n\\n    function totalStakedEth() external view returns (uint256);\\n\\n    function activeEthPerShare() external view returns (uint256);\\n}\\n\\ninterface ITokenable is IERC721, IERC721Metadata {\\n    function proofOf(uint256 tokenId) external view returns (uint256);\\n\\n    function parsedProofOf(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint256 proof,\\n            uint256[] memory defaultIds,\\n            uint256[] memory extraIds,\\n            uint256[] memory overrides\\n        );\\n\\n    function resolverOf(uint256 tokenId) external view returns (address);\\n}\\n\\ninterface ISwapable {\\n    function delegate(uint256 tokenid) external payable;\\n\\n    function delegateItem(\\n        uint256 sellerTokenId,\\n        uint256 itemid,\\n        uint256 buyerTokenId\\n    ) external payable;\\n\\n    function mint(uint256 tokenid) external payable;\\n\\n    function commit(uint256 tokenid) external payable;\\n\\n    function commitItem(\\n        uint256 sellerTokenId,\\n        uint256 itemid,\\n        uint256 buyerTokenId\\n    ) external payable;\\n\\n    function offer(uint256 tokenid) external payable;\\n\\n    function offerItem(\\n        uint256 sellerTokenId,\\n        uint256 itemid,\\n        uint256 buyerTokenId\\n    ) external payable;\\n\\n    function claim(uint256 tokenid, uint256 endingEpoch) external;\\n\\n    function claimItem(\\n        uint256 sellerTokenId,\\n        uint256 itemid,\\n        uint256 buyerTokenId,\\n        uint256 endingEpoch\\n    ) external;\\n\\n    function swap(uint256 tokenid, uint256 floor) external;\\n\\n    function swapItem(\\n        uint256 tokenid,\\n        uint256 floor,\\n        uint256 itemid\\n    ) external;\\n\\n    function getOfferByAccount(\\n        uint256 tokenid,\\n        uint256 index,\\n        address account\\n    ) external view returns (uint256 eth);\\n\\n    function getActiveSwap(uint256 tokenid)\\n        external\\n        view\\n        returns (\\n            address leader,\\n            uint256 eth,\\n            uint256 _epoch,\\n            bool isOwner\\n        );\\n\\n    function genesis() external view returns (uint256 res);\\n\\n    function epoch() external view returns (uint256 res);\\n}\\n\\ninterface INuggFT is ISwapable, ITokenable {\\n    event PreMint(uint256 tokenId, uint256[] items);\\n\\n    event PopItem(uint256 tokenId, uint256 itemId);\\n\\n    event PushItem(uint256 tokenId, uint256 itemId);\\n\\n    event Mint(uint256 epoch, address account, uint256 eth);\\n\\n    event Commit(uint256 tokenid, address account, uint256 eth);\\n\\n    event Offer(uint256 tokenid, address account, uint256 eth);\\n\\n    event Claim(uint256 tokenid, uint256 endingEpoch, address account);\\n\\n    event Swap(uint256 tokenid, address account, uint256 eth);\\n\\n    event CommitItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 eth);\\n\\n    event OfferItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 eth);\\n\\n    event ClaimItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 endingEpoch);\\n\\n    event SwapItem(uint256 sellingTokenId, uint256 itemId, uint256 eth);\\n\\n    event OpenSlot(uint256 tokenId);\\n\\n    event Genesis();\\n\\n    function defaultResolver() external view returns (address);\\n}\\n\",\"keccak256\":\"0x55eb4fd93c0fd279a3b2bf0784ff26708fda01a1d6745db24ea3ef2ffd0670f4\",\"license\":\"MIT\"},\"contracts/src/interfaces/IResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\ninterface IProcessResolver is IERC165 {\\n    function process(\\n        uint256[][] memory files,\\n        bytes memory data,\\n        bytes memory preProcessData\\n    ) external view returns (uint256[] memory file);\\n\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool);\\n}\\n\\ninterface IPreProcessResolver is IERC165 {\\n    function preProcess(bytes memory data) external view returns (bytes memory preProcessData);\\n\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool);\\n}\\n\\ninterface IPostProcessResolver is IERC165 {\\n    function postProcess(\\n        uint256[] memory file,\\n        bytes memory data,\\n        bytes memory preProcessData\\n    ) external view returns (bytes memory res);\\n\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool);\\n}\\n\\ninterface INuggFtProcessor is IERC165, IPostProcessResolver, IProcessResolver, IPreProcessResolver {\\n    function postProcessor() external view returns (IPostProcessResolver);\\n\\n    function preProcessor() external view returns (IPreProcessResolver);\\n\\n    function processor() external view returns (IProcessResolver);\\n\\n    function supportsInterface(bytes4 interfaceId) external view override(IERC165, IPostProcessResolver, IProcessResolver, IPreProcessResolver) returns (bool);\\n}\\n\",\"keccak256\":\"0x23a2d536de4dcb04a51c9814a38716ba255fd940276307a156d9758c57746799\",\"license\":\"MIT\"},\"contracts/src/libraries/EpochLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport './ShiftLib.sol';\\n\\nlibrary EpochLib {\\n    using ShiftLib for uint256;\\n\\n    /**\\n     * @dev #TODO\\n     * @return res\\n     */\\n    function activeEpoch(uint256 genesis) internal view returns (uint256 res) {\\n        res = toEpoch(genesis, block.number);\\n    }\\n\\n    /**\\n     * @notice gets unique base based on given epoch and converts encoded bytes to object that can be merged\\n     * Note: by using the block hash no one knows what a nugg will look like before it's epoch.\\n     * We considered making this harder to manipulate, but we decided that if someone were able to\\n     * pull it off and make their own custom nugg, that would be really fucking cool.\\n     */\\n    function calculateSeed(uint256 genesis) internal view returns (uint256 res, uint256 epoch) {\\n        epoch = toEpoch(genesis, block.number);\\n        uint256 startblock = toStartBlock(genesis, epoch);\\n        bytes32 bhash = blockhash(startblock - 1);\\n        require(bhash != 0, 'EPC:SBL');\\n        res = uint256(keccak256(abi.encodePacked(bhash, epoch, address(this))));\\n    }\\n\\n    function interval() internal pure returns (uint256 res) {\\n        res = 25;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     * @return res\\n     */\\n    function toStartBlock(uint256 genesis, uint256 epoch) internal pure returns (uint256 res) {\\n        res = (epoch * interval()) + genesis;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     * @return res\\n     */\\n    function toEndBlock(uint256 genesis, uint256 epoch) internal pure returns (uint256 res) {\\n        res = toStartBlock(genesis, epoch + 1) - 1;\\n    }\\n\\n    function toEpoch(uint256 genesis, uint256 blocknum) internal pure returns (uint256 res) {\\n        res = (blocknum - genesis) / interval();\\n    }\\n}\\n\",\"keccak256\":\"0x7e7785f9653cd15baa9f86edd0f1d6cdf05b3056699beaafe6972c8e63f58ae8\",\"license\":\"MIT\"},\"contracts/src/libraries/QuadMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title QuadMath\\n * @notice a library for performing Quadruple-precision floating-point format math operations\\n * @dev #TODO\\n */\\nlibrary QuadMath {\\n    /**\\n     * @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @param a The multiplicand\\n     * @param b The multiplier\\n     * @param denominator The divisor\\n     * @return result The 256-bit result\\n     * @dev Credit to Uniswap under MIT license https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol\\n     */\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @param a The multiplicand\\n     * @param b The multiplier\\n     * @param denominator The divisor\\n     * @return result The 256-bit result\\n     * @dev Credit to Remco Bloemen under MIT license https:/an--2-umb.com/21/muldiv\\n     */\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        // fix for negation braking change in Solidity v8 - https://ethereum.stackexchange.com/a/96646\\n        uint256 twos = denominator & (~denominator + 1);\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n\\n        // this unchecked block is required for this to work with Solidity v8\\n        unchecked {\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xabfe5a4833bdb7d13403e55305444f033b31ff9cf50da4799175b8b26138bb2e\",\"license\":\"MIT\"},\"contracts/src/libraries/ShiftLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nlibrary ShiftLib {\\n    function submask(uint256 bits, uint256 offset) internal pure returns (uint256 res) {\\n        assembly {\\n            res := shl(not(sub(exp(2, bits), 1)), offset)\\n        }\\n    }\\n\\n    function fullsubmask(uint256 bits, uint256 offset) internal pure returns (uint256 res) {\\n        res = ~(mask(bits) << offset);\\n    }\\n\\n    function mask(uint256 bits) internal pure returns (uint256 res) {\\n        assembly {\\n            res := sub(exp(2, bits), 1)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x34eca0a2f91513022d5a3b3e9655a62939f65dad83eda86de378717e8ed21c68\",\"license\":\"MIT\"},\"contracts/src/proof/ProofLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport '../token/Token.sol';\\n\\nimport '../libraries/EpochLib.sol';\\n\\nimport './ProofType.sol';\\n\\nlibrary ProofLib {\\n    event SetProof(uint256 tokenId, uint256[] items); // CANGE\\n    event PopItem(uint256 tokenId, uint256 itemId);\\n    event PushItem(uint256 tokenId, uint256 itemId);\\n    event OpenSlot(uint256 tokenId);\\n\\n    uint256 constant ITEMID_SIZE = 12;\\n\\n    using ProofType for uint256;\\n    using Token for Token.Storage;\\n\\n    function proofOf(Token.Storage storage nuggft, uint256 tokenId) internal view returns (uint256 res) {\\n        res = nuggft._proofs[tokenId];\\n        require(res != 0, 'PROOF:PO:0');\\n    }\\n\\n    function hasProof(Token.Storage storage nuggft, uint256 tokenId) internal view returns (bool res) {\\n        res = nuggft._proofs[tokenId] != 0;\\n    }\\n\\n    function parseProof(Token.Storage storage nuggft, uint256 tokenId)\\n        internal\\n        view\\n        returns (\\n            uint256 proof,\\n            uint256[] memory defaultIds,\\n            uint256[] memory extraIds,\\n            uint256[] memory overrides\\n        )\\n    {\\n        proof = nuggft._proofOf(tokenId);\\n\\n        return parseProofLogic(proof);\\n\\n        // TODO HAVE TO IMPLEMENT OVERRIDES AND EXTRA IDS\\n        // defaultIds = new uint256[](8);\\n\\n        // for (uint256 i = 1; i < 6; i++) {\\n        //     defaultIds[i] = (proof >> (4 + (ITEMID_SIZE * 6) + ITEMID_SIZE * (i - 1)));\\n        // }\\n    }\\n\\n    function parseProofLogic(uint256 _proof)\\n        internal\\n        pure\\n        returns (\\n            uint256 proof,\\n            uint256[] memory defaultIds,\\n            uint256[] memory extraIds,\\n            uint256[] memory overrides\\n        )\\n    {\\n        proof = _proof;\\n        defaultIds = new uint256[](_proof & ShiftLib.mask(4));\\n\\n        for (uint256 i = 0; i < defaultIds.length; i++) {\\n            defaultIds[i] = (_proof >> (4 + i * 16)) & ShiftLib.mask(16);\\n        }\\n        extraIds = new uint256[](8);\\n        overrides = new uint256[](8);\\n    }\\n\\n    function pendingProof(Token.Storage storage nuggft, uint256 genesis)\\n        internal\\n        view\\n        returns (\\n            uint256 proof,\\n            uint256[] memory defaultIds,\\n            uint256[] memory extraIds,\\n            uint256[] memory overrides\\n        )\\n    {\\n        (uint256 seed, ) = EpochLib.calculateSeed(genesis);\\n\\n        uint256 lendata = nuggft._vault.lengthData;\\n\\n        seed = ProofType.initFromSeed(lendata, seed);\\n\\n        return parseProofLogic(seed);\\n    }\\n\\n    function setProof(\\n        Token.Storage storage nuggft,\\n        uint256 tokenId,\\n        uint256 genesis\\n    ) internal {\\n        require(!hasProof(nuggft, tokenId), 'IL:M:0');\\n\\n        (uint256 seed, uint256 epoch) = EpochLib.calculateSeed(genesis);\\n\\n        require(seed != 0, '721:MINT:0');\\n        require(epoch == tokenId, '721:MINT:1');\\n\\n        uint256 lendata = nuggft._vault.lengthData;\\n\\n        seed = ProofType.initFromSeed(lendata, seed);\\n\\n        nuggft._proofs[tokenId] = seed;\\n\\n        (, uint256[] memory items, , ) = parseProofLogic(seed);\\n\\n        emit SetProof(tokenId, items);\\n    }\\n\\n    function push(\\n        Token.Storage storage nuggft,\\n        uint256 tokenId,\\n        uint256 itemId\\n    ) internal {\\n        uint256 working = proofOf(nuggft, tokenId);\\n\\n        require(nuggft._ownedItems[itemId] > 0, '1155:SBTF:1');\\n\\n        nuggft._ownedItems[itemId]--;\\n\\n        (working, ) = working.pushFirstEmpty(uint16(itemId));\\n\\n        nuggft._proofs[tokenId] = working;\\n\\n        emit PushItem(tokenId, itemId);\\n    }\\n\\n    function pop(\\n        Token.Storage storage nuggft,\\n        uint256 tokenId,\\n        uint256 itemId\\n    ) internal {\\n        uint256 working = proofOf(nuggft, tokenId);\\n\\n        require(working != 0, '1155:STF:0');\\n\\n        (working, , ) = working.popFirstMatch(uint16(itemId));\\n\\n        nuggft._proofs[tokenId] = working;\\n\\n        nuggft._ownedItems[itemId]++;\\n\\n        emit PopItem(tokenId, itemId);\\n    }\\n\\n    function open(Token.Storage storage nuggft, uint256 tokenId) internal {\\n        uint256 working = proofOf(nuggft, tokenId);\\n\\n        working = working.size(working.size() + 1);\\n\\n        nuggft._proofs[tokenId] = working;\\n\\n        emit OpenSlot(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x00e2f7ebcc9970825c109412138a09a435acde5928a64730ed60b91552fb5f2a\",\"license\":\"MIT\"},\"contracts/src/proof/ProofType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport '../vault/LengthType.sol';\\n\\nimport '../../tests/Event.sol';\\n\\nlibrary ProofType {\\n    using LengthType for uint256;\\n\\n    uint256 constant ID_SIZE = 16;\\n    uint256 constant ID_FEATURE_SIZE = 4;\\n    uint256 constant ID_NUMBER_SIZE = 12;\\n\\n    function initFromSeed(uint256 lengthData, uint256 seed) internal pure returns (uint256 res) {\\n        require(seed != 0, 'seed');\\n\\n        uint256 pick0 = ((seed >> (4 + ID_SIZE * 0)) & ShiftLib.mask(ID_NUMBER_SIZE)) % lengthData.length(0);\\n        uint256 pick1 = ((seed >> (4 + ID_SIZE * 1)) & ShiftLib.mask(ID_NUMBER_SIZE)) % lengthData.length(1);\\n        uint256 pick2 = ((seed >> (4 + ID_SIZE * 2)) & ShiftLib.mask(ID_NUMBER_SIZE)) % lengthData.length(2);\\n\\n        uint256 pick3 = (seed >> 69) % 256;\\n\\n        uint256 num = (seed >> (4 + ID_SIZE * 3)) & ShiftLib.mask(ID_NUMBER_SIZE);\\n\\n        if (pick3 < 96) {\\n            pick3 = (3 << ID_NUMBER_SIZE) | (num % (lengthData.length(3)));\\n        } else if (pick3 < 192) {\\n            pick3 = (4 << ID_NUMBER_SIZE) | (num % (lengthData.length(4)));\\n        } else if (pick3 < 250) {\\n            pick3 = (5 << ID_NUMBER_SIZE) | (num % (lengthData.length(5)));\\n        } else {\\n            pick3 = (6 << ID_NUMBER_SIZE) | (num % (lengthData.length(6)));\\n        }\\n        pick1 |= 1 << ID_NUMBER_SIZE;\\n        pick2 |= 2 << ID_NUMBER_SIZE;\\n\\n        res = (pick3 << (3 * ID_SIZE + 4)) | (pick2 << (2 * ID_SIZE + 4)) | (pick1 << (1 * ID_SIZE + 4)) | (pick0 << 4) | 4;\\n    }\\n\\n    function size(uint256 input, uint256 update) internal pure returns (uint256 res) {\\n        require(update < ShiftLib.mask(4), 'PT:DS:0');\\n        res = input & ShiftLib.fullsubmask(4, 0);\\n        res |= update;\\n    }\\n\\n    function size(uint256 input) internal pure returns (uint256 res) {\\n        res = input & ShiftLib.mask(4);\\n    }\\n\\n    function items(uint256 input) internal pure returns (uint256[] memory res) {\\n        uint256 s = size(input);\\n        res = new uint256[](s);\\n        input >>= 4;\\n        for (uint256 i = 0; i < s; i++) {\\n            res[i] = input & 0xffff;\\n            input >>= 16;\\n        }\\n    }\\n\\n    function pushItem(\\n        uint256 input,\\n        uint16 itm,\\n        uint8 at\\n    ) internal pure returns (uint256 res) {\\n        assembly {\\n            let offset := add(4, mul(16, at))\\n            res := and(input, not(shl(offset, 0xffff)))\\n            res := or(input, shl(offset, itm))\\n        }\\n    }\\n\\n    function popItem(uint256 input, uint8 at) internal pure returns (uint256 res, uint16 itm) {\\n        assembly {\\n            let offset := add(4, mul(16, at))\\n            res := and(input, not(shl(offset, 0xffff)))\\n            itm := shr(offset, input)\\n        }\\n    }\\n\\n    function pushFirstEmpty(uint256 input, uint16 itemId) internal pure returns (uint256 res, uint8 index) {\\n        uint256[] memory _items = items(input);\\n        for (uint8 i = 0; i < _items.length; i++) {\\n            if (_items[i] == 0) {\\n                index = i + 1;\\n                break;\\n            }\\n        }\\n\\n        require(index > 0, 'SL:PFM:A');\\n\\n        index--;\\n\\n        res = pushItem(input, itemId, index);\\n    }\\n\\n    function popFirstMatch(uint256 input, uint16 itemId)\\n        internal\\n        view\\n        returns (\\n            uint256 res,\\n            uint16 popped,\\n            uint8 index\\n        )\\n    {\\n        uint256[] memory _items = items(input);\\n\\n        Event.log(items(input), 'items(input)');\\n        for (uint8 i = 0; i < _items.length; i++) {\\n            if (_items[i] == itemId) {\\n                index = i + 1;\\n                break;\\n            }\\n        }\\n        Event.log(input, 'input', itemId, 'itemId', index, 'index');\\n        require(index > 0, 'SL:PFM:0');\\n\\n        index--;\\n\\n        (res, popped) = popItem(input, index);\\n\\n        require(popped == itemId, 'SL:PFM:1');\\n    }\\n}\\n\\n// 1.5 x each feature for a coordinate (0.75 x 2)\\n// 2 byte each feature for expanders coordinate (16, 16, 16, 16)\\n// 1 byte each feature for expanders amount (4, 4, 4, 4)\\n\\n// 3 | 1/2 bytes - base ---- 8 | .5 --- 8 | .5   ---- 1 vars\\n\\n// 8 | 1 bytes - head\\n// 8 | 1 bytes - eyes\\n// 8 | 1 bytes - mouth\\n// 8 | 1 bytes - back\\n// 8 | 1 bytes - hair\\n// 8 | 1 bytes - neck ---- 48 | 6 --- 51 | 6.5    ----- 6 vars\\n\\n// 8 | 1 bytes - head\\n// 8 | 1 bytes - eyes\\n// 8 | 1 bytes - mouth\\n// 8 | 1 bytes - back\\n// 8 | 1 bytes - hair\\n// 8 | 1 bytes - neck ---- 48 | 6  -- 99 | 12.5 ---- 6 vars\\n\\n// 12 | 1.5 bytes - head coordinate\\n// 12 | 1.5 bytes - eyes coordinate\\n// 12 | 1.5 bytes - mouth coordinate\\n// 12 | 1.5 bytes - back coordinate\\n// 12 | 1.5 bytes - hair coordinate\\n// 12 | 1.5 bytes - neck coordinate ---- 159-    ----- 12 vars\\n\\n// 3            - expander 3 feat      ------- 3 vars\\n\\n// 3            - expander 1 feat\\n// 24 | 3 bytes - expander 1\\n// 3            - expander 2 feat\\n// 24 | 3 bytes - expander 2\\n// 24 | 3 bytes - expander 3       - 24 vars\\n\",\"keccak256\":\"0xd0aa9f8d959e5b17a217a037a821323bb73f998d7cac298d077983027e603454\",\"license\":\"MIT\"},\"contracts/src/stake/StakeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../token/Token.sol';\\nimport './StakeType.sol';\\n\\n/**\\n * @title StakeMath\\n * @notice a library for performing staking operations\\n * @dev #TODO\\n */\\nlibrary StakeLib {\\n    using QuadMath for uint256;\\n    using StakeType for uint256;\\n\\n    event StakeEth(uint256 amount);\\n    event UnStakeEth(uint256 amount);\\n\\n    function addStakedSharesAndEth(\\n        Token.Storage storage nuggft,\\n        uint256 shares,\\n        uint256 eth\\n    ) internal {\\n        require(shares < ShiftLib.mask(64) && eth < ShiftLib.mask(192), 'SL:SS:0');\\n\\n        (uint256 activeShare, uint256 activeEth) = nuggft._stake.getStakedSharesAndEth();\\n\\n        nuggft._stake = nuggft._stake.setStakedShares(activeShare + shares).setStakedEth(activeEth + eth);\\n        emit StakeEth(eth);\\n    }\\n\\n    function addStakedShares(Token.Storage storage nuggft, uint256 amount) internal {\\n        require(amount < ShiftLib.mask(64), 'SL:SS:0');\\n\\n        uint256 activeShares = nuggft._stake.getStakedShares();\\n\\n        nuggft._stake = nuggft._stake.setStakedShares(activeShares + amount);\\n    }\\n\\n    function subStakedShares(Token.Storage storage nuggft, uint256 amount) internal {\\n        uint256 activeShares = nuggft._stake.getStakedShares();\\n\\n        require(activeShares >= amount, 'SL:SS:0');\\n\\n        nuggft._stake = nuggft._stake.setStakedShares(activeShares - amount);\\n    }\\n\\n    function addStakedEth(Token.Storage storage nuggft, uint256 amount) internal {\\n        require(amount < ShiftLib.mask(192), 'SL:SS:0');\\n\\n        uint256 activeEth = nuggft._stake.getStakedEth();\\n\\n        nuggft._stake = nuggft._stake.setStakedEth(activeEth + amount);\\n        emit StakeEth(amount);\\n    }\\n\\n    function subStakedEth(Token.Storage storage nuggft, uint256 amount) internal {\\n        uint256 activeEth = nuggft._stake.getStakedEth();\\n\\n        require(activeEth >= amount, 'SL:SS:0');\\n\\n        nuggft._stake = nuggft._stake.setStakedEth(activeEth - amount);\\n        emit UnStakeEth(amount);\\n    }\\n\\n    function getActiveEthPerShare(Token.Storage storage nuggft) internal view returns (uint256 res) {\\n        uint256 stake = nuggft._stake;\\n        res = sharesToEth(1, stake.getStakedEth(), stake.getStakedShares(), false);\\n    }\\n\\n    function getActiveStakedShares(Token.Storage storage nuggft) internal view returns (uint256 res) {\\n        res = nuggft._stake.getStakedShares();\\n    }\\n\\n    function getActiveStakedEth(Token.Storage storage nuggft) internal view returns (uint256 res) {\\n        res = nuggft._stake.getStakedEth();\\n    }\\n\\n    function sharesToEth(\\n        uint256 share_amount,\\n        uint256 active_eth_supply,\\n        uint256 active_shares,\\n        bool roundup\\n    ) private pure returns (uint256 res) {\\n        res = roundup ? share_amount.mulDivRoundingUp(active_eth_supply, active_shares) : share_amount.mulDiv(active_eth_supply, active_shares);\\n    }\\n}\\n\",\"keccak256\":\"0xa26d30e5a1bcf26a2cffb6ac8e391476bd42d7f7e8f72564c9c7c63005917177\",\"license\":\"MIT\"},\"contracts/src/stake/StakeType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport '../libraries/ShiftLib.sol';\\n\\nlibrary StakeType {\\n    function getStakedEth(uint256 state) internal pure returns (uint256 res) {\\n        res = state & ShiftLib.mask(192);\\n    }\\n\\n    function setStakedShares(uint256 state, uint256 update) internal pure returns (uint256 res) {\\n        res = state & ShiftLib.mask(192);\\n        res |= (update << 192);\\n    }\\n\\n    function setStakedEth(uint256 state, uint256 update) internal pure returns (uint256 res) {\\n        res = state & (ShiftLib.mask(64) << 192);\\n        res |= update;\\n    }\\n\\n    function getStakedShares(uint256 state) internal pure returns (uint256 res) {\\n        res = state >> 192;\\n    }\\n\\n    function getStakedSharesAndEth(uint256 state) internal pure returns (uint256 shares, uint256 eth) {\\n        shares = getStakedShares(state);\\n        eth = getStakedEth(eth);\\n    }\\n}\\n\",\"keccak256\":\"0xc9292e30f2e130cb4674de36cfe70f4b8278837a543598fcb18cacfe1362617a\",\"license\":\"MIT\"},\"contracts/src/stake/Stakeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../token/Token.sol';\\nimport './StakeLib.sol';\\nimport '../interfaces/INuggFT.sol';\\n\\nabstract contract Stakeable is IStakeable {\\n    using StakeLib for Token.Storage;\\n\\n    // Token.Storage internal nuggft();\\n    function nuggft() internal view virtual returns (Token.Storage storage);\\n\\n    function totalSupply() public view override returns (uint256 res) {\\n        res = totalStakedShares();\\n    }\\n\\n    function totalStakedShares() public view override returns (uint256 res) {\\n        res = nuggft().getActiveStakedShares();\\n    }\\n\\n    function totalStakedEth() public view override returns (uint256 res) {\\n        res = nuggft().getActiveStakedEth();\\n    }\\n\\n    function activeEthPerShare() public view override returns (uint256 res) {\\n        res = nuggft().getActiveEthPerShare();\\n    }\\n}\\n\",\"keccak256\":\"0xb6c5a0050ecba86ed5911be6937aeb65b11b00e8c28ebbbe968b580964eb7698\",\"license\":\"MIT\"},\"contracts/src/swap/Swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport '../libraries/ShiftLib.sol';\\nimport '../libraries/QuadMath.sol';\\n\\nimport './SwapType.sol';\\n\\nlibrary Swap {\\n    using SwapType for uint256;\\n\\n    struct History {\\n        Storage self;\\n        mapping(uint256 => Storage) items;\\n    }\\n\\n    struct Storage {\\n        uint256 data;\\n        mapping(uint256 => mapping(uint160 => uint256)) offers;\\n    }\\n\\n    function loadStorage(Storage storage s, address account) internal view returns (uint256 swapData, uint256 offerData) {\\n        return loadStorage(s, uint160(account));\\n    }\\n\\n    function loadStorage(\\n        Storage storage s,\\n        address account,\\n        uint256 epoch\\n    ) internal view returns (uint256 swapData, uint256 offerData) {\\n        return loadStorage(s, uint160(account), epoch);\\n    }\\n\\n    function loadStorage(Storage storage s, uint160 account) internal view returns (uint256 swapData, uint256 offerData) {\\n        swapData = s.data;\\n\\n        offerData = swapData == 0 || account == swapData.account() ? swapData : s.offers[swapData.epoch()][account];\\n    }\\n\\n    function loadStorage(\\n        Storage storage s,\\n        uint160 account,\\n        uint256 epoch\\n    ) internal view returns (uint256 swapData, uint256 offerData) {\\n        swapData = s.data;\\n\\n        swapData = swapData.epoch() == epoch ? swapData : 0;\\n\\n        offerData = swapData != 0 && account == swapData.account() ? swapData : s.offers[epoch][account];\\n    }\\n\\n    function checkClaimer(\\n        uint160 account,\\n        uint256 swapData,\\n        uint256 offerData,\\n        uint256 activeEpoch\\n    ) internal pure returns (bool winner) {\\n        require(offerData != 0, 'SL:CC:1');\\n\\n        bool over = activeEpoch > swapData.epoch();\\n\\n        return swapData.isOwner() || (account == swapData.account() && over);\\n    }\\n\\n    // function points(uint256 total, uint256 bps) internal pure returns (uint256 res) {\\n    //     res = QuadMath.mulDiv(total, bps, 10000);\\n    // }\\n\\n    // function pointsWith(uint256 total, uint256 bps) internal pure returns (uint256 res) {\\n    //     res = points(total, bps) + total;\\n    // }\\n\\n    // function itemTokenId(uint256 itemid, uint256 tokenid) internal pure returns (uint256 res) {\\n    //     res = (tokenid << 16) | itemid;\\n    // }\\n\\n    // function tokenIdToAddress(uint256 tokenid) internal pure returns (address res) {\\n    //     res = address(uint160((0x42069 << 140) | tokenid));\\n    // }\\n\\n    // function addressToTokenId(address addr) internal pure returns (uint256 res) {\\n    //     res = uint136(uint160(addr));\\n    // }\\n\\n    // function isTokenIdAddress(address addr) internal view returns (bool res) {\\n    //     if (uint160(addr) >> 80 == 0x42069 << 60) return true;\\n    // }\\n}\\n\",\"keccak256\":\"0xb7e6daaee658666362b7aaba545fed49b876c096bbbe9afa592c1048220950b4\",\"license\":\"MIT\"},\"contracts/src/swap/SwapItemLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport '../token/TokenLib.sol';\\nimport '../proof/ProofLib.sol';\\n\\nimport './Swap.sol';\\n\\nimport './SwapLib.sol';\\nimport './SwapType.sol';\\n\\nimport '../libraries/EpochLib.sol';\\n\\nlibrary SwapItemLib {\\n    using EpochLib for uint256;\\n    using ShiftLib for uint256;\\n    using Address for address payable;\\n    using QuadMath for uint256;\\n\\n    using SwapType for uint256;\\n    using Swap for Swap.Storage;\\n\\n    using ProofLib for uint256;\\n\\n    using Token for Token.Storage;\\n\\n    event CommitItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 eth);\\n\\n    event OfferItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 eth);\\n\\n    event ClaimItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 endingEpoch);\\n\\n    event SwapItem(uint256 sellingTokenId, uint256 itemId, uint256 eth);\\n\\n    function getSwap(\\n        Token.Storage storage nuggft,\\n        uint256 sellingTokenId,\\n        uint256 itemId\\n    ) internal returns (Swap.Storage storage) {\\n        return nuggft._swaps[sellingTokenId].items[itemId];\\n    }\\n\\n    function delegateItem(\\n        Token.Storage storage nuggft,\\n        uint256 genesis,\\n        uint256 sellingTokenId,\\n        uint256 itemId,\\n        uint160 sendingTokenId\\n    ) internal {\\n        require(nuggft._ownerOf(sendingTokenId) == msg.sender, 'AUC:TT:3');\\n\\n        Swap.Storage storage _swap = nuggft._swaps[sellingTokenId].items[itemId];\\n\\n        (uint256 swapData, uint256 offerData) = _swap.loadStorage(sendingTokenId);\\n        Event.log(sellingTokenId, 'sellingTokenId', itemId, 'itemId', sendingTokenId, 'sendingTokenId');\\n\\n        Event.log(swapData, 'swapData', offerData, 'offerData', genesis, 'genesis');\\n\\n        if (offerData == 0 && swapData.isOwner()) {\\n            commitItem(nuggft, genesis, sellingTokenId, itemId, sendingTokenId);\\n        } else {\\n            offerItem(nuggft, genesis, sellingTokenId, itemId, sendingTokenId);\\n        }\\n    }\\n\\n    function commitItem(\\n        Token.Storage storage nuggft,\\n        uint256 genesis,\\n        uint256 sellingTokenId,\\n        uint256 itemId,\\n        uint160 sendingTokenId\\n    ) internal {\\n        require(itemId < 0xffff, 'ML:CI:0');\\n\\n        require(nuggft._ownerOf(sendingTokenId) == msg.sender, 'AUC:TT:3');\\n\\n        Swap.Storage storage _swap = nuggft._swaps[sellingTokenId].items[itemId];\\n\\n        SwapLib._commitCore(nuggft, _swap, genesis, sendingTokenId);\\n\\n        emit CommitItem(sellingTokenId, itemId, sendingTokenId, msg.value);\\n    }\\n\\n    function offerItem(\\n        Token.Storage storage nuggft,\\n        uint256 genesis,\\n        uint256 sellingTokenId,\\n        uint256 itemId,\\n        uint160 sendingTokenId\\n    ) internal {\\n        require(itemId < 256, 'ML:OI:0');\\n\\n        require(nuggft._ownerOf(sendingTokenId) == msg.sender, 'AUC:TT:3');\\n\\n        Swap.Storage storage _swap = nuggft._swaps[sellingTokenId].items[itemId];\\n\\n        SwapLib._offerCore(nuggft, _swap, genesis, sendingTokenId);\\n\\n        emit OfferItem(sellingTokenId, itemId, sendingTokenId, msg.value);\\n    }\\n\\n    function claimItem(\\n        Token.Storage storage nuggft,\\n        uint256 genesis,\\n        uint256 sellingTokenId,\\n        uint256 itemId,\\n        uint256 endingEpoch,\\n        uint160 buyingTokenId\\n    ) internal {\\n        require(nuggft._ownerOf(buyingTokenId) == msg.sender, 'AUC:TT:3');\\n\\n        require(itemId < 0xffff, 'ML:CI:0');\\n\\n        Swap.Storage storage _swap = nuggft._swaps[sellingTokenId].items[itemId];\\n\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = _swap.loadStorage(buyingTokenId, endingEpoch);\\n\\n        delete _swap.offers[endingEpoch][buyingTokenId];\\n\\n        if (Swap.checkClaimer(buyingTokenId, swapData, offerData, activeEpoch)) {\\n            delete _swap.data;\\n\\n            ProofLib.push(nuggft, buyingTokenId, itemId);\\n        } else {\\n            payable(msg.sender).sendValue(offerData.eth());\\n        }\\n\\n        emit ClaimItem(sellingTokenId, itemId, buyingTokenId, endingEpoch);\\n    }\\n\\n    function swapItem(\\n        Token.Storage storage nuggft,\\n        uint256 itemId,\\n        uint256 floor,\\n        uint160 sellingTokenId\\n    ) internal {\\n        require(nuggft._ownerOf(sellingTokenId) == msg.sender, 'AUC:TT:3');\\n\\n        require(itemId < 0xffff, 'ML:SI:0');\\n\\n        Swap.Storage storage _swap = nuggft._swaps[sellingTokenId].items[itemId];\\n\\n        (uint256 swapData, ) = _swap.loadStorage(sellingTokenId);\\n\\n        // make sure swap does not exist\\n        require(swapData == 0, 'NS:SS:0');\\n\\n        // build starting swap data\\n        (swapData, ) = swapData.account(sellingTokenId).isOwner(true).eth(floor);\\n\\n        _swap.data = swapData;\\n\\n        ProofLib.pop(nuggft, sellingTokenId, itemId);\\n\\n        emit SwapItem(sellingTokenId, itemId, floor);\\n    }\\n}\\n\",\"keccak256\":\"0x4c4111bd129d197777ad5e62751e8a5016cf5cbb53c37565a8bc5b3c19b982f4\",\"license\":\"MIT\"},\"contracts/src/swap/SwapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport '../token/TokenLib.sol';\\nimport '../proof/ProofLib.sol';\\n\\nimport './Swap.sol';\\n\\nimport './SwapLib.sol';\\nimport './SwapType.sol';\\n\\nimport '../libraries/EpochLib.sol';\\nimport '../stake/StakeLib.sol';\\n\\nimport '../../tests/Event.sol';\\n\\nlibrary SwapLib {\\n    using EpochLib for uint256;\\n    using ShiftLib for uint256;\\n    using Address for address payable;\\n    using QuadMath for uint256;\\n    using SwapType for uint256;\\n    using ProofLib for uint256;\\n\\n    using Swap for Swap.Storage;\\n    using StakeLib for Token.Storage;\\n    using ProofLib for Token.Storage;\\n    using TokenLib for Token.Storage;\\n\\n    event Mint(uint256 epoch, address account, uint256 eth);\\n    event Commit(uint256 tokenid, address account, uint256 eth);\\n    event Offer(uint256 tokenid, address account, uint256 eth);\\n    event Claim(uint256 tokenid, uint256 endingEpoch, address account);\\n    event StartSwap(uint256 tokenid, address account, uint256 eth);\\n\\n    function delegate(\\n        Token.Storage storage nuggft,\\n        uint256 genesis,\\n        uint256 tokenid\\n    ) internal {\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = nuggft._swaps[tokenid].self.loadStorage(msg.sender);\\n\\n        if (activeEpoch == tokenid && swapData == 0) {\\n            mint(nuggft, genesis, tokenid);\\n        } else if (offerData == 0 && swapData.isOwner()) {\\n            commit(nuggft, genesis, tokenid);\\n        } else {\\n            offer(nuggft, genesis, tokenid);\\n        }\\n    }\\n\\n    function mint(\\n        Token.Storage storage nuggft,\\n        uint256 genesis,\\n        uint256 tokenid\\n    ) internal returns (uint256 newSwapData) {\\n        Swap.Storage storage _swap = nuggft._swaps[tokenid].self;\\n\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = _swap.loadStorage(msg.sender);\\n\\n        // we do not need this, could take tokenid out as an argument - but do not want to give users\\n        // the ability to accidently place an offer for nugg A and end up minting nugg B.\\n        require(activeEpoch == tokenid, 'NS:M:0');\\n\\n        require(swapData == 0, 'NS:M:D');\\n\\n        (newSwapData, ) = uint256(0).epoch(activeEpoch).account(uint160(msg.sender)).eth(msg.value);\\n\\n        _swap.data = newSwapData;\\n\\n        nuggft.setProof(tokenid, genesis);\\n\\n        nuggft.addStakedSharesAndEth(1, msg.value);\\n\\n        emit Mint(activeEpoch, msg.sender, newSwapData.eth());\\n    }\\n\\n    function commit(\\n        Token.Storage storage nuggft,\\n        uint256 genesis,\\n        uint256 tokenId\\n    ) internal {\\n        Swap.Storage storage _swap = nuggft._swaps[tokenId].self;\\n\\n        // Event.log(tokenId, 'tokenId');\\n\\n        _commitCore(nuggft, _swap, genesis, uint160(msg.sender));\\n\\n        emit Commit(tokenId, msg.sender, msg.value);\\n    }\\n\\n    function _commitCore(\\n        Token.Storage storage nuggft,\\n        Swap.Storage storage _swap,\\n        uint256 genesis,\\n        uint160 sender\\n    ) internal {\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = _swap.loadStorage(sender);\\n\\n        require(msg.value > 0, 'SL:COM:2');\\n\\n        require(offerData == 0 && swapData != 0, 'SL:HSO:0');\\n\\n        // Event.log(swapData, 'swapData');\\n\\n        require(swapData.isOwner(), 'SL:HSO:1');\\n\\n        uint256 _epoch = activeEpoch + 1;\\n\\n        // copy relevent items from swapData to newSwapData\\n        (uint256 newSwapData, uint256 dust) = uint256(0).epoch(_epoch).account(sender).eth(msg.value);\\n\\n        require(swapData.eth().mulDiv(100, 10000) < newSwapData.eth(), 'SL:OBP:4');\\n\\n        _swap.offers[_epoch][swapData.account()] = swapData;\\n\\n        _swap.data = newSwapData;\\n\\n        nuggft.addStakedEth(newSwapData.eth() - swapData.eth() + dust);\\n    }\\n\\n    function offer(\\n        Token.Storage storage nuggft,\\n        uint256 genesis,\\n        uint256 tokenid\\n    ) internal {\\n        Swap.Storage storage _swap = nuggft._swaps[tokenid].self;\\n\\n        _offerCore(nuggft, _swap, genesis, uint160(msg.sender));\\n\\n        emit Offer(tokenid, msg.sender, msg.value);\\n    }\\n\\n    function _offerCore(\\n        Token.Storage storage nuggft,\\n        Swap.Storage storage _swap,\\n        uint256 genesis,\\n        uint160 sender\\n    ) internal {\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = _swap.loadStorage(sender);\\n\\n        require(msg.value > 0, 'SL:OBP:2');\\n\\n        require(swapData != 0, 'NS:0:0');\\n\\n        // make sure user is not the owner of swap\\n        // we do not know how much to give them when they call \\\"claim\\\" otherwise\\n        require(!offerData.isOwner(), 'SL:HSO:0');\\n\\n        // if (swapData.epoch() == 0 && swapData.isOwner()) swapData = swapData.epoch(activeEpoch + 1);\\n\\n        // make sure swap is still active\\n        require(activeEpoch <= swapData.epoch(), 'SL:OBP:3');\\n\\n        // save prev offers data\\n        if (swapData.account() != sender) _swap.offers[swapData.epoch()][swapData.account()] = swapData;\\n\\n        // copy relevent items from swapData to newSwapData\\n        (uint256 newSwapData, uint256 dust) = uint256(0).epoch(swapData.epoch()).account(sender).eth(offerData.eth() + msg.value);\\n\\n        require(swapData.eth().mulDiv(100, 10000) < newSwapData.eth(), 'SL:OBP:4');\\n\\n        _swap.data = newSwapData;\\n\\n        nuggft.addStakedEth(newSwapData.eth() - swapData.eth() + dust);\\n    }\\n\\n    function claim(\\n        Token.Storage storage nuggft,\\n        uint256 genesis,\\n        uint256 tokenid,\\n        uint256 endingEpoch\\n    ) internal {\\n        Swap.Storage storage _swap = nuggft._swaps[tokenid].self;\\n\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = _swap.loadStorage(msg.sender, endingEpoch);\\n\\n        delete _swap.offers[endingEpoch][uint160(msg.sender)];\\n\\n        if (Swap.checkClaimer(uint160(msg.sender), swapData, offerData, activeEpoch)) {\\n            delete _swap.data;\\n            if (endingEpoch == swapData.epoch()) {\\n                nuggft.checkedMintTo(msg.sender, tokenid);\\n            } else {\\n                nuggft.checkedTransferFromSelf(msg.sender, tokenid);\\n            }\\n        } else {\\n            payable(msg.sender).sendValue(offerData.eth());\\n        }\\n\\n        emit Claim(tokenid, endingEpoch, msg.sender);\\n    }\\n\\n    function swap(\\n        Token.Storage storage nuggft,\\n        uint256 tokenid,\\n        uint256 floor\\n    ) internal {\\n        Swap.Storage storage _swap = nuggft._swaps[tokenid].self;\\n\\n        (uint256 swapData, ) = _swap.loadStorage(msg.sender);\\n\\n        // make sure swap does not exist\\n        require(swapData == 0, 'NS:SS:0');\\n\\n        // build starting swap data\\n        (swapData, ) = swapData.account(uint160(msg.sender)).isOwner(true).eth(floor);\\n\\n        _swap.data = swapData;\\n\\n        nuggft.approvedTransferToSelf(msg.sender, tokenid);\\n\\n        emit StartSwap(tokenid, msg.sender, floor);\\n    }\\n}\\n\",\"keccak256\":\"0xcd9e09c63895780d7957603427611177c12495aa78451dfbbd416782a943c13a\",\"license\":\"MIT\"},\"contracts/src/swap/SwapType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nlibrary SwapType {\\n\\n\\n    function eth(uint256 input) internal pure returns (uint256 res) {\\n        assembly {\\n            res := and(shr(160, input), 0xFFFFFFFFFFFFFF)\\n            let i := and(res, 0xff)\\n            res := shl(mul(4, i), shr(8, res))\\n            res := mul(res, 0xE8D4A51000)\\n        }\\n    }\\n\\n    // 14 f's\\n    function eth(uint256 input, uint256 update) internal pure returns (uint256 res, uint256 rem) {\\n        assembly {\\n            let in := update\\n            update := div(update, 0xE8D4A51000)\\n            for {\\n            } gt(update, 0xFFFFFFFFFFFF) {\\n                // 13\\n            } {\\n                res := add(res, 0x01)\\n                update := shr(4, update)\\n            }\\n            update := or(shl(8, update), res)\\n            let out := shl(mul(4, res), shr(8, update))\\n            rem := sub(in, mul(out, 0xE8D4A51000))\\n            input := and(input, 0xffffffffff00000000000000ffffffffffffffffffffffffffffffffffffffff)\\n            res := or(input, shl(160, update))\\n        }\\n    }\\n\\n    // 9 f's\\n    function epoch(uint256 input, uint256 update) internal pure returns (uint256 res) {\\n        assert(update <= 0xFFFFFFFFF);\\n        assembly {\\n            res := and(input, 0xf000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            res := or(res, shl(216, update))\\n        }\\n    }\\n\\n    function epoch(uint256 input) internal pure returns (uint256 res) {\\n        assembly {\\n            res := and(shr(216, input), 0xFFFFFFFFF)\\n        }\\n    }\\n\\n    function account(uint256 input) internal pure returns (uint160 res) {\\n        assembly {\\n            res := input\\n        }\\n    }\\n\\n    function account(uint256 input, uint160 update) internal pure returns (uint256 res) {\\n        assembly {\\n            input := and(input, 0xffffffffffffffffffffffff0000000000000000000000000000000000000000)\\n            res := or(input, update)\\n        }\\n    }\\n\\n        function isOwner(uint256 input, bool) internal pure returns (uint256 res) {\\n        assembly {\\n            res := or(input, shl(255, 0x1))\\n        }\\n    }\\n\\n    function isOwner(uint256 input) internal pure returns (bool res) {\\n        assembly {\\n            res := and(shr(255, input), 0x1)\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x3d8e571465c75a0abcb890cc595a9082398b821eb95b33fe072a82518815a415\",\"license\":\"MIT\"},\"contracts/src/swap/Swapable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../token/Token.sol';\\nimport './Swap.sol';\\nimport './SwapLib.sol';\\nimport './SwapItemLib.sol';\\n\\nimport '../interfaces/INuggFT.sol';\\n\\nabstract contract Swapable is ISwapable {\\n    function genesis() public view virtual override returns (uint256);\\n\\n    function nuggft() internal view virtual returns (Token.Storage storage);\\n\\n    using SwapType for uint256;\\n    using EpochLib for uint256;\\n\\n    using Swap for Swap.Storage;\\n\\n    using SwapLib for Token.Storage;\\n    using SwapItemLib for Token.Storage;\\n\\n    constructor() {}\\n\\n    function getActiveSwap(uint256 tokenid)\\n        external\\n        view\\n        override\\n        returns (\\n            address leader,\\n            uint256 amount,\\n            uint256 _epoch,\\n            bool isOwner\\n        )\\n    {\\n        (uint256 swapData, ) = nuggft()._swaps[tokenid].self.loadStorage(address(0));\\n        require(swapData != 0, 'NS:GS:0');\\n        leader = address(swapData.account());\\n        amount = swapData.eth();\\n        _epoch = swapData.epoch();\\n        isOwner = swapData.isOwner();\\n    }\\n\\n    function getOfferByAccount(\\n        uint256 tokenid,\\n        uint256 index,\\n        address account\\n    ) external view override returns (uint256 amount) {\\n        (, uint256 offerData) = nuggft()._swaps[tokenid].self.loadStorage(account, index);\\n        require(offerData != 0, 'NS:GS:0');\\n        amount = offerData.eth();\\n    }\\n\\n    function epoch() external view override returns (uint256 res) {\\n        res = genesis().activeEpoch();\\n    }\\n\\n    function delegate(uint256 tokenid) external payable override {\\n        nuggft().delegate(genesis(), tokenid);\\n    }\\n\\n    function mint(uint256 tokenid) external payable override {\\n        nuggft().mint(genesis(), tokenid);\\n    }\\n\\n    function delegateItem(\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 buyingTokenId\\n    ) external payable override {\\n        nuggft().delegateItem(genesis(), sellingTokenId, itemid, uint160(buyingTokenId));\\n    }\\n\\n    function commit(uint256 tokenid) external payable override {\\n        nuggft().commit(genesis(), tokenid);\\n    }\\n\\n    function commitItem(\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 buyingTokenId\\n    ) external payable override {\\n        nuggft().commitItem(genesis(), sellingTokenId, itemid, uint160(buyingTokenId));\\n    }\\n\\n    function offer(uint256 tokenid) external payable override {\\n        nuggft().offer(genesis(), tokenid);\\n    }\\n\\n    function offerItem(\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 buyingTokenId\\n    ) external payable override {\\n        nuggft().offerItem(genesis(), sellingTokenId, itemid, uint160(buyingTokenId));\\n    }\\n\\n    function claim(uint256 tokenid, uint256 endingEpoch) external override {\\n        nuggft().claim(genesis(), tokenid, endingEpoch);\\n    }\\n\\n    function claimItem(\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 buyingTokenId,\\n        uint256 endingEpoch\\n    ) external override {\\n        nuggft().claimItem(genesis(), sellingTokenId, itemid, endingEpoch, uint160(buyingTokenId));\\n    }\\n\\n    function swap(uint256 tokenid, uint256 floor) external override {\\n        nuggft().swap(tokenid, floor);\\n    }\\n\\n    function swapItem(\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 floor\\n    ) external override {\\n        nuggft().swapItem(itemid, floor, uint160(sellingTokenId));\\n    }\\n}\\n\",\"keccak256\":\"0x853917103057801e3c21036960628f1b206055313d0b791fd5d941c686f61573\",\"license\":\"MIT\"},\"contracts/src/token/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport '../swap/Swap.sol';\\n\\nimport '../vault/Vault.sol';\\n\\nimport '../../tests/Event.sol';\\n\\nlibrary Token {\\n    using Address for address;\\n\\n    struct Storage {\\n        // Token name\\n        string _name;\\n        // Token symbol\\n        string _symbol;\\n        // Token symbol\\n        uint256 _stake;\\n        // Token symbol\\n        Vault.Storage _vault;\\n        // Token symbol\\n        mapping(uint256 => uint256) _ownedItems;\\n        // Mapping from token ID to owner address\\n        mapping(uint256 => address) _owners;\\n        // Mapping from token ID to owner address\\n        mapping(uint256 => uint256) _proofs;\\n        // Mapping from token ID to owner address\\n        mapping(uint256 => address) _resolvers;\\n        // Mapping from token ID to owner address\\n        mapping(uint256 => Swap.History) _swaps;\\n        // Mapping owner address to token count\\n        mapping(address => uint256) _balances;\\n        // Mapping from token ID to approved address\\n        mapping(uint256 => address) _tokenApprovals;\\n        // Mapping from owner to operator approvals\\n        mapping(address => mapping(address => bool)) _operatorApprovals;\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(Storage storage s, uint256 tokenId) internal view returns (bool) {\\n        return s._owners[tokenId] != address(0);\\n    }\\n\\n    function _hasResolver(Storage storage s, uint256 tokenId) internal view returns (bool) {\\n        return s._resolvers[tokenId] != address(0);\\n    }\\n\\n    function _isApprovedForAll(\\n        Storage storage s,\\n        address owner,\\n        address operator\\n    ) internal view returns (bool) {\\n        return s._operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function _getApproved(Storage storage s, uint256 tokenId) internal view returns (address) {\\n        require(_exists(s, tokenId), 'ERC721: approved query for nonexistent token');\\n        return s._tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function _ownerOf(Storage storage s, uint256 tokenId) internal view returns (address owner) {\\n        owner = s._owners[tokenId];\\n        require(owner != address(0), 'ERC721: owner query for nonexistent token');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function _proofOf(Storage storage s, uint256 tokenId) internal view returns (uint256 data) {\\n        data = s._proofs[tokenId];\\n        Event.log(data, 'data');\\n        require(data != 0, 'TOKEN:PO:0');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function _resolverOf(Storage storage s, uint256 tokenId) internal view returns (address resolver) {\\n        resolver = s._resolvers[tokenId];\\n        require(resolver != address(0), 'ERC721: resolver query for nonexistent token');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function _balanceOf(Storage storage s, address owner) internal view returns (uint256) {\\n        require(owner != address(0), 'ERC721: balance query for the zero address');\\n        return s._balances[owner];\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert('ERC721: transfer to non ERC721Receiver implementer');\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x57d05681147aba44e20ee2f1d1e565f36a789b206c29ea67abd61bd6173038b4\",\"license\":\"MIT\"},\"contracts/src/token/TokenLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport './Token.sol';\\n\\nimport '../stake/StakeLib.sol';\\n\\nlibrary TokenLib {\\n    using Address for address payable;\\n    using Token for Token.Storage;\\n    using StakeLib for Token.Storage;\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        Token.Storage storage nuggft,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        nuggft._tokenApprovals[tokenId] = to;\\n        emit Approval(nuggft._ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function checkedTransferFromSelf(\\n        Token.Storage storage nuggft,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        require(Token._checkOnERC721Received(address(this), to, tokenId, ''), 'ERC721: transfer caller is not owner nor approved');\\n\\n        nuggft._balances[address(this)] -= 1;\\n        nuggft._balances[to] += 1;\\n        nuggft._owners[tokenId] = to;\\n\\n        emit Transfer(address(this), to, tokenId);\\n    }\\n\\n    function approvedTransferToSelf(\\n        Token.Storage storage nuggft,\\n        address from,\\n        uint256 tokenId\\n    ) internal {\\n        require(\\n            msg.sender == nuggft._ownerOf(tokenId) && from == msg.sender && nuggft._getApproved(tokenId) == address(this),\\n            'ERC721: transfer caller is not owner nor approved'\\n        );\\n\\n        nuggft._balances[from] -= 1;\\n        nuggft._balances[address(this)] += 1;\\n        nuggft._owners[tokenId] = address(this);\\n\\n        // Clear approvals from the previous owner\\n        nuggft._tokenApprovals[tokenId] = address(0);\\n        emit Approval(address(this), address(0), tokenId);\\n\\n        emit Transfer(from, address(this), tokenId);\\n    }\\n\\n    function checkedMintTo(\\n        Token.Storage storage nuggft,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        require(Token._checkOnERC721Received(address(this), to, tokenId, ''), 'ERC721: transfer caller is not owner nor approved');\\n\\n        nuggft._balances[to] += 1;\\n        nuggft._owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    function burnForStake(Token.Storage storage nuggft, uint256 tokenId) internal {\\n        require(nuggft._getApproved(tokenId) == address(this), 'TL:BFS:0');\\n\\n        address owner = nuggft._ownerOf(tokenId);\\n\\n        require(owner == msg.sender, 'TL:BFS:1');\\n\\n        delete nuggft._tokenApprovals[tokenId];\\n        emit Approval(owner, address(0), tokenId);\\n\\n        nuggft._balances[owner] -= 1;\\n        delete nuggft._owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        uint256 amount = nuggft.getActiveEthPerShare();\\n\\n        nuggft.subStakedEth(amount);\\n        nuggft.subStakedShares(1);\\n\\n        payable(owner).sendValue(nuggft.getActiveEthPerShare());\\n    }\\n}\\n\",\"keccak256\":\"0x509d856c1230ec6e4fec1555231f3a9f9ad5642fa62668e261289aeea0333fc7\",\"license\":\"MIT\"},\"contracts/src/token/Tokenable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\n\\nimport '../interfaces/INuggFT.sol';\\n\\nimport './Token.sol';\\nimport './TokenLib.sol';\\n\\nimport '../proof/ProofLib.sol';\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract Tokenable is ITokenable, ERC165 {\\n    using Address for address;\\n    using Token for Token.Storage;\\n    using EpochLib for uint256;\\n    using TokenLib for Token.Storage;\\n\\n    // Token.Storage internal nuggft();\\n    function nuggft() internal view virtual returns (Token.Storage storage);\\n\\n    function genesis() public view virtual returns (uint256);\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        nuggft()._name = name_;\\n        nuggft()._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-_}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        return nuggft()._balanceOf(owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return nuggft()._ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-_}.\\n     */\\n    function proofOf(uint256 tokenId) public view virtual override returns (uint256) {\\n        if (tokenId == genesis().activeEpoch()) {\\n            (uint256 p, , , ) = ProofLib.pendingProof(nuggft(), genesis());\\n            return p;\\n        }\\n\\n        return nuggft()._proofOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-_}.\\n     */\\n    function parsedProofOf(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint256 proof,\\n            uint256[] memory defaultIds,\\n            uint256[] memory extraIds,\\n            uint256[] memory overrides\\n        )\\n    {\\n        return ProofLib.parseProof(nuggft(), tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-_}.\\n     */\\n    function resolverOf(uint256 tokenId) public view virtual override returns (address) {\\n        return nuggft()._resolverOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return nuggft()._name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return nuggft()._symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}. MODIFICATION 0\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory);\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = nuggft()._ownerOf(tokenId);\\n        require(to != owner, 'ERC721: approval to current owner');\\n\\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender), 'ERC721: approve caller is not owner nor approved for all');\\n\\n        nuggft()._approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        return nuggft()._getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != msg.sender, 'ERC721: approve to caller');\\n\\n        nuggft()._operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return nuggft()._isApprovedForAll(owner, operator);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function burn(uint256 tokenId) external virtual {\\n        nuggft().burnForStake(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        // //solhint-disable-next-line max-line-length\\n        // require(_isApprovedOrOwner(msg.sender, tokenId), 'ERC721: transfer caller is not owner nor approved');\\n        // _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        // require(_isApprovedOrOwner(msg.sender, tokenId), 'ERC721: transfer caller is not owner nor approved');\\n        // _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    // /**\\n    //  * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n    //  * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n    //  *\\n    //  * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n    //  *\\n    //  * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n    //  * implement alternative mechanisms to perform token transfer, such as signature-based.\\n    //  *\\n    //  * Requirements:\\n    //  *\\n    //  * - `from` cannot be the zero address.\\n    //  * - `to` cannot be the zero address.\\n    //  * - `tokenId` token must exist and be owned by `from`.\\n    //  * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    //  *\\n    //  * Emits a {Transfer} event.\\n    //  */\\n    // function _safeTransfer(\\n    //     address from,\\n    //     address to,\\n    //     uint256 tokenId,\\n    //     bytes memory _data\\n    // ) internal virtual {\\n    //     _transfer(from, to, tokenId);\\n    //     require(Token._checkOnERC721Received(from, to, tokenId, _data), 'ERC721: transfer to non ERC721Receiver implementer');\\n    // }\\n\\n    // /**\\n    //  * @dev Returns whether `tokenId` exists.\\n    //  *\\n    //  * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n    //  *\\n    //  * Tokens start existing when they are minted (`_mint`),\\n    //  * and stop existing when they are burned (`_burn`).\\n    //  */\\n    // function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n    //     return nuggft()._exists(tokenId);\\n    // }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(nuggft()._exists(tokenId), 'ERC721: operator query for nonexistent token');\\n        address owner = nuggft()._ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    // /**\\n    //  * @dev Safely mints `tokenId` and transfers it to `to`.\\n    //  *\\n    //  * Requirements:\\n    //  *\\n    //  * - `tokenId` must not exist.\\n    //  * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    //  *\\n    //  * Emits a {Transfer} event.\\n    //  */\\n    // function _safeMint(address to, uint256 tokenId) internal virtual {\\n    //     _safeMint(to, tokenId, '');\\n    // }\\n\\n    // /**\\n    //  * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n    //  * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n    //  */\\n    // function _safeMint(\\n    //     address to,\\n    //     uint256 tokenId,\\n    //     bytes memory _data\\n    // ) internal virtual {\\n    //     _mint(to, tokenId);\\n    //     require(Token._checkOnERC721Received(address(0), to, tokenId, _data), 'ERC721: transfer to non ERC721Receiver implementer');\\n    // }\\n\\n    // /**\\n    //  * @dev Mints `tokenId` and transfers it to `to`.\\n    //  *\\n    //  * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n    //  *\\n    //  * Requirements:\\n    //  *\\n    //  * - `tokenId` must not exist.\\n    //  * - `to` cannot be the zero address.\\n    //  *\\n    //  * Emits a {Transfer} event.\\n    //  */\\n    // function _mint(address to, uint256 tokenId) internal virtual {\\n    //     require(to != address(0), 'ERC721: mint to the zero address');\\n    //     require(!_exists(tokenId), 'ERC721: token already minted');\\n\\n    //     _beforeTokenTransfer(address(0), to, tokenId);\\n\\n    //     nuggft()._balances[to] += 1;\\n    //     nuggft()._owners[tokenId] = to;\\n\\n    //     emit Transfer(address(0), to, tokenId);\\n    // }\\n\\n    // /**\\n    //  * @dev Transfers `tokenId` from `from` to `to`.\\n    //  *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n    //  *\\n    //  * Requirements:\\n    //  *\\n    //  * - `to` cannot be the zero address.\\n    //  * - `tokenId` token must be owned by `from`.\\n    //  *\\n    //  * Emits a {Transfer} event.\\n    //  */\\n    // function _transfer(\\n    //     address from,\\n    //     address to,\\n    //     uint256 tokenId\\n    // ) internal virtual {\\n    //     require(nuggft()._ownerOf(tokenId) == from, 'ERC721: transfer of token that is not own');\\n    //     require(to != address(0), 'ERC721: transfer to the zero address');\\n\\n    //     _beforeTokenTransfer(from, to, tokenId);\\n\\n    //     // Clear approvals from the previous owner\\n    //     _approve(address(0), tokenId);\\n\\n    //     nuggft()._balances[from] -= 1;\\n    //     nuggft()._balances[to] += 1;\\n    //     nuggft()._owners[tokenId] = to;\\n\\n    //     emit Transfer(from, to, tokenId);\\n    // }\\n\\n    // /**\\n    //  * @dev Hook that is called before any token transfer. This includes minting\\n    //  * and burning.\\n    //  *\\n    //  * Calling conditions:\\n    //  *\\n    //  * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n    //  * transferred to `to`.\\n    //  * - When `from` is zero, `tokenId` will be minted for `to`.\\n    //  * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n    //  * - `from` and `to` are never both zero.\\n    //  *\\n    //  * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n    //  */\\n    // function _beforeTokenTransfer(\\n    //     address from,\\n    //     address to,\\n    //     uint256 tokenId\\n    // ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x731e402798c3bc0765576828818146f70d909591b62255762a7e360cfe55c92b\",\"license\":\"MIT\"},\"contracts/src/vault/LengthType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/ShiftLib.sol';\\n\\nlibrary LengthType {\\n    function length(uint256 input, uint256 index) internal pure returns (uint256 res) {\\n        res = (input >> (12 * index)) & ShiftLib.mask(12);\\n    }\\n\\n    function length(\\n        uint256 input,\\n        uint256 index,\\n        uint256 update\\n    ) internal pure returns (uint256 res) {\\n        uint256 hello = ShiftLib.fullsubmask(12, 12 * index);\\n        res = input & hello;\\n        res |= (update << (12 * index));\\n    }\\n}\\n\",\"keccak256\":\"0x142c17a3dfa477ce5af44025e7e8bc594a7aefc3a91069b58e2aa76becefa786\",\"license\":\"MIT\"},\"contracts/src/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/ShiftLib.sol';\\nimport '../../tests/Event.sol';\\nlibrary Vault {\\n    struct Storage {\\n        mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256))) items;\\n        uint256 lengthData;\\n    }\\n\\n    function set(Storage storage s, uint256[][] memory data) internal {\\n        // require(feature < 8, 'VAULT:FEAT:0');'\\n\\n        uint256 lengths = s.lengthData;\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n            uint256 feature = getFeature(data[i]);\\n\\n            uint256 len;\\n\\n            (lengths, len) = incrementLengthOf(lengths, feature);\\n\\n            for (uint256 j = 0; j < data[i].length; j++) {\\n                s.items[feature][len - 1][j] = data[i][j];\\n            }\\n        }\\n\\n        s.lengthData = lengths;\\n    }\\n\\n    function get(\\n        Storage storage s,\\n        uint256 feature,\\n        uint256 id\\n    ) internal view returns (uint256[] memory data) {\\n        uint256 zero = s.items[feature][id][0];\\n\\n        uint256 length = getDataLength(zero);\\n        Event.log(zero, \\\"zero\\\", length, \\\"length\\\", id, \\\"id\\\");\\n\\n        data = new uint256[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            data[i] = s.items[feature][id][i];\\n        }\\n    }\\n\\n    function getBatch(Storage storage s, uint256[] memory ids) internal view returns (uint256[][] memory data) {\\n        data = new uint256[][](ids.length);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            data[i] = get(s, ids[i] >> 12, ids[i] & ShiftLib.mask(12));\\n        }\\n    }\\n\\n    function getDataLength(uint256 data) internal pure returns (uint256 res) {\\n        res = (data >> 250);\\n    }\\n\\n    function setDataLength(uint256 lengthData, uint256 feature) internal pure returns (uint256 res) {\\n        res = (lengthData >> (12 * feature)) & ShiftLib.mask(12);\\n    }\\n\\n    function getFeature(uint256[] memory data) internal pure returns (uint256 res) {\\n        res = (data[data.length - 1] >> 32) & 0x7;\\n    }\\n\\n    function getLengthOf(uint256 lengthData, uint256 feature) internal pure returns (uint256 res) {\\n        res = (lengthData >> (12 * feature)) & ShiftLib.mask(12);\\n    }\\n\\n    function incrementLengthOf(uint256 lengthData, uint256 feature) internal pure returns (uint256 res, uint256 update) {\\n        update = getLengthOf(lengthData, feature) + 1;\\n\\n        res = lengthData & ShiftLib.fullsubmask(12, 12 * feature);\\n\\n        res |= (update << (12 * feature));\\n    }\\n}\\n\",\"keccak256\":\"0x783c4657cc446f3e288a4240718a28f6df54b8022b76844179f8e64e02948c7c\",\"license\":\"MIT\"},\"contracts/tests/Event.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n\\n\\nlibrary Event {\\n    function log(uint256 val, string memory name) internal view {\\n\\n\\n\\n    }\\n\\n    function log(\\n        uint256 val0,\\n        string memory name0,\\n        uint256 val1,\\n        string memory name1,\\n        uint256 val2,\\n        string memory name2\\n    ) internal view {\\n\\n\\n\\n\\n\\n\\n\\n    }\\n\\n    function log(\\n        uint256 val0,\\n        string memory name0,\\n        uint256 val1,\\n        string memory name1\\n    ) internal view {\\n\\n\\n\\n    }\\n\\n    function log(\\n        uint256 val0,\\n        string memory name0,\\n        uint256 val1,\\n        string memory name1,\\n        uint256 val2,\\n        string memory name2,\\n        uint256 val3,\\n        string memory name3\\n    ) internal view {\\n\\n\\n\\n\\n\\n    }\\n\\n    function log(uint256[] memory arr, string memory name) internal view {\\n\\n\\n        for (uint256 i = 0; i < arr.length; i++) {\\n\\n        }\\n    }\\n}\\n\\nlibrary Uint256 {\\n    bytes16 private constant ALPHABET = '0123456789abcdef';\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toAscii(uint256 value) internal pure returns (bytes memory buffer) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return '0';\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return buffer;\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        return string(toAscii(value));\\n    }\\n\\n    /// @notice Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n    /// @dev Credit to Open Zeppelin under MIT license https://github.com/OpenZeppelin/openzeppelin-contracts/blob/243adff49ce1700e0ecb99fe522fb16cff1d1ddc/contracts/utils/Strings.sol#L55\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, 'Strings: hex length insufficient');\\n        return string(buffer);\\n    }\\n\\n    function toHexStringNoPrefix(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length);\\n        for (uint256 i = buffer.length; i > 0; i--) {\\n            buffer[i - 1] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\\n// library Event {\\n//     function log(uint256 val, string memory name) internal view {}\\n\\n//     function log(\\n//         uint256 val0,\\n//         string memory name0,\\n//         uint256 val1,\\n//         string memory name1,\\n//         uint256 val2,\\n//         string memory name2\\n//     ) internal view {}\\n\\n//     function log(uint256[] memory arr, string memory name) internal view {}\\n// }\\n\",\"keccak256\":\"0x0bbe98e1a542d9a8a326b54c8b68bcfeffe2d747cb0d23e5771b8be1f4f4482f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102bb5760003560e01c8063884c66ae1161016e578063b3f9e4cb116100cb578063c87b56dd1161007f578063d96073cf11610064578063d96073cf14610780578063e985e9c5146107a0578063f4f98ad5146107c057600080fd5b8063c87b56dd1461074d578063d636feae1461076d57600080fd5b8063be2cfdff116100b0578063be2cfdff146106e8578063c3490263146106fd578063c35768811461071d57600080fd5b8063b3f9e4cb146106a7578063b88d4fde146106c757600080fd5b80639fa6dd3511610122578063a1a696a311610107578063a1a696a314610627578063a22cb46514610654578063a7f0b3de1461067457600080fd5b80639fa6dd3514610601578063a0712d681461061457600080fd5b8063900cf0cf11610153578063900cf0cf146105c457806395d89b41146105d957806396cfd827146105ee57600080fd5b8063884c66ae146105845780638c4c1b2f146105a457600080fd5b806323b872dd1161021c578063504cdacf116101d057806370a08231116101b557806370a082311461051d578063761610fc1461053d578063828eab0e1461055057600080fd5b8063504cdacf146104e85780636352211e146104fd57600080fd5b806342966c681161020157806342966c681461048857806349b44f98146104a85780634dd1496b146104c857600080fd5b806323b872dd1461044857806342842e0e1461046857600080fd5b80630cc611b11161027357806318160ddd1161025857806318160ddd146103c757806318b6e28a146103dc5780631cd4ad3a146103fc57600080fd5b80630cc611b1146103945780630cf27c2a146103b457600080fd5b806306fdde03116102a457806306fdde0314610318578063081812fc1461033a578063095ea7b31461037257600080fd5b806301ffc9a7146102c057806303bfe17e146102f5575b600080fd5b3480156102cc57600080fd5b506102e06102db366004614c03565b6107d3565b60405190151581526020015b60405180910390f35b34801561030157600080fd5b5061030a610870565b6040519081526020016102ec565b34801561032457600080fd5b5061032d610880565b6040516102ec9190614f18565b34801561034657600080fd5b5061035a610355366004614ca5565b610912565b6040516001600160a01b0390911681526020016102ec565b34801561037e57600080fd5b5061039261038d366004614ad7565b61091e565b005b3480156103a057600080fd5b5061030a6103af366004614ca5565b610a55565b6103926103c2366004614d34565b610ac9565b3480156103d357600080fd5b5061030a610af7565b3480156103e857600080fd5b506103926103f7366004614b00565b610b01565b34801561040857600080fd5b5061041c610417366004614ca5565b610b1a565b604080516001600160a01b039095168552602085019390935291830152151560608201526080016102ec565b34801561045457600080fd5b506103926104633660046149bf565b505050565b34801561047457600080fd5b506103926104833660046149bf565b610bc0565b34801561049457600080fd5b506103926104a3366004614ca5565b610bd4565b3480156104b457600080fd5b506103926104c3366004614d34565b610be2565b3480156104d457600080fd5b506103926104e3366004614d5f565b610bef565b3480156104f457600080fd5b5061030a610c1e565b34801561050957600080fd5b5061035a610518366004614ca5565b610c29565b34801561052957600080fd5b5061030a61053836600461497c565b610c35565b61039261054b366004614ca5565b610c41565b34801561055c57600080fd5b5061035a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561059057600080fd5b5061030a61059f366004614d00565b610c6d565b3480156105b057600080fd5b5061032d6105bf366004614cbd565b610cec565b3480156105d057600080fd5b5061030a610fdd565b3480156105e557600080fd5b5061032d611008565b6103926105fc366004614d34565b61101a565b61039261060f366004614ca5565b611048565b610392610622366004614ca5565b611074565b34801561063357600080fd5b50610647610642366004614ca5565b6110a0565b6040516102ec9190614ef2565b34801561066057600080fd5b5061039261066f366004614a9d565b611284565b34801561068057600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061030a565b3480156106b357600080fd5b5061035a6106c2366004614ca5565b611349565b3480156106d357600080fd5b506103926106e23660046149fa565b50505050565b3480156106f457600080fd5b5061030a611355565b34801561070957600080fd5b50610392610718366004614cdf565b611360565b34801561072957600080fd5b5061073d610738366004614ca5565b61138d565b6040516102ec9493929190614f8a565b34801561075957600080fd5b5061032d610768366004614ca5565b6113ac565b61039261077b366004614d34565b611402565b34801561078c57600080fd5b5061039261079b366004614cdf565b611430565b3480156107ac57600080fd5b506102e06107bb366004614996565b61143c565b6103926107ce366004614ca5565b61146f565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061083657506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061086a57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b600061087b8161149b565b905090565b60606000805461088f90615202565b80601f01602080910402602001604051908101604052809291908181526020018280546108bb90615202565b80156109085780601f106108dd57610100808354040283529160200191610908565b820191906000526020600020905b8154815290600101906020018083116108eb57829003601f168201915b5050505050905090565b600061086a81836114c2565b600061092c82825b9061155d565b9050806001600160a01b0316836001600160a01b031614156109bb5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806109d757506109d7813361143c565b610a495760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016109b2565b610463600084846115ea565b6000610a807f000000000000000000000000000000000000000000000000000000000000000061165c565b821415610abe576000610ab3817f0000000000000000000000000000000000000000000000000000000000000000611668565b509195945050505050565b61086a6000836116aa565b61046360007f0000000000000000000000000000000000000000000000000000000000000000858585611741565b600061087b611355565b610b16610b0e82846150d8565b600390611856565b5050565b60008181526009602052604081208190819081908190610b3a908261199f565b50905080610b745760405162461bcd60e51b815260206004820152600760248201526604e533a47533a360cc1b60448201526064016109b2565b80945060a881901c65ffffffffffff1660a082901c60ff166004021b64e8d4a51000029350610baa8160d81c640fffffffff1690565b9250610bb68160ff1c90565b9150509193509193565b604080516020810190915260009052505050565b610bdf6000826119b7565b50565b6104636000838386611b92565b6106e260007f000000000000000000000000000000000000000000000000000000000000000086868587611d4b565b600061087b81611ef1565b600061086a8282610926565b600061086a8183611f00565b610bdf60007f000000000000000000000000000000000000000000000000000000000000000083611f9e565b60008381526009602052604081208190610c88908486612003565b91505080610cc25760405162461bcd60e51b815260206004820152600760248201526604e533a47533a360cc1b60448201526064016109b2565b60a881901c65ffffffffffff1660a082901c60ff166004021b64e8d4a51000025b95945050505050565b6000828152600660205260409020546060906001600160a01b0316151580610d3b5750610d387f000000000000000000000000000000000000000000000000000000000000000061165c565b83145b610d735760405162461bcd60e51b815260206004820152600960248201526804e46543a4e544d3a360bc1b60448201526064016109b2565b60008381526006602052604081205481906001600160a01b0316610dc157610dbc60007f0000000000000000000000000000000000000000000000000000000000000000611668565b610dca565b610dca8561138d565b91945090925060009150610de1905060038461201d565b9050600086848430604051602001610dfc9493929190614f44565b60408051601f19818403018152908290527f4a0ef70300000000000000000000000000000000000000000000000000000000825291506000906001600160a01b03881690634a0ef70390610e54908590600401614f18565b60006040518083038186803b158015610e6c57600080fd5b505afa158015610e80573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ea89190810190614c3b565b90506000876001600160a01b031663c142c4968585856040518463ffffffff1660e01b8152600401610edc93929190614e7c565b60006040518083038186803b158015610ef457600080fd5b505afa158015610f08573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f309190810190614b70565b6040517f8a61d3040000000000000000000000000000000000000000000000000000000081529091506001600160a01b03891690638a61d30490610f7c90849087908790600401614f05565b60006040518083038186803b158015610f9457600080fd5b505afa158015610fa8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fd09190810190614c3b565b9998505050505050505050565b600061087b7f000000000000000000000000000000000000000000000000000000000000000061165c565b60606000600101805461088f90615202565b61046360007f0000000000000000000000000000000000000000000000000000000000000000858585612132565b610bdf60007f000000000000000000000000000000000000000000000000000000000000000083612304565b610b1660007f000000000000000000000000000000000000000000000000000000000000000083612391565b6000818152600660205260409020546060906001600160a01b03161515806110ef57506110ec7f000000000000000000000000000000000000000000000000000000000000000061165c565b82145b6111275760405162461bcd60e51b815260206004820152600960248201526804e46543a4e544d3a360bc1b60448201526064016109b2565b60008281526006602052604081205481906001600160a01b03166111755761117060007f0000000000000000000000000000000000000000000000000000000000000000611668565b61117e565b61117e8461138d565b93505092505060008483833060405160200161119d9493929190614f44565b60408051601f19818403018152919052905060006111bc60038561201d565b6040517fc142c4960000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c142c496906112269084908690600401614eb5565b60006040518083038186803b15801561123e57600080fd5b505afa158015611252573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261127a9190810190614b70565b9695505050505050565b6001600160a01b0382163314156112dd5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016109b2565b336000818152600c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600061086a8183612501565b600061087b8161257d565b610b1660007f0000000000000000000000000000000000000000000000000000000000000000848461258d565b60006060808061139d8486612694565b93509350935093509193509193565b60008181526008602052604090205460609061086a9083906001600160a01b03166113f7577f0000000000000000000000000000000000000000000000000000000000000000610cec565b6105bf600085612501565b61046360007f00000000000000000000000000000000000000000000000000000000000000008585856126bf565b610b16600083836127de565b6001600160a01b038083166000908152600c6020908152604080832093851683529290529081205460ff165b9392505050565b610bdf60007f0000000000000000000000000000000000000000000000000000000000000000836128a8565b600281015460009061146860016114b183612903565b6114bb8460c01c90565b6000612916565b60008181526006830160205260408120546001600160a01b031661153d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109b2565b506000908152600b9190910160205260409020546001600160a01b031690565b60008181526006830160205260409020546001600160a01b03168061086a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016109b2565b6000818152600b84016020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611622858361155d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b600061086a8243612938565b60006060806060600061167a86612950565b50600488015490915061168d8183612a19565b915061169882612c51565b929b919a509850909650945050505050565b6000818152600783016020908152604091829020548251808401909352600483527f646174610000000000000000000000000000000000000000000000000000000092909101919091528061086a5760405162461bcd60e51b815260206004820152600a60248201527f544f4b454e3a504f3a300000000000000000000000000000000000000000000060448201526064016109b2565b61ffff821061177c5760405162461bcd60e51b815260206004820152600760248201526604d4c3a43493a360cc1b60448201526064016109b2565b33611790866001600160a01b03841661155d565b6001600160a01b0316146117d15760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b60448201526064016109b2565b6000838152600986016020908152604080832085845260020190915290206117fb86828785612d60565b60408051858152602081018590526001600160a01b038416918101919091523460608201527ff562263f29883bf3519f3733bb30b47c831bfe9809884430857d8cf29571d554906080015b60405180910390a1505050505050565b600182015460005b825181101561199257600061189984838151811061188c57634e487b7160e01b600052603260045260246000fd5b6020026020010151612fb4565b905060006118a78483612ff9565b909450905060005b8584815181106118cf57634e487b7160e01b600052603260045260246000fd5b60200260200101515181101561197c578584815181106118ff57634e487b7160e01b600052603260045260246000fd5b6020026020010151818151811061192657634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008581529189905260408220909161194c6001866150c1565b815260208082019290925260409081016000908120858252909252902055806119748161523d565b9150506118af565b505050808061198a9061523d565b91505061185e565b5060019092019190915550565b6000806119ac848461304f565b915091509250929050565b306119c283836114c2565b6001600160a01b031614611a185760405162461bcd60e51b815260206004820152600860248201527f544c3a4246533a3000000000000000000000000000000000000000000000000060448201526064016109b2565b6000611a24838361155d565b90506001600160a01b0381163314611a7e5760405162461bcd60e51b815260206004820152600860248201527f544c3a4246533a3100000000000000000000000000000000000000000000000060448201526064016109b2565b6000828152600b8401602052604080822080546001600160a01b0319169055518391906001600160a01b038416907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a46001600160a01b0381166000908152600a840160205260408120805460019290611afc9084906150c1565b9091555050600082815260068401602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a46000611b5f8461149b565b9050611b6b84826130ce565b611b7684600161318f565b6106e2611b828561149b565b6001600160a01b0384169061320d565b33611ba6856001600160a01b03841661155d565b6001600160a01b031614611be75760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b60448201526064016109b2565b61ffff8310611c385760405162461bcd60e51b815260206004820152600760248201527f4d4c3a53493a300000000000000000000000000000000000000000000000000060448201526064016109b2565b6001600160a01b03811660009081526009850160209081526040808320868452600201909152812090611c6b828461304f565b5090508015611ca65760405162461bcd60e51b815260206004820152600760248201526604e533a53533a360cc1b60448201526064016109b2565b611cea84611ce460016001600160a01b0319851687175b90507f80000000000000000000000000000000000000000000000000000000000000001790565b90613326565b508083559050611d04866001600160a01b038516876133a7565b604080516001600160a01b0385168152602081018790529081018590527fc8032e5c721106f3e30ad0f1a45e919c8d034cf788842ff336b0150f0fbcc60e90606001611846565b33611d5f876001600160a01b03841661155d565b6001600160a01b031614611da05760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b60448201526064016109b2565b61ffff8310611ddb5760405162461bcd60e51b815260206004820152600760248201526604d4c3a43493a360cc1b60448201526064016109b2565b60008481526009870160209081526040808320868452600201909152812090611e038761165c565b9050600080611e1384868861347a565b600088815260018701602090815260408083206001600160a01b038b1684529091528120559092509050611e49858383866134fa565b15611e6b5760008455611e668a6001600160a01b0387168961359a565b611e96565b611e9660a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a51000025b339061320d565b60408051898152602081018990526001600160a01b038716818301526060810188905290517f38195a074a64067740045e77ca5873f34a0df243a8ac9ecc39452c47e7061e479181900360800190a150505050505050505050565b600061086a8260020154612903565b60006001600160a01b038216611f7e5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016109b2565b506001600160a01b03166000908152600a91909101602052604090205490565b60008181526009840160205260409020611fba84828533613680565b6040805183815233602082015234918101919091527f2d57124cfa4e385afd5cc9d6f24874bdd21303ac9131d7cb674be2a5855c7002906060015b60405180910390a150505050565b60008061201185858561347a565b91509150935093915050565b6060815167ffffffffffffffff81111561204757634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561207a57816020015b60608152602001906001900390816120655790505b50905060005b825181101561212b576120ed84600c8584815181106120af57634e487b7160e01b600052603260045260246000fd5b6020908102919091010151901c610fff8685815181106120df57634e487b7160e01b600052603260045260246000fd5b602002602001015116613986565b82828151811061210d57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806121239061523d565b915050612080565b5092915050565b33612146866001600160a01b03841661155d565b6001600160a01b0316146121875760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b60448201526064016109b2565b60008381526009860160209081526040808320858452600201909152812090806121b1838561304f565b604080518082018252600e8082527f73656c6c696e67546f6b656e49640000000000000000000000000000000000006020928301528251808401845260068152651a5d195b525960d21b90830152825180840184529081527f73656e64696e67546f6b656e49640000000000000000000000000000000000009082015281518083018352600881527f73776170446174610000000000000000000000000000000000000000000000009082015281518083018352600981527f6f66666572446174610000000000000000000000000000000000000000000000908201528151808301909252600782527f67656e65736973000000000000000000000000000000000000000000000000009101529092509050801580156122d657506122d68260ff1c90565b156122ed576122e88888888888611741565b6122fa565b6122fa88888888886126bf565b5050505050505050565b600061230f8361165c565b6000838152600986016020526040812091925090819061232f903361199f565b915091508383148015612340575081155b1561235657612350868686612391565b50612389565b8015801561236957506123698260ff1c90565b1561237e576123798686866128a8565b612389565b612389868686611f9e565b505050505050565b60008181526009840160205260408120816123ab8561165c565b90506000806123ba843361199f565b9150915085831461240d5760405162461bcd60e51b815260206004820152600660248201527f4e533a4d3a30000000000000000000000000000000000000000000000000000060448201526064016109b2565b811561245b5760405162461bcd60e51b815260206004820152600660248201527f4e533a4d3a44000000000000000000000000000000000000000000000000000060448201526064016109b2565b61247c34611ce43361246e600088613b10565b6001600160a01b0319161790565b50808555945061248d888789613b62565b61249988600134613ce5565b6040805184815233602082015264e8d4a5100065ffffffffffff60a889901c16600460ff60a08b901c16021b028183015290517f4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f69181900360600190a1505050509392505050565b60008181526008830160205260409020546001600160a01b03168061086a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a207265736f6c76657220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109b2565b600061086a826002015460c01c90565b60008281526009850160205260408120906125a78561165c565b90506000806125b7843387612003565b6000878152600187016020908152604080832033808552925282209190915591935091506125e7908383866134fa565b1561262357600084556126018260d81c640fffffffff1690565b85141561261857612613883388613dda565b61264b565b612613883388613ee7565b61264b60a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a5100002611e8f565b6040805187815260208101879052338183015290517fd79254e5daba749baa8ba954e77bbbb18efef113a8070d00df9a188d819324269181900360600190a15050505050505050565b6000606080806126a486866116aa565b93506126af84612c51565b9299919850965090945092505050565b61010082106127105760405162461bcd60e51b815260206004820152600760248201527f4d4c3a4f493a300000000000000000000000000000000000000000000000000060448201526064016109b2565b33612724866001600160a01b03841661155d565b6001600160a01b0316146127655760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b60448201526064016109b2565b60008381526009860160209081526040808320858452600201909152902061278f86828785613680565b60408051858152602081018590526001600160a01b038416918101919091523460608201527fe237f23f900f35d5f1a406ba97ccfdffe082ffcda87098765811817c2c14ac8790608001611846565b60008281526009840160205260408120906127f9823361199f565b50905080156128345760405162461bcd60e51b815260206004820152600760248201526604e533a53533a360cc1b60448201526064016109b2565b61284f83611ce460016001600160a01b031985163317611cbd565b50808355905061286085338661401b565b604080518581523360208201529081018490527faffe6cd835bee10ff23fa9c38e9100afe3849748fd59bc6b4920867cf7f190e6906060015b60405180910390a15050505050565b600081815260098401602052604090206128c484828533612d60565b6040805183815233602082015234918101919091527f094925310677b39991f64178494fad708beb62f73f36bb0baa493476ecf5870990606001611ff5565b60006001600160c01b035b909116919050565b60008161292d576129288585856141c7565b610ce3565b610ce3858585614285565b6000601961294684846150c1565b611468919061508e565b60008061295d8343612938565b9050600061296b84836142d3565b9050600061297a6001836150c1565b409050806129ca5760405162461bcd60e51b815260206004820152600760248201527f4550433a53424c0000000000000000000000000000000000000000000000000060448201526064016109b2565b604080516020810183905290810184905230606090811b6bffffffffffffffffffffffff1916908201526074016040516020818303038152906040528051906020012060001c93505050915091565b600081612a6a5760405162461bcd60e51b81526004016109b29060208082526004908201527f7365656400000000000000000000000000000000000000000000000000000000604082015260600190565b6000612a7684826142eb565b610fff612a85601060006150a2565b612a90906004615051565b85901c16612a9e9190615278565b90506000612aad8560016142eb565b610fff612abc601060016150a2565b612ac7906004615051565b86901c16612ad59190615278565b90506000612ae48660026142eb565b610fff612af3601060026150a2565b612afe906004615051565b87901c16612b0c9190615278565b90506000612b20610100604588901c615278565b90506000610fff612b33601060036150a2565b612b3e906004615051565b88901c1690506060821015612b6d57612b588860036142eb565b612b629082615278565b613000179150612bdb565b60c0821015612b9657612b818860046142eb565b612b8b9082615278565b614000179150612bdb565b60fa821015612bbf57612baa8860056142eb565b612bb49082615278565b615000179150612bdb565b612bca8860066142eb565b612bd49082615278565b6160001791505b61100093909317926120009290921791600485901b612bfc601060016150a2565b612c07906004615051565b85901b612c16601060026150a2565b612c21906004615051565b85901b612c30601060036150a2565b612c3b906004615051565b85901b1717176004179550505050505092915050565b8060608080600f851667ffffffffffffffff811115612c8057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612ca9578160200160208202803683370190505b50925060005b8351811015612d125761ffff612cc68260106150a2565b612cd1906004615051565b87901c16848281518110612cf557634e487b7160e01b600052603260045260246000fd5b602090810291909101015280612d0a8161523d565b915050612caf565b50604080516008808252610120820190925290602082016101008036833750506040805160088082526101208201909252929450905060208201610100803683370190505090509193509193565b6000612d6b8361165c565b9050600080612d7a868561304f565b9150915060003411612dce5760405162461bcd60e51b815260206004820152600860248201527f534c3a434f4d3a3200000000000000000000000000000000000000000000000060448201526064016109b2565b80158015612ddb57508115155b612e125760405162461bcd60e51b81526020600482015260086024820152670534c3a48534f3a360c41b60448201526064016109b2565b612e1c8260ff1c90565b612e685760405162461bcd60e51b815260206004820152600860248201527f534c3a48534f3a3100000000000000000000000000000000000000000000000060448201526064016109b2565b6000612e75846001615051565b9050600080612e8c34611ce48961246e8588613b10565b909250905060a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a5100002612ee1606461271060a889901c65ffffffffffff1660a08a901c60ff166004021b64e8d4a51000025b91906141c7565b10612f195760405162461bcd60e51b815260206004820152600860248201526714d30e93d0940e8d60c21b60448201526064016109b2565b600083815260018a01602052604081208691826001600160a01b03168152602081019190915260400160002055818955612fa88160a887901c65ffffffffffff1660a088901c60ff166004021b64e8d4a510000260a885901c65ffffffffffff1660a086901c60ff166004021b64e8d4a5100002612f9791906150c1565b612fa19190615051565b8b90614307565b50505050505050505050565b600060208260018451612fc791906150c1565b81518110612fe557634e487b7160e01b600052603260045260246000fd5b6020026020010151901c6007169050919050565b60008061300684846142eb565b613011906001615051565b9050613032600c61302285826150a2565b60029190910a60001901901b1990565b8416915061304183600c6150a2565b81901b821791509250929050565b815460008115806130715750816001600160a01b0316836001600160a01b0316145b6130c35783600101600061308c8460d81c640fffffffff1690565b81526020019081526020016000206000846001600160a01b03166001600160a01b03168152602001908152602001600020546130c5565b815b90509250929050565b60006130dd8360020154612903565b9050818110156131195760405162461bcd60e51b81526020600482015260076024820152660534c3a53533a360cc1b60448201526064016109b2565b61315161312683836150c1565b60028501547fffffffffffffffff000000000000000000000000000000000000000000000000161790565b60028401556040518281527fbdcc962e6e9a15a82703d40f3f70edfdf76794d126c16f698732c7d60fdf37d6906020015b60405180910390a1505050565b600061319f836002015460c01c90565b9050818110156131db5760405162461bcd60e51b81526020600482015260076024820152660534c3a53533a360cc1b60448201526064016109b2565b6132006131e883836150c1565b60028501546001600160c01b031660c09190911b1790565b8360020181905550505050565b8047101561325d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016109b2565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146132aa576040519150601f19603f3d011682016040523d82523d6000602084013e6132af565b606091505b50509050806104635760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016109b2565b6000808264e8d4a51000840493505b65ffffffffffff841115613354576001830192508360041c9350613335565b828460081b1793508360081c836004021b64e8d4a5100081028203925050507fffffffffff00000000000000ffffffffffffffffffffffffffffffffffffffff841693508260a01b841791509250929050565b60006133b3848461439a565b9050806134025760405162461bcd60e51b815260206004820152600a60248201527f313135353a5354463a300000000000000000000000000000000000000000000060448201526064016109b2565b61340c81836143f8565b50506000848152600786016020908152604080832084905585835260058801909152812080549293509061343f8361523d565b909155505060408051848152602081018490527f54102016ac0e61f645ca7281e4637e190f3a25b89b05593d55ac3dbe2a54809e9101611ff5565b82546000826134908360d81c640fffffffff1690565b1461349c57600061349e565b815b915081158015906134c05750816001600160a01b0316846001600160a01b0316145b6134ee57600083815260018601602090815260408083206001600160a01b03881684529091529020546134f0565b815b9050935093915050565b6000826135495760405162461bcd60e51b815260206004820152600760248201527f534c3a43433a310000000000000000000000000000000000000000000000000060448201526064016109b2565b600061355c8560d81c640fffffffff1690565b8311905061356a8560ff1c90565b8061358e5750846001600160a01b0316866001600160a01b031614801561358e5750805b9150505b949350505050565b60006135a6848461439a565b60008381526005860160205260409020549091506136065760405162461bcd60e51b815260206004820152600b60248201527f313135353a534254463a3100000000000000000000000000000000000000000060448201526064016109b2565b60008281526005850160205260408120805491613622836151ce565b909155506136329050818361460a565b50600084815260078601602090815260409182902083905581518681529081018590529192507f452c5f777db10bd58f64d8bc58668d14487d008ff527ca431853ea22e195f1769101611ff5565b600061368b8361165c565b905060008061369a868561304f565b91509150600034116136ee5760405162461bcd60e51b815260206004820152600860248201527f534c3a4f42503a3200000000000000000000000000000000000000000000000060448201526064016109b2565b8161373b5760405162461bcd60e51b815260206004820152600660248201527f4e533a303a30000000000000000000000000000000000000000000000000000060448201526064016109b2565b6137458160ff1c90565b1561377d5760405162461bcd60e51b81526020600482015260086024820152670534c3a48534f3a360c41b60448201526064016109b2565b61378e8260d81c640fffffffff1690565b8311156137dd5760405162461bcd60e51b815260206004820152600860248201527f534c3a4f42503a3300000000000000000000000000000000000000000000000060448201526064016109b2565b6001600160a01b038416826001600160a01b031614613840578186600101600061380e8560d81c640fffffffff1690565b815260200190815260200160002060006138258590565b6001600160a01b031681526020810191909152604001600020555b60008061388f61386f3464e8d4a5100065ffffffffffff60a888901c16600460ff60a08a901c16021b02615051565b611ce48861246e6138878960d81c640fffffffff1690565b600090613b10565b909250905060a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a51000026138e1606461271060a888901c65ffffffffffff1660a089901c60ff166004021b64e8d4a5100002612eda565b106139195760405162461bcd60e51b815260206004820152600860248201526714d30e93d0940e8d60c21b60448201526064016109b2565b81885561397b8160a886901c65ffffffffffff1660a087901c60ff166004021b64e8d4a510000260a885901c65ffffffffffff1660a086901c60ff166004021b64e8d4a510000261396a91906150c1565b6139749190615051565b8a90614307565b505050505050505050565b60008281526020848152604080832084845282528083208380529091528120546060916139b38260fa1c90565b604080518082018252600481527f7a65726f0000000000000000000000000000000000000000000000000000000060209182015281518083018352600681527f6c656e6774680000000000000000000000000000000000000000000000000000908201528151808301909252600282527f696400000000000000000000000000000000000000000000000000000000000091015290508067ffffffffffffffff811115613a7057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613a99578160200160208202803683370190505b50925060005b81811015613b065760008681526020888152604080832088845282528083208484529091529020548451859083908110613ae957634e487b7160e01b600052603260045260246000fd5b602090810291909101015280613afe8161523d565b915050613a9f565b5050509392505050565b6000640fffffffff821115613b3557634e487b7160e01b600052600160045260246000fd5b5060d81b7ff000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff919091161790565b600082815260078401602052604090205415613bc05760405162461bcd60e51b815260206004820152600660248201527f494c3a4d3a30000000000000000000000000000000000000000000000000000060448201526064016109b2565b600080613bcc83612950565b915091508160001415613c215760405162461bcd60e51b815260206004820152600a60248201527f3732313a4d494e543a300000000000000000000000000000000000000000000060448201526064016109b2565b838114613c705760405162461bcd60e51b815260206004820152600a60248201527f3732313a4d494e543a310000000000000000000000000000000000000000000060448201526064016109b2565b6004850154613c7f8184612a19565b60008681526007880160205260408120829055909350613c9e84612c51565b50509150507fd87057411cb55112f14c449d8a1d511f40497de1622dfafdae3d500fe0d390f78682604051613cd4929190614f2b565b60405180910390a150505050505050565b67ffffffffffffffff82108015613d0257506001600160c01b0381105b613d385760405162461bcd60e51b81526020600482015260076024820152660534c3a53533a360cc1b60448201526064016109b2565b600080613d4885600201546146f6565b9092509050613da5613d5a8483615051565b613d7f613d678786615051565b60028901546001600160c01b031660c09190911b1790565b7fffffffffffffffff000000000000000000000000000000000000000000000000161790565b60028601556040518381527fff53ef9548303b7a073c53f7791adb262240a1559282d17052a443f091bb495690602001612899565b613df530838360405180602001604052806000815250614715565b613e5b5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b60648201526084016109b2565b6001600160a01b0382166000908152600a840160205260408120805460019290613e86908490615051565b9091555050600081815260068401602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b613f0230838360405180602001604052806000815250614715565b613f685760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b60648201526084016109b2565b306000908152600a840160205260408120805460019290613f8a9084906150c1565b90915550506001600160a01b0382166000908152600a840160205260408120805460019290613fba908490615051565b9091555050600081815260068401602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839230917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a4505050565b614025838261155d565b6001600160a01b0316336001600160a01b031614801561404d57506001600160a01b03821633145b801561406a57503061405f84836114c2565b6001600160a01b0316145b6140d05760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b60648201526084016109b2565b6001600160a01b0382166000908152600a8401602052604081208054600192906140fb9084906150c1565b9091555050306000908152600a840160205260408120805460019290614122908490615051565b9091555050600081815260068401602090815260408083208054306001600160a01b03199182168117909255600b8801909352818420805490931690925551839291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a4604051819030906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a4505050565b60008080600019858709858702925082811083820303915050806000141561420157600084116141f657600080fd5b508290049050611468565b80841161420d57600080fd5b600084868809808403938111909203919050600061422d86196001615051565b8616958690049560026003880281188089028203028089028203028089028203028089028203028089028203028089029091030260008290038290046001019490940294049390931791909102925050509392505050565b60006142928484846141c7565b9050600082806142b257634e487b7160e01b600052601260045260246000fd5b84860911156114685760001981106142c957600080fd5b80610ce38161523d565b6000826142e16019846150a2565b6114689190615051565b6000610fff6142fb83600c6150a2565b84901c16905092915050565b6001600160c01b0381106143475760405162461bcd60e51b81526020600482015260076024820152660534c3a53533a360cc1b60448201526064016109b2565b60006143568360020154612903565b90506143656131268383615051565b60028401556040518281527fff53ef9548303b7a073c53f7791adb262240a1559282d17052a443f091bb495690602001613182565b60008181526007830160205260409020548061086a5760405162461bcd60e51b815260206004820152600a60248201527f50524f4f463a504f3a300000000000000000000000000000000000000000000060448201526064016109b2565b60008060008061440786614875565b905061445061441587614875565b6040518060400160405280600c81526020017f6974656d7328696e707574290000000000000000000000000000000000000000815250614939565b60005b81518160ff1610156144b9578561ffff16828260ff168151811061448757634e487b7160e01b600052603260045260246000fd5b602002602001015114156144a7576144a0816001615069565b92506144b9565b806144b181615258565b915050614453565b5060408051808201825260058082527f696e7075740000000000000000000000000000000000000000000000000000006020928301528251808401845260068152651a5d195b525960d21b90830152825180840190935282527f696e64657800000000000000000000000000000000000000000000000000000091015260008260ff16116145895760405162461bcd60e51b815260206004820152600860248201527f534c3a50464d3a3000000000000000000000000000000000000000000000000060448201526064016109b2565b81614593816151e5565b61ffff6004601083020181811b198a16975089901c95509093508681169085161490506146025760405162461bcd60e51b815260206004820152600860248201527f534c3a50464d3a3100000000000000000000000000000000000000000000000060448201526064016109b2565b509250925092565b600080600061461885614875565b905060005b81518160ff16101561468057818160ff168151811061464c57634e487b7160e01b600052603260045260246000fd5b60200260200101516000141561466e57614667816001615069565b9250614680565b8061467881615258565b91505061461d565b5060008260ff16116146d45760405162461bcd60e51b815260206004820152600860248201527f534c3a50464d3a4100000000000000000000000000000000000000000000000060448201526064016109b2565b816146de816151e5565b600460108202019590951b9590951795939450505050565b6000806147038360c01c90565b915061470e81612903565b9050915091565b60006001600160a01b0384163b1561486d57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290614759903390899088908890600401614e4a565b602060405180830381600087803b15801561477357600080fd5b505af19250505080156147a3575060408051601f3d908101601f191682019092526147a091810190614c1f565b60015b614853573d8080156147d1576040519150601f19603f3d011682016040523d82523d6000602084013e6147d6565b606091505b50805161484b5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016109b2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050613592565b506001613592565b6060600061488283614957565b90508067ffffffffffffffff8111156148ab57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156148d4578160200160208202803683370190505b509150600483901c925060005b81811015614932578361ffff1683828151811061490e57634e487b7160e01b600052603260045260246000fd5b602090810291909101015260109390931c928061492a8161523d565b9150506148e1565b5050919050565b60005b8251811015610463578061494f8161523d565b91505061493c565b6000600f61290e565b80356001600160a01b038116811461497757600080fd5b919050565b60006020828403121561498d578081fd5b61146882614960565b600080604083850312156149a8578081fd5b6149b183614960565b91506130c560208401614960565b6000806000606084860312156149d3578081fd5b6149dc84614960565b92506149ea60208501614960565b9150604084013590509250925092565b60008060008060808587031215614a0f578081fd5b614a1885614960565b9350614a2660208601614960565b925060408501359150606085013567ffffffffffffffff811115614a48578182fd5b8501601f81018713614a58578182fd5b8035614a6b614a6682615029565b614fd4565b818152886020838501011115614a7f578384fd5b81602084016020830137908101602001929092525092959194509250565b60008060408385031215614aaf578182fd5b614ab883614960565b915060208301358015158114614acc578182fd5b809150509250929050565b60008060408385031215614ae9578182fd5b614af283614960565b946020939093013593505050565b60008060208385031215614b12578081fd5b823567ffffffffffffffff80821115614b29578283fd5b818501915085601f830112614b3c578283fd5b813581811115614b4a578384fd5b8660208260051b8501011115614b5e578384fd5b60209290920196919550909350505050565b60006020808385031215614b82578182fd5b825167ffffffffffffffff811115614b98578283fd5b8301601f81018513614ba8578283fd5b8051614bb6614a6682615005565b80828252848201915084840188868560051b8701011115614bd5578687fd5b8694505b83851015614bf7578051835260019490940193918501918501614bd9565b50979650505050505050565b600060208284031215614c14578081fd5b8135611468816152ce565b600060208284031215614c30578081fd5b8151611468816152ce565b600060208284031215614c4c578081fd5b815167ffffffffffffffff811115614c62578182fd5b8201601f81018413614c72578182fd5b8051614c80614a6682615029565b818152856020838501011115614c94578384fd5b610ce38260208301602086016151a2565b600060208284031215614cb6578081fd5b5035919050565b60008060408385031215614ccf578182fd5b823591506130c560208401614960565b60008060408385031215614cf1578182fd5b50508035926020909101359150565b600080600060608486031215614d14578081fd5b8335925060208401359150614d2b60408501614960565b90509250925092565b600080600060608486031215614d48578081fd5b505081359360208301359350604090920135919050565b60008060008060808587031215614d74578182fd5b5050823594602084013594506040840135936060013592509050565b600081518084526020808501808196508360051b81019150828601855b85811015614dd7578284038952614dc5848351614de4565b98850198935090840190600101614dad565b5091979650505050505050565b6000815180845260208085019450808401835b83811015614e1357815187529582019590820190600101614df7565b509495945050505050565b60008151808452614e368160208601602086016151a2565b601f01601f19169290920160200192915050565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261127a6080830184614e1e565b606081526000614e8f6060830186614d90565b8281036020840152614ea18186614e1e565b9050828103604084015261358e8185614e1e565b606081526000614ec86060830185614d90565b8281036020840152614eda8185614e1e565b83810360409094019390935250815260200192915050565b6020815260006114686020830184614de4565b606081526000614e8f6060830186614de4565b6020815260006114686020830184614e1e565b8281526040602082015260006135926040830184614de4565b848152608060208201526000614f5d6080830186614de4565b8281036040840152614f6f8186614de4565b9150506001600160a01b038316606083015295945050505050565b848152608060208201526000614fa36080830186614de4565b8281036040840152614fb58186614de4565b90508281036060840152614fc98185614de4565b979650505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715614ffd57614ffd6152b8565b604052919050565b600067ffffffffffffffff82111561501f5761501f6152b8565b5060051b60200190565b600067ffffffffffffffff821115615043576150436152b8565b50601f01601f191660200190565b600082198211156150645761506461528c565b500190565b600060ff821660ff84168060ff038211156150865761508661528c565b019392505050565b60008261509d5761509d6152a2565b500490565b60008160001904831182151516156150bc576150bc61528c565b500290565b6000828210156150d3576150d361528c565b500390565b60006150e6614a6684615005565b838152602080820191908460053688821b83011115615103578586fd5b855b8881101561519557823567ffffffffffffffff811115615123578788fd5b880136601f820112615133578788fd5b8035615141614a6682615005565b818152868101908388013684881b86018a01111561515d578b8cfd5b8b94505b8385101561517f578035835260019490940193918801918801615161565b5089525050509483019491830191600101615105565b5092979650505050505050565b60005b838110156151bd5781810151838201526020016151a5565b838111156106e25750506000910152565b6000816151dd576151dd61528c565b506000190190565b600060ff8216806151f8576151f861528c565b6000190192915050565b600181811c9082168061521657607f821691505b6020821081141561523757634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156152515761525161528c565b5060010190565b600060ff821660ff81141561526f5761526f61528c565b60010192915050565b600082615287576152876152a2565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610bdf57600080fdfea2646970667358221220d4a6d952577b607753f8a5689aa6ab40da18458d8d3378e0de9a48bdc09d768464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-_}."
      },
      "burn(uint256)": {
        "details": "Destroys `tokenId`. The approval is cleared when the token is burned. Requirements: - `tokenId` must exist. Emits a {Transfer} event."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "parsedProofOf(uint256)": {
        "details": "See {IERC721-_}."
      },
      "proofOf(uint256)": {
        "details": "See {IERC721-_}."
      },
      "resolverOf(uint256)": {
        "details": "See {IERC721-_}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 814,
        "contract": "contracts/src/NuggFT.sol:NuggFT",
        "label": "_nuggft",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)5443_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint160,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint160",
        "label": "mapping(uint160 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_uint160,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint160 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint160,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(History)3410_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Swap.History)",
        "numberOfBytes": "32",
        "value": "t_struct(History)3410_storage"
      },
      "t_mapping(t_uint256,t_struct(Storage)3419_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Swap.Storage)",
        "numberOfBytes": "32",
        "value": "t_struct(Storage)3419_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(History)3410_storage": {
        "encoding": "inplace",
        "label": "struct Swap.History",
        "members": [
          {
            "astId": 3404,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "self",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Storage)3419_storage"
          },
          {
            "astId": 3409,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "items",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(Storage)3419_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Storage)3419_storage": {
        "encoding": "inplace",
        "label": "struct Swap.Storage",
        "members": [
          {
            "astId": 3412,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3418,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "offers",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_mapping(t_uint160,t_uint256))"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)5443_storage": {
        "encoding": "inplace",
        "label": "struct Token.Storage",
        "members": [
          {
            "astId": 5400,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "_name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5402,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "_symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 5404,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "_stake",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5407,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "_vault",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Storage)6626_storage"
          },
          {
            "astId": 5411,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "_ownedItems",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 5415,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "_owners",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 5419,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "_proofs",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 5423,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "_resolvers",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 5428,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "_swaps",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_struct(History)3410_storage)"
          },
          {
            "astId": 5432,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "_balances",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 5436,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 5442,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(Storage)6626_storage": {
        "encoding": "inplace",
        "label": "struct Vault.Storage",
        "members": [
          {
            "astId": 6623,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "items",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))"
          },
          {
            "astId": 6625,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "lengthData",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint160": {
        "encoding": "inplace",
        "label": "uint160",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}