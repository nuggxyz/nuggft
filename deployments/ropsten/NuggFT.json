{
  "address": "0xF4b10303AdD1522a339f532d0cf3816A753cE064",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultResolver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "DelegateCommit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "sellerTokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "buyerTokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "DelegateCommitItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "DelegateMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "DelegateOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "sellerTokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "buyerTokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "DelegateOfferItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Genesis",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "v2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "MigrateV1Sent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "migrator",
          "type": "address"
        }
      ],
      "name": "MigratorV1Updated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "payoffAmount",
          "type": "uint96"
        }
      ],
      "name": "Payoff",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        }
      ],
      "name": "PopItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "ProtocolEthExtracted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        }
      ],
      "name": "PushItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "earned",
          "type": "uint96"
        }
      ],
      "name": "Rebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "feature",
          "type": "uint8"
        }
      ],
      "name": "RotateItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "xs",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "ys",
          "type": "uint8[]"
        }
      ],
      "name": "SetAnchorOverrides",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "items",
          "type": "uint8[]"
        }
      ],
      "name": "SetProof",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "stake",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "protocol",
          "type": "uint96"
        }
      ],
      "name": "StakeEth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "epoch",
          "type": "uint32"
        }
      ],
      "name": "SwapClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "sellerTokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "buyerTokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "epoch",
          "type": "uint32"
        }
      ],
      "name": "SwapClaimItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "sellerTokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "SwapItemStart",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "SwapStart",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "principal",
          "type": "uint96"
        }
      ],
      "name": "TakeLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "trust",
          "type": "bool"
        }
      ],
      "name": "TrustUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "TrustedMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "stake",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "UnStakeEth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "UntrustedMint",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "activeEthPerShare",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "res",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "buyerTokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint160",
          "name": "sellerTokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        }
      ],
      "name": "claimItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultWidth",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultZoom",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "buyerTokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint160",
          "name": "sellerTokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        }
      ],
      "name": "delegateItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dotnuggV1Processor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extractProtocolEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "loan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "loanInfo",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "toPayoff",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "toRebalance",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "earned",
          "type": "uint96"
        },
        {
          "internalType": "uint32",
          "name": "epochDue",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "loaner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "migrateStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSharePrice",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "res",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "parsedProofOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "defaultIds",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "extraIds",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "overxs",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "overys",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "payoff",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "prepareFiles",
      "outputs": [
        {
          "internalType": "uint256[][]",
          "name": "input",
          "type": "uint256[][]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renderedAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "proof",
              "type": "uint256"
            },
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "extras",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "xovers",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "yovers",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct IdotnuggV1Data.Data",
          "name": "data",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "proofOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "resolverOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint8",
          "name": "feature",
          "type": "uint8"
        }
      ],
      "name": "rotateFeature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "trust",
          "type": "bool"
        }
      ],
      "name": "setIsTrusted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "migrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint8[]",
          "name": "xs",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "ys",
          "type": "uint8[]"
        }
      ],
      "name": "setOverrides",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "setResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[][]",
          "name": "data",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint8",
          "name": "feature",
          "type": "uint8"
        }
      ],
      "name": "storeFiles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint96",
          "name": "floor",
          "type": "uint96"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "sellerTokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        },
        {
          "internalType": "uint96",
          "name": "floor",
          "type": "uint96"
        }
      ],
      "name": "swapItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLengths",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "res",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalProtocolEth",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "res",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedEth",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "res",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedShares",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "res",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "trusted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "trustedMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "valueForDelegate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canDelegate",
          "type": "bool"
        },
        {
          "internalType": "uint96",
          "name": "nextSwapAmount",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "senderCurrentOffer",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "valueForPayoff",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "res",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "valueForRebalance",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "res",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x87dd86c5dff26843e00c8af448947732fbaf3cf8e11a687bb7b66168aa9e4d55",
  "receipt": {
    "to": null,
    "from": "0xB666C13b621568FeC210724DF161604adccfA257",
    "contractAddress": "0xF4b10303AdD1522a339f532d0cf3816A753cE064",
    "transactionIndex": 29,
    "gasUsed": "5389407",
    "logsBloom": "0x
    "blockHash": "0xe2a357306dab6f40a68b753f27dd161e76b33fb87dedf044deefcf88c8e74bb8",
    "transactionHash": "0x87dd86c5dff26843e00c8af448947732fbaf3cf8e11a687bb7b66168aa9e4d55",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 11686024,
        "transactionHash": "0x87dd86c5dff26843e00c8af448947732fbaf3cf8e11a687bb7b66168aa9e4d55",
        "address": "0xF4b10303AdD1522a339f532d0cf3816A753cE064",
        "topics": [
          "0x01370ae6c2f4315d0915b457ec604f483d0ff6f34a7fdd5c3401ae39fda86aa9",
          "0x000000000000000000000000b666c13b621568fec210724df161604adccfa257"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 17,
        "blockHash": "0xe2a357306dab6f40a68b753f27dd161e76b33fb87dedf044deefcf88c8e74bb8"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 11686024,
        "transactionHash": "0x87dd86c5dff26843e00c8af448947732fbaf3cf8e11a687bb7b66168aa9e4d55",
        "address": "0xF4b10303AdD1522a339f532d0cf3816A753cE064",
        "topics": [
          "0x6bf6eaff5e9af8fbccb949f4c38cc016936f8775363ccf4224db160365785d52"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0xe2a357306dab6f40a68b753f27dd161e76b33fb87dedf044deefcf88c8e74bb8"
      }
    ],
    "blockNumber": 11686024,
    "cumulativeGasUsed": "7134136",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x488b62261D2D5ba4d2dcB446aCc355979405953D"
  ],
  "solcInputHash": "380bcfe490d8f81ef6a6fe6d96175487",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultResolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"DelegateCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sellerTokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"buyerTokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"DelegateCommitItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"DelegateMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"DelegateOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sellerTokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"buyerTokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"DelegateOfferItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Genesis\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"v2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"MigrateV1Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"migrator\",\"type\":\"address\"}],\"name\":\"MigratorV1Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"payoffAmount\",\"type\":\"uint96\"}],\"name\":\"Payoff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"}],\"name\":\"PopItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"ProtocolEthExtracted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"}],\"name\":\"PushItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"earned\",\"type\":\"uint96\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feature\",\"type\":\"uint8\"}],\"name\":\"RotateItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"xs\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"ys\",\"type\":\"uint8[]\"}],\"name\":\"SetAnchorOverrides\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"items\",\"type\":\"uint8[]\"}],\"name\":\"SetProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"protocol\",\"type\":\"uint96\"}],\"name\":\"StakeEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"SwapClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sellerTokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"buyerTokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"SwapClaimItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sellerTokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"SwapItemStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"SwapStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"principal\",\"type\":\"uint96\"}],\"name\":\"TakeLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trust\",\"type\":\"bool\"}],\"name\":\"TrustUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"TrustedMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"UnStakeEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"UntrustedMint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeEthPerShare\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"res\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"buyerTokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"sellerTokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"}],\"name\":\"claimItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultWidth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultZoom\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"buyerTokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"sellerTokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"}],\"name\":\"delegateItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dotnuggV1Processor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractProtocolEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"loan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"loanInfo\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"toPayoff\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"toRebalance\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"earned\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"epochDue\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"loaner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"migrateStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSharePrice\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"res\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"parsedProofOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"defaultIds\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"extraIds\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"overxs\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"overys\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"payoff\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"prepareFiles\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"input\",\"type\":\"uint256[][]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renderedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"extras\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"}],\"internalType\":\"struct IdotnuggV1Data.Data\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"proofOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"resolverOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint8\",\"name\":\"feature\",\"type\":\"uint8\"}],\"name\":\"rotateFeature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"trust\",\"type\":\"bool\"}],\"name\":\"setIsTrusted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint8[]\",\"name\":\"xs\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"ys\",\"type\":\"uint8[]\"}],\"name\":\"setOverrides\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"data\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint8\",\"name\":\"feature\",\"type\":\"uint8\"}],\"name\":\"storeFiles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint96\",\"name\":\"floor\",\"type\":\"uint96\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sellerTokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"floor\",\"type\":\"uint96\"}],\"name\":\"swapItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLengths\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"res\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProtocolEth\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"res\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedEth\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"res\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedShares\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"res\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"trusted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"trustedMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"valueForDelegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canDelegate\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"nextSwapAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"senderCurrentOffer\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"valueForPayoff\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"res\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"valueForRebalance\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"res\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"extractProtocolEth()\":{\"details\":\"caller must be a trusted user\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"loanInfo(uint160)\":{\"details\":\"contract ->frontend -> used to set the amount of eth for user\",\"params\":{\"tokenId\":\"the token who's current loan to check\"},\"returns\":{\"earned\":\"-> the amount of eth the minSharePrice has increased since loan was last rebalanced\",\"epochDue\":\"-> the final epoch a user is safe from liquidation (inclusive)\",\"loaner\":\"-> the user responsable for the loan\",\"toPayoff\":\"->  the current amount loaned out, plus the final rebalance fee\",\"toRebalance\":\"->  the fee a user must pay to rebalance (and extend) the loan on their nugg\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"setMigrator(address)\":{\"details\":\"caller must be a trusted user\",\"params\":{\"migrator\":\"the address to set as the migrator contract\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"valueForDelegate(address,uint160)\":{\"details\":\"returns 0 if no delegate can be made for this oken\",\"params\":{\"sender\":\"-> the address of the user who will be delegating\",\"tokenId\":\"-> the token to be delegated to\"},\"returns\":{\"canDelegate\":\"-> instead of reverting this function will return false\",\"nextSwapAmount\":\"-> the minimum value that must be sent with a delegate call\",\"senderCurrentOffer\":\"->\"}},\"valueForPayoff(uint160)\":{\"details\":\"should be used to tell user how much eth to send for payoff\"},\"valueForRebalance(uint160)\":{\"details\":\"should be used to tell user how much eth to send for rebalance\"},\"withdrawStake(uint160)\":{\"details\":\"should only be called directly\",\"params\":{\"tokenId\":\"the id of the nugg being burned\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"extractProtocolEth()\":{\"notice\":\"sends the current protocolEth to the user and resets the value to zero\"},\"loanInfo(uint160)\":{\"notice\":\"for a nugg's active loan: calculates the current min eth a user must send to payoff or rebalance\"},\"setMigrator(address)\":{\"notice\":\"sets the migrator contract\"},\"valueForDelegate(address,uint160)\":{\"notice\":\"calculates the minimum eth that must be sent with a delegate call\"},\"valueForPayoff(uint160)\":{\"notice\":\"\\\"toPayoff\\\" value from \\\"loanInfo\\\"\"},\"valueForRebalance(uint160)\":{\"notice\":\"\\\"toRebalance\\\" value from \\\"loanInfo\\\"\"},\"withdrawStake(uint160)\":{\"notice\":\"burns a nugg from existance, dealing the eth worth of that share to the user\"}},\"notice\":\"deviations from ERC721 standard: 1. no verificaiton the receiver is a ERC721Reciever - on top of this being a gross waste of gas, the way the swapping logic works makes this only worth calling when a user places an offer - and we did not want to call \\\"onERC721Recieved\\\" when no token was being sent. 2.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/NuggFT.sol\":\"NuggFT\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"src/NuggFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721Metadata} from './interfaces/IERC721.sol';\\n\\nimport {INuggFT as a} from './interfaces/INuggFT.sol';\\n\\nimport {Global} from './global/GlobalStorage.sol';\\n\\nimport {TokenExternal as Token} from './token/TokenExternal.sol';\\nimport {SwapExternal as Swapable} from './swap/SwapExternal.sol';\\nimport {ProofExternal as Provable} from './proof/ProofExternal.sol';\\nimport {FileExternal as dotnuggV1} from './file/FileExternal.sol';\\nimport {StakeExternal as Staked} from './stake/StakeExternal.sol';\\nimport {LoanExternal as Loanable} from './loan/LoanExternal.sol';\\nimport {EpochExternal as Epoched} from './epoch/EpochExternal.sol';\\nimport {TrustExternal as Migratable} from './trust/TrustExternal.sol';\\n\\n/// @title NuggFT V1\\n/// @author nugg.xyz - danny7even & dub6ix\\n/// @notice Explain to an end user what this does\\n/// @dev Explain to a developer any extra details\\n/// @dev the words \\\"share\\\" and \\\"nugg\\\" are used interchangably throughout\\n\\n/// deviations from ERC721 standard:\\n/// 1. no verificaiton the receiver is a ERC721Reciever - on top of this being a gross waste of gas,\\n/// the way the swapping logic works makes this only worth calling when a user places an offer - and\\n/// we did not want to call \\\"onERC721Recieved\\\" when no token was being sent.\\n/// 2.\\ncontract NuggFT is a, Swapable, Provable, Loanable, Migratable, Staked, Epoched, dotnuggV1, Token {\\n    constructor(address _defaultResolver) dotnuggV1(_defaultResolver) {}\\n\\n    function tokenURI(uint256 tokenId) public view override(dotnuggV1, IERC721Metadata) returns (string memory) {\\n        return dotnuggV1.tokenURI(tokenId);\\n    }\\n\\n    function name() public pure override returns (string memory) {\\n        return 'Nugg Fungible Token V1';\\n    }\\n\\n    function symbol() public pure override returns (string memory) {\\n        return 'NUGGFT';\\n    }\\n\\n    function globalPointerForTesting() internal view returns (Global.Storage storage ptr) {\\n        return Global.ptr();\\n    }\\n}\\n\",\"keccak256\":\"0x37f454e96651f86ffe1a554f200991f3215b2ad33581022dbd702868e930c0ce\",\"license\":\"MIT\"},\"src/epoch/EpochCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\n// MANUAL\\nlibrary EpochCore {\\n    using SafeCastLib for uint256;\\n\\n    struct Storage {\\n        uint32 genesis;\\n    }\\n\\n    uint256 constant INTERVAL = 69;\\n    uint32 constant OFFSET = 3000;\\n\\n    function setGenesis() internal {\\n        Storage storage s;\\n        assembly {\\n            s.slot := 0x100042069\\n        }\\n\\n        s.genesis = uint32(block.number);\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                whadduppp\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n    function getGenesis() internal view returns (uint32) {\\n        Storage storage s;\\n\\n        assembly {\\n            s.slot := 0x100042069\\n        }\\n\\n        return s.genesis;\\n    }\\n\\n    function toStartBlock(uint32 epoch) internal view returns (uint256 res) {\\n        res = ((epoch - OFFSET) * INTERVAL) + getGenesis();\\n    }\\n\\n    function toEpoch(uint256 blocknum) internal view returns (uint32 res) {\\n        res = (((blocknum - getGenesis()) / INTERVAL) + OFFSET).safe32();\\n    }\\n\\n    function toEndBlock(uint32 epoch) internal view returns (uint256 res) {\\n        res = toStartBlock(epoch + 1) - 1;\\n    }\\n\\n    function activeEpoch() internal view returns (uint32 res) {\\n        res = toEpoch(block.number);\\n    }\\n\\n    /// @notice gets unique base based on given epoch and converts encoded bytes to object that can be merged\\n    /// Note: by using the block hash no one knows what a nugg will look like before it's epoch.\\n    /// We considered making this harder to manipulate, but we decided that if someone were able to\\n    /// pull it off and make their own custom nugg, that would be really fucking cool.\\n    function calculateSeed() internal view returns (uint256 res, uint32 epoch) {\\n        epoch = activeEpoch();\\n        uint256 startblock = toStartBlock(epoch);\\n        bytes32 bhash = blockhash(startblock - 1);\\n        require(bhash != 0, 'E:0');\\n        res = uint256(keccak256(abi.encodePacked(bhash, epoch, address(this))));\\n    }\\n}\\n\",\"keccak256\":\"0xeb47cc48a7e572f30f8c729190b0aff93bd13c876ca113054dbac02a4122dcf1\",\"license\":\"MIT\"},\"src/epoch/EpochExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IEpochExternal} from '../interfaces/nuggft/IEpochExternal.sol';\\n\\nimport {EpochCore} from '../epoch/EpochCore.sol';\\n\\nabstract contract EpochExternal is IEpochExternal {\\n    constructor() {\\n        EpochCore.setGenesis();\\n        emit Genesis();\\n    }\\n\\n    /// @inheritdoc IEpochExternal\\n    function epoch() external view override returns (uint32) {\\n        return EpochCore.activeEpoch();\\n    }\\n}\\n\",\"keccak256\":\"0x08432c5fa0f61cf51614f95f726c9223b4ac74c92d97e8ae4c22856aa380dad3\",\"license\":\"MIT\"},\"src/file/FileCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IdotnuggV1Data} from '../interfaces/IdotnuggV1.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {SSTORE2} from '../libraries/SSTORE2.sol';\\n\\nimport {File} from './FileStorage.sol';\\nimport {FilePure} from './FilePure.sol';\\n\\n\\nlibrary FileCore {\\n    using FilePure for uint256;\\n    using SafeCastLib for uint256;\\n    using SafeCastLib for uint16;\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TRUSTED\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function storeFiles(\\n        uint8 feature,\\n        uint256[][] calldata data\\n    ) internal {\\n\\n        uint8 len = data.length.safe8();\\n\\n        require(len > 0, 'F:0');\\n\\n        address ptr = SSTORE2.write(abi.encode(data));\\n\\n        File.spointer().ptrs[feature].push(uint168(uint160(ptr)) | (uint168(len) << 160));\\n\\n        uint256 cache = File.spointer().lengthData;\\n\\n        uint8[] memory lengths = FilePure.getLengths(cache);\\n\\n        lengths[feature] += len;\\n\\n        File.spointer().lengthData = FilePure.setLengths(cache, lengths);\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                 GET FILES\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function getBatchFiles(uint8[] memory ids) internal view returns (uint256[][] memory data) {\\n        data = new uint256[][](ids.length);\\n\\n        for (uint8 i = 0; i < ids.length; i++) {\\n            if (ids[i] == 0) data[i] = new uint256[](0);\\n            else data[i] = get(i, ids[i]);\\n        }\\n    }\\n\\n    function get(uint8 feature, uint8 pos) internal view returns (uint256[] memory data) {\\n        require(pos != 0, 'F:1');\\n\\n        pos--;\\n\\n        uint8 totalLength = FilePure.getLengths(File.spointer().lengthData)[feature];\\n\\n        require(pos < totalLength, 'F:2');\\n\\n        uint168[] memory ptrs = File.spointer().ptrs[feature];\\n\\n        address store;\\n        uint8 storePos;\\n\\n        uint8 workingPos;\\n\\n        for (uint256 i = 0; i < ptrs.length; i++) {\\n            uint8 here = uint8(ptrs[i] >> 160);\\n            if (workingPos + here > pos) {\\n                store = address(uint160(ptrs[i]));\\n                storePos = pos - workingPos;\\n                break;\\n            } else {\\n                workingPos += here;\\n            }\\n        }\\n\\n        require(store != address(0), 'F:3');\\n\\n        data = abi.decode(SSTORE2.read(address(uint160(store))), (uint256[][]))[storePos];\\n    }\\n}\\n\",\"keccak256\":\"0x2e223437f2e78f20aef81fcfcef02adf668bc29c3097f4d5e614ac876d4b0bea\",\"license\":\"MIT\"},\"src/file/FileExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IdotnuggV1Processor} from '../interfaces/IdotnuggV1.sol';\\nimport {IdotnuggV1Resolver} from '../interfaces/IdotnuggV1.sol';\\nimport {IdotnuggV1Data} from '../interfaces/IdotnuggV1.sol';\\nimport {IdotnuggV1Implementer} from '../interfaces/IdotnuggV1.sol';\\nimport {IERC721Metadata} from '../interfaces/IERC721.sol';\\n\\nimport {IFileExternal} from '../interfaces/nuggft/IFileExternal.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport {TokenView} from '../token/TokenView.sol';\\nimport {ProofCore} from '../proof/ProofCore.sol';\\n\\nimport {FileCore} from './FileCore.sol';\\nimport {FileView} from './FileView.sol';\\nimport {File} from './FileStorage.sol';\\n\\nimport {Trust} from '../trust/Trust.sol';\\n\\nabstract contract FileExternal is IFileExternal {\\n    using SafeCastLib for uint256;\\n\\n    /// @inheritdoc IdotnuggV1Implementer\\n    address public override dotnuggV1Processor;\\n\\n    /// @inheritdoc IdotnuggV1Implementer\\n    uint8 public override defaultWidth = 45;\\n\\n    // / @inheritdoc IdotnuggV1Implementer\\n    uint8 public override defaultZoom = 10;\\n\\n    constructor(address _dotnuggV1Processor) {\\n        require(_dotnuggV1Processor != address(0), 'F:4');\\n        dotnuggV1Processor = _dotnuggV1Processor;\\n    }\\n\\n    /// @inheritdoc IFileExternal\\n    function storeFiles(uint256[][] calldata data, uint8 feature) external override {\\n        Trust.check();\\n\\n        FileCore.storeFiles(feature, data);\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            RESOLVER MANAGEMENT\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @inheritdoc IdotnuggV1Implementer\\n    function setResolver(uint256 tokenId, address to) public virtual override {\\n        require(TokenView.isOperatorForOwner(msg.sender, tokenId.safe160()), 'F:5');\\n\\n        File.spointer().resolvers[tokenId] = to;\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            MAIN FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory res) {\\n        uint160 safeTokenId = tokenId.safe160();\\n\\n        address resolver = FileView.hasResolver(safeTokenId) ? FileView.resolverOf(safeTokenId) : dotnuggV1Processor;\\n\\n        res = IdotnuggV1Processor(dotnuggV1Processor).dotnuggToString(address(this), tokenId, resolver, defaultWidth, defaultZoom);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                HELPERS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc IdotnuggV1Implementer\\n    function prepareFiles(uint256 tokenId) public view override returns (uint256[][] memory input, IdotnuggV1Data.Data memory data) {\\n        (uint256 proof, uint8[] memory ids, uint8[] memory extras, uint8[] memory xovers, uint8[] memory yovers) = ProofCore\\n            .parsedProofOfIncludingPending(tokenId.safe160());\\n\\n        input = FileCore.getBatchFiles(ids);\\n\\n        data = IdotnuggV1Data.Data({\\n            version: 1,\\n            renderedAt: block.timestamp,\\n            name: 'NuggFT V1',\\n            desc: 'Nugg Fungible Token V1',\\n            owner: TokenView.exists(tokenId.safe160()) ? TokenView.ownerOf(tokenId.safe160()) : address(0),\\n            tokenId: tokenId,\\n            proof: proof,\\n            ids: ids,\\n            extras: extras,\\n            xovers: xovers,\\n            yovers: yovers\\n        });\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                VIEW\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc IdotnuggV1Implementer\\n    function resolverOf(uint256 tokenId) public view virtual override returns (address) {\\n        return FileView.resolverOf(tokenId.safe160());\\n    }\\n\\n    /// @inheritdoc IFileExternal\\n    function totalLengths() public view override returns (uint8[] memory res) {\\n        res = FileView.totalLengths();\\n    }\\n}\\n\",\"keccak256\":\"0x734ce97ef3f9cdc0319dee32265d6d9111d9040fed7192c7373a22edc1a756a3\",\"license\":\"MIT\"},\"src/file/FilePure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nlibrary FilePure {\\n    using SafeCastLib for uint256;\\n\\n    function decoder(bytes memory data, uint256 feature) internal pure returns (uint256[][] memory res) {\\n        res = abi.decode(abi.decode((data), (bytes[]))[feature], (uint256[][]));\\n    }\\n\\n    function getLengths(uint256 input) internal pure returns (uint8[] memory res) {\\n        res = ShiftLib.getArray(input, 0);\\n    }\\n\\n    function setLengths(uint256 input, uint8[] memory upd) internal pure returns (uint256 res) {\\n        res = ShiftLib.setArray(input, 0, upd);\\n    }\\n\\n    function getAddress(uint256 input) internal pure returns (address res) {\\n        res = address(uint160(input >> 96));\\n    }\\n\\n    function addrsetAddress(uint256 input, address update) internal pure returns (uint256 res) {\\n        res = input & type(uint96).max;\\n        res |= (uint256(uint160(update)) << 96);\\n    }\\n}\\n\",\"keccak256\":\"0x59aa17392f046acb6624c81be6d36807f8df8b7ce0fae9daafcb865c752a3529\",\"license\":\"MIT\"},\"src/file/FileStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\n// TESTED\\nlibrary File {\\n    struct Storage {\\n        uint256 lengthData;\\n        mapping(uint8 => uint168[]) ptrs;\\n        // Mapping from token ID to owner address\\n        mapping(uint256 => address) resolvers;\\n    }\\n\\n    function spointer() internal view returns (Storage storage s) {\\n        return Global.ptr().file;\\n    }\\n}\\n\",\"keccak256\":\"0x84c957212eb5c7dd84e99208f4d495f583b1db88e331b2bc73326c7dfca25e1d\",\"license\":\"MIT\"},\"src/file/FileView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\nimport {File} from './FileStorage.sol';\\nimport {FilePure} from './FilePure.sol';\\n\\n// TESTED\\nlibrary FileView {\\n    function hasResolver(uint160 tokenId) internal view returns (bool) {\\n        return File.spointer().resolvers[tokenId] != address(0);\\n    }\\n\\n    function resolverOf(uint160 tokenId) internal view returns (address) {\\n        return File.spointer().resolvers[tokenId];\\n    }\\n\\n    function totalLengths() internal view returns (uint8[] memory res) {\\n        res = FilePure.getLengths(File.spointer().lengthData);\\n    }\\n}\\n\",\"keccak256\":\"0x9a7f43b6f0be964ee609db3904a3eae3a7fa316c8776ad952b977f1e3ea77bee\",\"license\":\"MIT\"},\"src/global/GlobalStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {File} from '../file/FileStorage.sol';\\nimport {Stake} from '../stake/StakeStorage.sol';\\nimport {Swap} from '../swap/SwapStorage.sol';\\nimport {Proof} from '../proof/ProofStorage.sol';\\nimport {Token} from '../token/TokenStorage.sol';\\nimport {Loan} from '../loan/LoanStorage.sol';\\n\\nlibrary Global {\\n    struct Storage {\\n        Token.Storage token;\\n        Stake.Storage stake;\\n        File.Storage file;\\n        Proof.Storage proof;\\n        Loan.Mapping loan;\\n        Swap.Full swap;\\n    }\\n\\n    function ptr() internal pure returns (Storage storage s) {\\n        assembly {\\n            s.slot := 0x42069\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1bae96634defcc73b04b4e0686aa351e08ff0dd2e1ab188cfadcdc901d34739a\",\"license\":\"MIT\"},\"src/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6dd445f92ecd50eb0287ba77131db4476eb976787dfa3a21e63931322cd8b226\",\"license\":\"MIT\"},\"src/interfaces/INuggFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ITokenExternal} from './nuggft/ITokenExternal.sol';\\nimport {ISwapExternal} from './nuggft/ISwapExternal.sol';\\nimport {IProofExternal} from './nuggft/IProofExternal.sol';\\nimport {IFileExternal} from './nuggft/IFileExternal.sol';\\nimport {IStakeExternal} from './nuggft/IStakeExternal.sol';\\nimport {ILoanExternal} from './nuggft/ILoanExternal.sol';\\nimport {IEpochExternal} from './nuggft/IEpochExternal.sol';\\nimport {ITrustExternal} from './nuggft/ITrustExternal.sol';\\n\\ninterface INuggFT is\\n    ISwapExternal,\\n    ITokenExternal,\\n    IStakeExternal,\\n    ILoanExternal,\\n    IProofExternal,\\n    IFileExternal,\\n    IEpochExternal,\\n    ITrustExternal\\n{}\\n\",\"keccak256\":\"0x5524840e7effa8a5aac7fb2a1c4c9374fc13cd1f3671c1ba767a7fa82123789b\",\"license\":\"MIT\"},\"src/interfaces/INuggFTV1Migrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggFTV1Migrator {\\n    event MigrateV1Accepted(address v1, uint160 tokenId, uint256 proof, address owner, uint96 eth);\\n\\n    function nuggftMigrateFromV1(\\n        uint160 tokenId,\\n        uint256 proof,\\n        address owner\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x904a8d89ba1525b35542f1626bf47ba055b607c92c8c2e601c845ab561a96b7c\",\"license\":\"MIT\"},\"src/interfaces/IdotnuggV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IdotnuggV1Data {\\n    struct Data {\\n        uint256 version;\\n        uint256 renderedAt;\\n        string name;\\n        string desc;\\n        address owner;\\n        uint256 tokenId;\\n        uint256 proof;\\n        uint8[] ids;\\n        uint8[] extras;\\n        uint8[] xovers;\\n        uint8[] yovers;\\n    }\\n}\\n\\ninterface IdotnuggV1Resolver {\\n    function resolveBytes(\\n        uint256[] memory file,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 zoom\\n    ) external view returns (bytes memory res);\\n\\n    function resolveRaw(\\n        uint256[] memory file,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 zoom\\n    ) external view returns (uint256[] memory res);\\n\\n    function resolveData(\\n        uint256[] memory file,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 zoom\\n    ) external view returns (IdotnuggV1Data.Data memory res);\\n\\n    function resolveString(\\n        uint256[] memory file,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 zoom\\n    ) external view returns (string memory res);\\n}\\n\\ninterface IdotnuggV1Processor is IdotnuggV1Resolver {\\n    function dotnuggToBytes(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (bytes memory res);\\n\\n    function dotnuggToRaw(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (uint256[] memory res);\\n\\n    function dotnuggToData(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (IdotnuggV1Data.Data memory res);\\n\\n    function dotnuggToString(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (string memory res);\\n\\n    function process(\\n        address implementer,\\n        uint256 tokenId,\\n        uint8 width\\n    ) external view returns (uint256[] memory file, IdotnuggV1Data.Data memory dat);\\n\\n    function processCore(\\n        uint256[][] memory files,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 width\\n    ) external view returns (uint256[] memory file);\\n}\\n\\ninterface IdotnuggV1Implementer {\\n    function setResolver(uint256 tokenId, address to) external;\\n\\n    function resolverOf(uint256 tokenId) external view returns (address resolver);\\n\\n    function prepareFiles(uint256 tokenId) external view returns (uint256[][] memory file, IdotnuggV1Data.Data memory data);\\n\\n    function dotnuggV1Processor() external returns (address);\\n\\n    function defaultWidth() external returns (uint8);\\n\\n    function defaultZoom() external returns (uint8);\\n}\\n\",\"keccak256\":\"0x2cf3a40c80271c43f4b1c173073621bccb5c9fc4e8a7191d049e823134872e1e\",\"license\":\"MIT\"},\"src/interfaces/nuggft/IEpochExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IEpochExternal {\\n    event Genesis();\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function epoch() external view returns (uint32 res);\\n}\\n\",\"keccak256\":\"0xa5c654c1493d99fbdb2e4422d7ac16c2343761c47379792001912ad6dbdd60d5\",\"license\":\"MIT\"},\"src/interfaces/nuggft/IFileExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721, IERC721Metadata, IERC165} from '../IERC721.sol';\\n\\nimport {IdotnuggV1Implementer} from '../IdotnuggV1.sol';\\n\\ninterface IFileExternal is IERC721Metadata, IdotnuggV1Implementer {\\n    function storeFiles(uint256[][] calldata data, uint8 feature) external;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function totalLengths() external view returns (uint8[] memory res);\\n}\\n\",\"keccak256\":\"0xcdd99edfc43380c4dbde813a91f354cd6d9bdaa71a5f935bd1d579557097df0a\",\"license\":\"MIT\"},\"src/interfaces/nuggft/ILoanExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ILoanExternal {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event TakeLoan(uint160 tokenId, uint96 principal);\\n    event Payoff(uint160 tokenId, address account, uint96 payoffAmount);\\n    event Rebalance(uint160 tokenId, uint96 fee, uint96 earned);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function rebalance(uint160 tokenId) external payable;\\n\\n    function loan(uint160 tokenId) external;\\n\\n    function payoff(uint160 tokenId) external payable;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @notice for a nugg's active loan: calculates the current min eth a user must send to payoff or rebalance\\n    /// @dev contract ->\\n    /// @dev frontend -> used to set the amount of eth for user\\n    /// @param tokenId the token who's current loan to check\\n    /// @return toPayoff ->  the current amount loaned out, plus the final rebalance fee\\n    /// @return toRebalance ->  the fee a user must pay to rebalance (and extend) the loan on their nugg\\n    /// @return earned -> the amount of eth the minSharePrice has increased since loan was last rebalanced\\n    /// @return epochDue -> the final epoch a user is safe from liquidation (inclusive)\\n    /// @return loaner -> the user responsable for the loan\\n    function loanInfo(uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 toPayoff,\\n            uint96 toRebalance,\\n            uint96 earned,\\n            uint32 epochDue,\\n            address loaner\\n        );\\n\\n    /// @notice \\\"toPayoff\\\" value from \\\"loanInfo\\\"\\n    /// @dev should be used to tell user how much eth to send for payoff\\n    function valueForPayoff(uint160 tokenId) external view returns (uint96 res);\\n\\n    /// @notice \\\"toRebalance\\\" value from \\\"loanInfo\\\"\\n    /// @dev should be used to tell user how much eth to send for rebalance\\n    function valueForRebalance(uint160 tokenId) external view returns (uint96 res);\\n}\\n\",\"keccak256\":\"0x194475a9041ddbec5ecf94e3d539fee52c1f9d61bb3f96ba4c895f5999377f8a\",\"license\":\"MIT\"},\"src/interfaces/nuggft/IProofExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IProofExternal {\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                  EVENTS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    event SetProof(uint160 tokenId, uint256 proof, uint8[] items);\\n    event PopItem(uint160 tokenId, uint256 proof, uint16 itemId);\\n    event PushItem(uint160 tokenId, uint256 proof, uint16 itemId);\\n    event RotateItem(uint160 tokenId, uint256 proof, uint8 feature);\\n    event SetAnchorOverrides(uint160 tokenId, uint256 proof, uint8[] xs, uint8[] ys);\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                             STATE CHANGING\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function rotateFeature(uint160 tokenId, uint8 feature) external;\\n\\n    function setOverrides(\\n        uint160 tokenId,\\n        uint8[] memory xs,\\n        uint8[] memory ys\\n    ) external;\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                               VIEW FUNCTIONS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function proofOf(uint160 tokenId) external view returns (uint256);\\n\\n    function parsedProofOf(uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            uint256 proof,\\n            uint8[] memory defaultIds,\\n            uint8[] memory extraIds,\\n            uint8[] memory overxs,\\n            uint8[] memory overys\\n        );\\n}\\n\",\"keccak256\":\"0xc9c81ed2dc71a72f2b8fcf7cdad5980f8c772f71f3eba6359c3c0959b9cfaf72\",\"license\":\"MIT\"},\"src/interfaces/nuggft/IStakeExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStakeExternal {\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    event StakeEth(uint96 stake, uint96 protocol);\\n    event UnStakeEth(uint96 stake, address to);\\n    event ProtocolEthExtracted(uint96 eth);\\n    event MigratorV1Updated(address migrator);\\n    event MigrateV1Sent(address v2, uint160 tokenId, uint256 proof, address owner, uint96 eth);\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function migrateStake(uint160 tokenId) external;\\n\\n    /// @notice burns a nugg from existance, dealing the eth worth of that share to the user\\n    /// @dev should only be called directly\\n    /// @param tokenId the id of the nugg being burned\\n    function withdrawStake(uint160 tokenId) external;\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function minSharePrice() external view returns (uint96 res);\\n\\n    function totalProtocolEth() external view returns (uint96);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalStakedShares() external view returns (uint64);\\n\\n    function totalStakedEth() external view returns (uint96);\\n\\n    function activeEthPerShare() external view returns (uint96);\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TRUSTED\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @notice sends the current protocolEth to the user and resets the value to zero\\n    /// @dev caller must be a trusted user\\n    function extractProtocolEth() external;\\n\\n    /// @notice sets the migrator contract\\n    /// @dev caller must be a trusted user\\n    /// @param migrator the address to set as the migrator contract\\n    function setMigrator(address migrator) external;\\n}\\n\",\"keccak256\":\"0xbc57a9cde17ce290ab746d63bfaabdc5cfdc92ccd35b624d872e9150a38c2bf2\",\"license\":\"MIT\"},\"src/interfaces/nuggft/ISwapExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ISwapExternal {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event DelegateMint(uint256 epoch, address account, uint96 eth);\\n    event DelegateCommit(uint160 tokenId, address account, uint96 eth);\\n    event DelegateOffer(uint160 tokenId, address account, uint96 eth);\\n    event SwapClaim(uint160 tokenId, address account, uint32 epoch);\\n    event SwapStart(uint160 tokenId, address account, uint96 eth);\\n\\n    event DelegateCommitItem(uint160 sellerTokenId, uint16 itemId, uint160 buyerTokenId, uint96 eth);\\n    event DelegateOfferItem(uint160 sellerTokenId, uint16 itemId, uint160 buyerTokenId, uint96 eth);\\n    event SwapClaimItem(uint160 sellerTokenId, uint16 itemId, uint160 buyerTokenId, uint32 epoch);\\n    event SwapItemStart(uint160 sellerTokenId, uint16 itemId, uint96 eth);\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function delegate(address sender, uint160 tokenId) external payable;\\n\\n    function delegateItem(\\n        uint160 buyerTokenId,\\n        uint160 sellerTokenId,\\n        uint16 itemId\\n    ) external payable;\\n\\n    function claim(address sender, uint160 tokenId) external;\\n\\n    function claimItem(\\n        uint160 buyerTokenId,\\n        uint160 sellerTokenId,\\n        uint16 itemid\\n    ) external;\\n\\n    function swap(uint160 tokenId, uint96 floor) external;\\n\\n    function swapItem(\\n        uint160 sellerTokenId,\\n        uint16 itemid,\\n        uint96 floor\\n    ) external;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @notice calculates the minimum eth that must be sent with a delegate call\\n    /// @dev returns 0 if no delegate can be made for this oken\\n    /// @param tokenId -> the token to be delegated to\\n    /// @param sender -> the address of the user who will be delegating\\n    /// @return canDelegate -> instead of reverting this function will return false\\n    /// @return nextSwapAmount -> the minimum value that must be sent with a delegate call\\n    /// @return senderCurrentOffer ->\\n    function valueForDelegate(address sender, uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            bool canDelegate,\\n            uint96 nextSwapAmount,\\n            uint96 senderCurrentOffer\\n        );\\n}\\n\",\"keccak256\":\"0x526170fc6d00f7f1b11fad4f23ea1b923c50db1df86c6dc2e4e3b6c44121ab2b\",\"license\":\"MIT\"},\"src/interfaces/nuggft/ITokenExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721, IERC721Metadata, IERC165} from '../IERC721.sol';\\n\\ninterface ITokenExternal is IERC721 {\\n    event TrustedMint(address indexed to, uint160 tokenId);\\n    event UntrustedMint(address indexed by, uint160 tokenId);\\n\\n    function mint(uint160 tokenId) external payable;\\n\\n    function trustedMint(uint160 tokenId, address to) external payable;\\n}\\n\",\"keccak256\":\"0xc45a0915897d9b8c9cb68ab0a38ebc1bb51c24fea02fdbeec67e1ec25ab05cde\",\"license\":\"MIT\"},\"src/interfaces/nuggft/ITrustExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITrustExternal {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event TrustUpdated(address indexed user, bool trust);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function setIsTrusted(address user, bool trust) external;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function trusted(address user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x72de4faf0b923cfb861a6b252588df76004aca6064994ebd24e4373ec60667eb\",\"license\":\"MIT\"},\"src/libraries/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/// @notice Read and write to persistent storage at a fraction of the cost.\\n/// @author Modified from 0xSequence (https://github.com/0xsequence/sstore2/blob/master/contracts/SSTORE2.sol)\\nlibrary SSTORE2 {\\n    uint256 internal constant DATA_OFFSET = 1;\\n\\n    function write(bytes memory data) internal returns (address pointer) {\\n        bytes memory runtimeCode = abi.encodePacked(hex'00', data);\\n\\n        bytes memory creationCode = abi.encodePacked(hex'63', uint32(runtimeCode.length), hex'80_60_0E_60_00_39_60_00_F3', runtimeCode);\\n\\n        assembly {\\n            pointer := create(0, add(creationCode, 32), mload(creationCode))\\n        }\\n\\n        require(pointer != address(0), 'DEPLOYMENT_FAILED');\\n    }\\n\\n    function read(address pointer) internal view returns (bytes memory) {\\n        return readBytecode(pointer, DATA_OFFSET, pointer.code.length - DATA_OFFSET);\\n    }\\n\\n    function read(address pointer, uint256 start) internal view returns (bytes memory) {\\n        start += DATA_OFFSET;\\n\\n        return readBytecode(pointer, start, pointer.code.length - start);\\n    }\\n\\n    function read(\\n        address pointer,\\n        uint256 start,\\n        uint256 end\\n    ) internal view returns (bytes memory) {\\n        start += DATA_OFFSET;\\n        end += DATA_OFFSET;\\n\\n        require(pointer.code.length >= end, 'OUT_OF_BOUNDS');\\n\\n        return readBytecode(pointer, start, end - start);\\n    }\\n\\n    function readBytecode(\\n        address pointer,\\n        uint256 start,\\n        uint256 size\\n    ) private view returns (bytes memory data) {\\n        assembly {\\n            data := mload(0x40)\\n            mstore(0x40, add(data, and(add(add(size, add(start, 0x20)), 0x1f), not(0x1f))))\\n            mstore(data, size)\\n            extcodecopy(pointer, add(data, 0x20), start, size)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x92a5788f76f3e7e98643d8791cb2da664f1865cc50f7843594e0e5ecd7a68283\",\"license\":\"MIT\"},\"src/libraries/SafeCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n// OK\\n/// @notice Safe unsigned integer casting library that reverts on overflow.\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\\nlibrary SafeCastLib {\\n    function safe160(uint256 x) internal pure returns (uint160 y) {\\n        require(x <= type(uint160).max);\\n        y = uint160(x);\\n    }\\n\\n    function safe96(uint256 x) internal pure returns (uint96 y) {\\n        require(x <= type(uint96).max);\\n        y = uint96(x);\\n    }\\n\\n    function safe64(uint256 x) internal pure returns (uint64 y) {\\n        require(x <= type(uint64).max);\\n        y = uint64(x);\\n    }\\n\\n    function safe32(uint256 x) internal pure returns (uint32 y) {\\n        require(x <= type(uint32).max);\\n        y = uint32(x);\\n    }\\n\\n    function safe16(uint256 x) internal pure returns (uint16 y) {\\n        require(x <= type(uint16).max);\\n        y = uint16(x);\\n    }\\n\\n    function safe8(uint256 x) internal pure returns (uint8 y) {\\n        require(x <= type(uint8).max);\\n        y = uint8(x);\\n    }\\n}\\n\",\"keccak256\":\"0xabebd3a3bff23b926901d1aad6aa461761cfb4db8c9685a0b803597c78590864\",\"license\":\"MIT\"},\"src/libraries/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721Receiver} from '../interfaces/IERC721.sol';\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\nlibrary SafeTransferLib {\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                               ETH OPERATIONS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, 'Z:0');\\n    }\\n}\\n\",\"keccak256\":\"0x69790f72ec214e5c481725d2ac591f75fde8186fbe4cf88f0a91b6dfb2f7a64a\",\"license\":\"MIT\"},\"src/libraries/ShiftLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeCastLib} from './SafeCastLib.sol';\\n\\nlibrary ShiftLib {\\n    using SafeCastLib for uint256;\\n\\n    /// @notice creates a bit mask\\n    /// @dev res = (2 ^ bits) - 1\\n    /// @param bits bit size of mask\\n    /// @return res the mask\\n    function mask(uint8 bits) internal pure returns (uint256 res) {\\n        assembly {\\n            res := sub(shl(bits, 1), 1)\\n        }\\n    }\\n\\n    function fullsubmask(uint8 bits, uint8 pos) internal pure returns (uint256 res) {\\n        res = ~(mask(bits) << pos);\\n    }\\n\\n    function set(\\n        uint256 preStore,\\n        uint8 bits,\\n        uint8 pos,\\n        uint256 value\\n    ) internal pure returns (uint256 postStore) {\\n        postStore = preStore & fullsubmask(bits, pos);\\n\\n        assembly {\\n            value := shl(pos, value)\\n        }\\n\\n        postStore |= value;\\n    }\\n\\n    function get(\\n        uint256 store,\\n        uint8 bits,\\n        uint8 pos\\n    ) internal pure returns (uint256 value) {\\n        assembly {\\n            value := shr(pos, store)\\n        }\\n        value &= mask(bits);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                ARRAYS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function getArray(uint256 store, uint8 pos) internal pure returns (uint8[] memory arr) {\\n        store = get(store, 64, pos);\\n\\n        arr = new uint8[](8);\\n        for (uint256 i = 0; i < 8; i++) {\\n            arr[i] = uint8(store & 0xff);\\n            store >>= 8;\\n        }\\n    }\\n\\n    function setArray(\\n        uint256 store,\\n        uint8 pos,\\n        uint8[] memory arr\\n    ) internal pure returns (uint256 res) {\\n        for (uint256 i = 8; i > 0; i--) {\\n            res |= uint256(arr[i - 1]) << ((8 * (i - 1)));\\n        }\\n\\n        res = set(store, 64, pos, res);\\n    }\\n}\\n\",\"keccak256\":\"0xd3e99b0f856a425745623a1151a7b27f57efd75d3badd65a391bf97a0d4c180f\",\"license\":\"MIT\"},\"src/loan/LoanExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ILoanExternal} from '../interfaces/nuggft/ILoanExternal.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\nimport {Loan} from '../loan/LoanStorage.sol';\\n\\nimport {TokenCore} from '../token/TokenCore.sol';\\nimport {StakeCore} from '../stake/StakeCore.sol';\\n\\nimport {SwapPure} from '../swap/SwapPure.sol';\\n\\nimport {TokenView} from '../token/TokenView.sol';\\nimport {EpochCore} from '../epoch/EpochCore.sol';\\n\\nabstract contract LoanExternal is ILoanExternal {\\n    using SafeCastLib for uint256;\\n    using SwapPure for uint256;\\n\\n    uint32 constant LIQUIDATION_PERIOD = 1000;\\n    uint96 constant REBALANCE_FEE_BPS = 100;\\n\\n    /// @inheritdoc ILoanExternal\\n    function loan(uint160 tokenId) external override {\\n        address sender = TokenView.ownerOf(tokenId);\\n\\n        require(TokenView.isOperatorFor(msg.sender, sender), 'L:0');\\n\\n        uint96 principal = StakeCore.activeEthPerShare();\\n\\n        uint32 epoch = EpochCore.activeEpoch();\\n\\n        (uint256 loanData, ) = SwapPure.buildSwapData(epoch, sender, principal, false);\\n\\n        Loan.sstore(tokenId, loanData); // starting swap data\\n\\n        emit TakeLoan(tokenId, principal);\\n\\n        TokenCore.approvedTransferToSelf(tokenId);\\n\\n        SafeTransferLib.safeTransferETH(sender, principal);\\n    }\\n\\n    /// @inheritdoc ILoanExternal\\n    function payoff(uint160 tokenId) external payable override {\\n        (uint96 toPayoff, uint96 toRebalance, uint96 earned, uint96 epochDue, address loaner) = loanInfo(tokenId);\\n\\n        assert(address(this) == TokenView.ownerOf(tokenId)); // should always be true - should revert in loanInfo\\n\\n        Loan.spurge(tokenId); // starting swap data\\n\\n        uint32 epoch = EpochCore.activeEpoch();\\n\\n        address benif = msg.sender;\\n\\n        // delay liquidation\\n        if (epochDue >= epoch) {\\n            require(TokenView.isOperatorFor(msg.sender, loaner), 'L:1');\\n            benif = loaner;\\n        }\\n\\n        uint96 value = msg.value.safe96();\\n\\n        require(toPayoff <= value, 'L:2');\\n\\n        uint96 overpayment = value - toRebalance;\\n\\n        uint96 owed = earned + overpayment;\\n\\n        emit Rebalance(tokenId, toRebalance, earned);\\n\\n        emit Payoff(tokenId, benif, toPayoff);\\n\\n        StakeCore.addStakedEth(toRebalance);\\n\\n        SafeTransferLib.safeTransferETH(benif, owed);\\n\\n        TokenCore.checkedTransferFromSelf(benif, tokenId);\\n    }\\n\\n    /// @inheritdoc ILoanExternal\\n    function rebalance(uint160 tokenId) external payable override {\\n        (, uint96 toRebalance, uint96 earned, uint32 epochDue, address loaner) = loanInfo(tokenId);\\n\\n        assert(address(this) == TokenView.ownerOf(tokenId)); // should always be true - should revert in loanInfo\\n\\n        require(toRebalance <= msg.value, 'L:3');\\n\\n        // has to be done before newPrincipal is calculated\\n        StakeCore.addStakedEth(toRebalance);\\n\\n        uint96 newPrincipal = StakeCore.activeEthPerShare();\\n\\n        (uint256 loanData, uint96 dust) = SwapPure.buildSwapData(epochDue, loaner, newPrincipal, false);\\n\\n        Loan.sstore(tokenId, loanData);\\n\\n        uint96 overpayment = msg.value.safe96() - toRebalance;\\n\\n        uint96 owed = earned + overpayment + dust;\\n\\n        emit Rebalance(tokenId, toRebalance, earned);\\n\\n        SafeTransferLib.safeTransferETH(loaner, owed);\\n    }\\n\\n    /// @inheritdoc ILoanExternal\\n    function valueForPayoff(uint160 tokenId) external view returns (uint96 res) {\\n        (res, , , , ) = loanInfo(tokenId);\\n    }\\n\\n    /// @inheritdoc ILoanExternal\\n    function valueForRebalance(uint160 tokenId) external view returns (uint96 res) {\\n        (, res, , , ) = loanInfo(tokenId);\\n    }\\n\\n    /// @inheritdoc ILoanExternal\\n    function loanInfo(uint160 tokenId)\\n        public\\n        view\\n        returns (\\n            uint96 toPayoff,\\n            uint96 toRebalance,\\n            uint96 earned,\\n            uint32 epochDue,\\n            address loaner\\n        )\\n    {\\n        uint256 state = Loan.sload(tokenId);\\n\\n        // ensure loan exists\\n        require(state != 0, 'L:4');\\n\\n        // the amount of eth currently loanded by user\\n        uint96 curr = state.eth();\\n\\n        uint96 activeEps = StakeCore.activeEthPerShare();\\n\\n        toRebalance = ((curr * REBALANCE_FEE_BPS) / 10000);\\n\\n        toPayoff = curr + toRebalance;\\n\\n        // value earned while lone was taken out\\n        earned = toPayoff >= activeEps ? 0 : activeEps - toPayoff;\\n\\n        epochDue = state.epoch() + LIQUIDATION_PERIOD;\\n\\n        loaner = address(state.account());\\n    }\\n}\\n\",\"keccak256\":\"0x578243b6d84b1026b6f5c88e022b38b35e3f6652055870226e8411835d2cda63\",\"license\":\"MIT\"},\"src/loan/LoanStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\nlibrary Loan {\\n    struct Mapping {\\n        mapping(uint256 => uint256) map;\\n    }\\n\\n    function sstore(uint160 tokenId, uint256 data) internal {\\n        Global.ptr().loan.map[tokenId] = data;\\n    }\\n\\n    function spurge(uint160 tokenId) internal {\\n        delete Global.ptr().loan.map[tokenId];\\n    }\\n\\n    function sload(uint160 tokenId) internal view returns (uint256) {\\n        return Global.ptr().loan.map[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0xf4d38962a076e171796403317f9f100e0e45352d0dd6caabb5341e476c62a20f\",\"license\":\"MIT\"},\"src/proof/ProofCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport {EpochCore} from '../epoch/EpochCore.sol';\\n\\nimport {Proof} from './ProofStorage.sol';\\n\\nimport {ProofPure} from './ProofPure.sol';\\n\\nimport {TokenView} from '../token/TokenView.sol';\\n\\nimport {FileView} from '../file/FileView.sol';\\nimport {File} from '../file/FileStorage.sol';\\n\\n// OK\\nlibrary ProofCore {\\n    using SafeCastLib for uint256;\\n    using ProofPure for uint256;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event SetProof(uint160 tokenId, uint256 proof, uint8[] items);\\n    event PopItem(uint160 tokenId, uint256 proof, uint16 itemId);\\n    event PushItem(uint160 tokenId, uint256 proof, uint16 itemId);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                VIEW\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function checkedProofOf(uint160 tokenId) internal view returns (uint256 res) {\\n        res = Proof.sload(tokenId);\\n        require(res != 0, 'P:0');\\n    }\\n\\n    function checkedProofOfIncludingPending(uint160 tokenId) internal view returns (uint256 res) {\\n        (uint256 seed, uint256 epoch, uint256 proof, ) = ProofCore.pendingProof();\\n\\n        if (epoch == tokenId && seed != 0) return proof;\\n\\n        res = Proof.sload(tokenId);\\n\\n        require(res != 0, 'P:1');\\n    }\\n\\n    function hasProof(uint160 tokenId) internal view returns (bool res) {\\n        res = Proof.sload(tokenId) != 0;\\n    }\\n\\n    function parsedProofOfIncludingPending(uint160 tokenId)\\n        internal\\n        view\\n        returns (\\n            uint256 proof,\\n            uint8[] memory defaultIds,\\n            uint8[] memory extraIds,\\n            uint8[] memory overxs,\\n            uint8[] memory overys\\n        )\\n    {\\n        proof = checkedProofOfIncludingPending(tokenId);\\n\\n        return ProofPure.fullProof(proof);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            SWAP MANAGEMENT\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function addItem(uint160 tokenId, uint16 itemId) internal {\\n        require(TokenView.isOperatorForOwner(msg.sender, tokenId), 'P:2');\\n\\n        uint256 working = checkedProofOf(tokenId);\\n\\n        require(Proof.spointer().protcolItems[itemId] > 0, 'P:3');\\n\\n        Proof.spointer().protcolItems[itemId]--;\\n\\n        working = ProofPure.pushToExtra(working, itemId);\\n\\n        Proof.sstore(tokenId, working);\\n\\n        emit PushItem(tokenId, working, itemId);\\n    }\\n\\n    function removeItem(uint160 tokenId, uint16 itemId) internal {\\n        require(TokenView.isOperatorForOwner(msg.sender, tokenId), 'P:4');\\n\\n        uint256 working = checkedProofOf(tokenId);\\n\\n        working = ProofPure.pullFromExtra(working, itemId);\\n\\n        Proof.sstore(tokenId, working);\\n\\n        Proof.spointer().protcolItems[itemId]++;\\n\\n        emit PopItem(tokenId, working, itemId);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            INITIALIZATION\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function setProof(uint160 tokenId) internal {\\n        require(!hasProof(tokenId), 'P:5');\\n\\n        uint256 randomEnoughSeed = uint256(keccak256(abi.encodePacked(hex'420690', tokenId, blockhash(block.number - 1))));\\n\\n        (uint256 res, uint8[] memory picks) = ProofCore.initFromSeed(randomEnoughSeed);\\n\\n        Proof.sstore(tokenId, res);\\n\\n        emit SetProof(tokenId, res, picks);\\n    }\\n\\n    function setProofFromEpoch(uint160 tokenId) internal {\\n        require(!hasProof(tokenId), 'P:6');\\n\\n        (, uint256 epoch, uint256 res, uint8[] memory picks) = pendingProof();\\n\\n        require(epoch == tokenId, 'P:7');\\n\\n        Proof.sstore(tokenId, res);\\n\\n        emit SetProof(tokenId, res, picks);\\n    }\\n\\n    // TODO TO BE TESTED\\n    function initFromSeed(uint256 seed) internal view returns (uint256 res, uint8[] memory upd) {\\n        require(seed != 0, 'P:8');\\n\\n        uint8[] memory lengths = FileView.totalLengths();\\n\\n        upd = new uint8[](8);\\n\\n        uint8[] memory picks = ShiftLib.getArray(seed, 0);\\n\\n        upd[0] = (safeMod(picks[0], lengths[0])) + 1;\\n        upd[1] = (safeMod(picks[1], lengths[1])) + 1;\\n        upd[2] = (safeMod(picks[2], lengths[2])) + 1;\\n\\n        if (picks[3] < 96) upd[3] = (safeMod(picks[4], lengths[3])) + 1;\\n        else if (picks[3] < 192) upd[4] = (safeMod(picks[4], lengths[4])) + 1;\\n        else if (picks[3] < 250) upd[5] = (safeMod(picks[4], lengths[5])) + 1;\\n        else upd[6] = (safeMod(picks[4], lengths[6])) + 1;\\n\\n        res = ShiftLib.setArray(res, 0, upd);\\n    }\\n\\n    function safeMod(uint8 value, uint8 modder) internal pure returns (uint8) {\\n        require(modder != 0, 'P:9');\\n        return value % modder;\\n    }\\n\\n    function pendingProof()\\n        internal\\n        view\\n        returns (\\n            uint256 seed,\\n            uint256 epoch,\\n            uint256 proof,\\n            uint8[] memory defaultIds\\n        )\\n    {\\n        (seed, epoch) = EpochCore.calculateSeed();\\n\\n        (proof, defaultIds) = ProofCore.initFromSeed(seed);\\n    }\\n}\\n\",\"keccak256\":\"0x07425c806d905396c745acde270292dc0fd05810d11c89415813cd243777f9f4\",\"license\":\"MIT\"},\"src/proof/ProofExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IProofExternal} from '../interfaces/nuggft/IProofExternal.sol';\\n\\nimport {Proof} from './ProofStorage.sol';\\n\\nimport {EpochCore} from '../epoch/EpochCore.sol';\\n\\nimport {ProofCore} from './ProofCore.sol';\\nimport {ProofPure} from './ProofPure.sol';\\n\\nimport {TokenView} from '../token/TokenView.sol';\\n\\nabstract contract ProofExternal is IProofExternal {\\n    /// @inheritdoc IProofExternal\\n    function rotateFeature(uint160 tokenId, uint8 feature) external override {\\n        require(TokenView.isOperatorForOwner(msg.sender, tokenId), 'P:A');\\n\\n        uint256 working = ProofCore.checkedProofOf(tokenId);\\n\\n        working = ProofPure.rotateDefaultandExtra(working, feature);\\n\\n        working = ProofPure.clearAnchorOverridesForFeature(working, feature);\\n\\n        Proof.sstore(tokenId, working);\\n\\n        emit RotateItem(tokenId, working, feature);\\n    }\\n\\n    /// @inheritdoc IProofExternal\\n    function setOverrides(\\n        uint160 tokenId,\\n        uint8[] memory xs,\\n        uint8[] memory ys\\n    ) external override {\\n        require(TokenView.isOperatorForOwner(msg.sender, tokenId), 'P:B');\\n\\n        require(xs.length == 8 && ys.length == 8, 'P:C');\\n\\n        uint256 working = ProofCore.checkedProofOf(tokenId);\\n\\n        working = ProofPure.setNewAnchorOverrides(working, xs, ys);\\n\\n        Proof.sstore(tokenId, working);\\n\\n        emit SetAnchorOverrides(tokenId, working, xs, ys);\\n    }\\n\\n    /// @inheritdoc IProofExternal\\n    function proofOf(uint160 tokenId) public view virtual override returns (uint256) {\\n        return ProofCore.checkedProofOfIncludingPending(tokenId);\\n    }\\n\\n    /// @inheritdoc IProofExternal\\n    function parsedProofOf(uint160 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint256 proof,\\n            uint8[] memory defaultIds,\\n            uint8[] memory extraIds,\\n            uint8[] memory overxs,\\n            uint8[] memory overys\\n        )\\n    {\\n        return ProofCore.parsedProofOfIncludingPending(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7a9837a1b7045526cb74f90c55365c0d1900851e7a1e52e0e071a28661cb7\",\"license\":\"MIT\"},\"src/proof/ProofPure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\n/// @notice abstracts all the logic for converting the proof between a the uint256 which is stored in\\n/// in state and the the 4 uint8 arrays that it consists off.\\n/// @dev Explain to a developer any extra details\\n/// @dev itemIds are externally 16 bits, but here there are referenced as 8 bit ids in one of 8 indexs\\n/// where the id is the position the item exists in the file storage, and the index is the feature id\\n/// @dev there is not check - but dotnugg v1 only allows for max 63 for size, so anchor overrides should\\n/// reflect this.\\n/// @dev pushing and pulling is only set up for the extra array, so the user must manage their default array\\n/// by passing through the extra array - this is to reduce complexity\\n/// @dev see the dotnugg specification for more clarificaiton on the values used here\\n///\\n///  uint256 bit allocation of proof \\\"state\\\" variable:\\n/// \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u252c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u252c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n/// \\u2502  0 - 63   \\u2502 64 bits \\u2502  default item ids - 8 x 8 bits     \\u2502\\n/// \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524\\n/// \\u2502 64 - 127  \\u2502 64 bits \\u2502  extra item ids - 8 x 8 bits       \\u2502\\n/// \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524\\n/// \\u2502 128 - 191 \\u2502 64 bits \\u2502  x anchor overrides - 8 x 8 bits   \\u2502\\n/// \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524\\n/// \\u2502 192 - 255 \\u2502 64 bits \\u2502  y anchor overrides - 8 x 8 bits   \\u2502\\n/// \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n///\\nlibrary ProofPure {\\n    /// @notice converts the proof state into a human readable form\\n    /// @dev fully parses the proof from a uint256 to 4 uint8 arrays\\n    /// @param state -> the uint256 proof state\\n    /// @return proof -> the uint256 proof state\\n    /// @return defaultIds -> the modifed uint256 proof state\\n    /// @return extraIds -> the modifed uint256 proof state\\n    /// @return xOverrides -> the modifed uint256 proof state\\n    /// @return yOverrides -> the modifed uint256 proof state\\n    function fullProof(uint256 state)\\n        internal\\n        pure\\n        returns (\\n            uint256 proof,\\n            uint8[] memory defaultIds,\\n            uint8[] memory extraIds,\\n            uint8[] memory xOverrides,\\n            uint8[] memory yOverrides\\n        )\\n    {\\n        proof = state;\\n        defaultIds = ShiftLib.getArray(state, 0);\\n        extraIds = ShiftLib.getArray(state, 64);\\n        xOverrides = ShiftLib.getArray(state, 128);\\n        yOverrides = ShiftLib.getArray(state, 192);\\n    }\\n\\n    /// @notice sets an item to the extra array\\n    /// @dev extra array must be empty at the feature positon being added to\\n    /// @param state -> the uint256 proof state\\n    /// @param itemId -> the itemId being added\\n    /// @return res -> the modifed uint256 proof state\\n    function pushToExtra(uint256 state, uint16 itemId) internal pure returns (uint256 res) {\\n        uint8[] memory arr = ShiftLib.getArray(state, 64);\\n\\n        (uint8 feat, uint8 pos) = parseItemId(itemId);\\n\\n        require(arr[feat] == 0, 'P:D');\\n\\n        arr[feat] = pos;\\n\\n        res = ShiftLib.setArray(state, 64, arr);\\n    }\\n\\n    /// @notice removes an item from the extra array\\n    /// @dev extra array must NOT be empty at the feature positon being removed\\n    /// @dev the extra array must have that specific feature in that postion\\n    /// @param state -> the uint256 proof state\\n    /// @param itemId -> the itemId being removed\\n    /// @return res -> the modifed uint256 proof state\\n    function pullFromExtra(uint256 state, uint16 itemId) internal pure returns (uint256 res) {\\n        uint8[] memory arr = ShiftLib.getArray(state, 64);\\n\\n        (uint8 feat, uint8 pos) = parseItemId(itemId);\\n\\n        require(feat != 0, 'P:F');\\n\\n        require(arr[feat] == pos, 'P:E');\\n\\n        arr[feat] = 0;\\n\\n        res = ShiftLib.setArray(state, 64, arr);\\n    }\\n\\n    /// @notice swaps the default feauture x with the extra feature x\\n    /// @dev either default or extra feature value can be empty (0)\\n    /// @param state -> the uint256 proof state\\n    /// @param feature -> the feature to switch items for\\n    /// @return res -> the modifed uint256 proof state\\n    function rotateDefaultandExtra(uint256 state, uint8 feature) internal pure returns (uint256 res) {\\n        require(feature != 0, 'P:F');\\n\\n        uint8[] memory def = ShiftLib.getArray(state, 0);\\n        uint8[] memory ext = ShiftLib.getArray(state, 64);\\n\\n        uint8 tmp = ext[feature];\\n        ext[feature] = def[feature];\\n        def[feature] = tmp;\\n\\n        res = ShiftLib.setArray(state, 0, def);\\n        res = ShiftLib.setArray(res, 64, ext);\\n    }\\n\\n    /// @notice updates the x and y override arrays\\n    /// @dev all must be set at once\\n    /// @param state -> the uint256 proof state\\n    /// @param xOverrides -> uint8 array of new x overrides\\n    /// @param yOverrides -> uint8 array of new x overrides\\n    /// @return res -> the modifed uint256 proof state\\n    function setNewAnchorOverrides(\\n        uint256 state,\\n        uint8[] memory xOverrides,\\n        uint8[] memory yOverrides\\n    ) internal pure returns (uint256 res) {\\n        res = ShiftLib.setArray(state, 128, xOverrides);\\n        res = ShiftLib.setArray(res, 192, yOverrides);\\n    }\\n\\n    /// @notice clears the anchor overrides for a specific feature\\n    /// @dev this should be called each time an item is added or removed from a feature\\n    /// @param state -> the uint256 proof state\\n    /// @param feature -> the feature to switch items for\\n    /// @return res -> the modifed uint256 proof state\\n    function clearAnchorOverridesForFeature(uint256 state, uint8 feature) internal pure returns (uint256 res) {\\n        uint8[] memory x = ShiftLib.getArray(state, 128);\\n        uint8[] memory y = ShiftLib.getArray(state, 192);\\n\\n        y[feature] = 0;\\n        x[feature] = 0;\\n\\n        res = ShiftLib.setArray(state, 128, x);\\n        res = ShiftLib.setArray(res, 192, y);\\n    }\\n\\n    /// @notice parses the external itemId into a feautre and position\\n    /// @dev this follows dotnugg v1 specification\\n    /// @param itemId -> the external itemId\\n    /// @return feat -> the feautre of the item\\n    /// @return pos -> the file storage position of the item\\n    function parseItemId(uint16 itemId) internal pure returns (uint8 feat, uint8 pos) {\\n        feat = uint8(itemId >> 8);\\n        pos = uint8(itemId & 0xff);\\n    }\\n}\\n\",\"keccak256\":\"0x489fe2d802691d88f602339cfd32e520ed42fd3a31a332d347ab85e887531c40\",\"license\":\"MIT\"},\"src/proof/ProofStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\npragma solidity 0.8.9;\\n\\n// OK\\nlibrary Proof {\\n    struct Storage {\\n        mapping(uint256 => uint256) map;\\n        mapping(uint256 => uint256) protcolItems;\\n    }\\n\\n    function spointer() internal view returns (Storage storage s) {\\n        s = Global.ptr().proof;\\n    }\\n\\n    function sload(uint160 tokenId) internal view returns (uint256) {\\n        return spointer().map[tokenId];\\n    }\\n\\n    function sstore(uint160 tokenId, uint256 data) internal {\\n        spointer().map[tokenId] = data;\\n    }\\n}\\n\",\"keccak256\":\"0xd70c4f7b56673a51874b114eb21224906f69f3828f338a37750bb425ae081a4a\",\"license\":\"MIT\"},\"src/stake/StakeCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggFTV1Migrator} from '../interfaces/INuggFTV1Migrator.sol';\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\nimport {Token} from '../token/TokenStorage.sol';\\nimport {TokenCore} from '../token/TokenCore.sol';\\nimport {TokenView} from '../token/TokenView.sol';\\n\\nimport {ProofCore} from '../proof/ProofCore.sol';\\n\\nimport {Stake} from './StakeStorage.sol';\\nimport {StakePure} from './StakePure.sol';\\n\\n/// @notice Explain to an end user what this does\\n/// @dev Explain to a developer any extra details\\nlibrary StakeCore {\\n    using SafeCastLib for uint256;\\n\\n    using StakePure for uint256;\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                    EVENTS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    event StakeEth(uint96 stake, uint96 protocol);\\n    event UnStakeEth(uint96 stake, address to);\\n    event ProtocolEthExtracted(uint96 eth);\\n    event MigratorV1Updated(address migrator);\\n    event MigrateV1Sent(address v2, uint160 tokenId, uint256 proof, address owner, uint96 eth);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                    VIEW\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @notice returns the active \\\"ethPerShare\\\" held by the contract\\n    /// @dev this value not always equivilent to the \\\"floor\\\" price which can consist of perceived value.\\n    /// can be looked at as an \\\"intrinsic floor\\\"\\n    /// @dev this is the value that users will receive when their either burn or loan out nuggs\\n    /// @return res -> [current staked eth] / [current staked shares]\\n    function activeEthPerShare() internal view returns (uint96 res) {\\n        res = Stake.sload().getEthPerShare();\\n    }\\n\\n    /// @notice returns the minimum eth that must be added to create a new share\\n    /// @dev premium here is used to push against dillution of supply through ensuring the price always increases\\n    /// @dev used by the front end\\n    /// @return res -> premium + protcolFee + ethPerShare\\n    function minSharePrice() internal view returns (uint96 res) {\\n        (res, , , ) = Stake.sload().minSharePriceBreakdown();\\n    }\\n\\n    /// @notice returns the total number of staked shares held by the contract\\n    /// @dev this is equivilent to the amount of nuggs in existance\\n    function activeStakedShares() internal view returns (uint64 res) {\\n        res = Stake.sload().getStakedShares();\\n    }\\n\\n    /// @notice returns the total amount of staked eth held by the contract\\n    /// @dev can be used as the market-cap or tvl of all nuggft v1\\n    /// @dev not equivilent to the balance of eth the contract holds, which also hs protocolEth and\\n    /// unclaimed eth from unsuccessful swaps\\n    function activeStakedEth() internal view returns (uint96 res) {\\n        res = Stake.sload().getStakedEth();\\n    }\\n\\n    /// @notice returns the amount of eth extractable by protocol\\n    /// @dev this will be\\n    /// @return res -> (PROTOCOL_FEE_BPS * [all eth staked] / 10000) - [all previously extracted eth]\\n    function activeProtocolEth() internal view returns (uint96 res) {\\n        res = Stake.sload().getProtocolEth();\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            ADD STAKE & SHARES\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @notice handles the adding of shares - ensures enough eth is being added\\n    /// @dev this is the only way to add shares - the logic here ensures that \\\"ethPerShare\\\" can never decrease\\n    function addStakedShareFromMsgValue() internal {\\n        uint96 value = msg.value.safe96();\\n\\n        uint256 cache = Stake.sload();\\n\\n        (uint64 activeShares, uint96 activeEth, uint96 activeProtoEth) = cache.getStakedSharesAndEth();\\n\\n        (uint96 totalPrice, , uint96 protocolFee, ) = cache.minSharePriceBreakdown();\\n\\n        // logically unnessesary - to help front end\\n        require(value >= totalPrice, 'T:1'); // \\\"not enough eth to create share\\\"\\n\\n        uint96 overpay = value - totalPrice;\\n\\n        // the rest of the value gets added to stakedEth\\n        protocolFee += StakePure.calculateProtocolFeeOf(overpay);\\n\\n        Stake.sstore(\\n            cache.setStakedShares(activeShares + 1).setStakedEth(activeEth + (value - protocolFee)).setProtocolEth(\\n                activeProtoEth + protocolFee\\n            )\\n        );\\n\\n        emit StakeEth(value - protocolFee, protocolFee);\\n    }\\n\\n    /// @notice handles isolated staking of eth\\n    /// @dev supply of eth goes up while supply of shares stays constant - increasing \\\"minSharePrice\\\"\\n    /// @param eth the amount of eth being staked - must be some portion of msg.value\\n    function addStakedEth(uint96 eth) internal {\\n        require(msg.value >= eth, 'T:2'); // \\\"value of tx too low\\\"\\n\\n        uint256 cache = Stake.sload();\\n\\n        uint96 protocolFee = StakePure.calculateProtocolFeeOf(eth);\\n\\n        Stake.sstore(cache.setStakedEth(cache.getStakedEth() + (eth - protocolFee)).setProtocolEth(cache.getProtocolEth() + protocolFee));\\n\\n        emit StakeEth(eth - protocolFee, protocolFee);\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                BURN/MIGRATE\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @notice removes a staked share from the contract,\\n    /// @dev this is the only way to remove a share\\n    /// @dev caculcates but does not handle dealing the eth - which is handled by the two helpers above\\n    /// @dev ensures the user is the owner of the nugg\\n    /// @param tokenId the id of the nugg being unstaked\\n    /// @return ethOwed -> the amount of eth owed to the unstaking user - equivilent to \\\"ethPerShare\\\"\\n    function subStakedShare(uint160 tokenId) internal returns (uint96 ethOwed) {\\n        address owner = TokenView.ownerOf(tokenId);\\n\\n        require(TokenView.getApproved(tokenId) == address(this) && TokenView.isOperatorFor(msg.sender, owner), 'T:3');\\n\\n        uint256 cache = Stake.sload();\\n\\n        // hanles all logic not related to staking the nugg\\n        delete Token.ptr().owners[tokenId];\\n        delete Token.ptr().approvals[tokenId];\\n\\n        delete Global.ptr().swap.map[tokenId];\\n        delete Global.ptr().loan.map[tokenId];\\n        delete Global.ptr().proof.map[tokenId];\\n        delete Global.ptr().file.resolvers[tokenId];\\n\\n        TokenCore.emitTransferEvent(owner, address(0), tokenId);\\n\\n        (uint64 activeShares, uint96 activeEth, ) = cache.getStakedSharesAndEth();\\n\\n        ethOwed = cache.getEthPerShare();\\n\\n        /// TODO - test migration\\n        assert(activeShares >= 1);\\n        assert(activeEth >= ethOwed);\\n\\n        Stake.sstore(cache.setStakedShares(activeShares - 1).setStakedEth(activeEth - ethOwed));\\n\\n        emit UnStakeEth(ethOwed, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x1521333f7ce8a43fb85a392657334fddecca1b3cea044b99fd89e38de1f4f409\",\"license\":\"MIT\"},\"src/stake/StakeExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggFTV1Migrator} from '../interfaces/INuggFTV1Migrator.sol';\\n\\nimport {IStakeExternal} from '../interfaces/INuggFT.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {StakeCore} from './StakeCore.sol';\\nimport {StakePure} from './StakePure.sol';\\n\\nimport {Stake} from './StakeStorage.sol';\\n\\nimport {Trust} from '../trust/Trust.sol';\\n\\nimport {ProofCore} from '../proof/ProofCore.sol';\\n\\nabstract contract StakeExternal is IStakeExternal {\\n    using SafeCastLib for uint256;\\n    using StakePure for uint256;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                CORE\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc IStakeExternal\\n    function withdrawStake(uint160 tokenId) external {\\n        uint96 ethOwed = StakeCore.subStakedShare(tokenId);\\n\\n        SafeTransferLib.safeTransferETH(msg.sender, ethOwed);\\n    }\\n\\n    /// @inheritdoc IStakeExternal\\n    function migrateStake(uint160 tokenId) external {\\n        address migrator = Stake.spointer().trustedMigrator;\\n\\n        require(migrator != address(0), 'T:4');\\n\\n        // stores the proof before deleting the nugg\\n        uint256 proof = ProofCore.checkedProofOf(tokenId);\\n\\n        uint96 ethOwed = StakeCore.subStakedShare(tokenId);\\n\\n        INuggFTV1Migrator(migrator).nuggftMigrateFromV1{value: ethOwed}(tokenId, proof, msg.sender);\\n\\n        emit MigrateV1Sent(migrator, tokenId, proof, msg.sender, ethOwed);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TRUSTED\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc IStakeExternal\\n    function extractProtocolEth() external {\\n        Trust.check();\\n\\n        uint256 cache = Stake.sload();\\n\\n        uint96 eth = cache.getProtocolEth();\\n\\n        SafeTransferLib.safeTransferETH(msg.sender, eth);\\n\\n        Stake.sstore(cache.setProtocolEth(0));\\n\\n        emit ProtocolEthExtracted(eth);\\n    }\\n\\n    /// @inheritdoc IStakeExternal\\n    function setMigrator(address migrator) external {\\n        Trust.check();\\n\\n        Stake.spointer().trustedMigrator = migrator;\\n\\n        emit MigratorV1Updated(migrator);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                VIEW\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc IStakeExternal\\n    function minSharePrice() external view override returns (uint96 res) {\\n        res = StakeCore.minSharePrice();\\n    }\\n\\n    /// @inheritdoc IStakeExternal\\n    function totalStakedShares() external view override returns (uint64 res) {\\n        res = StakeCore.activeStakedShares();\\n    }\\n\\n    /// @inheritdoc IStakeExternal\\n    function totalStakedEth() external view override returns (uint96 res) {\\n        res = StakeCore.activeStakedEth();\\n    }\\n\\n    /// @inheritdoc IStakeExternal\\n    function activeEthPerShare() external view override returns (uint96 res) {\\n        res = StakeCore.activeEthPerShare();\\n    }\\n\\n    /// @inheritdoc IStakeExternal\\n    function totalProtocolEth() external view override returns (uint96 res) {\\n        res = StakeCore.activeProtocolEth();\\n    }\\n\\n    /// @inheritdoc IStakeExternal\\n    function totalSupply() external view override returns (uint256 res) {\\n        res = StakeCore.activeStakedShares();\\n    }\\n}\\n\",\"keccak256\":\"0x4497d867c1eca3640ac595dcdedb298c9039b7d13052754d13d6d419b2631973\",\"license\":\"MIT\"},\"src/stake/StakePure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\nlibrary StakePure {\\n    /// 96 protocol\\n    /// 96 stakedEth\\n    /// 64 stakedShares\\n\\n    uint96 constant PROTOCOL_FEE_BPS = 1000;\\n\\n    // @test input output unit test\\n    function getProtocolEth(uint256 cache) internal pure returns (uint96 res) {\\n        // using casting to select only 96\\n        res = uint96(cache);\\n    }\\n\\n    function setProtocolEth(uint256 cache, uint96 update) internal pure returns (uint256 res) {\\n        res = cache & ShiftLib.fullsubmask(96, 0);\\n        res |= update;\\n    }\\n\\n    // @test input output unit test\\n    function getStakedEth(uint256 cache) internal pure returns (uint96 res) {\\n        // using casting to select only 96\\n        res = uint96(cache >> 96);\\n    }\\n\\n    function setStakedEth(uint256 cache, uint96 update) internal pure returns (uint256 res) {\\n        // clear stakedEth\\n        res = cache & ShiftLib.fullsubmask(96, 96);\\n        res |= uint256(update) << 96;\\n    }\\n\\n    // @test input output unit test\\n    function getStakedShares(uint256 cache) internal pure returns (uint64 res) {\\n        res = uint64(cache >> 192);\\n    }\\n\\n    function setStakedShares(uint256 cache, uint64 update) internal pure returns (uint256 res) {\\n        res = cache & type(uint192).max;\\n        res |= (uint256(update) << 192);\\n    }\\n\\n    // @test manual ish - combined input output\\n    function getStakedSharesAndEth(uint256 cache)\\n        internal\\n        pure\\n        returns (\\n            uint64 shares,\\n            uint96 eth,\\n            uint96 proto\\n        )\\n    {\\n        shares = getStakedShares(cache);\\n        eth = getStakedEth(cache);\\n        proto = getProtocolEth(cache);\\n    }\\n\\n    function calculateProtocolFeeOf(uint96 any) internal pure returns (uint96 res) {\\n        res = (any * StakePure.PROTOCOL_FEE_BPS) / 10000;\\n    }\\n\\n    // @test manual\\n    function minSharePriceBreakdown(uint256 cache)\\n        internal\\n        pure\\n        returns (\\n            uint96 total,\\n            uint96 ethPerShare,\\n            uint96 protocolFee,\\n            uint96 premium\\n        )\\n    {\\n        ethPerShare = getEthPerShare(cache);\\n\\n        protocolFee = calculateProtocolFeeOf(ethPerShare);\\n\\n        premium = ((ethPerShare * getStakedShares(cache)) / 5000);\\n\\n\\n        total = ethPerShare + protocolFee + premium;\\n    }\\n\\n    // @test manual\\n    function getEthPerShare(uint256 cache) internal pure returns (uint96 res) {\\n        res = getStakedShares(cache) == 0 ? 0 : getStakedEth(cache) / getStakedShares(cache);\\n    }\\n}\\n\\n// .388462191424698825\\n// .179595585120778917\\n//9.744857104519532829\\n// .683870949775377181\\n// .117875552479567856\\n//6.249897262135775214\\n//3.665748059134461014\\n//1.321523995093297549\\n\\n//1.321523995093297549\\n//5.363510699612383365\\n// .117875552479567856\\n// .188600883967308569\\n\",\"keccak256\":\"0x7be273550ba99f17393f5ecd69632a78fb833e63b7b020139152172b227affa9\",\"license\":\"MIT\"},\"src/stake/StakeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\nlibrary Stake {\\n    struct Storage {\\n        address trustedMigrator;\\n        uint256 data;\\n    }\\n\\n    function sstore(uint256 input) internal {\\n        Global.ptr().stake.data = input;\\n    }\\n\\n    function spointer() internal view returns (Storage storage s) {\\n        return Global.ptr().stake;\\n    }\\n\\n    function sload() internal view returns (uint256 res) {\\n        return Global.ptr().stake.data;\\n    }\\n}\\n\",\"keccak256\":\"0x5e070e8f858df9acf6b3c07e2d017c8ea5aaf89005323e51551d3c7d0bbbfb37\",\"license\":\"MIT\"},\"src/swap/SwapCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggFT} from '../interfaces/INuggFT.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {Swap} from './SwapStorage.sol';\\nimport {SwapPure} from '../swap/SwapPure.sol';\\n\\nimport {StakeCore} from '../stake/StakeCore.sol';\\n\\nimport {ProofCore} from '../proof/ProofCore.sol';\\n\\nimport {TokenCore} from '../token/TokenCore.sol';\\nimport {TokenView} from '../token/TokenView.sol';\\n\\nlibrary SwapCore {\\n    using SafeCastLib for uint256;\\n    using SwapPure for uint256;\\n    using SwapPure for uint96;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            COMMON FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                internal\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function checkClaimerIsWinnerOrLoser(Swap.Memory memory m) internal pure returns (bool winner) {\\n        require(m.offerData != 0, 'S:E');\\n\\n        bool isOver = m.activeEpoch > m.swapData.epoch();\\n        bool isLeader = m.offerData.account() == m.swapData.account();\\n        bool isOwner = m.swapData.isOwner() && m.offerData.isOwner();\\n\\n        return isLeader && (isOwner || isOver);\\n    }\\n\\n    function commit(Swap.Storage storage s, Swap.Memory memory m) internal {\\n        assert(m.offerData == 0 && m.swapData != 0);\\n\\n        assert(m.swapData.isOwner());\\n\\n        (uint256 newSwapData, uint96 increment, uint96 dust) = updateSwapDataWithEpoch(\\n            m.swapData,\\n            m.activeEpoch + 1,\\n            m.sender,\\n            msg.value.safe96()\\n        );\\n\\n        s.data = newSwapData;\\n\\n        s.offers[m.swapData.account()] = m.swapData.epoch(m.activeEpoch + 1).isOwner(false);\\n\\n        StakeCore.addStakedEth(increment + dust);\\n    }\\n\\n    function offer(Swap.Storage storage s, Swap.Memory memory m) internal {\\n        // make sure swap is still active\\n        require(m.activeEpoch <= m.swapData.epoch(), 'S:F');\\n\\n        if (m.swapData.account() != m.sender) s.offers[m.swapData.account()] = m.swapData;\\n\\n        (uint256 newSwapData, uint96 increment, uint96 dust) = updateSwapData(m.swapData, m.sender, m.offerData.eth() + msg.value.safe96());\\n\\n        s.data = newSwapData;\\n\\n        StakeCore.addStakedEth(increment + dust);\\n    }\\n\\n    // @test  manual\\n    function updateSwapData(\\n        uint256 prevSwapData,\\n        address account,\\n        uint96 newUserOfferEth\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 res,\\n            uint96 increment,\\n            uint96 dust\\n        )\\n    {\\n        return updateSwapDataWithEpoch(prevSwapData, prevSwapData.epoch(), account, newUserOfferEth);\\n    }\\n\\n    // @test  unit\\n    function updateSwapDataWithEpoch(\\n        uint256 prevSwapData,\\n        uint32 epoch,\\n        address account,\\n        uint96 newUserOfferEth\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 res,\\n            uint96 increment,\\n            uint96 dust\\n        )\\n    {\\n        uint96 baseEth = prevSwapData.eth();\\n\\n        require(baseEth.addIncrement() <= newUserOfferEth, 'S:G');\\n\\n        (res, dust) = SwapPure.buildSwapData(epoch, account, newUserOfferEth, false);\\n\\n        increment = newUserOfferEth - baseEth;\\n    }\\n}\\n\",\"keccak256\":\"0xfb3d836711f20b83bb48266dee752ea393967f2e9602772b7fb67db5acc258e8\",\"license\":\"MIT\"},\"src/swap/SwapExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ISwapExternal} from '../interfaces/nuggft/ISwapExternal.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {EpochCore} from '../epoch/EpochCore.sol';\\n\\nimport {StakeCore} from '../stake/StakeCore.sol';\\n\\nimport {Swap} from './SwapStorage.sol';\\nimport {SwapCore} from './SwapCore.sol';\\nimport {SwapPure} from './SwapPure.sol';\\nimport {TokenCore} from '../token/TokenCore.sol';\\nimport {TokenView} from '../token/TokenView.sol';\\nimport {ProofCore} from '../proof/ProofCore.sol';\\n\\nabstract contract SwapExternal is ISwapExternal {\\n    using SwapPure for uint256;\\n    using SwapPure for uint96;\\n\\n    using SafeCastLib for uint256;\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                  delegate\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @inheritdoc ISwapExternal\\n    function delegate(address sender, uint160 tokenId) external payable override {\\n        require(TokenView.isOperatorFor(msg.sender, sender), 'S:0');\\n\\n        (Swap.Storage storage s, Swap.Memory memory m) = Swap.loadTokenSwap(tokenId, sender);\\n\\n        // make sure user is not the owner of swap\\n        // we do not know how much to give them when they call \\\"claim\\\" otherwise\\n\\n        if (m.activeEpoch == tokenId && m.swapData == 0) {\\n            // to ensure we at least have enough to increment the offer amount by 2%\\n            require(msg.value >= SwapPure.MIN_OFFER, 'S:1');\\n\\n            // we do not need this, could take tokenId out as an argument - but do not want to give users\\n            // the ability to accidently place an offer for nugg A and end up minting nugg B.\\n            assert(m.offerData == 0);\\n\\n            (uint256 data, ) = SwapPure.buildSwapData(m.activeEpoch, m.sender, msg.value.safe96(), false);\\n\\n            s.data = data;\\n\\n            StakeCore.addStakedShareFromMsgValue();\\n\\n            ProofCore.setProof(tokenId);\\n\\n            TokenCore.emitTransferEvent(address(0), address(this), tokenId);\\n\\n            emit DelegateMint(tokenId, m.sender, msg.value.safe96());\\n        } else {\\n            require(m.swapData != 0, 'S:4');\\n\\n            if (m.offerData != 0) {\\n                // forces user to claim previous swap before acting on this one\\n                // prevents owner from COMMITTING on their own swap - not offering\\n                require(m.offerData.epoch() >= m.activeEpoch, 'S:R');\\n\\n                assert(!m.offerData.isOwner()); // always be caught by the require above\\n            }\\n\\n            if (m.swapData.isOwner()) {\\n                require(msg.value >= StakeCore.activeEthPerShare(), 'S:5');\\n\\n                commit(s, m);\\n\\n                // @todo - this msg.value is incorrect\\n                emit DelegateCommit(tokenId, msg.sender, msg.value.safe96());\\n            } else {\\n                offer(s, m);\\n\\n                // @todo - this msg.value is incorrect\\n                emit DelegateOffer(tokenId, msg.sender, msg.value.safe96());\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc ISwapExternal\\n    function delegateItem(\\n        uint160 buyerTokenId,\\n        uint160 sellerTokenId,\\n        uint16 itemId\\n    ) external payable override {\\n        require(TokenView.isOperatorForOwner(msg.sender, buyerTokenId), 'S:6');\\n\\n        (Swap.Storage storage s, Swap.Memory memory m) = Swap.loadItemSwap(sellerTokenId, itemId, address(buyerTokenId));\\n\\n        // make sure user is not the owner of swap\\n        // we do not know how much to give them when they call \\\"claim\\\" otherwise\\n        require(!m.offerData.isOwner(), 'S:7');\\n\\n        if (m.offerData == 0 && m.swapData.isOwner()) {\\n            commit(s, m);\\n\\n            // @todo - this msg.value is incorrect\\n            emit DelegateCommitItem(sellerTokenId, itemId, buyerTokenId, msg.value.safe96());\\n        } else {\\n            offer(s, m);\\n\\n            // @todo - this msg.value is incorrect\\n            emit DelegateOfferItem(sellerTokenId, itemId, buyerTokenId, msg.value.safe96());\\n        }\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                  claim\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @inheritdoc ISwapExternal\\n    function claim(address sender, uint160 tokenId) external override {\\n        require(TokenView.isOperatorFor(msg.sender, sender), 'S:8');\\n\\n        (, Swap.Memory memory m) = Swap.loadTokenSwap(tokenId, sender);\\n\\n        Swap.deleteTokenOffer(tokenId, sender);\\n\\n        if (checkClaimerIsWinnerOrLoser(m)) {\\n            Swap.deleteTokenSwap(tokenId);\\n\\n            TokenCore.checkedTransferFromSelf(sender, tokenId);\\n        } else {\\n            SafeTransferLib.safeTransferETH(sender, m.offerData.eth());\\n        }\\n\\n        emit SwapClaim(tokenId, sender, m.offerData.epoch());\\n    }\\n\\n    /// @inheritdoc ISwapExternal\\n    function claimItem(\\n        uint160 buyerTokenId,\\n        uint160 sellerTokenId,\\n        uint16 itemId\\n    ) external override {\\n        require(TokenView.isOperatorForOwner(msg.sender, buyerTokenId), 'S:9');\\n\\n        (, Swap.Memory memory m) = Swap.loadItemSwap(sellerTokenId, itemId, address(buyerTokenId));\\n\\n        Swap.deleteItemOffer(sellerTokenId, itemId, address(buyerTokenId));\\n\\n        if (checkClaimerIsWinnerOrLoser(m)) {\\n            Swap.deleteItemSwap(sellerTokenId, itemId);\\n\\n            ProofCore.addItem(buyerTokenId, itemId);\\n        } else {\\n            SafeTransferLib.safeTransferETH(TokenView.ownerOf(buyerTokenId), m.offerData.eth());\\n        }\\n\\n        emit SwapClaimItem(sellerTokenId, itemId, buyerTokenId, m.swapData.epoch());\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                  swap\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @inheritdoc ISwapExternal\\n    function swap(uint160 tokenId, uint96 floor) external override {\\n        address sender = TokenView.ownerOf(tokenId);\\n\\n        require(TokenView.isOperatorFor(msg.sender, sender), 'S:A');\\n\\n        require(floor >= StakeCore.activeEthPerShare(), 'S:B');\\n\\n        TokenCore.approvedTransferToSelf(tokenId);\\n\\n        (Swap.Storage storage s, Swap.Memory memory m) = Swap.loadTokenSwap(tokenId, sender);\\n\\n        // make sure swap does not exist - this logically should never happen\\n        assert(m.swapData == 0);\\n\\n        (uint256 dat, ) = SwapPure.buildSwapData(0, sender, floor, true);\\n\\n        s.data = dat;\\n\\n        emit SwapStart(tokenId, sender, floor);\\n    }\\n\\n    /// @inheritdoc ISwapExternal\\n    function swapItem(\\n        uint160 sellerTokenId,\\n        uint16 itemId,\\n        uint96 floor\\n    ) external override {\\n        require(TokenView.isOperatorForOwner(msg.sender, sellerTokenId), 'S:C');\\n\\n        // will revert if they do not have the item\\n        ProofCore.removeItem(sellerTokenId, itemId);\\n\\n        (Swap.Storage storage s, Swap.Memory memory m) = Swap.loadItemSwap(sellerTokenId, itemId, address(sellerTokenId));\\n\\n        // cannot sell two of the same item at same time\\n        require(m.swapData == 0, 'S:D');\\n\\n        (uint256 dat, ) = SwapPure.buildSwapData(0, address(sellerTokenId), floor, true);\\n\\n        s.data = dat;\\n\\n        emit SwapItemStart(sellerTokenId, itemId, dat.eth());\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                    view\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    // / @inheritdoc ISwapExternal\\n    function valueForDelegate(address sender, uint160 tokenId)\\n        external\\n        view\\n        override\\n        returns (\\n            bool canDelegate,\\n            uint96 nextSwapAmount,\\n            uint96 senderCurrentOffer\\n        )\\n    {\\n        canDelegate = true;\\n\\n        (, Swap.Memory memory m) = Swap.loadTokenSwap(tokenId, sender);\\n\\n        if (m.swapData == 0) {\\n            if (m.activeEpoch == tokenId) {\\n                nextSwapAmount = StakeCore.minSharePrice().compressEthRoundUp();\\n            } else {\\n                // swap does not exist\\n                return (false, 0, 0);\\n            }\\n        } else {\\n            if (m.offerData.isOwner()) canDelegate = false;\\n\\n            senderCurrentOffer = m.offerData.eth();\\n\\n            nextSwapAmount = m.swapData.eth();\\n\\n            if (nextSwapAmount < StakeCore.activeEthPerShare()) {\\n                nextSwapAmount = StakeCore.activeEthPerShare();\\n            }\\n        }\\n\\n        if (nextSwapAmount == 0) {\\n            nextSwapAmount = SwapPure.MIN_OFFER;\\n        } else {\\n            nextSwapAmount = nextSwapAmount.addIncrement();\\n        }\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                internal\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function checkClaimerIsWinnerOrLoser(Swap.Memory memory m) internal pure returns (bool winner) {\\n        require(m.offerData != 0, 'S:E');\\n\\n        bool isOver = m.activeEpoch > m.swapData.epoch();\\n        bool isLeader = m.offerData.account() == m.swapData.account();\\n        bool isOwner = m.swapData.isOwner() && m.offerData.isOwner();\\n\\n        return isLeader && (isOwner || isOver);\\n    }\\n\\n    function commit(Swap.Storage storage s, Swap.Memory memory m) internal {\\n        assert(m.offerData == 0 && m.swapData != 0);\\n\\n        assert(m.swapData.isOwner());\\n\\n        // forces a user not to commit on their own swap\\n        // ensures that owner of swap cannot use thier floor value to place an offer unless someone else has offered\\n        // if you\\n        // require(!m.offerData.isOwner(), 'S:3');\\n\\n        (uint256 newSwapData, uint96 increment, uint96 dust) = updateSwapDataWithEpoch(\\n            m.swapData,\\n            m.activeEpoch + 1,\\n            m.sender,\\n            msg.value.safe96()\\n        );\\n\\n        s.data = newSwapData;\\n\\n        s.offers[m.swapData.account()] = m.swapData.epoch(m.activeEpoch + 1).isOwner(false);\\n\\n        StakeCore.addStakedEth(increment + dust);\\n    }\\n\\n    function offer(Swap.Storage storage s, Swap.Memory memory m) internal {\\n        // make sure swap is still active\\n        require(m.activeEpoch <= m.swapData.epoch(), 'S:F');\\n\\n        if (m.swapData.account() != m.sender) s.offers[m.swapData.account()] = m.swapData;\\n\\n        (uint256 newSwapData, uint96 increment, uint96 dust) = updateSwapData(m.swapData, m.sender, m.offerData.eth() + msg.value.safe96());\\n\\n        s.data = newSwapData;\\n\\n        StakeCore.addStakedEth(increment + dust);\\n    }\\n\\n    // @test  manual\\n    function updateSwapData(\\n        uint256 prevSwapData,\\n        address account,\\n        uint96 newUserOfferEth\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 res,\\n            uint96 increment,\\n            uint96 dust\\n        )\\n    {\\n        return updateSwapDataWithEpoch(prevSwapData, prevSwapData.epoch(), account, newUserOfferEth);\\n    }\\n\\n    // @test  unit\\n    function updateSwapDataWithEpoch(\\n        uint256 prevSwapData,\\n        uint32 epoch,\\n        address account,\\n        uint96 newUserOfferEth\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 res,\\n            uint96 increment,\\n            uint96 dust\\n        )\\n    {\\n        uint96 baseEth = prevSwapData.eth();\\n\\n        require(baseEth.addIncrement() <= newUserOfferEth, 'S:G');\\n\\n        (res, dust) = SwapPure.buildSwapData(epoch, account, newUserOfferEth, false);\\n\\n        increment = newUserOfferEth - baseEth;\\n    }\\n}\\n\",\"keccak256\":\"0x6964d00675836d4c0e6185b8cffed45bdf420faebef4bf48fb01369abc7f3377\",\"license\":\"MIT\"},\"src/swap/SwapPure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\n/// @title SwapPure\\n/// @author dub6ix.eth\\n/// @notice Explain to an end user what this does\\n/// @dev Explain to a developer any extra details\\nlibrary SwapPure {\\n    using SafeCastLib for uint256;\\n\\n    // 10**13\\n    uint96 constant COMPRESSION_PERCISION = 0x9184E72A000;\\n    uint96 constant MIN_OFFER = 0x9184E72A000 * 100;\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                               CALCULATION\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    // @test  manual\\n    function addIncrement(uint96 value) internal pure returns (uint96) {\\n        return compressEthRoundUp(((value * 10200) / 10000));\\n    }\\n\\n    // @test  manual\\n    function compressEthRoundDown(uint96 value) internal pure returns (uint96) {\\n        return (value / COMPRESSION_PERCISION) * COMPRESSION_PERCISION;\\n    }\\n\\n    // @test  manual\\n    function compressEthRoundUp(uint96 value) internal pure returns (uint96) {\\n        if (value % COMPRESSION_PERCISION > 0) {\\n            return ((value / COMPRESSION_PERCISION) + 1) * COMPRESSION_PERCISION;\\n        } else {\\n            return compressEthRoundDown(value);\\n        }\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                              SHIFT HELPERS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n    // @test input output unit test\\n    // type(uint96).max / 10**13 = 0x01C25C268497681 =  7922816251426433\\n    // type(uint56).max          = 0x100000000000000 = 72057594037927936\\n    function eth(uint256 input) internal pure returns (uint96 res) {\\n        return (ShiftLib.get(input, 56, 160) * COMPRESSION_PERCISION).safe96();\\n    }\\n\\n    function eth(uint256 input, uint96 update) internal pure returns (uint256 cache, uint96 rem) {\\n        rem = update % COMPRESSION_PERCISION;\\n        cache = ShiftLib.set(input, 56, 160, update / COMPRESSION_PERCISION);\\n    }\\n\\n    // @test  input output unit test\\n    function epoch(uint256 input, uint32 update) internal pure returns (uint256 res) {\\n        return ShiftLib.set(input, 32, 216, update);\\n    }\\n\\n    function epoch(uint256 input) internal pure returns (uint32 res) {\\n        return ShiftLib.get(input, 32, 216).safe32();\\n    }\\n\\n    // @test  input output unit test\\n    function account(uint256 input) internal pure returns (address res) {\\n        res = address(ShiftLib.get(input, 160, 0).safe160());\\n    }\\n\\n    function account(uint256 input, address update) internal pure returns (uint256 output) {\\n        output = ShiftLib.set(input, 160, 0, uint160(update));\\n    }\\n\\n    // @test  input output unit test\\n    function isOwner(uint256 input, bool update) internal pure returns (uint256 res) {\\n        return ShiftLib.set(input, 1, 255, update ? 0x1 : 0x0);\\n    }\\n\\n    function isOwner(uint256 input) internal pure returns (bool output) {\\n        output = ShiftLib.get(input, 1, 255) == 0x1;\\n    }\\n\\n    // @test  check to see if it does this - will be easy\\n    function flag(uint256 input) internal pure returns (uint256 res) {\\n        res = ShiftLib.set(input, 1, 254, 0x01);\\n    }\\n\\n    // @test  manual\\n    function buildSwapData(\\n        uint32 _epoch,\\n        address _account,\\n        uint96 _eth,\\n        bool _isOwner\\n    ) internal pure returns (uint256 res, uint96 dust) {\\n        res = epoch(res, _epoch);\\n        res = account(res, _account);\\n        if (_isOwner) res = isOwner(res, true);\\n        (res, dust) = eth(res, _eth);\\n        res = flag(res);\\n    }\\n}\\n\",\"keccak256\":\"0xe0103478cf5fa59a1c4d4521e5b2fa68cc1d2c0624f36edbcec1e87decee749b\",\"license\":\"MIT\"},\"src/swap/SwapStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\nimport {SwapPure} from './SwapPure.sol';\\n\\nimport {EpochCore} from '../epoch/EpochCore.sol';\\n\\n// SYSTEM TEST\\nlibrary Swap {\\n    using SwapPure for uint256;\\n\\n    struct Full {\\n        mapping(uint160 => Mapping) map;\\n    }\\n\\n    struct Mapping {\\n        Storage self;\\n        mapping(uint16 => Storage) items;\\n    }\\n\\n    struct Storage {\\n        uint256 data;\\n        mapping(address => uint256) offers;\\n    }\\n\\n    struct Memory {\\n        uint256 swapData;\\n        uint256 offerData;\\n        uint32 activeEpoch;\\n        address sender;\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TOKEN SWAP\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function _tokenSwapPtr(uint160 tokenId) private view returns (Storage storage si) {\\n        return Global.ptr().swap.map[tokenId].self;\\n    }\\n\\n    function loadTokenSwap(uint160 tokenId, address account) internal view returns (Storage storage s, Memory memory m) {\\n        s = _tokenSwapPtr(tokenId);\\n        m = _load(s, account);\\n    }\\n\\n    function deleteTokenOffer(uint160 tokenId, address account) internal {\\n        delete _tokenSwapPtr(tokenId).offers[account];\\n    }\\n\\n    function deleteTokenSwap(uint160 tokenId) internal {\\n        delete _tokenSwapPtr(tokenId).data;\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                ITEM SWAP\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function _itemSwapPtr(uint160 tokenId, uint16 itemId) private view returns (Storage storage si) {\\n        return Global.ptr().swap.map[tokenId].items[itemId];\\n    }\\n\\n    function loadItemSwap(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        address account\\n    ) internal view returns (Storage storage s, Memory memory m) {\\n        s = _itemSwapPtr(tokenId, itemId);\\n        m = _load(s, account);\\n    }\\n\\n    function deleteItemOffer(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        address account\\n    ) internal {\\n        delete _itemSwapPtr(tokenId, itemId).offers[account];\\n    }\\n\\n    function deleteItemSwap(uint160 tokenId, uint16 itemId) internal {\\n        delete _itemSwapPtr(tokenId, itemId).data;\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                COMMON\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function _load(Storage storage ptr, address account) private view returns (Memory memory m) {\\n        uint256 cache = ptr.data;\\n        m.swapData = cache;\\n        m.activeEpoch = EpochCore.activeEpoch();\\n        m.sender = account;\\n\\n        if (account == cache.account()) {\\n            m.offerData = cache;\\n        } else {\\n            m.offerData = ptr.offers[account];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8f4d5a1168beff6a67ea7e9742bc084caf452dfd080218a43ebdb454d567ab09\",\"license\":\"MIT\"},\"src/token/TokenCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport {Token} from './TokenStorage.sol';\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\nimport {TokenView} from './TokenView.sol';\\n\\nimport {StakeCore} from '../stake/StakeCore.sol';\\nimport {ProofCore} from '../proof/ProofCore.sol';\\n\\n// system test\\nlibrary TokenCore {\\n    using SafeCastLib for uint256;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TRANSFER\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function checkedTransferFromSelf(address to, uint160 tokenId) internal {\\n        require(TokenView.ownerOf(tokenId) == address(this), 'N:0');\\n\\n        Token.ptr().owners[tokenId] = to;\\n\\n        emitTransferEvent(address(this), to, tokenId);\\n    }\\n\\n    function approvedTransferToSelf(uint160 tokenId) internal {\\n        require(TokenView.isOperatorForOwner(msg.sender, tokenId) && TokenView.getApproved(tokenId) == address(this), 'N:1');\\n\\n        delete Token.ptr().owners[tokenId];\\n\\n        // Clear approvals from the previous owner\\n        delete Token.ptr().approvals[tokenId];\\n\\n        emitTransferEvent(msg.sender, address(this), tokenId);\\n    }\\n\\n    function emitTransferEvent(\\n        address from,\\n        address to,\\n        uint160 tokenId\\n    ) internal {\\n        emit Transfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xbddd63b3df87b24eef5774151033c83534a658665b8249b63b8093ba7b18434b\",\"license\":\"MIT\"},\"src/token/TokenExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721, IERC165, IERC721Metadata} from '../interfaces/IERC721.sol';\\nimport {ITokenExternal} from '../interfaces/nuggft/ITokenExternal.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport {Token} from './TokenStorage.sol';\\nimport {TokenView} from './TokenView.sol';\\nimport {TokenCore} from './TokenCore.sol';\\n\\nimport {StakeCore} from '../stake/StakeCore.sol';\\nimport {ProofCore} from '../proof/ProofCore.sol';\\n\\nimport {Trust} from '../trust/Trust.sol';\\n\\n///\\n/// @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard\\n///\\nabstract contract TokenExternal is ITokenExternal {\\n    using SafeCastLib for uint256;\\n\\n    uint32 constant TRUSTED_MINT_TOKENS = 500;\\n    uint32 constant UNTRUSTED_MINT_TOKENS = 10000;\\n\\n    /// @inheritdoc ITokenExternal\\n    function trustedMint(uint160 tokenId, address to) external payable override {\\n        Trust.check();\\n\\n        require(tokenId < TRUSTED_MINT_TOKENS && tokenId != 0, 'G:1');\\n\\n        require(!TokenView.exists(tokenId), 'G:2');\\n\\n        StakeCore.addStakedShareFromMsgValue();\\n\\n        ProofCore.setProof(tokenId);\\n\\n        _mintTo(to, tokenId);\\n    }\\n\\n    /// @inheritdoc ITokenExternal\\n    function mint(uint160 tokenId) public payable override {\\n        require(tokenId < UNTRUSTED_MINT_TOKENS + TRUSTED_MINT_TOKENS && tokenId > TRUSTED_MINT_TOKENS, 'G:1');\\n\\n        require(!TokenView.exists(tokenId), 'G:2');\\n\\n        StakeCore.addStakedShareFromMsgValue();\\n\\n        ProofCore.setProof(tokenId);\\n\\n        _mintTo(msg.sender, tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = TokenView.ownerOf(tokenId.safe160());\\n\\n        require(TokenView.isOperatorFor(msg.sender, owner), 'G:1');\\n\\n        Token.ptr().approvals[tokenId] = to;\\n\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) public override {\\n        // require(msg.sender != operator && operator == address(this), 'G:0');\\n\\n        Token.ptr().operatorApprovals[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return TokenView.ownerOf(tokenId.safe160());\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        return TokenView.getApproved(tokenId.safe160());\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\n        return TokenView.isOperatorFor(operator, owner);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                DISABLED\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function balanceOf(address) public pure override returns (uint256) {\\n        return 0;\\n    }\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) public pure override {\\n        revert();\\n    }\\n\\n    function safeTransferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) public pure override {\\n        revert();\\n    }\\n\\n    function safeTransferFrom(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public pure override {\\n        revert();\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                internal\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function _mintTo(address to, uint160 tokenId) internal {\\n        Token.ptr().owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xf6439bc7fc6bb32586be77d5f7a1f6171b22664eac684b877b5482cef640f7c1\",\"license\":\"MIT\"},\"src/token/TokenStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\n// OK\\nlibrary Token {\\n    struct Storage {\\n        mapping(uint256 => address) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    function ptr() internal view returns (Storage storage s) {\\n        return Global.ptr().token;\\n    }\\n}\\n\",\"keccak256\":\"0x39c7ccae8f43496321b2c23c8709bfbb70b10097b4ea58342a4c0a5fea379dee\",\"license\":\"MIT\"},\"src/token/TokenView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Token} from './TokenStorage.sol';\\nimport {Proof} from '../proof/ProofStorage.sol';\\n\\nlibrary TokenView {\\n    function exists(uint160 tokenId) internal view returns (bool) {\\n        return Proof.sload(tokenId) != 0;\\n    }\\n\\n    function isOperatorFor(address operator, address owner) internal view returns (bool) {\\n        return owner == operator || Token.ptr().operatorApprovals[owner][operator];\\n    }\\n\\n    function isOperatorForOwner(address operator, uint160 tokenId) internal view returns (bool) {\\n        return isOperatorFor(operator, ownerOf(tokenId));\\n    }\\n\\n    function getApproved(uint160 tokenId) internal view returns (address) {\\n        require(exists(tokenId), 'T:9:1');\\n        return Token.ptr().approvals[tokenId];\\n    }\\n\\n    function ownerOf(uint160 tokenId) internal view returns (address owner) {\\n        require(exists(tokenId), 'T:9:2');\\n        owner = Token.ptr().owners[tokenId];\\n        if (owner == address(0)) return address(this);\\n    }\\n\\n    function isApprovedOrOwner(address spender, uint160 tokenId) internal view returns (bool) {\\n        address owner = TokenView.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isOperatorFor(owner, spender));\\n    }\\n}\\n\",\"keccak256\":\"0xb518c60e4f14bcc86cf9955383d4aa111b17deda157fb3322419739e794493ef\",\"license\":\"MIT\"},\"src/trust/Trust.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary Trust {\\n    struct Storage {\\n        mapping(address => bool) trusted;\\n    }\\n\\n    function check() internal view {\\n        Storage storage store;\\n\\n        assembly {\\n            store.slot := 0x20002467\\n        }\\n\\n        require(store.trusted[msg.sender], 'T:1');\\n    }\\n}\\n\",\"keccak256\":\"0x89ecd085a2acac9e4cb81951ad0465c2a26612b6dc97a7d4739ad1374449671e\",\"license\":\"MIT\"},\"src/trust/TrustExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ITrustExternal} from '../interfaces/nuggft/ITrustExternal.sol';\\n\\nimport {Trust} from './Trust.sol';\\n\\nabstract contract TrustExternal is ITrustExternal {\\n    constructor() {\\n        Trust.Storage storage store;\\n\\n        assembly {\\n            store.slot := 0x20002467\\n        }\\n\\n        store.trusted[msg.sender] = true;\\n\\n        emit TrustUpdated(msg.sender, true);\\n    }\\n\\n    /// @inheritdoc ITrustExternal\\n    function setIsTrusted(address user, bool trust) external virtual override {\\n        Trust.check();\\n\\n        Trust.Storage storage store;\\n\\n        assembly {\\n            store.slot := 0x20002467\\n        }\\n\\n        store.trusted[user] = trust;\\n\\n        emit TrustUpdated(user, trust);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                 VIEW\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc ITrustExternal\\n    function trusted(address user) public view override returns (bool) {\\n        Trust.Storage storage store;\\n\\n        assembly {\\n            store.slot := 0x20002467\\n        }\\n\\n        return store.trusted[user];\\n    }\\n}\\n\",\"keccak256\":\"0x8b17d054396ff6ce5c62d1b68b8bc6ef227934ec00ab8591fc83002fe1b9ceec\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000805461ffff60a01b1916610a2d60a01b1790553480156200002657600080fd5b506040516200613138038062006131833981016040819052620000499162000163565b33600081815263200024676020818152604092839020805460ff191660019081179091559251928352849391927f01370ae6c2f4315d0915b457ec604f483d0ff6f34a7fdd5c3401ae39fda86aa9910160405180910390a250620000b76200014860201b620028431760201c565b6040517f6bf6eaff5e9af8fbccb949f4c38cc016936f8775363ccf4224db160365785d5290600090a16001600160a01b038116620001215760405162461bcd60e51b8152602060048201526003602482015262118e8d60ea1b604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b03929092169190911790555062000195565b640100042069805463ffffffff19164363ffffffff16179055565b6000602082840312156200017657600080fd5b81516001600160a01b03811681146200018e57600080fd5b9392505050565b615f8c80620001a56000396000f3fe60806040526004361061034a5760003560e01c806399081a26116101bb578063c87b56dd116100f7578063e985e9c511610095578063fb774eb81161006f578063fb774eb814610a26578063fca840ae14610a46578063fe7e997e14610a66578063ffcf6d3a14610a8657600080fd5b8063e985e9c5146109d3578063ecc1113f146109f3578063fa73299214610a1357600080fd5b8063d7dc6819116100d1578063d7dc6819146108fd578063e5cbd48e14610964578063e63bedde14610984578063e7477383146109b257600080fd5b8063c87b56dd1461089b578063d276db98146108bb578063d7be245c146108db57600080fd5b8063b88d4fde11610164578063be2cfdff1161013e578063be2cfdff14610827578063beace31f14610855578063c06c822f14610868578063c5c8beeb1461087b57600080fd5b8063b88d4fde146107cc578063b88ea014146107e7578063bc7b6d621461080757600080fd5b8063a2c7172711610195578063a2c7172714610779578063b3b9f3a71461078c578063b3f9e4cb146107ac57600080fd5b806399081a26146106f25780639a74cb6414610739578063a22cb4651461075957600080fd5b806351d4d67e1161028a5780636e9821c211610233578063900cf0cf1161020d578063900cf0cf1461064d5780639066fdf8146106775780639531b94d1461069757806395d89b41146106ac57600080fd5b80636e9821c2146105dd57806370a0823114610619578063750656f61461063a57600080fd5b8063608cceb011610264578063608cceb0146105885780636352211e146105a85780636571595e146105c857600080fd5b806351d4d67e14610520578063570f67ad146105405780635917c58f1461055557600080fd5b80631056b9d5116102f757806323b872dd116102d157806323b872dd146104d057806323cf3118146104eb57806342842e0e146104d0578063504cdacf1461050b57600080fd5b80631056b9d51461047a5780631393916a1461048d57806318160ddd146104ad57600080fd5b806306fdde031161032857806306fdde03146103d3578063081812fc14610422578063095ea7b31461045a57600080fd5b806301ffc9a71461034f5780630251f62c1461038457806303bfe17e146103a6575b600080fd5b34801561035b57600080fd5b5061036f61036a366004615149565b610ab7565b60405190151581526020015b60405180910390f35b34801561039057600080fd5b506103a461039f366004615188565b610b54565b005b3480156103b257600080fd5b506103bb610c70565b6040516001600160601b03909116815260200161037b565b3480156103df57600080fd5b5060408051808201909152601681527f4e7567672046756e6769626c6520546f6b656e2056310000000000000000000060208201525b60405161037b91906151fd565b34801561042e57600080fd5b5061044261043d366004615210565b610c7f565b6040516001600160a01b03909116815260200161037b565b34801561046657600080fd5b506103a4610475366004615229565b610c92565b6103a4610488366004615267565b610d41565b34801561049957600080fd5b506103a46104a83660046152ae565b610f17565b3480156104b957600080fd5b506104c2610f85565b60405190815260200161037b565b3480156104dc57600080fd5b506103a461034a3660046152ec565b3480156104f757600080fd5b506103a4610506366004615188565b610f9e565b34801561051757600080fd5b506103bb610ffd565b34801561052c57600080fd5b506103a461053b36600461532d565b611007565b34801561054c57600080fd5b506103a4611161565b34801561056157600080fd5b5060005461057690600160a01b900460ff1681565b60405160ff909116815260200161037b565b34801561059457600080fd5b506103bb6105a3366004615188565b6111e7565b3480156105b457600080fd5b506104426105c3366004615210565b6111fd565b3480156105d457600080fd5b506103bb61120b565b3480156105e957600080fd5b5061036f6105f8366004615188565b6001600160a01b031660009081526320002467602052604090205460ff1690565b34801561062557600080fd5b506104c2610634366004615188565b50600090565b6103a4610648366004615188565b611215565b34801561065957600080fd5b506106626112e8565b60405163ffffffff909116815260200161037b565b34801561068357600080fd5b506103a461069236600461536c565b6112f2565b3480156106a357600080fd5b506103bb6113cb565b3480156106b857600080fd5b5060408051808201909152600681527f4e554747465400000000000000000000000000000000000000000000000000006020820152610415565b3480156106fe57600080fd5b5061071261070d36600461532d565b6113d5565b6040805193151584526001600160601b03928316602085015291169082015260600161037b565b34801561074557600080fd5b506103a4610754366004615398565b6114d8565b34801561076557600080fd5b506103a46107743660046152ae565b6114f0565b6103a461078736600461532d565b61155e565b34801561079857600080fd5b506103a46107a7366004615188565b611924565b3480156107b857600080fd5b506104426107c7366004615210565b611948565b3480156107d857600080fd5b506103a461034a366004615482565b3480156107f357600080fd5b506104c2610802366004615188565b61195b565b34801561081357600080fd5b506103a4610822366004615531565b611966565b34801561083357600080fd5b5061083c6119f4565b60405167ffffffffffffffff909116815260200161037b565b6103a461086336600461532d565b6119fe565b6103a4610876366004615188565b611ac3565b34801561088757600080fd5b506103a461089636600461556d565b611c46565b3480156108a757600080fd5b506104156108b6366004615210565b611db2565b3480156108c757600080fd5b506103a46108d6366004615188565b611dbd565b3480156108e757600080fd5b506108f0611f1f565b60405161037b91906155d7565b34801561090957600080fd5b5061091d610918366004615188565b611f29565b604080516001600160601b0396871681529486166020860152929094169183019190915263ffffffff1660608201526001600160a01b03909116608082015260a00161037b565b34801561097057600080fd5b50600054610442906001600160a01b031681565b34801561099057600080fd5b506109a461099f366004615210565b61203e565b60405161037b9291906156ca565b3480156109be57600080fd5b5060005461057690600160a81b900460ff1681565b3480156109df57600080fd5b5061036f6109ee36600461532d565b6121e1565b3480156109ff57600080fd5b506103bb610a0e366004615188565b6121f4565b6103a4610a21366004615188565b61220a565b348015610a3257600080fd5b506103a4610a41366004615267565b612454565b348015610a5257600080fd5b506103a4610a6136600461575f565b6125cb565b348015610a7257600080fd5b506103a4610a8136600461582c565b612700565b348015610a9257600080fd5b50610aa6610aa1366004615188565b612820565b60405161037b9594939291906158a2565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480610b1a57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610b4e57506001600160e01b031982167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b6000610b5f8261285e565b9050610b6b33826128f4565b610bbc5760405162461bcd60e51b815260206004820152600360248201527f4c3a30000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000610bc6612943565b90506000610bd2612958565b90506000610be38285856000612963565b506001600160a01b038616600090815262042074602052604090208190559050604080516001600160a01b03871681526001600160601b03851660208201527fdf65fae456ee5bcd916efcb9b5ad07667d7fc396aff61536c465f280393fbd3e910160405180910390a1610c56856129b5565b610c6984846001600160601b0316612a71565b5050505050565b6000610c7a612943565b905090565b6000610b4e610c8d83612acc565b612ae6565b6000610ca5610ca083612acc565b61285e565b9050610cb133826128f4565b610ce35760405162461bcd60e51b8152602060048201526003602482015262473a3160e81b6044820152606401610bb3565b60008281526204206b602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b610d4b3384612b78565b610d975760405162461bcd60e51b815260206004820152600360248201527f533a3600000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b600080610da5848487612b8c565b6020810151919350915060ff1c60011415610e025760405162461bcd60e51b815260206004820152600360248201527f533a3700000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6020810151158015610e185750805160ff1c6001145b15610e9957610e278282612bea565b7fdcd75b8c1f9c84e8b7d26df979d7ddbc4139b72f6c8e0e7123bb63d63ba1c325848487610e5434612cc0565b604080516001600160a01b03958616815261ffff94909416602085015291909316908201526001600160601b03909116606082015260800160405180910390a1610c69565b610ea38282612cd6565b7f3bbfe02e9ee64811b7404130d1c8a263edbb6ab73af1dc502dd56d43a3ddd1a3848487610ed034612cc0565b604080516001600160a01b03958616815261ffff94909416602085015291909316908201526001600160601b03909116606082015260800160405180910390a15050505050565b610f1f612de3565b6001600160a01b038216600081815263200024676020818152604092839020805460ff191686151590811790915592519283529092917f01370ae6c2f4315d0915b457ec604f483d0ff6f34a7fdd5c3401ae39fda86aa9910160405180910390a2505050565b6000610f8f612e2e565b67ffffffffffffffff16905090565b610fa6612de3565b806204206d80546001600160a01b0319166001600160a01b0392831617905560405190821681527fc97e86a927b4a897832650767255fd568e377e7fbe9586c81d26b77a2c3ffc8b9060200160405180910390a150565b6000610c7a612e44565b61101133836128f4565b61105d5760405162461bcd60e51b815260206004820152600360248201527f533a3800000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b60006110698284612e5a565b6001600160a01b03808516600090815262042075602090815260408083209389168352600190930190529081205591506110a09050565b6110a981612ea8565b156110dd576110ce826001600160a01b03166000908152620420756020526040812055565b6110d88383612f98565b6110fc565b6110fc836110ee8360200151613033565b6001600160601b0316612a71565b7f10c1106c1b3c266f6cf55047c56a839a002c11736bbf9c4acdec566e80677e9b828461112c846020015161305a565b604080516001600160a01b03948516815293909216602084015263ffffffff16908201526060015b60405180910390a1505050565b611169612de3565b60006111766204206e5490565b90508061118c336001600160601b038316612a71565b6111a76bffffffffffffffffffffffff1983165b6204206e55565b6040516001600160601b03821681527f8e4dbe2f73d3458c68bca94210eabefac52a4d20c038a8e50197ac9db654291b9060200160405180910390a15050565b60006111f282611f29565b509195945050505050565b6000610b4e610ca083612acc565b6000610c7a613074565b6112236101f4612710615917565b63ffffffff16816001600160a01b031610801561124a57506101f46001600160a01b038216115b61127c5760405162461bcd60e51b8152602060048201526003602482015262473a3160e81b6044820152606401610bb3565b6001600160a01b0381166000908152620420726020526040902054156112ca5760405162461bcd60e51b8152602060048201526003602482015262239d1960e91b6044820152606401610bb3565b6112d2613087565b6112db8161326c565b6112e533826133aa565b50565b6000610c7a612958565b6112fc3383612b78565b6113485760405162461bcd60e51b815260206004820152600360248201527f503a4100000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b600061135383613407565b905061135f818361346f565b905061136b818361357a565b6001600160a01b03841660008181526204207260209081526040918290208490558151928352820183905260ff8516908201529091507fe0b01689336e903dba5ec8bc01d79a4ec6aa4f944cd16d45d32700fb594b74ae90606001611154565b6000610c7a613609565b6001600080806113e58587612e5a565b80519092501515905061143e57846001600160a01b0316816040015163ffffffff16141561142d57611426611418613609565b6001600160601b0316613627565b925061149d565b6000806000935093509350506114d1565b602081015160ff1c6001141561145357600093505b6114608160200151613033565b915061146f8160000151613033565b9250611479612943565b6001600160601b0316836001600160601b0316101561149d5761149a612943565b92505b6001600160601b0383166114ba5766038d7ea4c6800092506114cf565b6114cc836001600160601b0316613678565b92505b505b9250925092565b6114e0612de3565b6114eb81848461369b565b505050565b3360008181526204206c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61156833836128f4565b6115b45760405162461bcd60e51b815260206004820152600360248201527f533a3000000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6000806115c18385612e5a565b91509150826001600160a01b0316816040015163ffffffff161480156115e657508051155b156116fe5766038d7ea4c680003410156116425760405162461bcd60e51b815260206004820152600360248201527f533a3100000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6020810151156116545761165461593f565b60006116738260400151836060015161166c34612cc0565b6000612963565b508084559050611681613087565b61168a8461326c565b611696600030866137f5565b7fb05be3e18f19a4aac09f77432c65062f81615fefa61e76300a99fb2d08c019138483606001516116c634612cc0565b604080516001600160a01b0394851681529390921660208401526001600160601b03169082015260600160405180910390a15061191e565b805161174c5760405162461bcd60e51b815260206004820152600360248201527f533a3400000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6020810151156117da57806040015163ffffffff1661176e826020015161305a565b63ffffffff1610156117c25760405162461bcd60e51b815260206004820152600360248201527f533a5200000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b602081015160ff1c600114156117da576117da61593f565b805160ff1c600114156118b4576117ef612943565b6001600160601b03163410156118475760405162461bcd60e51b815260206004820152600360248201527f533a3500000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6118518282612bea565b7f8e9681d7ef6204b5eb1f7e898910b723018e455d09ba77c2c9e43346968c887f833361187d34612cc0565b604080516001600160a01b0394851681529390921660208401526001600160601b03169082015260600160405180910390a161191e565b6118be8282612cd6565b7f695e0d4736a959eec71a66de118059220f6144b53eb2ed3e6ca8508ce8cd1f0a83336118ea34612cc0565b604080516001600160a01b0394851681529390921660208401526001600160601b0316908201526060015b60405180910390a15b50505050565b600061192f82613844565b905061194433826001600160601b0316612a71565b5050565b6000610b4e61195683612acc565b613a57565b6000610b4e82613a62565b6119783361197384612acc565b612b78565b6119c45760405162461bcd60e51b815260206004820152600360248201527f463a3500000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b600091825262042071602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000610c7a612e2e565b611a06612de3565b6101f46001600160a01b038316108015611a2857506001600160a01b03821615155b611a5a5760405162461bcd60e51b8152602060048201526003602482015262473a3160e81b6044820152606401610bb3565b6001600160a01b038216600090815262042072602052604090205415611aa85760405162461bcd60e51b8152602060048201526003602482015262239d1960e91b6044820152606401610bb3565b611ab0613087565b611ab98261326c565b61194481836133aa565b600080600080611ad285611f29565b945094509450945050611ae48561285e565b6001600160a01b0316306001600160a01b031614611b0457611b0461593f565b34846001600160601b03161115611b5d5760405162461bcd60e51b815260206004820152600360248201527f4c3a3300000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b611b6684613b0d565b6000611b70612943565b9050600080611b828585856000612963565b6001600160a01b038a1660009081526204207460205260408120839055919350915087611bae34612cc0565b611bb89190615955565b9050600082611bc7838a61597d565b611bd1919061597d565b604080516001600160a01b038d1681526001600160601b038c811660208301528b168183015290519192507f55ab9f648a42ab2ae7eed81f0683a7bae5d54989d8125f397a88f72bec826917919081900360600190a1611c3a86826001600160601b0316612a71565b50505050505050505050565b6000611c518361285e565b9050611c5d33826128f4565b611ca95760405162461bcd60e51b815260206004820152600360248201527f533a4100000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b611cb1612943565b6001600160601b0316826001600160601b03161015611d125760405162461bcd60e51b815260206004820152600360248201527f533a4200000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b611d1b836129b5565b600080611d288584612e5a565b8051919350915015611d3c57611d3c61593f565b6000611d4c600085876001612963565b50808455604080516001600160a01b03808a168252871660208201526001600160601b038816918101919091529091507f3d175b4f67d380f8c4185f649f2cfeda5da34c1156302187ac843b620f9c9cd3906060015b60405180910390a1505050505050565b6060610b4e82613c44565b6204206d546001600160a01b031680611e185760405162461bcd60e51b815260206004820152600360248201527f543a3400000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6000611e2383613407565b90506000611e3084613844565b6040517f80011aa70000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015260248201859052336044830152919250908416906380011aa7906001600160601b038416906064016000604051808303818588803b158015611ea757600080fd5b505af1158015611ebb573d6000803e3d6000fd5b5050604080516001600160a01b038089168252891660208201529081018690523360608201526001600160601b03851660808201527f58ca548c1fd63f641dfb02f79df36d4f29bd995f0733d2ed3595b6cfde7db4e1935060a00191506119159050565b6060610c7a613d5e565b600080600080600080611f53876001600160a01b0316600090815262042074602052604090205490565b905080611fa25760405162461bcd60e51b815260206004820152600360248201527f4c3a3400000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6000611fad82613033565b90506000611fb9612943565b9050612710611fc960648461599f565b611fd391906159e4565b9650611fdf878361597d565b9750806001600160601b0316886001600160601b0316101561200a576120058882615955565b61200d565b60005b95506103e861201b8461305a565b6120259190615917565b945061203083613d6e565b935050505091939590929450565b60606120a66040518061016001604052806000815260200160008152602001606081526020016060815260200160006001600160a01b031681526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b60008060008060006120bf6120ba89612acc565b613d82565b945094509450945094506120d284613d9e565b9650604051806101600160405280600181526020014281526020016040518060400160405280600981526020017f4e7567674654205631000000000000000000000000000000000000000000000081525081526020016040518060400160405280601681526020017f4e7567672046756e6769626c6520546f6b656e20563100000000000000000000815250815260200161218e61216f8b612acc565b6001600160a01b03166000908152620420726020526040902054151590565b6121995760006121a5565b6121a5610ca08b612acc565b6001600160a01b031681526020018981526020018681526020018581526020018481526020018381526020018281525095505050505050915091565b60006121ed82846128f4565b9392505050565b60006121ff82611f29565b509295945050505050565b600080600080600061221b86611f29565b945063ffffffff1694509450945094506122348661285e565b6001600160a01b0316306001600160a01b0316146122545761225461593f565b612274866001600160a01b03166000908152620420746020526040812055565b600061227e612958565b90503363ffffffff82166001600160601b038516106122f0576122a133846128f4565b6122ed5760405162461bcd60e51b815260206004820152600360248201527f4c3a3100000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b50815b60006122fb34612cc0565b9050806001600160601b0316886001600160601b0316111561235f5760405162461bcd60e51b815260206004820152600360248201527f4c3a3200000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b600061236b8883615955565b90506000612379828961597d565b604080516001600160a01b038e1681526001600160601b038c811660208301528b168183015290519192507f55ab9f648a42ab2ae7eed81f0683a7bae5d54989d8125f397a88f72bec826917919081900360600190a1604080516001600160a01b038d81168252861660208201526001600160601b038c168183015290517f563fb66b43e6ac55166c353532257057a2fe86a1566c988840baecf6bca1025a9181900360600190a161242a89613b0d565b61243d84826001600160601b0316612a71565b612447848c612f98565b5050505050505050505050565b61245e3384612b78565b6124aa5760405162461bcd60e51b815260206004820152600360248201527f533a3900000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b60006124b7838386612b8c565b6001600160a01b038086166000908152620420756020908152604080832061ffff891684526002018252808320938a168352600190930190529081205591506124fd9050565b61250681612ea8565b15612547576001600160a01b0383166000908152620420756020908152604080832061ffff861684526002019091528120556125428483613ebc565b612560565b6125606125538561285e565b6110ee8360200151613033565b7f95e8db1d2cc4bd26402c98c45fdb7ff875bb955206591a210b51aa82b4ba5acb838386612591856000015161305a565b604080516001600160a01b03958616815261ffff949094166020850152919093169082015263ffffffff9091166060820152608001611915565b6125d53384612b78565b6126215760405162461bcd60e51b815260206004820152600360248201527f533a4300000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b61262b8383614013565b600080612639858587612b8c565b805191935091501561268d5760405162461bcd60e51b815260206004820152600360248201527f533a4400000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b600061269d600087866001612963565b5080845590507f77cfc3b2aafc5344a53b50b3c7938afac3d04e0f564e929aa8d1f398e67f1ccc86866126cf84613033565b604080516001600160a01b03909416845261ffff90921660208401526001600160601b031690820152606001611da2565b61270a3384612b78565b6127565760405162461bcd60e51b815260206004820152600360248201527f503a4200000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b81516008148015612768575080516008145b6127b45760405162461bcd60e51b815260206004820152600360248201527f503a4300000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b60006127bf84613407565b90506127cc818484614112565b6001600160a01b0385166000908152620420726020526040902081905590507f73904d03f919661d854e7b284dd6f818c038e7cce6237422aca32cc599a08267848285856040516119159493929190615a0a565b600060608060608061283186613d82565b939a9299509097509550909350915050565b640100042069805463ffffffff19164363ffffffff16179055565b6001600160a01b03811660009081526204207260205260408120546128c55760405162461bcd60e51b815260206004820152600560248201527f543a393a320000000000000000000000000000000000000000000000000000006044820152606401610bb3565b506001600160a01b03818116600090815262042069602052604090205416806128ef575030919050565b919050565b6000826001600160a01b0316826001600160a01b031614806121ed5750506001600160a01b0390811660009081526204206c602090815260408083209490931682529290925290205460ff1690565b6000610c7a6129536204206e5490565b61412e565b6000610c7a4361417e565b60008061297082876141bf565b915061297c8286614210565b915082156129925761298f82600161422d565b91505b61299c8285614264565b90925090506129aa826142be565b915094509492505050565b6129bf3382612b78565b80156129db5750306129d082612ae6565b6001600160a01b0316145b612a275760405162461bcd60e51b815260206004820152600360248201527f4e3a3100000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6001600160a01b0381166000908152620420696020908152604080832080546001600160a01b03199081169091556204206b909252909120805490911690556112e53330836137f5565b600080600080600085875af19050806114eb5760405162461bcd60e51b815260206004820152600360248201527f5a3a3000000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b60006001600160a01b03821115612ae257600080fd5b5090565b6001600160a01b0381166000908152620420726020526040812054612b4d5760405162461bcd60e51b815260206004820152600560248201527f543a393a310000000000000000000000000000000000000000000000000000006044820152606401610bb3565b620420695b6001600160a01b0392831660009081526002919091016020526040902054909116919050565b60006121ed83612b878461285e565b6128f4565b6040805160808101825260008082526020808301829052828401829052606083018290526001600160a01b038716825262042075815283822061ffff8716835260020190529182209150612be0828461430a565b9050935093915050565b6020810151158015612bfc5750805115155b612c0857612c0861593f565b805160ff1c600114612c1c57612c1c61593f565b6000806000612c4d846000015185604001516001612c3a9190615917565b8660600151612c4834612cc0565b6143aa565b82885560408701519295509093509150612c8190600090612c7b90612c73906001615917565b8751906141bf565b9061422d565b856001016000612c948760000151613d6e565b6001600160a01b03168152602081019190915260400160002055610c69612cbb828461597d565b613b0d565b60006001600160601b03821115612ae257600080fd5b8051612ce19061305a565b63ffffffff16816040015163ffffffff161115612d405760405162461bcd60e51b815260206004820152600360248201527f533a4600000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b80606001516001600160a01b0316612d5b8260000151613d6e565b6001600160a01b031614612d95578051600183016000612d7a83613d6e565b6001600160a01b031681526020810191909152604001600020555b6000806000612dcc84600001518560600151612db034612cc0565b612dbd8860200151613033565b612dc7919061597d565b614457565b82885591945092509050610c69612cbb828461597d565b3360009081526320002467602081905260409091205460ff166112e55760405162461bcd60e51b8152602060048201526003602482015262543a3160e81b6044820152606401610bb3565b6000610c7a612e3e6204206e5490565b60c01c90565b6000610c7a612e546204206e5490565b60601c90565b6040805160808101825260008082526020808301829052828401829052606083018290526001600160a01b03861682526204207590529182209150612e9f828461430a565b90509250929050565b6000816020015160001415612eff5760405162461bcd60e51b815260206004820152600360248201527f533a4500000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6000612f0e836000015161305a565b63ffffffff16836040015163ffffffff161190506000612f318460000151613d6e565b6001600160a01b0316612f478560200151613d6e565b6001600160a01b03161490506000612f698560000151600160ff9190911c1490565b8015612f7c5750602085015160ff1c6001145b9050818015612f8f57508080612f8f5750825b95945050505050565b30612fa28261285e565b6001600160a01b031614612ff85760405162461bcd60e51b815260206004820152600360248201527f4e3a3000000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6001600160a01b038181166000908152620420696020526040902080546001600160a01b0319169184169190911790556119443083836137f5565b6000610b4e6130556509184e72a00060a085901c66ffffffffffffff16615a4f565b612cc0565b6000610b4e63ffffffff60d884901c1661447f565b61447f565b6000610c7a6130846204206e5490565b90565b600061309234612cc0565b905060006130a16204206e5490565b905060008060006130b184614492565b9250925092506000806130c3866144b7565b509250509150816001600160601b0316876001600160601b031610156131115760405162461bcd60e51b8152602060048201526003602482015262543a3160e81b6044820152606401610bb3565b600061311d8389615955565b90506131288161451e565b613132908361597d565b91506132156111a0613144848761597d565b6131f6613151868d615955565b61315b908a61597d565b6131b06131698c6001615a6e565b77ffffffffffffffffffffffffffffffffffffffffffffffff8e1660c09190911b7fffffffffffffffff000000000000000000000000000000000000000000000000161790565b7fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff1660609190911b77ffffffffffffffffffffffff000000000000000000000000161790565b6bffffffffffffffffffffffff19166001600160601b03919091161790565b7fcc7b20c8500e3dfc952e445cc296459e4e7148bead08f530844981e1c1236e4e613240838a615955565b604080516001600160601b03928316815291851660208301520160405180910390a15050505050505050565b6001600160a01b0381166000908152620420726020526040902054156132d45760405162461bcd60e51b815260206004820152600360248201527f503a3500000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6000816132e2600143615a91565b6040517f4206900000000000000000000000000000000000000000000000000000000000602082015260609290921b6bffffffffffffffffffffffff191660238301524060378201526057016040516020818303038152906040528051906020012060001c905060008061335583614539565b6001600160a01b0386166000908152620420726020526040902082905590925090507f3c2693eb3bc9fd62db9b727df67972a7372cca5a21f9b4a5c05d48363273c24784838360405161191593929190615aa8565b6001600160a01b03818116600081815262042069602052604080822080546001600160a01b0319169487169485179055519192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0381166000908152620420726020526040902054806128ef5760405162461bcd60e51b815260206004820152600360248201527f503a3000000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b600060ff82166134a75760405162461bcd60e51b8152602060048201526003602482015262281d2360e91b6044820152606401610bb3565b60006134b48460006148ef565b905060006134c38560406148ef565b90506000818560ff16815181106134dc576134dc615ad0565b60200260200101519050828560ff16815181106134fb576134fb615ad0565b6020026020010151828660ff168151811061351857613518615ad0565b602002602001019060ff16908160ff168152505080838660ff168151811061354257613542615ad0565b602002602001019060ff16908160ff16815250506135628660008561496f565b93506135708460408461496f565b9695505050505050565b6000806135888460806148ef565b905060006135978560c06148ef565b90506000818560ff16815181106135b0576135b0615ad0565b602002602001019060ff16908160ff16815250506000828560ff16815181106135db576135db615ad0565b602002602001019060ff16908160ff16815250506135fb8560808461496f565b9250612f8f8360c08361496f565b600061361e6136196204206e5490565b6144b7565b50919392505050565b60008061363a6509184e72a00084615ae6565b6001600160601b0316111561366f576509184e72a00061365a81846159e4565b61366590600161597d565b610b4e919061599f565b610b4e826149eb565b6000610b4e61271061368c846127d861599f565b61369691906159e4565b613627565b60006136a6826149fe565b905060008160ff16116136fb5760405162461bcd60e51b815260206004820152600360248201527f463a3000000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b60006137278484604051602001613713929190615b5b565b604051602081830303815290604052614a0e565b60ff861660009081526204207060209081526040822080546001810182559083529082200180547fffffffffffffffffffffff000000000000000000000000000000000000000000166001600160a01b03841674ff000000000000000000000000000000000000000060a088901b16171790556204206f549192506137ab82614ac2565b905083818860ff16815181106137c3576137c3615ad0565b602002602001018181516137d79190615bf9565b60ff169052506137e78282614acf565b6204206f5550505050505050565b806001600160a01b0316826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000806138508361285e565b90503061385c84612ae6565b6001600160a01b0316148015613877575061387733826128f4565b6138c35760405162461bcd60e51b815260206004820152600360248201527f543a3300000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b60006138d06204206e5490565b6001600160a01b0385166000908152620420696020908152604080832080546001600160a01b03199081169091556204206b835281842080548216905562042075835281842084905562042074835281842084905562042072835281842084905562042071909252822080549091169055909150613950908390866137f5565b60008061395c83614492565b509150915061396a8361412e565b945060018267ffffffffffffffff1610156139875761398761593f565b846001600160601b0316816001600160601b031610156139a9576139a961593f565b613a0e6111a06139b98784615955565b6131b06139c7600187615c1e565b77ffffffffffffffffffffffffffffffffffffffffffffffff881660c09190911b7fffffffffffffffff000000000000000000000000000000000000000000000000161790565b604080516001600160601b03871681523360208201527e96b8566d099a5618a665405b3df20d5a7f2293fce2fc9405d36a2ee3deab3f910160405180910390a150505050919050565b60006204206f612b52565b600080600080613a70614add565b50925092509250846001600160a01b031682148015613a8e57508215155b15613a9b57949350505050565b6001600160a01b0385166000908152620420726020526040902054935083613b055760405162461bcd60e51b815260206004820152600360248201527f503a3100000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b505050919050565b806001600160601b0316341015613b665760405162461bcd60e51b815260206004820152600360248201527f543a3200000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6000613b736204206e5490565b90506000613b808361451e565b9050613bfa6111a0613b92838561597d565b6131f6613b9f8588615955565b613ba98760601c90565b613bb3919061597d565b7fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff871660609190911b77ffffffffffffffffffffffff000000000000000000000000161790565b7fcc7b20c8500e3dfc952e445cc296459e4e7148bead08f530844981e1c1236e4e613c258285615955565b604080516001600160601b039283168152918416602083015201611154565b60606000613c5183612acc565b6001600160a01b0380821660009081526204207160205260408120549293509116613c87576000546001600160a01b0316613c90565b613c9082613a57565b6000546040517f191adaf8000000000000000000000000000000000000000000000000000000008152306004820152602481018790526001600160a01b03838116604483015260ff600160a01b840481166064840152600160a81b840416608483015292935091169063191adaf89060a40160006040518083038186803b158015613d1a57600080fd5b505afa158015613d2e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613d569190810190615c3f565b949350505050565b6060610c7a6204206f5b54614ac2565b6000610b4e6001600160a01b038316612acc565b6000606080606080613d9386613a62565b945061283185614b0d565b6060815167ffffffffffffffff811115613dba57613dba615413565b604051908082528060200260200182016040528015613ded57816020015b6060815260200190600190039081613dd85790505b50905060005b82518160ff161015613eb657828160ff1681518110613e1457613e14615ad0565b602002602001015160ff1660001415613e5d576040805160008152602081019091528251839060ff8416908110613e4d57613e4d615ad0565b6020026020010181905250613ea4565b613e8381848360ff1681518110613e7657613e76615ad0565b6020026020010151614b50565b828260ff1681518110613e9857613e98615ad0565b60200260200101819052505b80613eae81615cad565b915050613df3565b50919050565b613ec63383612b78565b613f125760405162461bcd60e51b815260206004820152600360248201527f503a3200000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6000613f1d83613407565b61ffff83166000908152620420736020526040902054909150613f825760405162461bcd60e51b815260206004820152600360248201527f503a3300000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b61ffff821660009081526204207360205260408120805491613fa383615ccd565b9190505550613fb28183614dfd565b6001600160a01b03841660008181526204207260209081526040918290208490558151928352820183905261ffff8516908201529091507f1e3ac88633ac111203e2a7614365c5e3df507302c9fb545dd85d8fcef753afce90606001611154565b61401d3383612b78565b6140695760405162461bcd60e51b815260206004820152600360248201527f503a3400000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b600061407483613407565b90506140808183614ec0565b6001600160a01b03841660009081526204207260205260409020819055905061ffff8216600090815262042073602052604081208054916140c083615ce4565b9091555050604080516001600160a01b03851681526020810183905261ffff8416918101919091527f399c4ec95d9ea42a0f3dda50055e3a2901f9640121b0b29865e688c08188596b90606001611154565b60006141208460808561496f565b9050613d568160c08461496f565b600061413a8260c01c90565b67ffffffffffffffff1615614176576141538260c01c90565b67ffffffffffffffff166141678360601c90565b61417191906159e4565b610b4e565b600092915050565b6000610b4e610bb8604561419b6401000420695463ffffffff1690565b6141ab9063ffffffff1686615a91565b6141b59190615cff565b61306f9190615d13565b60007fff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff83167effffffff00000000000000000000000000000000000000000000000000000060d884901b16176121ed565b60006001600160a01b031983166001600160a01b038316176121ed565b60006121ed83600160ff85614243576000614246565b60015b60ff16811b600190921b6000190160ff919091161b19919091161790565b6000806142776509184e72a00084615ae6565b90506142b584603860a06142916509184e72a000886159e4565b6001600160601b0316811b600190921b6000190160ff919091161b19919091161790565b91509250929050565b60007fbfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82167f400000000000000000000000000000000000000000000000000000000000000017610b4e565b6040805160808101825260006020820181905291810182905260608101919091528254808252614338612958565b63ffffffff1660408301526001600160a01b038316606083015261435b81613d6e565b6001600160a01b0316836001600160a01b0316141561438057602082018190526143a3565b6001600160a01b0383166000908152600185016020908152604090912054908301525b5092915050565b6000806000806143b988613033565b9050846001600160601b03166143d7826001600160601b0316613678565b6001600160601b0316111561442e5760405162461bcd60e51b815260206004820152600360248201527f533a4700000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b61443b8787876000612963565b909450915061444a8186615955565b9250509450945094915050565b6000806000614470866144698861305a565b87876143aa565b92509250925093509350939050565b600063ffffffff821115612ae257600080fd5b60008060006144a18460c01c90565b92506144ad8460601c90565b9294929392915050565b6000806000806144c68561412e565b92506144d18361451e565b91506113886144e08660c01c90565b6144f49067ffffffffffffffff168561599f565b6144fe91906159e4565b90508061450b838561597d565b614515919061597d565b93509193509193565b600061271061452f6103e88461599f565b610b4e91906159e4565b600060608261458a5760405162461bcd60e51b815260206004820152600360248201527f503a3800000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6000614594613d5e565b6040805160088082526101208201909252919250602082016101008036833701905050915060006145c68560006148ef565b9050614606816000815181106145de576145de615ad0565b6020026020010151836000815181106145f9576145f9615ad0565b6020026020010151614f97565b614611906001615bf9565b8360008151811061462457614624615ad0565b602002602001019060ff16908160ff16815250506146698160018151811061464e5761464e615ad0565b6020026020010151836001815181106145f9576145f9615ad0565b614674906001615bf9565b8360018151811061468757614687615ad0565b602002602001019060ff16908160ff16815250506146cc816002815181106146b1576146b1615ad0565b6020026020010151836002815181106145f9576145f9615ad0565b6146d7906001615bf9565b836002815181106146ea576146ea615ad0565b602002602001019060ff16908160ff168152505060608160038151811061471357614713615ad0565b602002602001015160ff16101561478c576147558160048151811061473a5761473a615ad0565b6020026020010151836003815181106145f9576145f9615ad0565b614760906001615bf9565b8360038151811061477357614773615ad0565b602002602001019060ff16908160ff16815250506148da565b60c0816003815181106147a1576147a1615ad0565b602002602001015160ff161015614801576147e3816004815181106147c8576147c8615ad0565b6020026020010151836004815181106145f9576145f9615ad0565b6147ee906001615bf9565b8360048151811061477357614773615ad0565b60fa8160038151811061481657614816615ad0565b602002602001015160ff161015614876576148588160048151811061483d5761483d615ad0565b6020026020010151836005815181106145f9576145f9615ad0565b614863906001615bf9565b8360058151811061477357614773615ad0565b6148a78160048151811061488c5761488c615ad0565b6020026020010151836006815181106145f9576145f9615ad0565b6148b2906001615bf9565b836006815181106148c5576148c5615ad0565b602002602001019060ff16908160ff16815250505b6148e68460008561496f565b93505050915091565b604080516008808252610120820190925292821c67ffffffffffffffff1692606091602082016101008036833701905050905060005b60088110156143a3578360ff1682828151811061494457614944615ad0565b60ff9092166020928302919091019091015260089390931c928061496781615ce4565b915050614925565b600060085b80156149d057614985600182615a91565b614990906008615a4f565b8361499c600184615a91565b815181106149ac576149ac615ad0565b602002602001015160ff16901b8217915080806149c890615ccd565b915050614974565b5067ffffffffffffffff60ff84161b19841681841b17613d56565b60006509184e72a00061366581846159e4565b600060ff821115612ae257600080fd5b60008082604051602001614a229190615d2b565b60405160208183030381529060405290506000815182604051602001614a49929190615d51565b60405160208183030381529060405290508051602082016000f092506001600160a01b038316614abb5760405162461bcd60e51b815260206004820152601160248201527f4445504c4f594d454e545f4641494c45440000000000000000000000000000006044820152606401610bb3565b5050919050565b6060610b4e8260006148ef565b60006121ed8360008461496f565b60008060006060614aec614ff3565b90945063ffffffff169250614b0084614539565b9495939490939092509050565b806060808080614b1e8560006148ef565b9350614b2b8660406148ef565b9250614b388660806148ef565b9150614b458660c06148ef565b905091939590929450565b606060ff8216614ba25760405162461bcd60e51b815260206004820152600360248201527f463a3100000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b81614bac81615dd0565b9250506000614bbe613d686204206f90565b8460ff1681518110614bd257614bd2615ad0565b602002602001015190508060ff168360ff1610614c315760405162461bcd60e51b815260206004820152600360248201527f463a3200000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b60ff84166000908152620420706020908152604080832080548251818502810185019093528083529192909190830182828015614ca557602002820191906000526020600020905b815474ffffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311614c79575b50505050509050600080600080600090505b8451811015614d6157600060a0868381518110614cd657614cd6615ad0565b602002602001015174ffffffffffffffffffffffffffffffffffffffffff16901c90508860ff168184614d099190615bf9565b60ff161115614d4257858281518110614d2457614d24615ad0565b602002602001015194508289614d3a9190615ded565b935050614d61565b614d4c8184615bf9565b92505080614d5981615ce4565b915050614cb7565b506001600160a01b038316614db85760405162461bcd60e51b815260206004820152600360248201527f463a3300000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b614dc1836150c0565b806020019051810190614dd49190615e10565b8260ff1681518110614de857614de8615ad0565b60200260200101519550505050505092915050565b600080614e0b8460406148ef565b805190915060ff600885901c81169190851690839083908110614e3057614e30615ad0565b602002602001015160ff16600014614e8a5760405162461bcd60e51b815260206004820152600360248201527f503a4400000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b80838360ff1681518110614ea057614ea0615ad0565b602002602001019060ff16908160ff16815250506135708660408561496f565b600080614ece8460406148ef565b905060ff600884901c811690841681614f0f5760405162461bcd60e51b8152602060048201526003602482015262281d2360e91b6044820152606401610bb3565b8060ff16838360ff1681518110614f2857614f28615ad0565b602002602001015160ff1614614f805760405162461bcd60e51b815260206004820152600360248201527f503a4500000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6000838360ff1681518110614ea057614ea0615ad0565b600060ff8216614fe95760405162461bcd60e51b815260206004820152600360248201527f503a3900000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6121ed8284615f17565b600080614ffe612958565b9050600061500b826150e1565b9050600061501a600183615a91565b4090508061506a5760405162461bcd60e51b815260206004820152600360248201527f453a3000000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6040805160208082019390935260e085901b6001600160e01b031916818301523060601b6bffffffffffffffffffffffff1916604482015281516038818303018152605890910190915280519101209391925050565b6060610b4e8260016150dc816001600160a01b0384163b615a91565b615124565b60006150f66401000420695463ffffffff1690565b63ffffffff16604561510a610bb885615f39565b63ffffffff1661511a9190615a4f565b610b4e9190615d13565b60408051603f83850101601f19168101909152818152818360208301863c9392505050565b60006020828403121561515b57600080fd5b81356001600160e01b0319811681146121ed57600080fd5b6001600160a01b03811681146112e557600080fd5b60006020828403121561519a57600080fd5b81356121ed81615173565b60005b838110156151c05781810151838201526020016151a8565b8381111561191e5750506000910152565b600081518084526151e98160208601602086016151a5565b601f01601f19169290920160200192915050565b6020815260006121ed60208301846151d1565b60006020828403121561522257600080fd5b5035919050565b6000806040838503121561523c57600080fd5b823561524781615173565b946020939093013593505050565b803561ffff811681146128ef57600080fd5b60008060006060848603121561527c57600080fd5b833561528781615173565b9250602084013561529781615173565b91506152a560408501615255565b90509250925092565b600080604083850312156152c157600080fd5b82356152cc81615173565b9150602083013580151581146152e157600080fd5b809150509250929050565b60008060006060848603121561530157600080fd5b833561530c81615173565b9250602084013561531c81615173565b929592945050506040919091013590565b6000806040838503121561534057600080fd5b823561534b81615173565b915060208301356152e181615173565b803560ff811681146128ef57600080fd5b6000806040838503121561537f57600080fd5b823561538a81615173565b9150612e9f6020840161535b565b6000806000604084860312156153ad57600080fd5b833567ffffffffffffffff808211156153c557600080fd5b818601915086601f8301126153d957600080fd5b8135818111156153e857600080fd5b8760208260051b85010111156153fd57600080fd5b6020928301955093506152a5918601905061535b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561545257615452615413565b604052919050565b600067ffffffffffffffff82111561547457615474615413565b50601f01601f191660200190565b6000806000806080858703121561549857600080fd5b84356154a381615173565b935060208501356154b381615173565b925060408501359150606085013567ffffffffffffffff8111156154d657600080fd5b8501601f810187136154e757600080fd5b80356154fa6154f58261545a565b615429565b81815288602083850101111561550f57600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b6000806040838503121561554457600080fd5b8235915060208301356152e181615173565b80356001600160601b03811681146128ef57600080fd5b6000806040838503121561558057600080fd5b823561558b81615173565b9150612e9f60208401615556565b600081518084526020808501945080840160005b838110156155cc57815160ff16875295820195908201906001016155ad565b509495945050505050565b6020815260006121ed6020830184615599565b600061016082518452602083015160208501526040830151816040860152615614828601826151d1565b9150506060830151848203606086015261562e82826151d1565b915050608083015161564b60808601826001600160a01b03169052565b5060a083015160a085015260c083015160c085015260e083015184820360e08601526156778282615599565b91505061010080840151858303828701526156928382615599565b9250505061012080840151858303828701526156ae8382615599565b9250505061014080840151858303828701526135708382615599565b6000604082016040835280855180835260608501915060608160051b860101925060208088016000805b8481101561574857888703605f19018652825180518089529085019085890190845b8181101561573257835183529287019291870191600101615716565b50909850505094830194918301916001016156f4565b50505085840381870152505050612f8f81856155ea565b60008060006060848603121561577457600080fd5b833561577f81615173565b925061578d60208501615255565b91506152a560408501615556565b600067ffffffffffffffff8211156157b5576157b5615413565b5060051b60200190565b600082601f8301126157d057600080fd5b813560206157e06154f58361579b565b82815260059290921b840181019181810190868411156157ff57600080fd5b8286015b84811015615821576158148161535b565b8352918301918301615803565b509695505050505050565b60008060006060848603121561584157600080fd5b833561584c81615173565b9250602084013567ffffffffffffffff8082111561586957600080fd5b615875878388016157bf565b9350604086013591508082111561588b57600080fd5b50615898868287016157bf565b9150509250925092565b85815260a0602082015260006158bb60a0830187615599565b82810360408401526158cd8187615599565b905082810360608401526158e18186615599565b905082810360808401526158f58185615599565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff80831681851680830382111561593657615936615901565b01949350505050565b634e487b7160e01b600052600160045260246000fd5b60006001600160601b038381169083168181101561597557615975615901565b039392505050565b60006001600160601b0380831681851680830382111561593657615936615901565b60006001600160601b03808316818516818304811182151516156159c5576159c5615901565b02949350505050565b634e487b7160e01b600052601260045260246000fd5b60006001600160601b03808416806159fe576159fe6159ce565b92169190910492915050565b6001600160a01b0385168152836020820152608060408201526000615a326080830185615599565b8281036060840152615a448185615599565b979650505050505050565b6000816000190483118215151615615a6957615a69615901565b500290565b600067ffffffffffffffff80831681851680830382111561593657615936615901565b600082821015615aa357615aa3615901565b500390565b6001600160a01b0384168152826020820152606060408201526000612f8f6060830184615599565b634e487b7160e01b600052603260045260246000fd5b60006001600160601b0380841680615b0057615b006159ce565b92169190910692915050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115615b3e57600080fd5b8260051b8083602087013760009401602001938452509192915050565b6020808252818101839052600090600560408085019086831b86010187855b88811015615beb57878303603f190184528135368b9003601e19018112615ba057600080fd5b8a01803567ffffffffffffffff811115615bb957600080fd5b80871b36038c1315615bca57600080fd5b615bd785828a8501615b0c565b958801959450505090850190600101615b7a565b509098975050505050505050565b600060ff821660ff84168060ff03821115615c1657615c16615901565b019392505050565b600067ffffffffffffffff8381169083168181101561597557615975615901565b600060208284031215615c5157600080fd5b815167ffffffffffffffff811115615c6857600080fd5b8201601f81018413615c7957600080fd5b8051615c876154f58261545a565b818152856020838501011115615c9c57600080fd5b612f8f8260208301602086016151a5565b600060ff821660ff811415615cc457615cc4615901565b60010192915050565b600081615cdc57615cdc615901565b506000190190565b6000600019821415615cf857615cf8615901565b5060010190565b600082615d0e57615d0e6159ce565b500490565b60008219821115615d2657615d26615901565b500190565b6000815260008251615d448160018501602087016151a5565b9190910160010192915050565b7f630000000000000000000000000000000000000000000000000000000000000081526001600160e01b03198360e01b1660018201527f80600e6000396000f30000000000000000000000000000000000000000000000600582015260008251615dc281600e8501602087016151a5565b91909101600e019392505050565b600060ff821680615de357615de3615901565b6000190192915050565b600060ff821660ff841680821015615e0757615e07615901565b90039392505050565b60006020808385031215615e2357600080fd5b825167ffffffffffffffff80821115615e3b57600080fd5b818501915085601f830112615e4f57600080fd5b8151615e5d6154f58261579b565b818152600591821b8401850191858201919089841115615e7c57600080fd5b8686015b84811015615f0857805186811115615e985760008081fd5b8701603f81018c13615eaa5760008081fd5b888101516040615ebc6154f58361579b565b82815291851b83018101918b8101908f841115615ed95760008081fd5b938201935b83851015615ef75784518252938c0193908c0190615ede565b885250505093880193508701615e80565b50909998505050505050505050565b600060ff831680615f2a57615f2a6159ce565b8060ff84160691505092915050565b600063ffffffff838116908316818110156159755761597561590156fea2646970667358221220b32567d527525dd4edb018bbe87995472534aed46a567762ac20e3f8b96cb5ce64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061034a5760003560e01c806399081a26116101bb578063c87b56dd116100f7578063e985e9c511610095578063fb774eb81161006f578063fb774eb814610a26578063fca840ae14610a46578063fe7e997e14610a66578063ffcf6d3a14610a8657600080fd5b8063e985e9c5146109d3578063ecc1113f146109f3578063fa73299214610a1357600080fd5b8063d7dc6819116100d1578063d7dc6819146108fd578063e5cbd48e14610964578063e63bedde14610984578063e7477383146109b257600080fd5b8063c87b56dd1461089b578063d276db98146108bb578063d7be245c146108db57600080fd5b8063b88d4fde11610164578063be2cfdff1161013e578063be2cfdff14610827578063beace31f14610855578063c06c822f14610868578063c5c8beeb1461087b57600080fd5b8063b88d4fde146107cc578063b88ea014146107e7578063bc7b6d621461080757600080fd5b8063a2c7172711610195578063a2c7172714610779578063b3b9f3a71461078c578063b3f9e4cb146107ac57600080fd5b806399081a26146106f25780639a74cb6414610739578063a22cb4651461075957600080fd5b806351d4d67e1161028a5780636e9821c211610233578063900cf0cf1161020d578063900cf0cf1461064d5780639066fdf8146106775780639531b94d1461069757806395d89b41146106ac57600080fd5b80636e9821c2146105dd57806370a0823114610619578063750656f61461063a57600080fd5b8063608cceb011610264578063608cceb0146105885780636352211e146105a85780636571595e146105c857600080fd5b806351d4d67e14610520578063570f67ad146105405780635917c58f1461055557600080fd5b80631056b9d5116102f757806323b872dd116102d157806323b872dd146104d057806323cf3118146104eb57806342842e0e146104d0578063504cdacf1461050b57600080fd5b80631056b9d51461047a5780631393916a1461048d57806318160ddd146104ad57600080fd5b806306fdde031161032857806306fdde03146103d3578063081812fc14610422578063095ea7b31461045a57600080fd5b806301ffc9a71461034f5780630251f62c1461038457806303bfe17e146103a6575b600080fd5b34801561035b57600080fd5b5061036f61036a366004615149565b610ab7565b60405190151581526020015b60405180910390f35b34801561039057600080fd5b506103a461039f366004615188565b610b54565b005b3480156103b257600080fd5b506103bb610c70565b6040516001600160601b03909116815260200161037b565b3480156103df57600080fd5b5060408051808201909152601681527f4e7567672046756e6769626c6520546f6b656e2056310000000000000000000060208201525b60405161037b91906151fd565b34801561042e57600080fd5b5061044261043d366004615210565b610c7f565b6040516001600160a01b03909116815260200161037b565b34801561046657600080fd5b506103a4610475366004615229565b610c92565b6103a4610488366004615267565b610d41565b34801561049957600080fd5b506103a46104a83660046152ae565b610f17565b3480156104b957600080fd5b506104c2610f85565b60405190815260200161037b565b3480156104dc57600080fd5b506103a461034a3660046152ec565b3480156104f757600080fd5b506103a4610506366004615188565b610f9e565b34801561051757600080fd5b506103bb610ffd565b34801561052c57600080fd5b506103a461053b36600461532d565b611007565b34801561054c57600080fd5b506103a4611161565b34801561056157600080fd5b5060005461057690600160a01b900460ff1681565b60405160ff909116815260200161037b565b34801561059457600080fd5b506103bb6105a3366004615188565b6111e7565b3480156105b457600080fd5b506104426105c3366004615210565b6111fd565b3480156105d457600080fd5b506103bb61120b565b3480156105e957600080fd5b5061036f6105f8366004615188565b6001600160a01b031660009081526320002467602052604090205460ff1690565b34801561062557600080fd5b506104c2610634366004615188565b50600090565b6103a4610648366004615188565b611215565b34801561065957600080fd5b506106626112e8565b60405163ffffffff909116815260200161037b565b34801561068357600080fd5b506103a461069236600461536c565b6112f2565b3480156106a357600080fd5b506103bb6113cb565b3480156106b857600080fd5b5060408051808201909152600681527f4e554747465400000000000000000000000000000000000000000000000000006020820152610415565b3480156106fe57600080fd5b5061071261070d36600461532d565b6113d5565b6040805193151584526001600160601b03928316602085015291169082015260600161037b565b34801561074557600080fd5b506103a4610754366004615398565b6114d8565b34801561076557600080fd5b506103a46107743660046152ae565b6114f0565b6103a461078736600461532d565b61155e565b34801561079857600080fd5b506103a46107a7366004615188565b611924565b3480156107b857600080fd5b506104426107c7366004615210565b611948565b3480156107d857600080fd5b506103a461034a366004615482565b3480156107f357600080fd5b506104c2610802366004615188565b61195b565b34801561081357600080fd5b506103a4610822366004615531565b611966565b34801561083357600080fd5b5061083c6119f4565b60405167ffffffffffffffff909116815260200161037b565b6103a461086336600461532d565b6119fe565b6103a4610876366004615188565b611ac3565b34801561088757600080fd5b506103a461089636600461556d565b611c46565b3480156108a757600080fd5b506104156108b6366004615210565b611db2565b3480156108c757600080fd5b506103a46108d6366004615188565b611dbd565b3480156108e757600080fd5b506108f0611f1f565b60405161037b91906155d7565b34801561090957600080fd5b5061091d610918366004615188565b611f29565b604080516001600160601b0396871681529486166020860152929094169183019190915263ffffffff1660608201526001600160a01b03909116608082015260a00161037b565b34801561097057600080fd5b50600054610442906001600160a01b031681565b34801561099057600080fd5b506109a461099f366004615210565b61203e565b60405161037b9291906156ca565b3480156109be57600080fd5b5060005461057690600160a81b900460ff1681565b3480156109df57600080fd5b5061036f6109ee36600461532d565b6121e1565b3480156109ff57600080fd5b506103bb610a0e366004615188565b6121f4565b6103a4610a21366004615188565b61220a565b348015610a3257600080fd5b506103a4610a41366004615267565b612454565b348015610a5257600080fd5b506103a4610a6136600461575f565b6125cb565b348015610a7257600080fd5b506103a4610a8136600461582c565b612700565b348015610a9257600080fd5b50610aa6610aa1366004615188565b612820565b60405161037b9594939291906158a2565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480610b1a57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610b4e57506001600160e01b031982167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b6000610b5f8261285e565b9050610b6b33826128f4565b610bbc5760405162461bcd60e51b815260206004820152600360248201527f4c3a30000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000610bc6612943565b90506000610bd2612958565b90506000610be38285856000612963565b506001600160a01b038616600090815262042074602052604090208190559050604080516001600160a01b03871681526001600160601b03851660208201527fdf65fae456ee5bcd916efcb9b5ad07667d7fc396aff61536c465f280393fbd3e910160405180910390a1610c56856129b5565b610c6984846001600160601b0316612a71565b5050505050565b6000610c7a612943565b905090565b6000610b4e610c8d83612acc565b612ae6565b6000610ca5610ca083612acc565b61285e565b9050610cb133826128f4565b610ce35760405162461bcd60e51b8152602060048201526003602482015262473a3160e81b6044820152606401610bb3565b60008281526204206b602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b610d4b3384612b78565b610d975760405162461bcd60e51b815260206004820152600360248201527f533a3600000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b600080610da5848487612b8c565b6020810151919350915060ff1c60011415610e025760405162461bcd60e51b815260206004820152600360248201527f533a3700000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6020810151158015610e185750805160ff1c6001145b15610e9957610e278282612bea565b7fdcd75b8c1f9c84e8b7d26df979d7ddbc4139b72f6c8e0e7123bb63d63ba1c325848487610e5434612cc0565b604080516001600160a01b03958616815261ffff94909416602085015291909316908201526001600160601b03909116606082015260800160405180910390a1610c69565b610ea38282612cd6565b7f3bbfe02e9ee64811b7404130d1c8a263edbb6ab73af1dc502dd56d43a3ddd1a3848487610ed034612cc0565b604080516001600160a01b03958616815261ffff94909416602085015291909316908201526001600160601b03909116606082015260800160405180910390a15050505050565b610f1f612de3565b6001600160a01b038216600081815263200024676020818152604092839020805460ff191686151590811790915592519283529092917f01370ae6c2f4315d0915b457ec604f483d0ff6f34a7fdd5c3401ae39fda86aa9910160405180910390a2505050565b6000610f8f612e2e565b67ffffffffffffffff16905090565b610fa6612de3565b806204206d80546001600160a01b0319166001600160a01b0392831617905560405190821681527fc97e86a927b4a897832650767255fd568e377e7fbe9586c81d26b77a2c3ffc8b9060200160405180910390a150565b6000610c7a612e44565b61101133836128f4565b61105d5760405162461bcd60e51b815260206004820152600360248201527f533a3800000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b60006110698284612e5a565b6001600160a01b03808516600090815262042075602090815260408083209389168352600190930190529081205591506110a09050565b6110a981612ea8565b156110dd576110ce826001600160a01b03166000908152620420756020526040812055565b6110d88383612f98565b6110fc565b6110fc836110ee8360200151613033565b6001600160601b0316612a71565b7f10c1106c1b3c266f6cf55047c56a839a002c11736bbf9c4acdec566e80677e9b828461112c846020015161305a565b604080516001600160a01b03948516815293909216602084015263ffffffff16908201526060015b60405180910390a1505050565b611169612de3565b60006111766204206e5490565b90508061118c336001600160601b038316612a71565b6111a76bffffffffffffffffffffffff1983165b6204206e55565b6040516001600160601b03821681527f8e4dbe2f73d3458c68bca94210eabefac52a4d20c038a8e50197ac9db654291b9060200160405180910390a15050565b60006111f282611f29565b509195945050505050565b6000610b4e610ca083612acc565b6000610c7a613074565b6112236101f4612710615917565b63ffffffff16816001600160a01b031610801561124a57506101f46001600160a01b038216115b61127c5760405162461bcd60e51b8152602060048201526003602482015262473a3160e81b6044820152606401610bb3565b6001600160a01b0381166000908152620420726020526040902054156112ca5760405162461bcd60e51b8152602060048201526003602482015262239d1960e91b6044820152606401610bb3565b6112d2613087565b6112db8161326c565b6112e533826133aa565b50565b6000610c7a612958565b6112fc3383612b78565b6113485760405162461bcd60e51b815260206004820152600360248201527f503a4100000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b600061135383613407565b905061135f818361346f565b905061136b818361357a565b6001600160a01b03841660008181526204207260209081526040918290208490558151928352820183905260ff8516908201529091507fe0b01689336e903dba5ec8bc01d79a4ec6aa4f944cd16d45d32700fb594b74ae90606001611154565b6000610c7a613609565b6001600080806113e58587612e5a565b80519092501515905061143e57846001600160a01b0316816040015163ffffffff16141561142d57611426611418613609565b6001600160601b0316613627565b925061149d565b6000806000935093509350506114d1565b602081015160ff1c6001141561145357600093505b6114608160200151613033565b915061146f8160000151613033565b9250611479612943565b6001600160601b0316836001600160601b0316101561149d5761149a612943565b92505b6001600160601b0383166114ba5766038d7ea4c6800092506114cf565b6114cc836001600160601b0316613678565b92505b505b9250925092565b6114e0612de3565b6114eb81848461369b565b505050565b3360008181526204206c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61156833836128f4565b6115b45760405162461bcd60e51b815260206004820152600360248201527f533a3000000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6000806115c18385612e5a565b91509150826001600160a01b0316816040015163ffffffff161480156115e657508051155b156116fe5766038d7ea4c680003410156116425760405162461bcd60e51b815260206004820152600360248201527f533a3100000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6020810151156116545761165461593f565b60006116738260400151836060015161166c34612cc0565b6000612963565b508084559050611681613087565b61168a8461326c565b611696600030866137f5565b7fb05be3e18f19a4aac09f77432c65062f81615fefa61e76300a99fb2d08c019138483606001516116c634612cc0565b604080516001600160a01b0394851681529390921660208401526001600160601b03169082015260600160405180910390a15061191e565b805161174c5760405162461bcd60e51b815260206004820152600360248201527f533a3400000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6020810151156117da57806040015163ffffffff1661176e826020015161305a565b63ffffffff1610156117c25760405162461bcd60e51b815260206004820152600360248201527f533a5200000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b602081015160ff1c600114156117da576117da61593f565b805160ff1c600114156118b4576117ef612943565b6001600160601b03163410156118475760405162461bcd60e51b815260206004820152600360248201527f533a3500000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6118518282612bea565b7f8e9681d7ef6204b5eb1f7e898910b723018e455d09ba77c2c9e43346968c887f833361187d34612cc0565b604080516001600160a01b0394851681529390921660208401526001600160601b03169082015260600160405180910390a161191e565b6118be8282612cd6565b7f695e0d4736a959eec71a66de118059220f6144b53eb2ed3e6ca8508ce8cd1f0a83336118ea34612cc0565b604080516001600160a01b0394851681529390921660208401526001600160601b0316908201526060015b60405180910390a15b50505050565b600061192f82613844565b905061194433826001600160601b0316612a71565b5050565b6000610b4e61195683612acc565b613a57565b6000610b4e82613a62565b6119783361197384612acc565b612b78565b6119c45760405162461bcd60e51b815260206004820152600360248201527f463a3500000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b600091825262042071602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000610c7a612e2e565b611a06612de3565b6101f46001600160a01b038316108015611a2857506001600160a01b03821615155b611a5a5760405162461bcd60e51b8152602060048201526003602482015262473a3160e81b6044820152606401610bb3565b6001600160a01b038216600090815262042072602052604090205415611aa85760405162461bcd60e51b8152602060048201526003602482015262239d1960e91b6044820152606401610bb3565b611ab0613087565b611ab98261326c565b61194481836133aa565b600080600080611ad285611f29565b945094509450945050611ae48561285e565b6001600160a01b0316306001600160a01b031614611b0457611b0461593f565b34846001600160601b03161115611b5d5760405162461bcd60e51b815260206004820152600360248201527f4c3a3300000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b611b6684613b0d565b6000611b70612943565b9050600080611b828585856000612963565b6001600160a01b038a1660009081526204207460205260408120839055919350915087611bae34612cc0565b611bb89190615955565b9050600082611bc7838a61597d565b611bd1919061597d565b604080516001600160a01b038d1681526001600160601b038c811660208301528b168183015290519192507f55ab9f648a42ab2ae7eed81f0683a7bae5d54989d8125f397a88f72bec826917919081900360600190a1611c3a86826001600160601b0316612a71565b50505050505050505050565b6000611c518361285e565b9050611c5d33826128f4565b611ca95760405162461bcd60e51b815260206004820152600360248201527f533a4100000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b611cb1612943565b6001600160601b0316826001600160601b03161015611d125760405162461bcd60e51b815260206004820152600360248201527f533a4200000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b611d1b836129b5565b600080611d288584612e5a565b8051919350915015611d3c57611d3c61593f565b6000611d4c600085876001612963565b50808455604080516001600160a01b03808a168252871660208201526001600160601b038816918101919091529091507f3d175b4f67d380f8c4185f649f2cfeda5da34c1156302187ac843b620f9c9cd3906060015b60405180910390a1505050505050565b6060610b4e82613c44565b6204206d546001600160a01b031680611e185760405162461bcd60e51b815260206004820152600360248201527f543a3400000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6000611e2383613407565b90506000611e3084613844565b6040517f80011aa70000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015260248201859052336044830152919250908416906380011aa7906001600160601b038416906064016000604051808303818588803b158015611ea757600080fd5b505af1158015611ebb573d6000803e3d6000fd5b5050604080516001600160a01b038089168252891660208201529081018690523360608201526001600160601b03851660808201527f58ca548c1fd63f641dfb02f79df36d4f29bd995f0733d2ed3595b6cfde7db4e1935060a00191506119159050565b6060610c7a613d5e565b600080600080600080611f53876001600160a01b0316600090815262042074602052604090205490565b905080611fa25760405162461bcd60e51b815260206004820152600360248201527f4c3a3400000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6000611fad82613033565b90506000611fb9612943565b9050612710611fc960648461599f565b611fd391906159e4565b9650611fdf878361597d565b9750806001600160601b0316886001600160601b0316101561200a576120058882615955565b61200d565b60005b95506103e861201b8461305a565b6120259190615917565b945061203083613d6e565b935050505091939590929450565b60606120a66040518061016001604052806000815260200160008152602001606081526020016060815260200160006001600160a01b031681526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b60008060008060006120bf6120ba89612acc565b613d82565b945094509450945094506120d284613d9e565b9650604051806101600160405280600181526020014281526020016040518060400160405280600981526020017f4e7567674654205631000000000000000000000000000000000000000000000081525081526020016040518060400160405280601681526020017f4e7567672046756e6769626c6520546f6b656e20563100000000000000000000815250815260200161218e61216f8b612acc565b6001600160a01b03166000908152620420726020526040902054151590565b6121995760006121a5565b6121a5610ca08b612acc565b6001600160a01b031681526020018981526020018681526020018581526020018481526020018381526020018281525095505050505050915091565b60006121ed82846128f4565b9392505050565b60006121ff82611f29565b509295945050505050565b600080600080600061221b86611f29565b945063ffffffff1694509450945094506122348661285e565b6001600160a01b0316306001600160a01b0316146122545761225461593f565b612274866001600160a01b03166000908152620420746020526040812055565b600061227e612958565b90503363ffffffff82166001600160601b038516106122f0576122a133846128f4565b6122ed5760405162461bcd60e51b815260206004820152600360248201527f4c3a3100000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b50815b60006122fb34612cc0565b9050806001600160601b0316886001600160601b0316111561235f5760405162461bcd60e51b815260206004820152600360248201527f4c3a3200000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b600061236b8883615955565b90506000612379828961597d565b604080516001600160a01b038e1681526001600160601b038c811660208301528b168183015290519192507f55ab9f648a42ab2ae7eed81f0683a7bae5d54989d8125f397a88f72bec826917919081900360600190a1604080516001600160a01b038d81168252861660208201526001600160601b038c168183015290517f563fb66b43e6ac55166c353532257057a2fe86a1566c988840baecf6bca1025a9181900360600190a161242a89613b0d565b61243d84826001600160601b0316612a71565b612447848c612f98565b5050505050505050505050565b61245e3384612b78565b6124aa5760405162461bcd60e51b815260206004820152600360248201527f533a3900000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b60006124b7838386612b8c565b6001600160a01b038086166000908152620420756020908152604080832061ffff891684526002018252808320938a168352600190930190529081205591506124fd9050565b61250681612ea8565b15612547576001600160a01b0383166000908152620420756020908152604080832061ffff861684526002019091528120556125428483613ebc565b612560565b6125606125538561285e565b6110ee8360200151613033565b7f95e8db1d2cc4bd26402c98c45fdb7ff875bb955206591a210b51aa82b4ba5acb838386612591856000015161305a565b604080516001600160a01b03958616815261ffff949094166020850152919093169082015263ffffffff9091166060820152608001611915565b6125d53384612b78565b6126215760405162461bcd60e51b815260206004820152600360248201527f533a4300000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b61262b8383614013565b600080612639858587612b8c565b805191935091501561268d5760405162461bcd60e51b815260206004820152600360248201527f533a4400000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b600061269d600087866001612963565b5080845590507f77cfc3b2aafc5344a53b50b3c7938afac3d04e0f564e929aa8d1f398e67f1ccc86866126cf84613033565b604080516001600160a01b03909416845261ffff90921660208401526001600160601b031690820152606001611da2565b61270a3384612b78565b6127565760405162461bcd60e51b815260206004820152600360248201527f503a4200000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b81516008148015612768575080516008145b6127b45760405162461bcd60e51b815260206004820152600360248201527f503a4300000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b60006127bf84613407565b90506127cc818484614112565b6001600160a01b0385166000908152620420726020526040902081905590507f73904d03f919661d854e7b284dd6f818c038e7cce6237422aca32cc599a08267848285856040516119159493929190615a0a565b600060608060608061283186613d82565b939a9299509097509550909350915050565b640100042069805463ffffffff19164363ffffffff16179055565b6001600160a01b03811660009081526204207260205260408120546128c55760405162461bcd60e51b815260206004820152600560248201527f543a393a320000000000000000000000000000000000000000000000000000006044820152606401610bb3565b506001600160a01b03818116600090815262042069602052604090205416806128ef575030919050565b919050565b6000826001600160a01b0316826001600160a01b031614806121ed5750506001600160a01b0390811660009081526204206c602090815260408083209490931682529290925290205460ff1690565b6000610c7a6129536204206e5490565b61412e565b6000610c7a4361417e565b60008061297082876141bf565b915061297c8286614210565b915082156129925761298f82600161422d565b91505b61299c8285614264565b90925090506129aa826142be565b915094509492505050565b6129bf3382612b78565b80156129db5750306129d082612ae6565b6001600160a01b0316145b612a275760405162461bcd60e51b815260206004820152600360248201527f4e3a3100000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6001600160a01b0381166000908152620420696020908152604080832080546001600160a01b03199081169091556204206b909252909120805490911690556112e53330836137f5565b600080600080600085875af19050806114eb5760405162461bcd60e51b815260206004820152600360248201527f5a3a3000000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b60006001600160a01b03821115612ae257600080fd5b5090565b6001600160a01b0381166000908152620420726020526040812054612b4d5760405162461bcd60e51b815260206004820152600560248201527f543a393a310000000000000000000000000000000000000000000000000000006044820152606401610bb3565b620420695b6001600160a01b0392831660009081526002919091016020526040902054909116919050565b60006121ed83612b878461285e565b6128f4565b6040805160808101825260008082526020808301829052828401829052606083018290526001600160a01b038716825262042075815283822061ffff8716835260020190529182209150612be0828461430a565b9050935093915050565b6020810151158015612bfc5750805115155b612c0857612c0861593f565b805160ff1c600114612c1c57612c1c61593f565b6000806000612c4d846000015185604001516001612c3a9190615917565b8660600151612c4834612cc0565b6143aa565b82885560408701519295509093509150612c8190600090612c7b90612c73906001615917565b8751906141bf565b9061422d565b856001016000612c948760000151613d6e565b6001600160a01b03168152602081019190915260400160002055610c69612cbb828461597d565b613b0d565b60006001600160601b03821115612ae257600080fd5b8051612ce19061305a565b63ffffffff16816040015163ffffffff161115612d405760405162461bcd60e51b815260206004820152600360248201527f533a4600000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b80606001516001600160a01b0316612d5b8260000151613d6e565b6001600160a01b031614612d95578051600183016000612d7a83613d6e565b6001600160a01b031681526020810191909152604001600020555b6000806000612dcc84600001518560600151612db034612cc0565b612dbd8860200151613033565b612dc7919061597d565b614457565b82885591945092509050610c69612cbb828461597d565b3360009081526320002467602081905260409091205460ff166112e55760405162461bcd60e51b8152602060048201526003602482015262543a3160e81b6044820152606401610bb3565b6000610c7a612e3e6204206e5490565b60c01c90565b6000610c7a612e546204206e5490565b60601c90565b6040805160808101825260008082526020808301829052828401829052606083018290526001600160a01b03861682526204207590529182209150612e9f828461430a565b90509250929050565b6000816020015160001415612eff5760405162461bcd60e51b815260206004820152600360248201527f533a4500000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6000612f0e836000015161305a565b63ffffffff16836040015163ffffffff161190506000612f318460000151613d6e565b6001600160a01b0316612f478560200151613d6e565b6001600160a01b03161490506000612f698560000151600160ff9190911c1490565b8015612f7c5750602085015160ff1c6001145b9050818015612f8f57508080612f8f5750825b95945050505050565b30612fa28261285e565b6001600160a01b031614612ff85760405162461bcd60e51b815260206004820152600360248201527f4e3a3000000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6001600160a01b038181166000908152620420696020526040902080546001600160a01b0319169184169190911790556119443083836137f5565b6000610b4e6130556509184e72a00060a085901c66ffffffffffffff16615a4f565b612cc0565b6000610b4e63ffffffff60d884901c1661447f565b61447f565b6000610c7a6130846204206e5490565b90565b600061309234612cc0565b905060006130a16204206e5490565b905060008060006130b184614492565b9250925092506000806130c3866144b7565b509250509150816001600160601b0316876001600160601b031610156131115760405162461bcd60e51b8152602060048201526003602482015262543a3160e81b6044820152606401610bb3565b600061311d8389615955565b90506131288161451e565b613132908361597d565b91506132156111a0613144848761597d565b6131f6613151868d615955565b61315b908a61597d565b6131b06131698c6001615a6e565b77ffffffffffffffffffffffffffffffffffffffffffffffff8e1660c09190911b7fffffffffffffffff000000000000000000000000000000000000000000000000161790565b7fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff1660609190911b77ffffffffffffffffffffffff000000000000000000000000161790565b6bffffffffffffffffffffffff19166001600160601b03919091161790565b7fcc7b20c8500e3dfc952e445cc296459e4e7148bead08f530844981e1c1236e4e613240838a615955565b604080516001600160601b03928316815291851660208301520160405180910390a15050505050505050565b6001600160a01b0381166000908152620420726020526040902054156132d45760405162461bcd60e51b815260206004820152600360248201527f503a3500000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6000816132e2600143615a91565b6040517f4206900000000000000000000000000000000000000000000000000000000000602082015260609290921b6bffffffffffffffffffffffff191660238301524060378201526057016040516020818303038152906040528051906020012060001c905060008061335583614539565b6001600160a01b0386166000908152620420726020526040902082905590925090507f3c2693eb3bc9fd62db9b727df67972a7372cca5a21f9b4a5c05d48363273c24784838360405161191593929190615aa8565b6001600160a01b03818116600081815262042069602052604080822080546001600160a01b0319169487169485179055519192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0381166000908152620420726020526040902054806128ef5760405162461bcd60e51b815260206004820152600360248201527f503a3000000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b600060ff82166134a75760405162461bcd60e51b8152602060048201526003602482015262281d2360e91b6044820152606401610bb3565b60006134b48460006148ef565b905060006134c38560406148ef565b90506000818560ff16815181106134dc576134dc615ad0565b60200260200101519050828560ff16815181106134fb576134fb615ad0565b6020026020010151828660ff168151811061351857613518615ad0565b602002602001019060ff16908160ff168152505080838660ff168151811061354257613542615ad0565b602002602001019060ff16908160ff16815250506135628660008561496f565b93506135708460408461496f565b9695505050505050565b6000806135888460806148ef565b905060006135978560c06148ef565b90506000818560ff16815181106135b0576135b0615ad0565b602002602001019060ff16908160ff16815250506000828560ff16815181106135db576135db615ad0565b602002602001019060ff16908160ff16815250506135fb8560808461496f565b9250612f8f8360c08361496f565b600061361e6136196204206e5490565b6144b7565b50919392505050565b60008061363a6509184e72a00084615ae6565b6001600160601b0316111561366f576509184e72a00061365a81846159e4565b61366590600161597d565b610b4e919061599f565b610b4e826149eb565b6000610b4e61271061368c846127d861599f565b61369691906159e4565b613627565b60006136a6826149fe565b905060008160ff16116136fb5760405162461bcd60e51b815260206004820152600360248201527f463a3000000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b60006137278484604051602001613713929190615b5b565b604051602081830303815290604052614a0e565b60ff861660009081526204207060209081526040822080546001810182559083529082200180547fffffffffffffffffffffff000000000000000000000000000000000000000000166001600160a01b03841674ff000000000000000000000000000000000000000060a088901b16171790556204206f549192506137ab82614ac2565b905083818860ff16815181106137c3576137c3615ad0565b602002602001018181516137d79190615bf9565b60ff169052506137e78282614acf565b6204206f5550505050505050565b806001600160a01b0316826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000806138508361285e565b90503061385c84612ae6565b6001600160a01b0316148015613877575061387733826128f4565b6138c35760405162461bcd60e51b815260206004820152600360248201527f543a3300000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b60006138d06204206e5490565b6001600160a01b0385166000908152620420696020908152604080832080546001600160a01b03199081169091556204206b835281842080548216905562042075835281842084905562042074835281842084905562042072835281842084905562042071909252822080549091169055909150613950908390866137f5565b60008061395c83614492565b509150915061396a8361412e565b945060018267ffffffffffffffff1610156139875761398761593f565b846001600160601b0316816001600160601b031610156139a9576139a961593f565b613a0e6111a06139b98784615955565b6131b06139c7600187615c1e565b77ffffffffffffffffffffffffffffffffffffffffffffffff881660c09190911b7fffffffffffffffff000000000000000000000000000000000000000000000000161790565b604080516001600160601b03871681523360208201527e96b8566d099a5618a665405b3df20d5a7f2293fce2fc9405d36a2ee3deab3f910160405180910390a150505050919050565b60006204206f612b52565b600080600080613a70614add565b50925092509250846001600160a01b031682148015613a8e57508215155b15613a9b57949350505050565b6001600160a01b0385166000908152620420726020526040902054935083613b055760405162461bcd60e51b815260206004820152600360248201527f503a3100000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b505050919050565b806001600160601b0316341015613b665760405162461bcd60e51b815260206004820152600360248201527f543a3200000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6000613b736204206e5490565b90506000613b808361451e565b9050613bfa6111a0613b92838561597d565b6131f6613b9f8588615955565b613ba98760601c90565b613bb3919061597d565b7fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff871660609190911b77ffffffffffffffffffffffff000000000000000000000000161790565b7fcc7b20c8500e3dfc952e445cc296459e4e7148bead08f530844981e1c1236e4e613c258285615955565b604080516001600160601b039283168152918416602083015201611154565b60606000613c5183612acc565b6001600160a01b0380821660009081526204207160205260408120549293509116613c87576000546001600160a01b0316613c90565b613c9082613a57565b6000546040517f191adaf8000000000000000000000000000000000000000000000000000000008152306004820152602481018790526001600160a01b03838116604483015260ff600160a01b840481166064840152600160a81b840416608483015292935091169063191adaf89060a40160006040518083038186803b158015613d1a57600080fd5b505afa158015613d2e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613d569190810190615c3f565b949350505050565b6060610c7a6204206f5b54614ac2565b6000610b4e6001600160a01b038316612acc565b6000606080606080613d9386613a62565b945061283185614b0d565b6060815167ffffffffffffffff811115613dba57613dba615413565b604051908082528060200260200182016040528015613ded57816020015b6060815260200190600190039081613dd85790505b50905060005b82518160ff161015613eb657828160ff1681518110613e1457613e14615ad0565b602002602001015160ff1660001415613e5d576040805160008152602081019091528251839060ff8416908110613e4d57613e4d615ad0565b6020026020010181905250613ea4565b613e8381848360ff1681518110613e7657613e76615ad0565b6020026020010151614b50565b828260ff1681518110613e9857613e98615ad0565b60200260200101819052505b80613eae81615cad565b915050613df3565b50919050565b613ec63383612b78565b613f125760405162461bcd60e51b815260206004820152600360248201527f503a3200000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6000613f1d83613407565b61ffff83166000908152620420736020526040902054909150613f825760405162461bcd60e51b815260206004820152600360248201527f503a3300000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b61ffff821660009081526204207360205260408120805491613fa383615ccd565b9190505550613fb28183614dfd565b6001600160a01b03841660008181526204207260209081526040918290208490558151928352820183905261ffff8516908201529091507f1e3ac88633ac111203e2a7614365c5e3df507302c9fb545dd85d8fcef753afce90606001611154565b61401d3383612b78565b6140695760405162461bcd60e51b815260206004820152600360248201527f503a3400000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b600061407483613407565b90506140808183614ec0565b6001600160a01b03841660009081526204207260205260409020819055905061ffff8216600090815262042073602052604081208054916140c083615ce4565b9091555050604080516001600160a01b03851681526020810183905261ffff8416918101919091527f399c4ec95d9ea42a0f3dda50055e3a2901f9640121b0b29865e688c08188596b90606001611154565b60006141208460808561496f565b9050613d568160c08461496f565b600061413a8260c01c90565b67ffffffffffffffff1615614176576141538260c01c90565b67ffffffffffffffff166141678360601c90565b61417191906159e4565b610b4e565b600092915050565b6000610b4e610bb8604561419b6401000420695463ffffffff1690565b6141ab9063ffffffff1686615a91565b6141b59190615cff565b61306f9190615d13565b60007fff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff83167effffffff00000000000000000000000000000000000000000000000000000060d884901b16176121ed565b60006001600160a01b031983166001600160a01b038316176121ed565b60006121ed83600160ff85614243576000614246565b60015b60ff16811b600190921b6000190160ff919091161b19919091161790565b6000806142776509184e72a00084615ae6565b90506142b584603860a06142916509184e72a000886159e4565b6001600160601b0316811b600190921b6000190160ff919091161b19919091161790565b91509250929050565b60007fbfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82167f400000000000000000000000000000000000000000000000000000000000000017610b4e565b6040805160808101825260006020820181905291810182905260608101919091528254808252614338612958565b63ffffffff1660408301526001600160a01b038316606083015261435b81613d6e565b6001600160a01b0316836001600160a01b0316141561438057602082018190526143a3565b6001600160a01b0383166000908152600185016020908152604090912054908301525b5092915050565b6000806000806143b988613033565b9050846001600160601b03166143d7826001600160601b0316613678565b6001600160601b0316111561442e5760405162461bcd60e51b815260206004820152600360248201527f533a4700000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b61443b8787876000612963565b909450915061444a8186615955565b9250509450945094915050565b6000806000614470866144698861305a565b87876143aa565b92509250925093509350939050565b600063ffffffff821115612ae257600080fd5b60008060006144a18460c01c90565b92506144ad8460601c90565b9294929392915050565b6000806000806144c68561412e565b92506144d18361451e565b91506113886144e08660c01c90565b6144f49067ffffffffffffffff168561599f565b6144fe91906159e4565b90508061450b838561597d565b614515919061597d565b93509193509193565b600061271061452f6103e88461599f565b610b4e91906159e4565b600060608261458a5760405162461bcd60e51b815260206004820152600360248201527f503a3800000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6000614594613d5e565b6040805160088082526101208201909252919250602082016101008036833701905050915060006145c68560006148ef565b9050614606816000815181106145de576145de615ad0565b6020026020010151836000815181106145f9576145f9615ad0565b6020026020010151614f97565b614611906001615bf9565b8360008151811061462457614624615ad0565b602002602001019060ff16908160ff16815250506146698160018151811061464e5761464e615ad0565b6020026020010151836001815181106145f9576145f9615ad0565b614674906001615bf9565b8360018151811061468757614687615ad0565b602002602001019060ff16908160ff16815250506146cc816002815181106146b1576146b1615ad0565b6020026020010151836002815181106145f9576145f9615ad0565b6146d7906001615bf9565b836002815181106146ea576146ea615ad0565b602002602001019060ff16908160ff168152505060608160038151811061471357614713615ad0565b602002602001015160ff16101561478c576147558160048151811061473a5761473a615ad0565b6020026020010151836003815181106145f9576145f9615ad0565b614760906001615bf9565b8360038151811061477357614773615ad0565b602002602001019060ff16908160ff16815250506148da565b60c0816003815181106147a1576147a1615ad0565b602002602001015160ff161015614801576147e3816004815181106147c8576147c8615ad0565b6020026020010151836004815181106145f9576145f9615ad0565b6147ee906001615bf9565b8360048151811061477357614773615ad0565b60fa8160038151811061481657614816615ad0565b602002602001015160ff161015614876576148588160048151811061483d5761483d615ad0565b6020026020010151836005815181106145f9576145f9615ad0565b614863906001615bf9565b8360058151811061477357614773615ad0565b6148a78160048151811061488c5761488c615ad0565b6020026020010151836006815181106145f9576145f9615ad0565b6148b2906001615bf9565b836006815181106148c5576148c5615ad0565b602002602001019060ff16908160ff16815250505b6148e68460008561496f565b93505050915091565b604080516008808252610120820190925292821c67ffffffffffffffff1692606091602082016101008036833701905050905060005b60088110156143a3578360ff1682828151811061494457614944615ad0565b60ff9092166020928302919091019091015260089390931c928061496781615ce4565b915050614925565b600060085b80156149d057614985600182615a91565b614990906008615a4f565b8361499c600184615a91565b815181106149ac576149ac615ad0565b602002602001015160ff16901b8217915080806149c890615ccd565b915050614974565b5067ffffffffffffffff60ff84161b19841681841b17613d56565b60006509184e72a00061366581846159e4565b600060ff821115612ae257600080fd5b60008082604051602001614a229190615d2b565b60405160208183030381529060405290506000815182604051602001614a49929190615d51565b60405160208183030381529060405290508051602082016000f092506001600160a01b038316614abb5760405162461bcd60e51b815260206004820152601160248201527f4445504c4f594d454e545f4641494c45440000000000000000000000000000006044820152606401610bb3565b5050919050565b6060610b4e8260006148ef565b60006121ed8360008461496f565b60008060006060614aec614ff3565b90945063ffffffff169250614b0084614539565b9495939490939092509050565b806060808080614b1e8560006148ef565b9350614b2b8660406148ef565b9250614b388660806148ef565b9150614b458660c06148ef565b905091939590929450565b606060ff8216614ba25760405162461bcd60e51b815260206004820152600360248201527f463a3100000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b81614bac81615dd0565b9250506000614bbe613d686204206f90565b8460ff1681518110614bd257614bd2615ad0565b602002602001015190508060ff168360ff1610614c315760405162461bcd60e51b815260206004820152600360248201527f463a3200000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b60ff84166000908152620420706020908152604080832080548251818502810185019093528083529192909190830182828015614ca557602002820191906000526020600020905b815474ffffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311614c79575b50505050509050600080600080600090505b8451811015614d6157600060a0868381518110614cd657614cd6615ad0565b602002602001015174ffffffffffffffffffffffffffffffffffffffffff16901c90508860ff168184614d099190615bf9565b60ff161115614d4257858281518110614d2457614d24615ad0565b602002602001015194508289614d3a9190615ded565b935050614d61565b614d4c8184615bf9565b92505080614d5981615ce4565b915050614cb7565b506001600160a01b038316614db85760405162461bcd60e51b815260206004820152600360248201527f463a3300000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b614dc1836150c0565b806020019051810190614dd49190615e10565b8260ff1681518110614de857614de8615ad0565b60200260200101519550505050505092915050565b600080614e0b8460406148ef565b805190915060ff600885901c81169190851690839083908110614e3057614e30615ad0565b602002602001015160ff16600014614e8a5760405162461bcd60e51b815260206004820152600360248201527f503a4400000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b80838360ff1681518110614ea057614ea0615ad0565b602002602001019060ff16908160ff16815250506135708660408561496f565b600080614ece8460406148ef565b905060ff600884901c811690841681614f0f5760405162461bcd60e51b8152602060048201526003602482015262281d2360e91b6044820152606401610bb3565b8060ff16838360ff1681518110614f2857614f28615ad0565b602002602001015160ff1614614f805760405162461bcd60e51b815260206004820152600360248201527f503a4500000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6000838360ff1681518110614ea057614ea0615ad0565b600060ff8216614fe95760405162461bcd60e51b815260206004820152600360248201527f503a3900000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6121ed8284615f17565b600080614ffe612958565b9050600061500b826150e1565b9050600061501a600183615a91565b4090508061506a5760405162461bcd60e51b815260206004820152600360248201527f453a3000000000000000000000000000000000000000000000000000000000006044820152606401610bb3565b6040805160208082019390935260e085901b6001600160e01b031916818301523060601b6bffffffffffffffffffffffff1916604482015281516038818303018152605890910190915280519101209391925050565b6060610b4e8260016150dc816001600160a01b0384163b615a91565b615124565b60006150f66401000420695463ffffffff1690565b63ffffffff16604561510a610bb885615f39565b63ffffffff1661511a9190615a4f565b610b4e9190615d13565b60408051603f83850101601f19168101909152818152818360208301863c9392505050565b60006020828403121561515b57600080fd5b81356001600160e01b0319811681146121ed57600080fd5b6001600160a01b03811681146112e557600080fd5b60006020828403121561519a57600080fd5b81356121ed81615173565b60005b838110156151c05781810151838201526020016151a8565b8381111561191e5750506000910152565b600081518084526151e98160208601602086016151a5565b601f01601f19169290920160200192915050565b6020815260006121ed60208301846151d1565b60006020828403121561522257600080fd5b5035919050565b6000806040838503121561523c57600080fd5b823561524781615173565b946020939093013593505050565b803561ffff811681146128ef57600080fd5b60008060006060848603121561527c57600080fd5b833561528781615173565b9250602084013561529781615173565b91506152a560408501615255565b90509250925092565b600080604083850312156152c157600080fd5b82356152cc81615173565b9150602083013580151581146152e157600080fd5b809150509250929050565b60008060006060848603121561530157600080fd5b833561530c81615173565b9250602084013561531c81615173565b929592945050506040919091013590565b6000806040838503121561534057600080fd5b823561534b81615173565b915060208301356152e181615173565b803560ff811681146128ef57600080fd5b6000806040838503121561537f57600080fd5b823561538a81615173565b9150612e9f6020840161535b565b6000806000604084860312156153ad57600080fd5b833567ffffffffffffffff808211156153c557600080fd5b818601915086601f8301126153d957600080fd5b8135818111156153e857600080fd5b8760208260051b85010111156153fd57600080fd5b6020928301955093506152a5918601905061535b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561545257615452615413565b604052919050565b600067ffffffffffffffff82111561547457615474615413565b50601f01601f191660200190565b6000806000806080858703121561549857600080fd5b84356154a381615173565b935060208501356154b381615173565b925060408501359150606085013567ffffffffffffffff8111156154d657600080fd5b8501601f810187136154e757600080fd5b80356154fa6154f58261545a565b615429565b81815288602083850101111561550f57600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b6000806040838503121561554457600080fd5b8235915060208301356152e181615173565b80356001600160601b03811681146128ef57600080fd5b6000806040838503121561558057600080fd5b823561558b81615173565b9150612e9f60208401615556565b600081518084526020808501945080840160005b838110156155cc57815160ff16875295820195908201906001016155ad565b509495945050505050565b6020815260006121ed6020830184615599565b600061016082518452602083015160208501526040830151816040860152615614828601826151d1565b9150506060830151848203606086015261562e82826151d1565b915050608083015161564b60808601826001600160a01b03169052565b5060a083015160a085015260c083015160c085015260e083015184820360e08601526156778282615599565b91505061010080840151858303828701526156928382615599565b9250505061012080840151858303828701526156ae8382615599565b9250505061014080840151858303828701526135708382615599565b6000604082016040835280855180835260608501915060608160051b860101925060208088016000805b8481101561574857888703605f19018652825180518089529085019085890190845b8181101561573257835183529287019291870191600101615716565b50909850505094830194918301916001016156f4565b50505085840381870152505050612f8f81856155ea565b60008060006060848603121561577457600080fd5b833561577f81615173565b925061578d60208501615255565b91506152a560408501615556565b600067ffffffffffffffff8211156157b5576157b5615413565b5060051b60200190565b600082601f8301126157d057600080fd5b813560206157e06154f58361579b565b82815260059290921b840181019181810190868411156157ff57600080fd5b8286015b84811015615821576158148161535b565b8352918301918301615803565b509695505050505050565b60008060006060848603121561584157600080fd5b833561584c81615173565b9250602084013567ffffffffffffffff8082111561586957600080fd5b615875878388016157bf565b9350604086013591508082111561588b57600080fd5b50615898868287016157bf565b9150509250925092565b85815260a0602082015260006158bb60a0830187615599565b82810360408401526158cd8187615599565b905082810360608401526158e18186615599565b905082810360808401526158f58185615599565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff80831681851680830382111561593657615936615901565b01949350505050565b634e487b7160e01b600052600160045260246000fd5b60006001600160601b038381169083168181101561597557615975615901565b039392505050565b60006001600160601b0380831681851680830382111561593657615936615901565b60006001600160601b03808316818516818304811182151516156159c5576159c5615901565b02949350505050565b634e487b7160e01b600052601260045260246000fd5b60006001600160601b03808416806159fe576159fe6159ce565b92169190910492915050565b6001600160a01b0385168152836020820152608060408201526000615a326080830185615599565b8281036060840152615a448185615599565b979650505050505050565b6000816000190483118215151615615a6957615a69615901565b500290565b600067ffffffffffffffff80831681851680830382111561593657615936615901565b600082821015615aa357615aa3615901565b500390565b6001600160a01b0384168152826020820152606060408201526000612f8f6060830184615599565b634e487b7160e01b600052603260045260246000fd5b60006001600160601b0380841680615b0057615b006159ce565b92169190910692915050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115615b3e57600080fd5b8260051b8083602087013760009401602001938452509192915050565b6020808252818101839052600090600560408085019086831b86010187855b88811015615beb57878303603f190184528135368b9003601e19018112615ba057600080fd5b8a01803567ffffffffffffffff811115615bb957600080fd5b80871b36038c1315615bca57600080fd5b615bd785828a8501615b0c565b958801959450505090850190600101615b7a565b509098975050505050505050565b600060ff821660ff84168060ff03821115615c1657615c16615901565b019392505050565b600067ffffffffffffffff8381169083168181101561597557615975615901565b600060208284031215615c5157600080fd5b815167ffffffffffffffff811115615c6857600080fd5b8201601f81018413615c7957600080fd5b8051615c876154f58261545a565b818152856020838501011115615c9c57600080fd5b612f8f8260208301602086016151a5565b600060ff821660ff811415615cc457615cc4615901565b60010192915050565b600081615cdc57615cdc615901565b506000190190565b6000600019821415615cf857615cf8615901565b5060010190565b600082615d0e57615d0e6159ce565b500490565b60008219821115615d2657615d26615901565b500190565b6000815260008251615d448160018501602087016151a5565b9190910160010192915050565b7f630000000000000000000000000000000000000000000000000000000000000081526001600160e01b03198360e01b1660018201527f80600e6000396000f30000000000000000000000000000000000000000000000600582015260008251615dc281600e8501602087016151a5565b91909101600e019392505050565b600060ff821680615de357615de3615901565b6000190192915050565b600060ff821660ff841680821015615e0757615e07615901565b90039392505050565b60006020808385031215615e2357600080fd5b825167ffffffffffffffff80821115615e3b57600080fd5b818501915085601f830112615e4f57600080fd5b8151615e5d6154f58261579b565b818152600591821b8401850191858201919089841115615e7c57600080fd5b8686015b84811015615f0857805186811115615e985760008081fd5b8701603f81018c13615eaa5760008081fd5b888101516040615ebc6154f58361579b565b82815291851b83018101918b8101908f841115615ed95760008081fd5b938201935b83851015615ef75784518252938c0193908c0190615ede565b885250505093880193508701615e80565b50909998505050505050505050565b600060ff831680615f2a57615f2a6159ce565b8060ff84160691505092915050565b600063ffffffff838116908316818110156159755761597561590156fea2646970667358221220b32567d527525dd4edb018bbe87995472534aed46a567762ac20e3f8b96cb5ce64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "extractProtocolEth()": {
        "details": "caller must be a trusted user"
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
      },
      "loanInfo(uint160)": {
        "details": "contract ->frontend -> used to set the amount of eth for user",
        "params": {
          "tokenId": "the token who's current loan to check"
        },
        "returns": {
          "earned": "-> the amount of eth the minSharePrice has increased since loan was last rebalanced",
          "epochDue": "-> the final epoch a user is safe from liquidation (inclusive)",
          "loaner": "-> the user responsable for the loan",
          "toPayoff": "->  the current amount loaned out, plus the final rebalance fee",
          "toRebalance": "->  the fee a user must pay to rebalance (and extend) the loan on their nugg"
        }
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "setMigrator(address)": {
        "details": "caller must be a trusted user",
        "params": {
          "migrator": "the address to set as the migrator contract"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "valueForDelegate(address,uint160)": {
        "details": "returns 0 if no delegate can be made for this oken",
        "params": {
          "sender": "-> the address of the user who will be delegating",
          "tokenId": "-> the token to be delegated to"
        },
        "returns": {
          "canDelegate": "-> instead of reverting this function will return false",
          "nextSwapAmount": "-> the minimum value that must be sent with a delegate call",
          "senderCurrentOffer": "->"
        }
      },
      "valueForPayoff(uint160)": {
        "details": "should be used to tell user how much eth to send for payoff"
      },
      "valueForRebalance(uint160)": {
        "details": "should be used to tell user how much eth to send for rebalance"
      },
      "withdrawStake(uint160)": {
        "details": "should only be called directly",
        "params": {
          "tokenId": "the id of the nugg being burned"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "extractProtocolEth()": {
        "notice": "sends the current protocolEth to the user and resets the value to zero"
      },
      "loanInfo(uint160)": {
        "notice": "for a nugg's active loan: calculates the current min eth a user must send to payoff or rebalance"
      },
      "setMigrator(address)": {
        "notice": "sets the migrator contract"
      },
      "valueForDelegate(address,uint160)": {
        "notice": "calculates the minimum eth that must be sent with a delegate call"
      },
      "valueForPayoff(uint160)": {
        "notice": "\"toPayoff\" value from \"loanInfo\""
      },
      "valueForRebalance(uint160)": {
        "notice": "\"toRebalance\" value from \"loanInfo\""
      },
      "withdrawStake(uint160)": {
        "notice": "burns a nugg from existance, dealing the eth worth of that share to the user"
      }
    },
    "notice": "deviations from ERC721 standard: 1. no verificaiton the receiver is a ERC721Reciever - on top of this being a gross waste of gas, the way the swapping logic works makes this only worth calling when a user places an offer - and we did not want to call \"onERC721Recieved\" when no token was being sent. 2.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8223,
        "contract": "src/NuggFT.sol:NuggFT",
        "label": "dotnuggV1Processor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8228,
        "contract": "src/NuggFT.sol:NuggFT",
        "label": "defaultWidth",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 8232,
        "contract": "src/NuggFT.sol:NuggFT",
        "label": "defaultZoom",
        "offset": 21,
        "slot": "0",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}