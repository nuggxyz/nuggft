{
  "address": "0x8F6a8D2aDB2B9062Dcb890EbC8f6b370D73D51A6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_xnugg",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endingEpoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellingTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyingTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endingEpoch",
          "type": "uint256"
        }
      ],
      "name": "ClaimItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth",
          "type": "uint256"
        }
      ],
      "name": "Commit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellingTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyingTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth",
          "type": "uint256"
        }
      ],
      "name": "CommitItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Genesis",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth",
          "type": "uint256"
        }
      ],
      "name": "Offer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellingTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyingTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth",
          "type": "uint256"
        }
      ],
      "name": "OfferItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "PopItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "items",
          "type": "uint256[]"
        }
      ],
      "name": "PreMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "PushItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellingTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth",
          "type": "uint256"
        }
      ],
      "name": "SwapItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endingEpoch",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sellingTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "itemid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyingTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endingEpoch",
          "type": "uint256"
        }
      ],
      "name": "claimItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "commit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sellingTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "itemid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyingTokenId",
          "type": "uint256"
        }
      ],
      "name": "commitItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sellingTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "itemid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyingTokenId",
          "type": "uint256"
        }
      ],
      "name": "delegateItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "genesis",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "getActiveSwap",
      "outputs": [
        {
          "internalType": "address",
          "name": "leader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isOwner",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getOfferByAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "infoOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "items",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "offer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sellingTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "itemid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyingTokenId",
          "type": "uint256"
        }
      ],
      "name": "offerItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "floor",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sellingTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "itemid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "floor",
          "type": "uint256"
        }
      ],
      "name": "swapItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xnugg",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2fda86262cde7eb360f5c8952587739851d9ada7d2001a6312203f0438561bdf",
  "receipt": {
    "to": null,
    "from": "0xB666C13b621568FeC210724DF161604adccfA257",
    "contractAddress": "0x8F6a8D2aDB2B9062Dcb890EbC8f6b370D73D51A6",
    "transactionIndex": 1,
    "gasUsed": "3519453",
    "logsBloom": "0x
    "blockHash": "0x771370f1cf95a3f5cef7e925ae11a4a33c5bf0f7652b8e4ae43e4f07eb830766",
    "transactionHash": "0x2fda86262cde7eb360f5c8952587739851d9ada7d2001a6312203f0438561bdf",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 11515788,
        "transactionHash": "0x2fda86262cde7eb360f5c8952587739851d9ada7d2001a6312203f0438561bdf",
        "address": "0x8F6a8D2aDB2B9062Dcb890EbC8f6b370D73D51A6",
        "topics": [
          "0x6bf6eaff5e9af8fbccb949f4c38cc016936f8775363ccf4224db160365785d52"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x771370f1cf95a3f5cef7e925ae11a4a33c5bf0f7652b8e4ae43e4f07eb830766"
      }
    ],
    "blockNumber": 11515788,
    "cumulativeGasUsed": "3657243",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x84500Cc78ce2fF2A9c17af6cdCa2c92ca49682Ca"
  ],
  "solcInputHash": "7fce83e726ae901840dc1c4edd658001",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xnugg\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endingEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endingEpoch\",\"type\":\"uint256\"}],\"name\":\"ClaimItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Commit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"CommitItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Genesis\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Offer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"OfferItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"PopItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"items\",\"type\":\"uint256[]\"}],\"name\":\"PreMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"PushItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"SwapItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingEpoch\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingEpoch\",\"type\":\"uint256\"}],\"name\":\"claimItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyingTokenId\",\"type\":\"uint256\"}],\"name\":\"commitItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyingTokenId\",\"type\":\"uint256\"}],\"name\":\"delegateItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getActiveSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"leader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOwner\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOfferByAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"infoOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"items\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"offer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyingTokenId\",\"type\":\"uint256\"}],\"name\":\"offerItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floor\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floor\",\"type\":\"uint256\"}],\"name\":\"swapItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xnugg\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}. MODIFICATION 0\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/NuggFT.sol\":\"NuggFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/src/NuggFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './interfaces/INuggFT.sol';\\n\\nimport './libraries/EpochLib.sol';\\nimport './libraries/ItemLib.sol';\\nimport './libraries/SwapLib.sol';\\nimport './libraries/ERC721Lib.sol';\\nimport './libraries/ItemLib.sol';\\nimport './libraries/MoveLib.sol';\\nimport './base/NuggERC721.sol';\\n\\ncontract NuggFT is NuggERC721, INuggFT {\\n    using EpochLib for uint256;\\n    using ItemLib for ItemLib.Storage;\\n    using SwapLib for SwapLib.Storage;\\n    using ShiftLib for uint256;\\n\\n    address payable public immutable override xnugg;\\n\\n    uint256 public immutable override genesis;\\n\\n    ItemLib.Storage private il_state;\\n\\n    mapping(uint256 => SwapLib.Storage) internal sl_state;\\n    mapping(uint256 => mapping(uint256 => SwapLib.Storage)) internal sl_state_items;\\n\\n    constructor(address _xnugg) NuggERC721('NUGGFT', 'Nugg Fungible Token') {\\n        xnugg = payable(_xnugg);\\n        genesis = block.number;\\n\\n        emit Genesis();\\n    }\\n\\n    function getActiveSwap(uint256 tokenid)\\n        external\\n        view\\n        override\\n        returns (\\n            address leader,\\n            uint256 amount,\\n            uint256 _epoch,\\n            bool isOwner\\n        )\\n    {\\n        (uint256 swapData, ) = sl_state[tokenid].loadStorage(address(0));\\n        require(swapData != 0, 'NS:GS:0');\\n        leader = address(swapData.account());\\n        amount = swapData.eth();\\n        _epoch = swapData.epoch();\\n        isOwner = swapData.isOwner();\\n    }\\n\\n    function getOfferByAccount(\\n        uint256 tokenid,\\n        uint256 index,\\n        address account\\n    ) external view override returns (uint256 amount) {\\n        (, uint256 offerData) = sl_state[tokenid].loadStorage(account, index);\\n        require(offerData != 0, 'NS:GS:0');\\n        amount = offerData.eth();\\n    }\\n\\n    function epoch() external view override returns (uint256 res) {\\n        res = genesis.activeEpoch();\\n    }\\n\\n    function delegate(uint256 tokenid) external payable override {\\n        MoveLib.delegate(sl_state[tokenid], il_state, genesis, tokenid, xnugg);\\n    }\\n\\n    function mint(uint256 tokenid) external payable override {\\n        MoveLib.mint(sl_state[tokenid], il_state, genesis, tokenid, xnugg);\\n    }\\n\\n    function delegateItem(\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 buyingTokenId\\n    ) external payable override {\\n        MoveLib.delegateItem(\\n            sl_state_items[sellingTokenId][itemid],\\n            el_state,\\n            genesis,\\n            sellingTokenId,\\n            itemid,\\n            uint160(buyingTokenId),\\n            xnugg\\n        );\\n    }\\n\\n    function commit(uint256 tokenid) external payable override {\\n        MoveLib.commit(sl_state[tokenid], tokenid, xnugg, genesis);\\n    }\\n\\n    function commitItem(\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 buyingTokenId\\n    ) external payable override {\\n        MoveLib.commitItem(\\n            sl_state_items[sellingTokenId][itemid],\\n            el_state,\\n            genesis,\\n            sellingTokenId,\\n            itemid,\\n            uint160(buyingTokenId),\\n            xnugg\\n        );\\n    }\\n\\n    function offer(uint256 tokenid) external payable override {\\n        MoveLib.offer(sl_state[tokenid], tokenid, xnugg, genesis);\\n    }\\n\\n    function offerItem(\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 buyingTokenId\\n    ) external payable override {\\n        MoveLib.offerItem(\\n            sl_state_items[sellingTokenId][itemid],\\n            el_state,\\n            sellingTokenId,\\n            genesis,\\n            itemid,\\n            uint160(buyingTokenId),\\n            xnugg\\n        );\\n    }\\n\\n    function claim(uint256 tokenid, uint256 endingEpoch) external override {\\n        MoveLib.claim(sl_state[tokenid], el_state, genesis, tokenid, endingEpoch);\\n    }\\n\\n    function claimItem(\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 buyingTokenId,\\n        uint256 endingEpoch\\n    ) external override {\\n        MoveLib.claimItem(\\n            sl_state_items[sellingTokenId][itemid],\\n            el_state,\\n            il_state,\\n            sellingTokenId,\\n            genesis,\\n            itemid,\\n            endingEpoch,\\n            uint160(buyingTokenId)\\n        );\\n    }\\n\\n    function swap(uint256 tokenid, uint256 floor) external override {\\n        MoveLib.swap(sl_state[tokenid], el_state, tokenid, floor);\\n    }\\n\\n    function swapItem(\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 floor\\n    ) external override {\\n        MoveLib.swapItem(\\n            sl_state_items[sellingTokenId][itemid],\\n            el_state,\\n            il_state,\\n            itemid,\\n            floor,\\n            uint160(sellingTokenId)\\n        );\\n    }\\n\\n    function infoOf(uint256 tokenId)\\n        public\\n        view\\n        returns (\\n            uint256 base,\\n            uint256 size,\\n            uint256[] memory items\\n        )\\n    {\\n        return il_state.infoOf(tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory res) {}\\n}\\n\",\"keccak256\":\"0x817cf3b1424e67a6c57bdf141e8e8b7070ffeff87f47301aefb46d53153681ec\",\"license\":\"MIT\"},\"contracts/src/base/NuggERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\n\\nimport '../../src/libraries/ERC721Lib.sol';\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract NuggERC721 is ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using ERC721Lib for ERC721Lib.Storage;\\n\\n    ERC721Lib.Storage internal el_state;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        el_state._name = name_;\\n        el_state._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        return el_state.balanceOf(owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return el_state.ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return el_state._name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return el_state._symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}. MODIFICATION 0\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory);\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = el_state.ownerOf(tokenId);\\n        require(to != owner, 'ERC721: approval to current owner');\\n\\n        require(\\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\\n            'ERC721: approve caller is not owner nor approved for all'\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        return el_state.getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != msg.sender, 'ERC721: approve to caller');\\n\\n        el_state._operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return el_state.isApprovedForAll(owner, operator);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(msg.sender, tokenId), 'ERC721: transfer caller is not owner nor approved');\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(msg.sender, tokenId), 'ERC721: transfer caller is not owner nor approved');\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            ERC721Lib._checkOnERC721Received(from, to, tokenId, _data),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return el_state._exists(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), 'ERC721: operator query for nonexistent token');\\n        address owner = el_state.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            ERC721Lib._checkOnERC721Received(address(0), to, tokenId, _data),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), 'ERC721: mint to the zero address');\\n        require(!_exists(tokenId), 'ERC721: token already minted');\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        el_state._balances[to] += 1;\\n        el_state._owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = el_state.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        el_state._balances[owner] -= 1;\\n        delete el_state._owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(el_state.ownerOf(tokenId) == from, 'ERC721: transfer of token that is not own');\\n        require(to != address(0), 'ERC721: transfer to the zero address');\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        el_state._balances[from] -= 1;\\n        el_state._balances[to] += 1;\\n        el_state._owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        el_state._tokenApprovals[tokenId] = to;\\n        emit Approval(el_state.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x3958efda04b67ebf03a19e121f07dd788cecb0388c49f940f50ea2bab57d0bdb\",\"license\":\"MIT\"},\"contracts/src/interfaces/INuggFT.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\ninterface INuggFT {\\n    event PreMint(uint256 tokenId, uint256[] items);\\n\\n    event PopItem(uint256 tokenId, uint256 itemId);\\n\\n    event PushItem(uint256 tokenId, uint256 itemId);\\n\\n    event Mint(uint256 epoch, address account, uint256 eth);\\n\\n    event Commit(uint256 tokenid, address account, uint256 eth);\\n\\n    event Offer(uint256 tokenid, address account, uint256 eth);\\n\\n    event Claim(uint256 tokenid, uint256 endingEpoch, address account);\\n\\n    event Swap(uint256 tokenid, address account, uint256 eth);\\n\\n    event CommitItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 eth);\\n\\n    event OfferItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 eth);\\n\\n    event ClaimItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 endingEpoch);\\n\\n    event SwapItem(uint256 sellingTokenId, uint256 itemId, uint256 eth);\\n\\n    event Genesis();\\n\\n    function swapItem(\\n        uint256 tokenid,\\n        uint256 floor,\\n        uint256 itemid\\n    ) external;\\n\\n    function xnugg() external view returns (address payable);\\n\\n    function genesis() external view returns (uint256 res);\\n\\n    function epoch() external view returns (uint256 res);\\n\\n    function delegate(uint256 tokenid) external payable;\\n\\n    function delegateItem(\\n        uint256 sellerTokenId,\\n        uint256 itemid,\\n        uint256 buyerTokenId\\n    ) external payable;\\n\\n    function mint(uint256 tokenid) external payable;\\n\\n    function commit(uint256 tokenid) external payable;\\n\\n    function commitItem(\\n        uint256 sellerTokenId,\\n        uint256 itemid,\\n        uint256 buyerTokenId\\n    ) external payable;\\n\\n    function offer(uint256 tokenid) external payable;\\n\\n    function offerItem(\\n        uint256 sellerTokenId,\\n        uint256 itemid,\\n        uint256 buyerTokenId\\n    ) external payable;\\n\\n    function claim(uint256 tokenid, uint256 endingEpoch) external;\\n\\n    function claimItem(\\n        uint256 sellerTokenId,\\n        uint256 itemid,\\n        uint256 buyerTokenId,\\n        uint256 endingEpoch\\n    ) external;\\n\\n    function swap(uint256 tokenid, uint256 floor) external;\\n\\n    function getOfferByAccount(\\n        uint256 tokenid,\\n        uint256 index,\\n        address account\\n    ) external view returns (uint256 eth);\\n\\n    function getActiveSwap(uint256 tokenid)\\n        external\\n        view\\n        returns (\\n            address leader,\\n            uint256 eth,\\n            uint256 _epoch,\\n            bool isOwner\\n        );\\n}\\n\",\"keccak256\":\"0xf9708222680f31273ed8885c22a9d282458feab0438c6819489e591e7cbe1a16\"},\"contracts/src/libraries/ERC721Lib.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\nlibrary ERC721Lib {\\n    using Address for address;\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    struct Storage {\\n        // Token name\\n        string _name;\\n        // Token symbol\\n        string _symbol;\\n        // Mapping from token ID to owner address\\n        mapping(uint256 => address) _owners;\\n        // Mapping owner address to token count\\n        mapping(address => uint256) _balances;\\n        // Mapping from token ID to approved address\\n        mapping(uint256 => address) _tokenApprovals;\\n        // Mapping from owner to operator approvals\\n        mapping(address => mapping(address => bool)) _operatorApprovals;\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(Storage storage s, uint256 tokenId) internal view returns (bool) {\\n        return s._owners[tokenId] != address(0);\\n    }\\n\\n    function isApprovedForAll(\\n        Storage storage s,\\n        address owner,\\n        address operator\\n    ) internal view returns (bool) {\\n        return s._operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(Storage storage s, uint256 tokenId) internal view returns (address) {\\n        require(_exists(s, tokenId), 'ERC721: approved query for nonexistent token');\\n\\n        return s._tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(Storage storage s, uint256 tokenId) internal view returns (address) {\\n        address owner = s._owners[tokenId];\\n        require(owner != address(0), 'ERC721: owner query for nonexistent token');\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(Storage storage s, address owner) internal view returns (uint256) {\\n        require(owner != address(0), 'ERC721: balance query for the zero address');\\n        return s._balances[owner];\\n    }\\n\\n    function clearApprovals(Storage storage s, uint256 tokenId) internal {\\n        s._tokenApprovals[tokenId] = address(0);\\n        emit Approval(ownerOf(s, tokenId), address(0), tokenId);\\n    }\\n\\n    function approvedTransferToSelf(\\n        Storage storage s,\\n        address from,\\n        uint256 tokenId\\n    ) internal {\\n        require(\\n            msg.sender == ownerOf(s, tokenId) && from == msg.sender && getApproved(s, tokenId) == address(this),\\n            'ERC721: transfer caller is not owner nor approved'\\n        );\\n\\n        // Clear approvals from the previous owner\\n        clearApprovals(s, tokenId);\\n\\n        s._balances[from] -= 1;\\n        s._balances[address(this)] += 1;\\n        s._owners[tokenId] = address(this);\\n\\n        emit Transfer(from, address(this), tokenId);\\n    }\\n\\n    function checkedTransferFromSelf(\\n        Storage storage s,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        require(\\n            _checkOnERC721Received(address(this), to, tokenId, ''),\\n            'ERC721: transfer caller is not owner nor approved'\\n        );\\n\\n        s._balances[address(this)] -= 1;\\n        s._balances[to] += 1;\\n        s._owners[tokenId] = to;\\n\\n        emit Transfer(address(this), to, tokenId);\\n    }\\n\\n    function checkedMintTo(\\n        Storage storage s,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        require(\\n            _checkOnERC721Received(address(this), to, tokenId, ''),\\n            'ERC721: transfer caller is not owner nor approved'\\n        );\\n\\n        s._balances[to] += 1;\\n        s._owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert('ERC721: transfer to non ERC721Receiver implementer');\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4c5ecbf03c740ee9d5f56849ad54e192bcd928df1de16ad916c5731082de2b73\"},\"contracts/src/libraries/EpochLib.sol\":{\"content\":\"import './ShiftLib.sol';\\n\\nlibrary EpochLib {\\n    using ShiftLib for uint256;\\n\\n    /**\\n     * @dev #TODO\\n     * @return res\\n     */\\n    function activeEpoch(uint256 genesis) internal view returns (uint256 res) {\\n        res = toEpoch(genesis, block.number);\\n    }\\n\\n    /**\\n     * @notice gets unique base based on given epoch and converts encoded bytes to object that can be merged\\n     * Note: by using the block hash no one knows what a nugg will look like before it's epoch.\\n     * We considered making this harder to manipulate, but we decided that if someone were able to\\n     * pull it off and make their own custom nugg, that would be really fucking cool.\\n     */\\n    function calculateSeed(uint256 genesis) internal view returns (uint256 res, uint256 epoch) {\\n        epoch = toEpoch(genesis, block.number);\\n        uint256 startblock = toStartBlock(genesis, epoch);\\n        bytes32 bhash = blockhash(startblock - 1);\\n        require(bhash != 0, 'EPC:SBL');\\n        res = uint256(keccak256(abi.encodePacked(bhash, epoch, address(this))));\\n    }\\n\\n    function interval() internal pure returns (uint256 res) {\\n        res = 25;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     * @return res\\n     */\\n    function toStartBlock(uint256 genesis, uint256 epoch) internal pure returns (uint256 res) {\\n        res = (epoch * interval()) + genesis;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     * @return res\\n     */\\n    function toEndBlock(uint256 genesis, uint256 epoch) internal pure returns (uint256 res) {\\n        res = toStartBlock(genesis, epoch + 1) - 1;\\n    }\\n\\n    function toEpoch(uint256 genesis, uint256 blocknum) internal pure returns (uint256 res) {\\n        res = (blocknum - genesis) / interval();\\n    }\\n}\\n\",\"keccak256\":\"0x747007bb97d92699e0da321a9afb11cb5a7eb9f56a74ed9f2b29130c99807fa9\"},\"contracts/src/libraries/ItemLib.sol\":{\"content\":\"import 'hardhat/console.sol';\\n\\nimport './ShiftLib.sol';\\nimport './EpochLib.sol';\\n\\nlibrary ItemLib {\\n    event PreMint(uint256 tokenId, uint256[] items);\\n    event PopItem(uint256 tokenId, uint256 itemId);\\n    event PushItem(uint256 tokenId, uint256 itemId);\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    using ShiftLib for uint256;\\n\\n    struct Storage {\\n        mapping(uint256 => uint256) tokenData;\\n        mapping(uint256 => uint256) protocolItems;\\n    }\\n\\n    function infoOf(Storage storage s, uint256 tokenId)\\n        internal\\n        view\\n        returns (\\n            uint256 base,\\n            uint256 size,\\n            uint256[] memory items\\n        )\\n    {\\n        uint256 data = s.tokenData[tokenId];\\n        items = data.items();\\n        size = data.size();\\n        base = data.base();\\n    }\\n\\n    function premint(\\n        Storage storage s,\\n        uint256 tokenId,\\n        uint256 genesis\\n    ) internal {\\n        (uint256 itemData, uint256 epoch) = EpochLib.calculateSeed(genesis);\\n\\n        require(itemData != 0, '721:MINT:0');\\n        require(epoch == tokenId, '721:MINT:1');\\n\\n        itemData = itemData;\\n\\n        uint256[] memory items = mint(s, tokenId, itemData);\\n\\n        emit PreMint(tokenId, items);\\n\\n        uint256[] memory amounts = new uint256[](items.length);\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            amounts[i] = 1;\\n        }\\n\\n        emit TransferBatch(address(this), address(0), msg.sender, items, amounts);\\n    }\\n\\n    function mint(\\n        Storage storage s,\\n        uint256 tokenId,\\n        uint256 data\\n    ) internal returns (uint256[] memory items) {\\n        require(s.tokenData[tokenId] == 0, 'IL:M:0');\\n\\n        data = data.base(data.base() % 20).size(0x4);\\n\\n        s.tokenData[tokenId] = data;\\n\\n        return data.items();\\n    }\\n\\n    function pop(\\n        Storage storage s,\\n        uint256 tokenId,\\n        uint256 itemId\\n    ) internal {\\n        uint256 data = s.tokenData[tokenId];\\n\\n        require(data != 0, '1155:STF:0');\\n\\n        (data, , ) = data.popFirstMatch(uint8(itemId));\\n\\n        s.tokenData[tokenId] = data;\\n\\n        s.protocolItems[itemId]++;\\n\\n        emit PushItem(tokenId, itemId);\\n        emit TransferSingle(address(this), msg.sender, address(this), itemId, 1);\\n    }\\n\\n    function push(\\n        Storage storage s,\\n        uint256 tokenId,\\n        uint256 itemId\\n    ) internal {\\n        uint256 data = s.tokenData[tokenId];\\n        require(data != 0, '1155:STF:0');\\n\\n        require(s.protocolItems[itemId] > 0, '1155:SBTF:1');\\n\\n        s.protocolItems[itemId]++;\\n\\n        (data, ) = data.pushFirstEmpty(uint8(itemId));\\n\\n        s.tokenData[tokenId] = data;\\n\\n        emit PushItem(tokenId, itemId);\\n        emit TransferSingle(address(this), address(this), msg.sender, itemId, 1);\\n    }\\n}\\n\",\"keccak256\":\"0x1ab8eb3c5b0f229270b3e8bdd783b4966721a7ad69cb1f5876ffd9fa096e2d5d\"},\"contracts/src/libraries/MoveLib.sol\":{\"content\":\"pragma solidity 0.8.4;\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport 'hardhat/console.sol';\\nimport './ShiftLib.sol';\\nimport './QuadMath.sol';\\nimport './SwapLib.sol';\\nimport './EpochLib.sol';\\nimport './ERC721Lib.sol';\\nimport './ItemLib.sol';\\n\\nlibrary MoveLib {\\n    using EpochLib for uint256;\\n    using SwapLib for SwapLib.Storage;\\n    using ShiftLib for uint256;\\n    using Address for address payable;\\n    using ERC721Lib for ERC721Lib.Storage;\\n    using ItemLib for ItemLib.Storage;\\n\\n    using QuadMath for uint256;\\n\\n    event Mint(uint256 epoch, address account, uint256 eth);\\n\\n    event Commit(uint256 tokenid, address account, uint256 eth);\\n\\n    event Offer(uint256 tokenid, address account, uint256 eth);\\n\\n    event Claim(uint256 tokenid, uint256 endingEpoch, address account);\\n\\n    event Swap(uint256 tokenid, address account, uint256 eth);\\n\\n    event CommitItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 eth);\\n\\n    event OfferItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 eth);\\n\\n    event ClaimItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 endingEpoch);\\n\\n    event SwapItem(uint256 sellingTokenId, uint256 itemId, uint256 eth);\\n\\n    function delegate(\\n        SwapLib.Storage storage s,\\n        // ERC721Lib.Storage storage e,\\n        ItemLib.Storage storage i,\\n        uint256 genesis,\\n        uint256 tokenid,\\n        address payable xnugg\\n    ) internal {\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = s.loadStorage(msg.sender);\\n\\n        if (activeEpoch == tokenid && swapData == 0) {\\n            mint(s, i, genesis, tokenid, xnugg);\\n        } else if (offerData == 0 && swapData.isOwner()) {\\n            commit(s, tokenid, xnugg, genesis);\\n        } else {\\n            offer(s, tokenid, xnugg, genesis);\\n        }\\n    }\\n\\n    function delegateItem(\\n        SwapLib.Storage storage s,\\n        ERC721Lib.Storage storage e,\\n        // ItemLib.Storage storage i,\\n        uint256 genesis,\\n        uint256 sellingTokenId,\\n        uint256 itemId,\\n        uint160 sendingTokenId,\\n        address payable xnugg\\n    ) internal {\\n        require(e.ownerOf(sendingTokenId) == msg.sender, 'AUC:TT:3');\\n\\n        (uint256 swapData, uint256 offerData) = s.loadStorage(sendingTokenId);\\n\\n        if (offerData == 0 && swapData.isOwner()) {\\n            commitItem(s, e, genesis, sellingTokenId, itemId, sendingTokenId, xnugg);\\n        } else {\\n            offerItem(s, e, genesis, sellingTokenId, itemId, sendingTokenId, xnugg);\\n        }\\n    }\\n\\n    function mint(\\n        SwapLib.Storage storage s,\\n        ItemLib.Storage storage i,\\n        uint256 genesis,\\n        uint256 tokenid,\\n        address payable xnugg\\n    ) internal returns (uint256 newSwapData) {\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = s.loadStorage(msg.sender);\\n\\n        // we do not need this, could take tokenid out as an argument - but do not want to give users\\n        // the ability to accidently place an offer for nugg A and end up minting nugg B.\\n        require(activeEpoch == tokenid, 'NS:M:0');\\n\\n        require(swapData == 0, 'NS:M:D');\\n\\n        (newSwapData, ) = uint256(0).epoch(activeEpoch).account(uint160(msg.sender)).eth(msg.value);\\n\\n        s.data = newSwapData;\\n\\n        if (msg.value > 0) xnugg.sendValue(msg.value);\\n\\n        i.premint(tokenid, genesis);\\n\\n        emit Mint(activeEpoch, msg.sender, newSwapData.eth());\\n    }\\n\\n    function commit(\\n        SwapLib.Storage storage s,\\n        uint256 tokenid,\\n        address payable xnugg,\\n        uint256 genesis\\n    ) internal {\\n        _commitCore(s, uint160(msg.sender), xnugg, genesis);\\n\\n        emit Commit(tokenid, msg.sender, msg.value);\\n    }\\n\\n    function commitItem(\\n        SwapLib.Storage storage s,\\n        ERC721Lib.Storage storage e,\\n        // ItemLib.Storage storage i,\\n        uint256 genesis,\\n        uint256 sellingTokenId,\\n        uint256 itemId,\\n        uint160 sendingTokenId,\\n        address payable xnugg\\n    ) internal {\\n        require(itemId < 256, 'ML:CI:0');\\n\\n        require(e.ownerOf(sendingTokenId) == msg.sender, 'AUC:TT:3');\\n\\n        _commitCore(s, sendingTokenId, xnugg, genesis);\\n\\n        emit CommitItem(sellingTokenId, itemId, sendingTokenId, msg.value);\\n    }\\n\\n    function _commitCore(\\n        SwapLib.Storage storage s,\\n        uint160 sender,\\n        address payable xnugg,\\n        uint256 genesis\\n    ) internal {\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = s.loadStorage(sender);\\n\\n        console.logBytes32(bytes32(swapData));\\n\\n        require(msg.value > 0, 'SL:COM:2');\\n\\n        require(offerData == 0, 'SL:HSO:0');\\n\\n        require(swapData.isOwner(), 'SL:HSO:1');\\n\\n        uint256 _epoch = activeEpoch + 1;\\n\\n        // copy relevent items from swapData to newSwapData\\n        (uint256 newSwapData, uint256 dust) = uint256(0).epoch(_epoch).account(sender).eth(msg.value);\\n\\n        require(swapData.eth().mulDiv(100, 10000) < newSwapData.eth(), 'SL:OBP:4');\\n\\n        s.offers[_epoch][swapData.account()] = swapData;\\n\\n        s.data = newSwapData;\\n\\n        xnugg.sendValue(newSwapData.eth() - swapData.eth() + dust);\\n\\n        // emit Commit(tokenid, sender, newSwapData.eth());\\n    }\\n\\n    function offer(\\n        SwapLib.Storage storage s,\\n        uint256 tokenid,\\n        address payable xnugg,\\n        uint256 genesis\\n    ) internal {\\n        _offerCore(s, uint160(msg.sender), xnugg, genesis);\\n\\n        emit Offer(tokenid, msg.sender, msg.value);\\n    }\\n\\n    function offerItem(\\n        SwapLib.Storage storage s,\\n        ERC721Lib.Storage storage e,\\n        // ItemLib.Storage storage i,\\n        uint256 genesis,\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint160 sendingTokenId,\\n        address payable xnugg\\n    ) internal {\\n        require(itemid < 256, 'ML:OI:0');\\n\\n        require(e.ownerOf(sendingTokenId) == msg.sender, 'AUC:TT:3');\\n\\n        _offerCore(s, sendingTokenId, xnugg, genesis);\\n\\n        emit OfferItem(sellingTokenId, itemid, sendingTokenId, msg.value);\\n    }\\n\\n    function _offerCore(\\n        SwapLib.Storage storage s,\\n        uint160 sender,\\n        address payable xnugg,\\n        uint256 genesis\\n    ) internal {\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = s.loadStorage(sender);\\n\\n        require(msg.value > 0, 'SL:OBP:2');\\n\\n        require(swapData != 0, 'NS:0:0');\\n\\n        // make sure user is not the owner of swap\\n        // we do not know how much to give them when they call \\\"claim\\\" otherwise\\n        require(!offerData.isOwner(), 'SL:HSO:0');\\n\\n        // if (swapData.epoch() == 0 && swapData.isOwner()) swapData = swapData.epoch(activeEpoch + 1);\\n\\n        // make sure swap is still active\\n        require(activeEpoch <= swapData.epoch(), 'SL:OBP:3');\\n\\n        // save prev offers data\\n        if (swapData.account() != sender) s.offers[swapData.epoch()][swapData.account()] = swapData;\\n\\n        // copy relevent items from swapData to newSwapData\\n        (uint256 newSwapData, uint256 dust) = uint256(0).epoch(swapData.epoch()).account(sender).eth(\\n            offerData.eth() + msg.value\\n        );\\n\\n        require(swapData.eth().mulDiv(100, 10000) < newSwapData.eth(), 'SL:OBP:4');\\n\\n        s.data = newSwapData;\\n\\n        xnugg.sendValue(newSwapData.eth() - swapData.eth() + dust);\\n    }\\n\\n    function claim(\\n        SwapLib.Storage storage s,\\n        ERC721Lib.Storage storage e,\\n        uint256 genesis,\\n        uint256 tokenid,\\n        uint256 endingEpoch\\n    ) internal {\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = s.loadStorage(msg.sender, endingEpoch);\\n\\n        delete s.offers[endingEpoch][uint160(msg.sender)];\\n\\n        if (SwapLib.checkClaimer(uint160(msg.sender), swapData, offerData, activeEpoch)) {\\n            delete s.data;\\n            if (endingEpoch == swapData.epoch()) {\\n                e.checkedMintTo(msg.sender, tokenid);\\n            } else {\\n                e.checkedTransferFromSelf(msg.sender, tokenid);\\n            }\\n        } else {\\n            payable(msg.sender).sendValue(offerData.eth());\\n        }\\n\\n        emit Claim(tokenid, endingEpoch, msg.sender);\\n    }\\n\\n    function claimItem(\\n        SwapLib.Storage storage s,\\n        ERC721Lib.Storage storage e,\\n        ItemLib.Storage storage i,\\n        uint256 genesis,\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 endingEpoch,\\n        uint160 sendingTokenId\\n    ) internal {\\n        require(e.ownerOf(sendingTokenId) == msg.sender, 'AUC:TT:3');\\n        require(itemid < 256, 'ML:CI:0');\\n\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = s.loadStorage(sendingTokenId, endingEpoch);\\n\\n        delete s.offers[endingEpoch][sendingTokenId];\\n\\n        if (SwapLib.checkClaimer(sendingTokenId, swapData, offerData, activeEpoch)) {\\n            delete s.data;\\n\\n            i.push(sendingTokenId, itemid);\\n        } else {\\n            payable(msg.sender).sendValue(offerData.eth());\\n        }\\n\\n        emit ClaimItem(sellingTokenId, itemid, endingEpoch, sendingTokenId);\\n    }\\n\\n    function swap(\\n        SwapLib.Storage storage s,\\n        ERC721Lib.Storage storage e,\\n        uint256 tokenid,\\n        uint256 floor\\n    ) internal {\\n        (uint256 swapData, ) = s.loadStorage(msg.sender);\\n\\n        // make sure swap does not exist\\n        require(swapData == 0, 'NS:SS:0');\\n\\n        // build starting swap data\\n        (swapData, ) = swapData.account(uint160(msg.sender)).isOwner(true).eth(floor);\\n\\n        s.data = swapData;\\n\\n        e.approvedTransferToSelf(msg.sender, tokenid);\\n\\n        emit Swap(tokenid, msg.sender, floor);\\n    }\\n\\n    function swapItem(\\n        SwapLib.Storage storage s,\\n        ERC721Lib.Storage storage e,\\n        ItemLib.Storage storage i,\\n        uint256 itemid,\\n        uint256 floor,\\n        uint160 sellingTokenId\\n    ) internal {\\n        require(e.ownerOf(sellingTokenId) == msg.sender, 'AUC:TT:3');\\n\\n        require(itemid < 256, 'ML:SI:0');\\n\\n        (uint256 swapData, ) = s.loadStorage(sellingTokenId);\\n\\n        // make sure swap does not exist\\n        require(swapData == 0, 'NS:SS:0');\\n\\n        // build starting swap data\\n        (swapData, ) = swapData.account(sellingTokenId).isOwner(true).eth(floor);\\n\\n        s.data = swapData;\\n\\n        i.pop(sellingTokenId, itemid);\\n\\n        emit SwapItem(sellingTokenId, itemid, floor);\\n    }\\n}\\n\",\"keccak256\":\"0xad9db0df10738918088b0430425c5031e6ca42c82855a2f2ef56aad67cccb359\"},\"contracts/src/libraries/QuadMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title QuadMath\\n * @notice a library for performing Quadruple-precision floating-point format math operations\\n * @dev #TODO\\n */\\nlibrary QuadMath {\\n    /**\\n     * @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @param a The multiplicand\\n     * @param b The multiplier\\n     * @param denominator The divisor\\n     * @return result The 256-bit result\\n     * @dev Credit to Uniswap under MIT license https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol\\n     */\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @param a The multiplicand\\n     * @param b The multiplier\\n     * @param denominator The divisor\\n     * @return result The 256-bit result\\n     * @dev Credit to Remco Bloemen under MIT license https:/an--2-umb.com/21/muldiv\\n     */\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        // fix for negation braking change in Solidity v8 - https://ethereum.stackexchange.com/a/96646\\n        uint256 twos = denominator & (~denominator + 1);\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n\\n        // this unchecked block is required for this to work with Solidity v8\\n        unchecked {\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xabfe5a4833bdb7d13403e55305444f033b31ff9cf50da4799175b8b26138bb2e\",\"license\":\"MIT\"},\"contracts/src/libraries/ShiftLib.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\nimport \\\"hardhat/console.sol\\\";\\nlibrary ShiftLib {\\n    function unmask(uint256 input) internal pure returns (uint256 res) {\\n        assembly {\\n            res := input\\n            if eq(res, not(0)) {\\n                res := 0\\n            }\\n        }\\n    }\\n\\n    function mask(uint256 input) internal pure returns (uint256 res) {\\n        assembly {\\n            res := input\\n            if eq(res, 0) {\\n                res := not(0)\\n            }\\n        }\\n    }\\n\\n        // function fletcher16(address a) internal pure returns (uint16 res) {\\n        // uint16 sum1 = 0;\\n        // uint16 sum2 = 0;\\n        // for (uint256 index = 0; index < data.length; index++) {\\n        //     sum1 = (sum1 + uint8(data[index])) % 255;\\n        //     sum2 = (sum2 + sum1) % 255;\\n        // }\\n        // res = (sum2 << 8) | sum1;\\n        // }\\n\\n    // function caddress(address a) internal pure returns (uint112 res) {\\n    //     assembly {\\n    //         let sum1 := 0\\n    //         let sum2 := 0\\n    //         let tmp := a\\n    //         for {\\n    //             let index := 0\\n    //         } lt(index, 20) {\\n    //             index := add(index, 0x2)\\n    //         } {\\n    //             sum1 := mod(add(sum1, and(0xffff, tmp)), 0xffff)\\n    //             sum2 := mod(add(sum1, sum2), 0xffff)\\n    //             tmp := shr(0xf, tmp)\\n    //         }\\n    //         res := or(and(shr(48, a), 0xFFFFFFFFFFFFFFFFFFFF00000000), or(shl(8, sum2), sum1))\\n    //     }\\n    // }\\n\\n\\n\\n\\n    function account(uint256 input) internal pure returns (uint160 res) {\\n        assembly {\\n            res := input\\n        }\\n    }\\n\\n    function account(uint256 input, uint160 update) internal pure returns (uint256 res) {\\n\\n        assembly {\\n            input := and(input, 0xffffffffffffffffffffffff0000000000000000000000000000000000000000)\\n            res := or(input, update)\\n        }\\n    }\\n\\n    function isOwner(uint256 input, bool) internal pure returns (uint256 res) {\\n        assembly {\\n            res := or(input, shl(255, 0x1))\\n        }\\n    }\\n\\n    function isOwner(uint256 input) internal pure returns (bool res) {\\n        assembly {\\n            res := and(shr(255, input), 0x1)\\n        }\\n    }\\n\\n    function eth(uint256 input) internal pure returns (uint256 res) {\\n        assembly {\\n            res := and(shr(160, input), 0xFFFFFFFFFFFFFF)\\n            let i := and(res, 0xff)\\n            res := shl(mul(4, i), shr(8, res))\\n            res := mul(res, 0xE8D4A51000)\\n        }\\n    }\\n\\n    // 14 f's\\n    function eth(uint256 input, uint256 update) internal pure returns (uint256 res, uint256 rem) {\\n        assembly {\\n            let in := update\\n            update := div(update, 0xE8D4A51000)\\n            for {\\n            } gt(update, 0xFFFFFFFFFFFF) {\\n                // 13\\n            } {\\n                res := add(res, 0x01)\\n                update := shr(4, update)\\n            }\\n            update := or(shl(8, update), res)\\n            let out := shl(mul(4, res), shr(8, update))\\n            rem := sub(in, mul(out, 0xE8D4A51000))\\n            input := and(input, 0xffffffffff00000000000000ffffffffffffffffffffffffffffffffffffffff)\\n            res := or(input, shl(160, update))\\n        }\\n    }\\n\\n    // 9 f's\\n    function epoch(uint256 input, uint256 update) internal pure returns (uint256 res) {\\n        assert(update <= 0xFFFFFFFFF);\\n        assembly {\\n            //                0xfffffffffffffffddffffffffffffffccfffffffffffffffffffffffffffffff)\\n            res := and(input, 0xf000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            res := or(res, shl(216, update))\\n        }\\n    }\\n\\n    function epoch(uint256 input) internal pure returns (uint256 res) {\\n        assembly {\\n            res := and(shr(216, input), 0xFFFFFFFFF)\\n        }\\n    }\\n\\n\\n\\n    function pushFirstEmpty(uint256 input, uint8 itemId) internal view returns (uint256 res, uint8 index) {\\n        uint256[] memory _items = items(input);\\n        for (uint8 i = 0; i < _items.length; i++) {\\n            if (_items[i] == 0) {\\n                index = i + 1;\\n                break;\\n            }\\n        }\\n        console.logBytes32(bytes32(input));\\n\\n        require(index > 0, 'SL:PFM:0');\\n\\n        index--;\\n\\n        res = pushItem(input, itemId, index);\\n\\n        console.logBytes32(bytes32(res));\\n\\n    }\\n\\n    function popFirstMatch(uint256 input, uint8 itemId)\\n        internal\\n        view\\n        returns (\\n            uint256 res,\\n            uint8 popped,\\n            uint8 index\\n        )\\n    {\\n        uint256[] memory _items = items(input);\\n        for (uint8 i = 0; i < _items.length; i++) {\\n            if (_items[i] == itemId) {\\n                index = i + 1;\\n                break;\\n            }\\n        }\\n                console.logBytes32(bytes32(input));\\n                console.logBytes1(bytes1(itemId));\\n\\n        require(index > 0, 'SL:PFM:0');\\n\\n        index--;\\n\\n\\n        (res, popped) = popItem(input, index);\\n\\n        console.logBytes32(bytes32(res));\\n\\n        require(popped == itemId, 'SL:PFM:1');\\n    }\\n\\n    function items(uint256 input) internal pure returns (uint256[] memory res) {\\n        uint256 s = size(input);\\n        res = new uint256[](s);\\n        input >>= 8;\\n        for (uint256 i = 0; i < s; i++) {\\n            input >>= 8;\\n            res[i] = input & 0xff;\\n        }\\n    }\\n\\n    function itemsWithTokenId(uint256 input, uint256 tokenId) internal pure returns (uint256[] memory res) {\\n        uint256 s = size(input);\\n        res = new uint256[](s + 1);\\n        res[0] = tokenId;\\n        input >>= 8;\\n        for (uint256 i = 1; i < res.length; i++) {\\n            input >>= 8;\\n            res[i] = input & 0xff;\\n        }\\n    }\\n\\n    function pushItem(\\n        uint256 input,\\n        uint8 item,\\n        uint8 at\\n    ) internal pure returns (uint256 res) {\\n        assembly {\\n            let offset := add(16, mul(8, at))\\n            res := and(input, not(shl(offset, 0xff)))\\n            res := or(input, shl(offset, item))\\n        }\\n    }\\n\\n    function popItem(uint256 input, uint8 at) internal pure returns (uint256 res, uint8 item) {\\n        assembly {\\n            let offset := add(16, mul(8, at))\\n            res := and(input, not(shl(offset, 0xff)))\\n            item := shr(offset, input)\\n        }\\n    }\\n\\n    function size(uint256 input, uint8 update) internal pure returns (uint256 res) {\\n        assembly {\\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00)\\n            res := or(update, input)\\n        }\\n    }\\n\\n    function size(uint256 input) internal pure returns (uint8 res) {\\n        assembly {\\n            res := and(input, 0xff)\\n        }\\n    }\\n\\n    function base(uint256 input) internal pure returns (uint8 res) {\\n        assembly {\\n            res := and(shr(0x8, input), 0xff)\\n        }\\n    }\\n\\n    function base(uint256 input, uint8 update) internal pure returns (uint256 res) {\\n        assembly {\\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff)\\n            res := or(shl(0x8, update), input)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6319a06a2ad5c0920d22f9ad310d7bd7bf7c67da6566a05226b16d7641ff202d\"},\"contracts/src/libraries/SwapLib.sol\":{\"content\":\"pragma solidity 0.8.4;\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport 'hardhat/console.sol';\\nimport './ShiftLib.sol';\\nimport './QuadMath.sol';\\n\\nlibrary SwapLib {\\n    using Address for address;\\n    using ShiftLib for uint256;\\n\\n    struct Storage {\\n        uint256 data;\\n        mapping(uint256 => mapping(uint160 => uint256)) offers;\\n    }\\n\\n    function loadStorage(Storage storage s, address account)\\n        internal\\n        view\\n        returns (uint256 swapData, uint256 offerData)\\n    {\\n        return loadStorage(s, uint160(account));\\n    }\\n\\n    function loadStorage(\\n        Storage storage s,\\n        address account,\\n        uint256 epoch\\n    ) internal view returns (uint256 swapData, uint256 offerData) {\\n        return loadStorage(s, uint160(account), epoch);\\n    }\\n\\n    function loadStorage(Storage storage s, uint160 account)\\n        internal\\n        view\\n        returns (uint256 swapData, uint256 offerData)\\n    {\\n        swapData = s.data;\\n\\n        offerData = swapData == 0 || account == swapData.account() ? swapData : s.offers[swapData.epoch()][account];\\n    }\\n\\n    function loadStorage(\\n        Storage storage s,\\n        uint160 account,\\n        uint256 epoch\\n    ) internal view returns (uint256 swapData, uint256 offerData) {\\n        swapData = s.data;\\n\\n        swapData = swapData.epoch() == epoch ? swapData : 0;\\n\\n        offerData = swapData != 0 && account == swapData.account() ? swapData : s.offers[epoch][account];\\n    }\\n\\n    function checkClaimer(\\n        uint160 account,\\n        uint256 swapData,\\n        uint256 offerData,\\n        uint256 activeEpoch\\n    ) internal pure returns (bool winner) {\\n        require(offerData != 0, 'SL:CC:1');\\n\\n        bool over = activeEpoch > swapData.epoch();\\n\\n        return swapData.isOwner() || (account == swapData.account() && over);\\n    }\\n\\n    function points(uint256 total, uint256 bps) internal pure returns (uint256 res) {\\n        res = QuadMath.mulDiv(total, bps, 10000);\\n    }\\n\\n    function pointsWith(uint256 total, uint256 bps) internal pure returns (uint256 res) {\\n        res = points(total, bps) + total;\\n    }\\n\\n    // function moveERC721(\\n    //     uint256 tokenid,\\n    //     address from,\\n    //     address to\\n    // ) internal {\\n    //     // require(IERC721(token).ownerOf(tokenid) == from, 'AUC:TT:1');\\n    //     console.log(to, addressToTokenId(from), isTokenIdAddress(from));\\n\\n    //     IERC721(token).safeTransferFrom(from, to, tokenid);\\n\\n    //     require(IERC721(token).ownerOf(tokenid) == to, 'AUC:TT:3');\\n    // }\\n\\n    function itemTokenId(uint256 itemid, uint256 tokenid) internal pure returns (uint256 res) {\\n        res = (tokenid << 8) | itemid;\\n    }\\n\\n    function tokenIdToAddress(uint256 tokenid) internal pure returns (address res) {\\n        res = address(uint160((0x42069 << 140) | tokenid));\\n    }\\n\\n    function addressToTokenId(address addr) internal pure returns (uint256 res) {\\n        res = uint136(uint160(addr));\\n    }\\n\\n    function isTokenIdAddress(address addr) internal view returns (bool res) {\\n        console.logBytes32(bytes32(uint256(uint160(addr) >> 80)));\\n        console.logBytes32(bytes32(uint256(0x42069 << 60)));\\n        if (uint160(addr) >> 80 == 0x42069 << 60) return true;\\n    }\\n\\n    // function validateSender(\\n    //     address token,\\n    //     // uint256 tokenid,\\n    //     address sender\\n    // ) internal view {\\n    //     console.log(sender, addressToTokenId(sender), isTokenIdAddress(sender));\\n    //     require(msg.sender == sender || IERC721(token).ownerOf(addressToTokenId(sender)) == msg.sender, 'SL:VS:0');\\n    // }\\n\\n    // function moveERC1155(\\n    //     address token,\\n    //     uint256 itemtokenid,\\n    //     bool from\\n    // ) internal {\\n    //     // require(IERC721(token).ownerOf(tokenid) == from, 'AUC:TT:1');\\n\\n    //     IERC1155(token).safeBatchTransferFrom(\\n    //         address(0),\\n    //         address(0),\\n    //         new uint256[](0),\\n    //         new uint256[](0),\\n    //         abi.encode(uint8(itemtokenid), itemtokenid >> 8, from)\\n    //     );\\n\\n    //     // require(moveERC1155(token).ownerOf(tokenid) == to, 'AUC:TT:3');\\n    // }\\n}\\n\",\"keccak256\":\"0x7cf92b6a68603621bd30a38f69abaf66c9f3e6ca02f04b956956664ba2bf0d71\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200409e3803806200409e83398101604081905262000034916200019c565b6040805180820182526006815265139551d1d19560d21b60208083019182528351808501909452601384527f4e7567672046756e6769626c6520546f6b656e000000000000000000000000009084015281519192916200009791600091620000f6565b508051620000ad906001906020840190620000f6565b5050506001600160601b0319606082901b166080524360a0526040517f6bf6eaff5e9af8fbccb949f4c38cc016936f8775363ccf4224db160365785d5290600090a15062000209565b8280546200010490620001cc565b90600052602060002090601f01602090048101928262000128576000855562000173565b82601f106200014357805160ff191683800117855562000173565b8280016001018555821562000173579182015b828111156200017357825182559160200191906001019062000156565b506200018192915062000185565b5090565b5b8082111562000181576000815560010162000186565b600060208284031215620001ae578081fd5b81516001600160a01b0381168114620001c5578182fd5b9392505050565b600181811c90821680620001e157607f821691505b602082108114156200020357634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c60a051613df5620002a9600039600081816104db0152818161085801528181610a2501528181610aa001528181610b6a01528181610bc401528181610c2201528181610c7e01528181610e1d01528181610e630152610f2c0152600081816104240152818161087c01528181610a7f01528181610be801528181610c4401528181610ca001528181610e860152610f0b0152613df56000f3fe6080604052600436106101cd5760003560e01c80638f4c1d4f116100f7578063a7f0b3de11610095578063d636feae11610064578063d636feae1461055e578063d96073cf14610571578063e985e9c514610591578063f4f98ad5146105b157600080fd5b8063a7f0b3de146104c9578063b88d4fde146104fd578063c34902631461051d578063c87b56dd1461053d57600080fd5b806396cfd827116100d157806396cfd827146104705780639fa6dd3514610483578063a0712d6814610496578063a22cb465146104a957600080fd5b80638f4c1d4f14610412578063900cf0cf1461044657806395d89b411461045b57600080fd5b806342842e0e1161016f57806370a082311161013e57806370a0823114610382578063761610fc146103b057806378b38f36146103c3578063884c66ae146103f257600080fd5b806342842e0e1461030257806349b44f98146103225780634dd1496b146103425780636352211e1461036257600080fd5b8063095ea7b3116101ab578063095ea7b3146102615780630cf27c2a146102835780631cd4ad3a1461029657806323b872dd146102e257600080fd5b806301ffc9a7146101d257806306fdde0314610207578063081812fc14610229575b600080fd5b3480156101de57600080fd5b506101f26101ed366004613a03565b6105c4565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b5061021c610661565b6040516101fe9190613be0565b34801561023557600080fd5b50610249610244366004613a3b565b6106f5565b6040516001600160a01b0390911681526020016101fe565b34801561026d57600080fd5b5061028161027c3660046139da565b610701565b005b610281610291366004613aa8565b610839565b3480156102a257600080fd5b506102b66102b1366004613a3b565b6108a0565b604080516001600160a01b039095168552602085019390935291830152151560608201526080016101fe565b3480156102ee57600080fd5b506102816102fd366004613890565b610946565b34801561030e57600080fd5b5061028161031d366004613890565b6109c1565b34801561032e57600080fd5b5061028161033d366004613aa8565b6109dc565b34801561034e57600080fd5b5061028161035d366004613ad3565b610a03565b34801561036e57600080fd5b5061024961037d366004613a3b565b610a52565b34801561038e57600080fd5b506103a261039d36600461384d565b610a5e565b6040519081526020016101fe565b6102816103be366004613a3b565b610a6a565b3480156103cf57600080fd5b506103e36103de366004613a3b565b610ac7565b6040516101fe93929190613c0c565b3480156103fe57600080fd5b506103a261040d366004613a74565b610ae4565b34801561041e57600080fd5b506102497f000000000000000000000000000000000000000000000000000000000000000081565b34801561045257600080fd5b506103a2610b63565b34801561046757600080fd5b5061021c610b93565b61028161047e366004613aa8565b610ba5565b610281610491366004613a3b565b610c0c565b6102816104a4366004613a3b565b610c68565b3480156104b557600080fd5b506102816104c43660046139a0565b610cc8565b3480156104d557600080fd5b506103a27f000000000000000000000000000000000000000000000000000000000000000081565b34801561050957600080fd5b506102816105183660046138cb565b610d8d565b34801561052957600080fd5b50610281610538366004613a53565b610e09565b34801561054957600080fd5b5061021c610558366004613a3b565b50606090565b61028161056c366004613aa8565b610e43565b34801561057d57600080fd5b5061028161058c366004613a53565b610eaa565b34801561059d57600080fd5b506101f26105ac366004613867565b610ec3565b6102816105bf366004613a3b565b610ef6565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061062757506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061065b57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b606060008001805461067290613ccf565b80601f016020809104026020016040519081016040528092919081815260200182805461069e90613ccf565b80156106eb5780601f106106c0576101008083540402835291602001916106eb565b820191906000526020600020905b8154815290600101906020018083116106ce57829003601f168201915b5050505050905090565b600061065b8183610f50565b600061070d8183610feb565b9050806001600160a01b0316836001600160a01b0316141561079c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806107b857506107b88133610ec3565b61082a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610793565b6108348383611078565b505050565b60008381526009602090815260408083208584529091528120610834917f00000000000000000000000000000000000000000000000000000000000000008686867f00000000000000000000000000000000000000000000000000000000000000006110e7565b600081815260086020526040812081908190819081906108c090826111df565b509050806108fa5760405162461bcd60e51b815260206004820152600760248201526604e533a47533a360cc1b6044820152606401610793565b80945060a881901c65ffffffffffff1660a082901c60ff166004021b64e8d4a510000293506109308160d81c640fffffffff1690565b925061093c8160ff1c90565b9150509193509193565b61095033826111f7565b6109b65760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b6108348383836112c2565b61083483838360405180602001604052806000815250610d8d565b60008381526009602090815260408083208584529091528120610834916006858588611491565b60008481526009602090815260408083208684529091528120610a4c916006877f0000000000000000000000000000000000000000000000000000000000000000888789611623565b50505050565b600061065b8183610feb565b600061065b81836117ae565b6000818152600860205260409020610ac490827f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061184c565b50565b6000806060610ad76006856118a1565b9250925092509193909250565b60008381526008602052604081208190610aff9084866118d4565b91505080610b395760405162461bcd60e51b815260206004820152600760248201526604e533a47533a360cc1b6044820152606401610793565b60a881901c65ffffffffffff1660a082901c60ff166004021b64e8d4a51000025b95945050505050565b6000610b8e7f00000000000000000000000000000000000000000000000000000000000000006118ee565b905090565b60606000600101805461067290613ccf565b60008381526009602090815260408083208584529091528120610834917f00000000000000000000000000000000000000000000000000000000000000008686867f00000000000000000000000000000000000000000000000000000000000000006118fa565b6000818152600860205260409020610ac49060067f0000000000000000000000000000000000000000000000000000000000000000847f00000000000000000000000000000000000000000000000000000000000000006119a8565b6000818152600860205260409020610cc49060067f0000000000000000000000000000000000000000000000000000000000000000847f0000000000000000000000000000000000000000000000000000000000000000611a2a565b5050565b6001600160a01b038216331415610d215760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610793565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610d9733836111f7565b610dfd5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b610a4c84848484611b9a565b6000828152600860205260408120610cc4917f00000000000000000000000000000000000000000000000000000000000000008585611c23565b6000838152600960209081526040808320858452909152812061083491857f000000000000000000000000000000000000000000000000000000000000000086867f0000000000000000000000000000000000000000000000000000000000000000611d1b565b6000828152600860205260408120610cc4918484611e1c565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081205460ff165b9392505050565b6000818152600860205260409020610ac490827f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611ed6565b60008181526002830160205260408120546001600160a01b0316610fcb5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610793565b50600090815260049190910160205260409020546001600160a01b031690565b60008181526002830160205260408120546001600160a01b031680610eef5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610793565b600081815260046020526040812080546001600160a01b0319166001600160a01b03851690811790915582916110ae9083610feb565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61010083106111225760405162461bcd60e51b815260206004820152600760248201526604d4c3a43493a360cc1b6044820152606401610793565b33611136876001600160a01b038516610feb565b6001600160a01b0316146111775760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b61118387838388611f21565b60408051858152602081018590526001600160a01b038416918101919091523460608201527ff562263f29883bf3519f3733bb30b47c831bfe9809884430857d8cf29571d554906080015b60405180910390a150505050505050565b6000806111ec848461217d565b915091509250929050565b6000611202826121fc565b6112635760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610793565b600061126f8184610feb565b9050806001600160a01b0316846001600160a01b031614806112aa5750836001600160a01b031661129f846106f5565b6001600160a01b0316145b806112ba57506112ba8185610ec3565b949350505050565b6001600160a01b0383166112d7600083610feb565b6001600160a01b0316146113535760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610793565b6001600160a01b0382166113ce5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610793565b6113d9600082611078565b6001600160a01b0383166000908152600360205260408120805460019290611402908490613c9b565b90915550506001600160a01b0382166000908152600360205260408120805460019290611430908490613c2b565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b336114a5866001600160a01b038416610feb565b6001600160a01b0316146114e65760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b61010083106115375760405162461bcd60e51b815260206004820152600760248201527f4d4c3a53493a30000000000000000000000000000000000000000000000000006044820152606401610793565b6000611543878361217d565b509050801561157e5760405162461bcd60e51b815260206004820152600760248201526604e533a53533a360cc1b6044820152606401610793565b6115c2836115bc60016001600160a01b0319851686175b90507f80000000000000000000000000000000000000000000000000000000000000001790565b9061221b565b5080885590506115dc856001600160a01b0384168661229c565b604080516001600160a01b0384168152602081018690529081018490527fc8032e5c721106f3e30ad0f1a45e919c8d034cf788842ff336b0150f0fbcc60e906060016111ce565b33611637886001600160a01b038416610feb565b6001600160a01b0316146116785760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b61010083106116b35760405162461bcd60e51b815260206004820152600760248201526604d4c3a43493a360cc1b6044820152606401610793565b60006116be866118ee565b90506000806116ce8b85876123a2565b600087815260018e01602090815260408083206001600160a01b038a168452909152812055909250905061170484838386612422565b156117265760008b55611721896001600160a01b038616886124c0565b611751565b61175160a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a51000025b339061261b565b60408051888152602081018890529081018690526001600160a01b03851660608201527f38195a074a64067740045e77ca5873f34a0df243a8ac9ecc39452c47e7061e479060800160405180910390a15050505050505050505050565b60006001600160a01b03821661182c5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610793565b506001600160a01b03166000908152600391909101602052604090205490565b61185884338484612734565b6040805184815233602082015234918101919091527f2d57124cfa4e385afd5cc9d6f24874bdd21303ac9131d7cb674be2a5855c7002906060015b60405180910390a150505050565b60008181526020839052604081205481906060906118be81612a38565b60ff600883901c81169892169650945092505050565b6000806118e28585856123a2565b91509150935093915050565b600061065b8243612af2565b3361190e876001600160a01b038516610feb565b6001600160a01b03161461194f5760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b60008061195c898561217d565b9150915080600014801561197557506119758260ff1c90565b1561198e57611989898989898989896110e7565b61199d565b61199d89898989898989611d1b565b505050505050505050565b60006119b3846118ee565b90506000806119c288336111df565b9150915084831480156119d3575081155b156119eb576119e58888888888611a2a565b50611a20565b801580156119fe57506119fe8260ff1c90565b15611a1457611a0f88868689611ed6565b611a20565b611a208886868961184c565b5050505050505050565b600080611a36856118ee565b9050600080611a4589336111df565b91509150858314611a985760405162461bcd60e51b815260206004820152600660248201527f4e533a4d3a3000000000000000000000000000000000000000000000000000006044820152606401610793565b8115611ae65760405162461bcd60e51b815260206004820152600660248201527f4e533a4d3a4400000000000000000000000000000000000000000000000000006044820152606401610793565b611b07346115bc33611af9600088612b0a565b6001600160a01b0319161790565b50808a5593503415611b2657611b266001600160a01b0386163461261b565b611b31888789612b5c565b6040805184815233602082015264e8d4a5100065ffffffffffff60a888901c16600460ff60a08a901c16021b028183015290517f4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f69181900360600190a150505095945050505050565b611ba58484846112c2565b611bb184848484612d40565b610a4c5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610793565b6000611c2e846118ee565b9050600080611c3e8833866118d4565b600086815260018b01602090815260408083203380855292528220919091559193509150611c6e90838386612422565b15611caa5760008855611c888260d81c640fffffffff1690565b841415611c9f57611c9a873387612ea0565b611cd2565b611c9a873387612fad565b611cd260a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a510000261174a565b6040805186815260208101869052338183015290517fd79254e5daba749baa8ba954e77bbbb18efef113a8070d00df9a188d819324269181900360600190a15050505050505050565b6101008310611d6c5760405162461bcd60e51b815260206004820152600760248201527f4d4c3a4f493a30000000000000000000000000000000000000000000000000006044820152606401610793565b33611d80876001600160a01b038516610feb565b6001600160a01b031614611dc15760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b611dcd87838388612734565b60408051858152602081018590526001600160a01b038416918101919091523460608201527fe237f23f900f35d5f1a406ba97ccfdffe082ffcda87098765811817c2c14ac87906080016111ce565b6000611e2885336111df565b5090508015611e635760405162461bcd60e51b815260206004820152600760248201526604e533a53533a360cc1b6044820152606401610793565b611e7e826115bc60016001600160a01b031985163317611595565b508086559050611e8f8433856130e1565b604080518481523360208201529081018390527f48b43f133ac721cb5f6e2a3d8ab7caee987bccfb4197537cf43c9f907f057f3a9060600160405180910390a15050505050565b611ee284338484611f21565b6040805184815233602082015234918101919091527f094925310677b39991f64178494fad708beb62f73f36bb0baa493476ecf5870990606001611893565b6000611f2c826118ee565b9050600080611f3b878761217d565b9092509050611f4982613253565b60003411611f995760405162461bcd60e51b815260206004820152600860248201527f534c3a434f4d3a320000000000000000000000000000000000000000000000006044820152606401610793565b8015611fd25760405162461bcd60e51b81526020600482015260086024820152670534c3a48534f3a360c41b6044820152606401610793565b611fdc8260ff1c90565b6120285760405162461bcd60e51b815260206004820152600860248201527f534c3a48534f3a310000000000000000000000000000000000000000000000006044820152606401610793565b6000612035846001613c2b565b905060008061204c346115bc8b611af98588612b0a565b909250905060a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a51000026120a1606461271060a889901c65ffffffffffff1660a08a901c60ff166004021b64e8d4a51000025b91906132c6565b106120d95760405162461bcd60e51b815260206004820152600860248201526714d30e93d0940e8d60c21b6044820152606401610793565b600083815260018b01602052604081208691826001600160a01b03168152602081019190915260400160002055818a556121718160a887901c65ffffffffffff1660a088901c60ff166004021b64e8d4a510000260a885901c65ffffffffffff1660a086901c60ff166004021b64e8d4a51000026121579190613c9b565b6121619190613c2b565b6001600160a01b038a169061261b565b50505050505050505050565b8154600081158061219f5750816001600160a01b0316836001600160a01b0316145b6121f1578360010160006121ba8460d81c640fffffffff1690565b81526020019081526020016000206000846001600160a01b03166001600160a01b03168152602001908152602001600020546121f3565b815b90509250929050565b6000818152600260205260408120546001600160a01b0316151561065b565b6000808264e8d4a51000840493505b65ffffffffffff841115612249576001830192508360041c935061222a565b828460081b1793508360081c836004021b64e8d4a5100081028203925050507fffffffffff00000000000000ffffffffffffffffffffffffffffffffffffffff841693508260a01b841791509250929050565b600082815260208490526040902054806122e55760405162461bcd60e51b815260206004820152600a6024820152690313135353a5354463a360b41b6044820152606401610793565b6122ef8183613384565b505060008481526020868152604080832084905585835260018801909152812080549293509061231e83613d0a565b909155505060408051848152602081018490527f452c5f777db10bd58f64d8bc58668d14487d008ff527ca431853ea22e195f176910160405180910390a160408051838152600160208201523091339183917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a450505050565b82546000826123b88360d81c640fffffffff1690565b146123c45760006123c6565b815b915081158015906123e85750816001600160a01b0316846001600160a01b0316145b61241657600083815260018601602090815260408083206001600160a01b0388168452909152902054612418565b815b9050935093915050565b6000826124715760405162461bcd60e51b815260206004820152600760248201527f534c3a43433a31000000000000000000000000000000000000000000000000006044820152606401610793565b60006124848560d81c640fffffffff1690565b831190506124928560ff1c90565b806124b65750846001600160a01b0316866001600160a01b03161480156124b65750805b9695505050505050565b600082815260208490526040902054806125095760405162461bcd60e51b815260206004820152600a6024820152690313135353a5354463a360b41b6044820152606401610793565b60008281526001850160205260409020546125665760405162461bcd60e51b815260206004820152600b60248201527f313135353a534254463a310000000000000000000000000000000000000000006044820152606401610793565b6000828152600185016020526040812080549161258283613d0a565b90915550612592905081836134db565b506000848152602086815260409182902083905581518681529081018590529192507f452c5f777db10bd58f64d8bc58668d14487d008ff527ca431853ea22e195f176910160405180910390a160408051838152600160208201523391309182917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101612394565b8047101561266b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610793565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146126b8576040519150601f19603f3d011682016040523d82523d6000602084013e6126bd565b606091505b50509050806108345760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610793565b600061273f826118ee565b905060008061274e878761217d565b91509150600034116127a25760405162461bcd60e51b815260206004820152600860248201527f534c3a4f42503a320000000000000000000000000000000000000000000000006044820152606401610793565b816127ef5760405162461bcd60e51b815260206004820152600660248201527f4e533a303a3000000000000000000000000000000000000000000000000000006044820152606401610793565b6127f98160ff1c90565b156128315760405162461bcd60e51b81526020600482015260086024820152670534c3a48534f3a360c41b6044820152606401610793565b6128428260d81c640fffffffff1690565b8311156128915760405162461bcd60e51b815260206004820152600860248201527f534c3a4f42503a330000000000000000000000000000000000000000000000006044820152606401610793565b6001600160a01b038616826001600160a01b0316146128f457818760010160006128c28560d81c640fffffffff1690565b815260200190815260200160002060006128d98590565b6001600160a01b031681526020810191909152604001600020555b6000806129436129233464e8d4a5100065ffffffffffff60a888901c16600460ff60a08a901c16021b02613c2b565b6115bc8a611af961293b8960d81c640fffffffff1690565b600090612b0a565b909250905060a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a5100002612995606461271060a888901c65ffffffffffff1660a089901c60ff166004021b64e8d4a510000261209a565b106129cd5760405162461bcd60e51b815260206004820152600860248201526714d30e93d0940e8d60c21b6044820152606401610793565b81895561199d8160a886901c65ffffffffffff1660a087901c60ff166004021b64e8d4a510000260a885901c65ffffffffffff1660a086901c60ff166004021b64e8d4a5100002612a1e9190613c9b565b612a289190613c2b565b6001600160a01b0389169061261b565b606060ff82168067ffffffffffffffff811115612a6557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612a8e578160200160208202803683370190505b509150600883901c925060005b81811015612aeb57600884901c93508360ff16838281518110612ace57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280612ae381613d0a565b915050612a9b565b5050919050565b60006019612b008484613c9b565b610eef9190613c68565b6000640fffffffff821115612b2f57634e487b7160e01b600052600160045260246000fd5b5060d81b7ff000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff919091161790565b600080612b68836135c5565b915091508160001415612bbd5760405162461bcd60e51b815260206004820152600a60248201527f3732313a4d494e543a30000000000000000000000000000000000000000000006044820152606401610793565b838114612c0c5760405162461bcd60e51b815260206004820152600a60248201527f3732313a4d494e543a31000000000000000000000000000000000000000000006044820152606401610793565b6000612c1986868561368e565b90507fe98dd458321045a46b57bd2d5251a739e0f01750a71e4d3e71cee6c17164dd328582604051612c4c929190613bf3565b60405180910390a16000815167ffffffffffffffff811115612c7e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612ca7578160200160208202803683370190505b50905060005b8151811015612cf5576001828281518110612cd857634e487b7160e01b600052603260045260246000fd5b602090810291909101015280612ced81613d0a565b915050612cad565b50604051339060009030907f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb90612d2f9087908790613bbb565b60405180910390a450505050505050565b60006001600160a01b0384163b15612e9857604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612d84903390899088908890600401613b89565b602060405180830381600087803b158015612d9e57600080fd5b505af1925050508015612dce575060408051601f3d908101601f19168201909252612dcb91810190613a1f565b60015b612e7e573d808015612dfc576040519150601f19603f3d011682016040523d82523d6000602084013e612e01565b606091505b508051612e765760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610793565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506112ba565b5060016112ba565b612ebb30838360405180602001604052806000815250612d40565b612f215760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b6001600160a01b03821660009081526003840160205260408120805460019290612f4c908490613c2b565b9091555050600081815260028401602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b612fc830838360405180602001604052806000815250612d40565b61302e5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b3060009081526003840160205260408120805460019290613050908490613c9b565b90915550506001600160a01b03821660009081526003840160205260408120805460019290613080908490613c2b565b9091555050600081815260028401602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839230917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a4505050565b6130eb8382610feb565b6001600160a01b0316336001600160a01b031614801561311357506001600160a01b03821633145b80156131305750306131258483610f50565b6001600160a01b0316145b6131965760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b6131a0838261373f565b6001600160a01b038216600090815260038401602052604081208054600192906131cb908490613c9b565b909155505030600090815260038401602052604081208054600192906131f2908490613c2b565b9091555050600081815260028401602052604080822080546001600160a01b03191630908117909155905183926001600160a01b038616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a4505050565b610ac48160405160240161326991815260200190565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f27b7cf8500000000000000000000000000000000000000000000000000000000179052613769565b60008080600019858709858702925082811083820303915050806000141561330057600084116132f557600080fd5b508290049050610eef565b80841161330c57600080fd5b600084868809808403938111909203919050600061332c86196001613c2b565b8616958690049560026003880281188089028203028089028203028089028203028089028203028089028203028089029091030260008290038290046001019490940294049390931791909102925050509392505050565b60008060008061339386612a38565b905060005b81518160ff1610156133fd578560ff16828260ff16815181106133cb57634e487b7160e01b600052603260045260246000fd5b602002602001015114156133eb576133e4816001613c43565b92506133fd565b806133f581613d25565b915050613398565b5061340786613253565b6134138560f81b61378a565b60008260ff16116134515760405162461bcd60e51b81526020600482015260086024820152670534c3a50464d3a360c41b6044820152606401610793565b8161345b81613cb2565b60ff6010600883020190811b198916965088901c9450925061347e905084613253565b8460ff168360ff16146134d35760405162461bcd60e51b815260206004820152600860248201527f534c3a50464d3a310000000000000000000000000000000000000000000000006044820152606401610793565b509250925092565b60008060006134e985612a38565b905060005b81518160ff16101561355157818160ff168151811061351d57634e487b7160e01b600052603260045260246000fd5b60200260200101516000141561353f57613538816001613c43565b9250613551565b8061354981613d25565b9150506134ee565b5061355b85613253565b60008260ff16116135995760405162461bcd60e51b81526020600482015260086024820152670534c3a50464d3a360c41b6044820152606401610793565b816135a381613cb2565b9250506008820260100184901b851792506135bd83613253565b509250929050565b6000806135d28343612af2565b905060006135e08483613819565b905060006135ef600183613c9b565b4090508061363f5760405162461bcd60e51b815260206004820152600760248201527f4550433a53424c000000000000000000000000000000000000000000000000006044820152606401610793565b604080516020810183905290810184905230606090811b6bffffffffffffffffffffffff1916908201526074016040516020818303038152906040528051906020012060001c93505050915091565b600082815260208490526040902054606090156136ed5760405162461bcd60e51b815260206004820152600660248201527f494c3a4d3a3000000000000000000000000000000000000000000000000000006044820152606401610793565b613723600461371b60146137048660081c60ff1690565b61370e9190613d45565b60081b61ff001986161790565b60ff19161790565b600084815260208690526040902081905591506112ba82612a38565b6000818152600483016020526040812080546001600160a01b031916905581906110ae8483610feb565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6040517fff0000000000000000000000000000000000000000000000000000000000000082166024820152610ac49060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f6e18a12800000000000000000000000000000000000000000000000000000000179052613769565b600082613827601984613c7c565b610eef9190613c2b565b80356001600160a01b038116811461384857600080fd5b919050565b60006020828403121561385e578081fd5b610eef82613831565b60008060408385031215613879578081fd5b61388283613831565b91506121f360208401613831565b6000806000606084860312156138a4578081fd5b6138ad84613831565b92506138bb60208501613831565b9150604084013590509250925092565b600080600080608085870312156138e0578081fd5b6138e985613831565b93506138f760208601613831565b925060408501359150606085013567ffffffffffffffff8082111561391a578283fd5b818701915087601f83011261392d578283fd5b81358181111561393f5761393f613d93565b604051601f8201601f19908116603f0116810190838211818310171561396757613967613d93565b816040528281528a602084870101111561397f578586fd5b82602086016020830137918201602001949094529598949750929550505050565b600080604083850312156139b2578182fd5b6139bb83613831565b9150602083013580151581146139cf578182fd5b809150509250929050565b600080604083850312156139ec578182fd5b6139f583613831565b946020939093013593505050565b600060208284031215613a14578081fd5b8135610eef81613da9565b600060208284031215613a30578081fd5b8151610eef81613da9565b600060208284031215613a4c578081fd5b5035919050565b60008060408385031215613a65578182fd5b50508035926020909101359150565b600080600060608486031215613a88578283fd5b8335925060208401359150613a9f60408501613831565b90509250925092565b600080600060608486031215613abc578283fd5b505081359360208301359350604090920135919050565b60008060008060808587031215613ae8578384fd5b5050823594602084013594506040840135936060013592509050565b6000815180845260208085019450808401835b83811015613b3357815187529582019590820190600101613b17565b509495945050505050565b60008151808452815b81811015613b6357602081850181015186830182015201613b47565b81811115613b745782602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526124b66080830184613b3e565b604081526000613bce6040830185613b04565b8281036020840152610b5a8185613b04565b602081526000610eef6020830184613b3e565b8281526040602082015260006112ba6040830184613b04565b838152826020820152606060408201526000610b5a6060830184613b04565b60008219821115613c3e57613c3e613d67565b500190565b600060ff821660ff84168060ff03821115613c6057613c60613d67565b019392505050565b600082613c7757613c77613d7d565b500490565b6000816000190483118215151615613c9657613c96613d67565b500290565b600082821015613cad57613cad613d67565b500390565b600060ff821680613cc557613cc5613d67565b6000190192915050565b600181811c90821680613ce357607f821691505b60208210811415613d0457634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613d1e57613d1e613d67565b5060010190565b600060ff821660ff811415613d3c57613d3c613d67565b60010192915050565b600060ff831680613d5857613d58613d7d565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610ac457600080fdfea2646970667358221220b3c89ab27b5e7e081ca635edad351a275e3c11f9b8687619741a51c6b28aded064736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c80638f4c1d4f116100f7578063a7f0b3de11610095578063d636feae11610064578063d636feae1461055e578063d96073cf14610571578063e985e9c514610591578063f4f98ad5146105b157600080fd5b8063a7f0b3de146104c9578063b88d4fde146104fd578063c34902631461051d578063c87b56dd1461053d57600080fd5b806396cfd827116100d157806396cfd827146104705780639fa6dd3514610483578063a0712d6814610496578063a22cb465146104a957600080fd5b80638f4c1d4f14610412578063900cf0cf1461044657806395d89b411461045b57600080fd5b806342842e0e1161016f57806370a082311161013e57806370a0823114610382578063761610fc146103b057806378b38f36146103c3578063884c66ae146103f257600080fd5b806342842e0e1461030257806349b44f98146103225780634dd1496b146103425780636352211e1461036257600080fd5b8063095ea7b3116101ab578063095ea7b3146102615780630cf27c2a146102835780631cd4ad3a1461029657806323b872dd146102e257600080fd5b806301ffc9a7146101d257806306fdde0314610207578063081812fc14610229575b600080fd5b3480156101de57600080fd5b506101f26101ed366004613a03565b6105c4565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b5061021c610661565b6040516101fe9190613be0565b34801561023557600080fd5b50610249610244366004613a3b565b6106f5565b6040516001600160a01b0390911681526020016101fe565b34801561026d57600080fd5b5061028161027c3660046139da565b610701565b005b610281610291366004613aa8565b610839565b3480156102a257600080fd5b506102b66102b1366004613a3b565b6108a0565b604080516001600160a01b039095168552602085019390935291830152151560608201526080016101fe565b3480156102ee57600080fd5b506102816102fd366004613890565b610946565b34801561030e57600080fd5b5061028161031d366004613890565b6109c1565b34801561032e57600080fd5b5061028161033d366004613aa8565b6109dc565b34801561034e57600080fd5b5061028161035d366004613ad3565b610a03565b34801561036e57600080fd5b5061024961037d366004613a3b565b610a52565b34801561038e57600080fd5b506103a261039d36600461384d565b610a5e565b6040519081526020016101fe565b6102816103be366004613a3b565b610a6a565b3480156103cf57600080fd5b506103e36103de366004613a3b565b610ac7565b6040516101fe93929190613c0c565b3480156103fe57600080fd5b506103a261040d366004613a74565b610ae4565b34801561041e57600080fd5b506102497f000000000000000000000000000000000000000000000000000000000000000081565b34801561045257600080fd5b506103a2610b63565b34801561046757600080fd5b5061021c610b93565b61028161047e366004613aa8565b610ba5565b610281610491366004613a3b565b610c0c565b6102816104a4366004613a3b565b610c68565b3480156104b557600080fd5b506102816104c43660046139a0565b610cc8565b3480156104d557600080fd5b506103a27f000000000000000000000000000000000000000000000000000000000000000081565b34801561050957600080fd5b506102816105183660046138cb565b610d8d565b34801561052957600080fd5b50610281610538366004613a53565b610e09565b34801561054957600080fd5b5061021c610558366004613a3b565b50606090565b61028161056c366004613aa8565b610e43565b34801561057d57600080fd5b5061028161058c366004613a53565b610eaa565b34801561059d57600080fd5b506101f26105ac366004613867565b610ec3565b6102816105bf366004613a3b565b610ef6565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061062757506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061065b57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b606060008001805461067290613ccf565b80601f016020809104026020016040519081016040528092919081815260200182805461069e90613ccf565b80156106eb5780601f106106c0576101008083540402835291602001916106eb565b820191906000526020600020905b8154815290600101906020018083116106ce57829003601f168201915b5050505050905090565b600061065b8183610f50565b600061070d8183610feb565b9050806001600160a01b0316836001600160a01b0316141561079c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806107b857506107b88133610ec3565b61082a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610793565b6108348383611078565b505050565b60008381526009602090815260408083208584529091528120610834917f00000000000000000000000000000000000000000000000000000000000000008686867f00000000000000000000000000000000000000000000000000000000000000006110e7565b600081815260086020526040812081908190819081906108c090826111df565b509050806108fa5760405162461bcd60e51b815260206004820152600760248201526604e533a47533a360cc1b6044820152606401610793565b80945060a881901c65ffffffffffff1660a082901c60ff166004021b64e8d4a510000293506109308160d81c640fffffffff1690565b925061093c8160ff1c90565b9150509193509193565b61095033826111f7565b6109b65760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b6108348383836112c2565b61083483838360405180602001604052806000815250610d8d565b60008381526009602090815260408083208584529091528120610834916006858588611491565b60008481526009602090815260408083208684529091528120610a4c916006877f0000000000000000000000000000000000000000000000000000000000000000888789611623565b50505050565b600061065b8183610feb565b600061065b81836117ae565b6000818152600860205260409020610ac490827f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061184c565b50565b6000806060610ad76006856118a1565b9250925092509193909250565b60008381526008602052604081208190610aff9084866118d4565b91505080610b395760405162461bcd60e51b815260206004820152600760248201526604e533a47533a360cc1b6044820152606401610793565b60a881901c65ffffffffffff1660a082901c60ff166004021b64e8d4a51000025b95945050505050565b6000610b8e7f00000000000000000000000000000000000000000000000000000000000000006118ee565b905090565b60606000600101805461067290613ccf565b60008381526009602090815260408083208584529091528120610834917f00000000000000000000000000000000000000000000000000000000000000008686867f00000000000000000000000000000000000000000000000000000000000000006118fa565b6000818152600860205260409020610ac49060067f0000000000000000000000000000000000000000000000000000000000000000847f00000000000000000000000000000000000000000000000000000000000000006119a8565b6000818152600860205260409020610cc49060067f0000000000000000000000000000000000000000000000000000000000000000847f0000000000000000000000000000000000000000000000000000000000000000611a2a565b5050565b6001600160a01b038216331415610d215760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610793565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610d9733836111f7565b610dfd5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b610a4c84848484611b9a565b6000828152600860205260408120610cc4917f00000000000000000000000000000000000000000000000000000000000000008585611c23565b6000838152600960209081526040808320858452909152812061083491857f000000000000000000000000000000000000000000000000000000000000000086867f0000000000000000000000000000000000000000000000000000000000000000611d1b565b6000828152600860205260408120610cc4918484611e1c565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081205460ff165b9392505050565b6000818152600860205260409020610ac490827f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611ed6565b60008181526002830160205260408120546001600160a01b0316610fcb5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610793565b50600090815260049190910160205260409020546001600160a01b031690565b60008181526002830160205260408120546001600160a01b031680610eef5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610793565b600081815260046020526040812080546001600160a01b0319166001600160a01b03851690811790915582916110ae9083610feb565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61010083106111225760405162461bcd60e51b815260206004820152600760248201526604d4c3a43493a360cc1b6044820152606401610793565b33611136876001600160a01b038516610feb565b6001600160a01b0316146111775760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b61118387838388611f21565b60408051858152602081018590526001600160a01b038416918101919091523460608201527ff562263f29883bf3519f3733bb30b47c831bfe9809884430857d8cf29571d554906080015b60405180910390a150505050505050565b6000806111ec848461217d565b915091509250929050565b6000611202826121fc565b6112635760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610793565b600061126f8184610feb565b9050806001600160a01b0316846001600160a01b031614806112aa5750836001600160a01b031661129f846106f5565b6001600160a01b0316145b806112ba57506112ba8185610ec3565b949350505050565b6001600160a01b0383166112d7600083610feb565b6001600160a01b0316146113535760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610793565b6001600160a01b0382166113ce5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610793565b6113d9600082611078565b6001600160a01b0383166000908152600360205260408120805460019290611402908490613c9b565b90915550506001600160a01b0382166000908152600360205260408120805460019290611430908490613c2b565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b336114a5866001600160a01b038416610feb565b6001600160a01b0316146114e65760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b61010083106115375760405162461bcd60e51b815260206004820152600760248201527f4d4c3a53493a30000000000000000000000000000000000000000000000000006044820152606401610793565b6000611543878361217d565b509050801561157e5760405162461bcd60e51b815260206004820152600760248201526604e533a53533a360cc1b6044820152606401610793565b6115c2836115bc60016001600160a01b0319851686175b90507f80000000000000000000000000000000000000000000000000000000000000001790565b9061221b565b5080885590506115dc856001600160a01b0384168661229c565b604080516001600160a01b0384168152602081018690529081018490527fc8032e5c721106f3e30ad0f1a45e919c8d034cf788842ff336b0150f0fbcc60e906060016111ce565b33611637886001600160a01b038416610feb565b6001600160a01b0316146116785760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b61010083106116b35760405162461bcd60e51b815260206004820152600760248201526604d4c3a43493a360cc1b6044820152606401610793565b60006116be866118ee565b90506000806116ce8b85876123a2565b600087815260018e01602090815260408083206001600160a01b038a168452909152812055909250905061170484838386612422565b156117265760008b55611721896001600160a01b038616886124c0565b611751565b61175160a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a51000025b339061261b565b60408051888152602081018890529081018690526001600160a01b03851660608201527f38195a074a64067740045e77ca5873f34a0df243a8ac9ecc39452c47e7061e479060800160405180910390a15050505050505050505050565b60006001600160a01b03821661182c5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610793565b506001600160a01b03166000908152600391909101602052604090205490565b61185884338484612734565b6040805184815233602082015234918101919091527f2d57124cfa4e385afd5cc9d6f24874bdd21303ac9131d7cb674be2a5855c7002906060015b60405180910390a150505050565b60008181526020839052604081205481906060906118be81612a38565b60ff600883901c81169892169650945092505050565b6000806118e28585856123a2565b91509150935093915050565b600061065b8243612af2565b3361190e876001600160a01b038516610feb565b6001600160a01b03161461194f5760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b60008061195c898561217d565b9150915080600014801561197557506119758260ff1c90565b1561198e57611989898989898989896110e7565b61199d565b61199d89898989898989611d1b565b505050505050505050565b60006119b3846118ee565b90506000806119c288336111df565b9150915084831480156119d3575081155b156119eb576119e58888888888611a2a565b50611a20565b801580156119fe57506119fe8260ff1c90565b15611a1457611a0f88868689611ed6565b611a20565b611a208886868961184c565b5050505050505050565b600080611a36856118ee565b9050600080611a4589336111df565b91509150858314611a985760405162461bcd60e51b815260206004820152600660248201527f4e533a4d3a3000000000000000000000000000000000000000000000000000006044820152606401610793565b8115611ae65760405162461bcd60e51b815260206004820152600660248201527f4e533a4d3a4400000000000000000000000000000000000000000000000000006044820152606401610793565b611b07346115bc33611af9600088612b0a565b6001600160a01b0319161790565b50808a5593503415611b2657611b266001600160a01b0386163461261b565b611b31888789612b5c565b6040805184815233602082015264e8d4a5100065ffffffffffff60a888901c16600460ff60a08a901c16021b028183015290517f4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f69181900360600190a150505095945050505050565b611ba58484846112c2565b611bb184848484612d40565b610a4c5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610793565b6000611c2e846118ee565b9050600080611c3e8833866118d4565b600086815260018b01602090815260408083203380855292528220919091559193509150611c6e90838386612422565b15611caa5760008855611c888260d81c640fffffffff1690565b841415611c9f57611c9a873387612ea0565b611cd2565b611c9a873387612fad565b611cd260a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a510000261174a565b6040805186815260208101869052338183015290517fd79254e5daba749baa8ba954e77bbbb18efef113a8070d00df9a188d819324269181900360600190a15050505050505050565b6101008310611d6c5760405162461bcd60e51b815260206004820152600760248201527f4d4c3a4f493a30000000000000000000000000000000000000000000000000006044820152606401610793565b33611d80876001600160a01b038516610feb565b6001600160a01b031614611dc15760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b611dcd87838388612734565b60408051858152602081018590526001600160a01b038416918101919091523460608201527fe237f23f900f35d5f1a406ba97ccfdffe082ffcda87098765811817c2c14ac87906080016111ce565b6000611e2885336111df565b5090508015611e635760405162461bcd60e51b815260206004820152600760248201526604e533a53533a360cc1b6044820152606401610793565b611e7e826115bc60016001600160a01b031985163317611595565b508086559050611e8f8433856130e1565b604080518481523360208201529081018390527f48b43f133ac721cb5f6e2a3d8ab7caee987bccfb4197537cf43c9f907f057f3a9060600160405180910390a15050505050565b611ee284338484611f21565b6040805184815233602082015234918101919091527f094925310677b39991f64178494fad708beb62f73f36bb0baa493476ecf5870990606001611893565b6000611f2c826118ee565b9050600080611f3b878761217d565b9092509050611f4982613253565b60003411611f995760405162461bcd60e51b815260206004820152600860248201527f534c3a434f4d3a320000000000000000000000000000000000000000000000006044820152606401610793565b8015611fd25760405162461bcd60e51b81526020600482015260086024820152670534c3a48534f3a360c41b6044820152606401610793565b611fdc8260ff1c90565b6120285760405162461bcd60e51b815260206004820152600860248201527f534c3a48534f3a310000000000000000000000000000000000000000000000006044820152606401610793565b6000612035846001613c2b565b905060008061204c346115bc8b611af98588612b0a565b909250905060a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a51000026120a1606461271060a889901c65ffffffffffff1660a08a901c60ff166004021b64e8d4a51000025b91906132c6565b106120d95760405162461bcd60e51b815260206004820152600860248201526714d30e93d0940e8d60c21b6044820152606401610793565b600083815260018b01602052604081208691826001600160a01b03168152602081019190915260400160002055818a556121718160a887901c65ffffffffffff1660a088901c60ff166004021b64e8d4a510000260a885901c65ffffffffffff1660a086901c60ff166004021b64e8d4a51000026121579190613c9b565b6121619190613c2b565b6001600160a01b038a169061261b565b50505050505050505050565b8154600081158061219f5750816001600160a01b0316836001600160a01b0316145b6121f1578360010160006121ba8460d81c640fffffffff1690565b81526020019081526020016000206000846001600160a01b03166001600160a01b03168152602001908152602001600020546121f3565b815b90509250929050565b6000818152600260205260408120546001600160a01b0316151561065b565b6000808264e8d4a51000840493505b65ffffffffffff841115612249576001830192508360041c935061222a565b828460081b1793508360081c836004021b64e8d4a5100081028203925050507fffffffffff00000000000000ffffffffffffffffffffffffffffffffffffffff841693508260a01b841791509250929050565b600082815260208490526040902054806122e55760405162461bcd60e51b815260206004820152600a6024820152690313135353a5354463a360b41b6044820152606401610793565b6122ef8183613384565b505060008481526020868152604080832084905585835260018801909152812080549293509061231e83613d0a565b909155505060408051848152602081018490527f452c5f777db10bd58f64d8bc58668d14487d008ff527ca431853ea22e195f176910160405180910390a160408051838152600160208201523091339183917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a450505050565b82546000826123b88360d81c640fffffffff1690565b146123c45760006123c6565b815b915081158015906123e85750816001600160a01b0316846001600160a01b0316145b61241657600083815260018601602090815260408083206001600160a01b0388168452909152902054612418565b815b9050935093915050565b6000826124715760405162461bcd60e51b815260206004820152600760248201527f534c3a43433a31000000000000000000000000000000000000000000000000006044820152606401610793565b60006124848560d81c640fffffffff1690565b831190506124928560ff1c90565b806124b65750846001600160a01b0316866001600160a01b03161480156124b65750805b9695505050505050565b600082815260208490526040902054806125095760405162461bcd60e51b815260206004820152600a6024820152690313135353a5354463a360b41b6044820152606401610793565b60008281526001850160205260409020546125665760405162461bcd60e51b815260206004820152600b60248201527f313135353a534254463a310000000000000000000000000000000000000000006044820152606401610793565b6000828152600185016020526040812080549161258283613d0a565b90915550612592905081836134db565b506000848152602086815260409182902083905581518681529081018590529192507f452c5f777db10bd58f64d8bc58668d14487d008ff527ca431853ea22e195f176910160405180910390a160408051838152600160208201523391309182917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101612394565b8047101561266b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610793565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146126b8576040519150601f19603f3d011682016040523d82523d6000602084013e6126bd565b606091505b50509050806108345760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610793565b600061273f826118ee565b905060008061274e878761217d565b91509150600034116127a25760405162461bcd60e51b815260206004820152600860248201527f534c3a4f42503a320000000000000000000000000000000000000000000000006044820152606401610793565b816127ef5760405162461bcd60e51b815260206004820152600660248201527f4e533a303a3000000000000000000000000000000000000000000000000000006044820152606401610793565b6127f98160ff1c90565b156128315760405162461bcd60e51b81526020600482015260086024820152670534c3a48534f3a360c41b6044820152606401610793565b6128428260d81c640fffffffff1690565b8311156128915760405162461bcd60e51b815260206004820152600860248201527f534c3a4f42503a330000000000000000000000000000000000000000000000006044820152606401610793565b6001600160a01b038616826001600160a01b0316146128f457818760010160006128c28560d81c640fffffffff1690565b815260200190815260200160002060006128d98590565b6001600160a01b031681526020810191909152604001600020555b6000806129436129233464e8d4a5100065ffffffffffff60a888901c16600460ff60a08a901c16021b02613c2b565b6115bc8a611af961293b8960d81c640fffffffff1690565b600090612b0a565b909250905060a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a5100002612995606461271060a888901c65ffffffffffff1660a089901c60ff166004021b64e8d4a510000261209a565b106129cd5760405162461bcd60e51b815260206004820152600860248201526714d30e93d0940e8d60c21b6044820152606401610793565b81895561199d8160a886901c65ffffffffffff1660a087901c60ff166004021b64e8d4a510000260a885901c65ffffffffffff1660a086901c60ff166004021b64e8d4a5100002612a1e9190613c9b565b612a289190613c2b565b6001600160a01b0389169061261b565b606060ff82168067ffffffffffffffff811115612a6557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612a8e578160200160208202803683370190505b509150600883901c925060005b81811015612aeb57600884901c93508360ff16838281518110612ace57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280612ae381613d0a565b915050612a9b565b5050919050565b60006019612b008484613c9b565b610eef9190613c68565b6000640fffffffff821115612b2f57634e487b7160e01b600052600160045260246000fd5b5060d81b7ff000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff919091161790565b600080612b68836135c5565b915091508160001415612bbd5760405162461bcd60e51b815260206004820152600a60248201527f3732313a4d494e543a30000000000000000000000000000000000000000000006044820152606401610793565b838114612c0c5760405162461bcd60e51b815260206004820152600a60248201527f3732313a4d494e543a31000000000000000000000000000000000000000000006044820152606401610793565b6000612c1986868561368e565b90507fe98dd458321045a46b57bd2d5251a739e0f01750a71e4d3e71cee6c17164dd328582604051612c4c929190613bf3565b60405180910390a16000815167ffffffffffffffff811115612c7e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612ca7578160200160208202803683370190505b50905060005b8151811015612cf5576001828281518110612cd857634e487b7160e01b600052603260045260246000fd5b602090810291909101015280612ced81613d0a565b915050612cad565b50604051339060009030907f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb90612d2f9087908790613bbb565b60405180910390a450505050505050565b60006001600160a01b0384163b15612e9857604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612d84903390899088908890600401613b89565b602060405180830381600087803b158015612d9e57600080fd5b505af1925050508015612dce575060408051601f3d908101601f19168201909252612dcb91810190613a1f565b60015b612e7e573d808015612dfc576040519150601f19603f3d011682016040523d82523d6000602084013e612e01565b606091505b508051612e765760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610793565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506112ba565b5060016112ba565b612ebb30838360405180602001604052806000815250612d40565b612f215760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b6001600160a01b03821660009081526003840160205260408120805460019290612f4c908490613c2b565b9091555050600081815260028401602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b612fc830838360405180602001604052806000815250612d40565b61302e5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b3060009081526003840160205260408120805460019290613050908490613c9b565b90915550506001600160a01b03821660009081526003840160205260408120805460019290613080908490613c2b565b9091555050600081815260028401602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839230917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a4505050565b6130eb8382610feb565b6001600160a01b0316336001600160a01b031614801561311357506001600160a01b03821633145b80156131305750306131258483610f50565b6001600160a01b0316145b6131965760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b6131a0838261373f565b6001600160a01b038216600090815260038401602052604081208054600192906131cb908490613c9b565b909155505030600090815260038401602052604081208054600192906131f2908490613c2b565b9091555050600081815260028401602052604080822080546001600160a01b03191630908117909155905183926001600160a01b038616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a4505050565b610ac48160405160240161326991815260200190565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f27b7cf8500000000000000000000000000000000000000000000000000000000179052613769565b60008080600019858709858702925082811083820303915050806000141561330057600084116132f557600080fd5b508290049050610eef565b80841161330c57600080fd5b600084868809808403938111909203919050600061332c86196001613c2b565b8616958690049560026003880281188089028203028089028203028089028203028089028203028089028203028089029091030260008290038290046001019490940294049390931791909102925050509392505050565b60008060008061339386612a38565b905060005b81518160ff1610156133fd578560ff16828260ff16815181106133cb57634e487b7160e01b600052603260045260246000fd5b602002602001015114156133eb576133e4816001613c43565b92506133fd565b806133f581613d25565b915050613398565b5061340786613253565b6134138560f81b61378a565b60008260ff16116134515760405162461bcd60e51b81526020600482015260086024820152670534c3a50464d3a360c41b6044820152606401610793565b8161345b81613cb2565b60ff6010600883020190811b198916965088901c9450925061347e905084613253565b8460ff168360ff16146134d35760405162461bcd60e51b815260206004820152600860248201527f534c3a50464d3a310000000000000000000000000000000000000000000000006044820152606401610793565b509250925092565b60008060006134e985612a38565b905060005b81518160ff16101561355157818160ff168151811061351d57634e487b7160e01b600052603260045260246000fd5b60200260200101516000141561353f57613538816001613c43565b9250613551565b8061354981613d25565b9150506134ee565b5061355b85613253565b60008260ff16116135995760405162461bcd60e51b81526020600482015260086024820152670534c3a50464d3a360c41b6044820152606401610793565b816135a381613cb2565b9250506008820260100184901b851792506135bd83613253565b509250929050565b6000806135d28343612af2565b905060006135e08483613819565b905060006135ef600183613c9b565b4090508061363f5760405162461bcd60e51b815260206004820152600760248201527f4550433a53424c000000000000000000000000000000000000000000000000006044820152606401610793565b604080516020810183905290810184905230606090811b6bffffffffffffffffffffffff1916908201526074016040516020818303038152906040528051906020012060001c93505050915091565b600082815260208490526040902054606090156136ed5760405162461bcd60e51b815260206004820152600660248201527f494c3a4d3a3000000000000000000000000000000000000000000000000000006044820152606401610793565b613723600461371b60146137048660081c60ff1690565b61370e9190613d45565b60081b61ff001986161790565b60ff19161790565b600084815260208690526040902081905591506112ba82612a38565b6000818152600483016020526040812080546001600160a01b031916905581906110ae8483610feb565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6040517fff0000000000000000000000000000000000000000000000000000000000000082166024820152610ac49060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f6e18a12800000000000000000000000000000000000000000000000000000000179052613769565b600082613827601984613c7c565b610eef9190613c2b565b80356001600160a01b038116811461384857600080fd5b919050565b60006020828403121561385e578081fd5b610eef82613831565b60008060408385031215613879578081fd5b61388283613831565b91506121f360208401613831565b6000806000606084860312156138a4578081fd5b6138ad84613831565b92506138bb60208501613831565b9150604084013590509250925092565b600080600080608085870312156138e0578081fd5b6138e985613831565b93506138f760208601613831565b925060408501359150606085013567ffffffffffffffff8082111561391a578283fd5b818701915087601f83011261392d578283fd5b81358181111561393f5761393f613d93565b604051601f8201601f19908116603f0116810190838211818310171561396757613967613d93565b816040528281528a602084870101111561397f578586fd5b82602086016020830137918201602001949094529598949750929550505050565b600080604083850312156139b2578182fd5b6139bb83613831565b9150602083013580151581146139cf578182fd5b809150509250929050565b600080604083850312156139ec578182fd5b6139f583613831565b946020939093013593505050565b600060208284031215613a14578081fd5b8135610eef81613da9565b600060208284031215613a30578081fd5b8151610eef81613da9565b600060208284031215613a4c578081fd5b5035919050565b60008060408385031215613a65578182fd5b50508035926020909101359150565b600080600060608486031215613a88578283fd5b8335925060208401359150613a9f60408501613831565b90509250925092565b600080600060608486031215613abc578283fd5b505081359360208301359350604090920135919050565b60008060008060808587031215613ae8578384fd5b5050823594602084013594506040840135936060013592509050565b6000815180845260208085019450808401835b83811015613b3357815187529582019590820190600101613b17565b509495945050505050565b60008151808452815b81811015613b6357602081850181015186830182015201613b47565b81811115613b745782602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526124b66080830184613b3e565b604081526000613bce6040830185613b04565b8281036020840152610b5a8185613b04565b602081526000610eef6020830184613b3e565b8281526040602082015260006112ba6040830184613b04565b838152826020820152606060408201526000610b5a6060830184613b04565b60008219821115613c3e57613c3e613d67565b500190565b600060ff821660ff84168060ff03821115613c6057613c60613d67565b019392505050565b600082613c7757613c77613d7d565b500490565b6000816000190483118215151615613c9657613c96613d67565b500290565b600082821015613cad57613cad613d67565b500390565b600060ff821680613cc557613cc5613d67565b6000190192915050565b600181811c90821680613ce357607f821691505b60208210811415613d0457634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613d1e57613d1e613d67565b5060010190565b600060ff821660ff811415613d3c57613d3c613d67565b60010192915050565b600060ff831680613d5857613d58613d7d565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610ac457600080fdfea2646970667358221220b3c89ab27b5e7e081ca635edad351a275e3c11f9b8687619741a51c6b28aded064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}. MODIFICATION 0"
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4931,
        "contract": "contracts/src/NuggFT.sol:NuggFT",
        "label": "el_state",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)5930_storage"
      },
      {
        "astId": 4464,
        "contract": "contracts/src/NuggFT.sol:NuggFT",
        "label": "il_state",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Storage)6557_storage"
      },
      {
        "astId": 4469,
        "contract": "contracts/src/NuggFT.sol:NuggFT",
        "label": "sl_state",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Storage)9120_storage)"
      },
      {
        "astId": 4476,
        "contract": "contracts/src/NuggFT.sol:NuggFT",
        "label": "sl_state_items",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Storage)9120_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint160,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint160",
        "label": "mapping(uint160 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_uint160,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint160 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint160,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Storage)9120_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct SwapLib.Storage))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Storage)9120_storage)"
      },
      "t_mapping(t_uint256,t_struct(Storage)9120_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SwapLib.Storage)",
        "numberOfBytes": "32",
        "value": "t_struct(Storage)9120_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Storage)5930_storage": {
        "encoding": "inplace",
        "label": "struct ERC721Lib.Storage",
        "members": [
          {
            "astId": 5909,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "_name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5911,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "_symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 5915,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "_owners",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 5919,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "_balances",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 5923,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 5929,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Storage)6557_storage": {
        "encoding": "inplace",
        "label": "struct ItemLib.Storage",
        "members": [
          {
            "astId": 6552,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "tokenData",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 6556,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "protocolItems",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)9120_storage": {
        "encoding": "inplace",
        "label": "struct SwapLib.Storage",
        "members": [
          {
            "astId": 9113,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9119,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "offers",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_mapping(t_uint160,t_uint256))"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint160": {
        "encoding": "inplace",
        "label": "uint160",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}