{
  "address": "0xc3b5821CAd004d6eC7d8Fb8F794f5d11AA86e481",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultResolver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "DelegateCommit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "sellingTokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "buyingTokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "DelegateCommitItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "DelegateMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "DelegateOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "sellingTokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "buyingTokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "DelegateOfferItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Genesis",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "v2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "MigrateV1Sent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "migrator",
          "type": "address"
        }
      ],
      "name": "MigratorV1Updated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "payoffAmount",
          "type": "uint96"
        }
      ],
      "name": "Payoff",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        }
      ],
      "name": "PopItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "ProtocolEthExtracted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        }
      ],
      "name": "PushItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "earned",
          "type": "uint96"
        }
      ],
      "name": "Rebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "feature",
          "type": "uint8"
        }
      ],
      "name": "RotateItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "xs",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "ys",
          "type": "uint8[]"
        }
      ],
      "name": "SetAnchorOverrides",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "items",
          "type": "uint8[]"
        }
      ],
      "name": "SetProof",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "stake",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "protocol",
          "type": "uint96"
        }
      ],
      "name": "StakeEth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "epoch",
          "type": "uint32"
        }
      ],
      "name": "SwapClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "sellingTokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "buyingTokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "epoch",
          "type": "uint32"
        }
      ],
      "name": "SwapClaimItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "sellingTokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "SwapItemStart",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "SwapStart",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "principal",
          "type": "uint96"
        }
      ],
      "name": "TakeLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "trust",
          "type": "bool"
        }
      ],
      "name": "TrustUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "TrustedMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "stake",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "UnStakeEth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "UntrustedMint",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "activeEthPerShare",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "res",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "sellingTokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        },
        {
          "internalType": "uint160",
          "name": "buyingTokenId",
          "type": "uint160"
        }
      ],
      "name": "claimItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultWidth",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultZoom",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "sellingTokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        },
        {
          "internalType": "uint160",
          "name": "buyingTokenId",
          "type": "uint160"
        }
      ],
      "name": "delegateItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dotnuggV1Processor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extractProtocolEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "loan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "loanInfo",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "toPayoff",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "toRebalance",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "earned",
          "type": "uint96"
        },
        {
          "internalType": "uint32",
          "name": "epochDue",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "loaner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "migrateStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSharePrice",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "res",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "parsedProofOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "defaultIds",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "extraIds",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "overxs",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "overys",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "payoff",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "prepareFiles",
      "outputs": [
        {
          "internalType": "uint256[][]",
          "name": "input",
          "type": "uint256[][]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renderedAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "proof",
              "type": "uint256"
            },
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "extras",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "xovers",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "yovers",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct IdotnuggV1Data.Data",
          "name": "data",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "proofOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "resolverOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint8",
          "name": "feature",
          "type": "uint8"
        }
      ],
      "name": "rotateFeature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "trust",
          "type": "bool"
        }
      ],
      "name": "setIsTrusted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "migrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint8[]",
          "name": "xs",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "ys",
          "type": "uint8[]"
        }
      ],
      "name": "setOverrides",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "setResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[][]",
          "name": "data",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint8",
          "name": "feature",
          "type": "uint8"
        }
      ],
      "name": "storeFiles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint96",
          "name": "floor",
          "type": "uint96"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "sellingTokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        },
        {
          "internalType": "uint96",
          "name": "floor",
          "type": "uint96"
        }
      ],
      "name": "swapItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLengths",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "res",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalProtocolEth",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "res",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedEth",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "res",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedShares",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "res",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "trusted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "trustedMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "valueForDelegate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canDelegate",
          "type": "bool"
        },
        {
          "internalType": "uint96",
          "name": "nextSwapAmount",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "userCurrentOffer",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "valueForPayoff",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "res",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "valueForRebalance",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "res",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x13eb2a26dc41f0da6d84d01c0aa9c805ce4728ec014322886f20bd7256f17ac6",
  "receipt": {
    "to": null,
    "from": "0xB666C13b621568FeC210724DF161604adccfA257",
    "contractAddress": "0xc3b5821CAd004d6eC7d8Fb8F794f5d11AA86e481",
    "transactionIndex": 28,
    "gasUsed": "5261407",
    "logsBloom": "0x
    "blockHash": "0x77ae5ea310ec07a4419cb53009dada2c6ccdcdd1a4afecbb60e8a8a74c4fe84e",
    "transactionHash": "0x13eb2a26dc41f0da6d84d01c0aa9c805ce4728ec014322886f20bd7256f17ac6",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 11672467,
        "transactionHash": "0x13eb2a26dc41f0da6d84d01c0aa9c805ce4728ec014322886f20bd7256f17ac6",
        "address": "0xc3b5821CAd004d6eC7d8Fb8F794f5d11AA86e481",
        "topics": [
          "0x01370ae6c2f4315d0915b457ec604f483d0ff6f34a7fdd5c3401ae39fda86aa9",
          "0x000000000000000000000000b666c13b621568fec210724df161604adccfa257"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 51,
        "blockHash": "0x77ae5ea310ec07a4419cb53009dada2c6ccdcdd1a4afecbb60e8a8a74c4fe84e"
      },
      {
        "transactionIndex": 28,
        "blockNumber": 11672467,
        "transactionHash": "0x13eb2a26dc41f0da6d84d01c0aa9c805ce4728ec014322886f20bd7256f17ac6",
        "address": "0xc3b5821CAd004d6eC7d8Fb8F794f5d11AA86e481",
        "topics": [
          "0x6bf6eaff5e9af8fbccb949f4c38cc016936f8775363ccf4224db160365785d52"
        ],
        "data": "0x",
        "logIndex": 52,
        "blockHash": "0x77ae5ea310ec07a4419cb53009dada2c6ccdcdd1a4afecbb60e8a8a74c4fe84e"
      }
    ],
    "blockNumber": 11672467,
    "cumulativeGasUsed": "7653597",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x488b62261D2D5ba4d2dcB446aCc355979405953D"
  ],
  "solcInputHash": "6d7494c6088e7dd12a33c887aaac744e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultResolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"DelegateCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sellingTokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"buyingTokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"DelegateCommitItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"DelegateMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"DelegateOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sellingTokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"buyingTokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"DelegateOfferItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Genesis\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"v2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"MigrateV1Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"migrator\",\"type\":\"address\"}],\"name\":\"MigratorV1Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"payoffAmount\",\"type\":\"uint96\"}],\"name\":\"Payoff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"}],\"name\":\"PopItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"ProtocolEthExtracted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"}],\"name\":\"PushItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"earned\",\"type\":\"uint96\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feature\",\"type\":\"uint8\"}],\"name\":\"RotateItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"xs\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"ys\",\"type\":\"uint8[]\"}],\"name\":\"SetAnchorOverrides\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"items\",\"type\":\"uint8[]\"}],\"name\":\"SetProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"protocol\",\"type\":\"uint96\"}],\"name\":\"StakeEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"SwapClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sellingTokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"buyingTokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"SwapClaimItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sellingTokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"SwapItemStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"SwapStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"principal\",\"type\":\"uint96\"}],\"name\":\"TakeLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trust\",\"type\":\"bool\"}],\"name\":\"TrustUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"TrustedMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"UnStakeEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"UntrustedMint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeEthPerShare\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"res\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sellingTokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint160\",\"name\":\"buyingTokenId\",\"type\":\"uint160\"}],\"name\":\"claimItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultWidth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultZoom\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sellingTokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint160\",\"name\":\"buyingTokenId\",\"type\":\"uint160\"}],\"name\":\"delegateItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dotnuggV1Processor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractProtocolEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"loan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"loanInfo\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"toPayoff\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"toRebalance\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"earned\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"epochDue\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"loaner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"migrateStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSharePrice\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"res\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"parsedProofOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"defaultIds\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"extraIds\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"overxs\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"overys\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"payoff\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"prepareFiles\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"input\",\"type\":\"uint256[][]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renderedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"extras\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"}],\"internalType\":\"struct IdotnuggV1Data.Data\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"proofOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"resolverOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint8\",\"name\":\"feature\",\"type\":\"uint8\"}],\"name\":\"rotateFeature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"trust\",\"type\":\"bool\"}],\"name\":\"setIsTrusted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint8[]\",\"name\":\"xs\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"ys\",\"type\":\"uint8[]\"}],\"name\":\"setOverrides\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"data\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint8\",\"name\":\"feature\",\"type\":\"uint8\"}],\"name\":\"storeFiles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint96\",\"name\":\"floor\",\"type\":\"uint96\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sellingTokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"floor\",\"type\":\"uint96\"}],\"name\":\"swapItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLengths\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"res\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProtocolEth\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"res\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedEth\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"res\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedShares\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"res\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"trusted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"trustedMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"valueForDelegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canDelegate\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"nextSwapAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"userCurrentOffer\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"valueForPayoff\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"res\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"valueForRebalance\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"res\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"extractProtocolEth()\":{\"details\":\"caller must be a trusted user\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"loanInfo(uint160)\":{\"details\":\"contract ->frontend -> used to set the amount of eth for user\",\"params\":{\"tokenId\":\"the token who's current loan to check\"},\"returns\":{\"earned\":\"-> the amount of eth the minSharePrice has increased since loan was last rebalanced\",\"epochDue\":\"-> the final epoch a user is safe from liquidation (inclusive)\",\"loaner\":\"-> the user responsable for the loan\",\"toPayoff\":\"->  the current amount loaned out, plus the final rebalance fee\",\"toRebalance\":\"->  the fee a user must pay to rebalance (and extend) the loan on their nugg\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"setMigrator(address)\":{\"details\":\"caller must be a trusted user\",\"params\":{\"migrator\":\"the address to set as the migrator contract\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"valueForDelegate(uint160,address)\":{\"details\":\"returns 0 if no delegate can be made for this oken\",\"params\":{\"tokenId\":\"-> the token to be delegated to\",\"user\":\"-> the address of the user who will be delegating\"},\"returns\":{\"canDelegate\":\"-> instead of reverting this function will return false\",\"nextSwapAmount\":\"-> the minimum value that must be sent with a delegate call\",\"userCurrentOffer\":\"->\"}},\"valueForPayoff(uint160)\":{\"details\":\"should be used to tell user how much eth to send for payoff\"},\"valueForRebalance(uint160)\":{\"details\":\"should be used to tell user how much eth to send for rebalance\"},\"withdrawStake(uint160)\":{\"details\":\"should only be called directly\",\"params\":{\"tokenId\":\"the id of the nugg being burned\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"extractProtocolEth()\":{\"notice\":\"sends the current protocolEth to the user and resets the value to zero\"},\"loanInfo(uint160)\":{\"notice\":\"for a nugg's active loan: calculates the current min eth a user must send to payoff or rebalance\"},\"setMigrator(address)\":{\"notice\":\"sets the migrator contract\"},\"valueForDelegate(uint160,address)\":{\"notice\":\"calculates the minimum eth that must be sent with a delegate call\"},\"valueForPayoff(uint160)\":{\"notice\":\"\\\"toPayoff\\\" value from \\\"loanInfo\\\"\"},\"valueForRebalance(uint160)\":{\"notice\":\"\\\"toRebalance\\\" value from \\\"loanInfo\\\"\"},\"withdrawStake(uint160)\":{\"notice\":\"burns a nugg from existance, dealing the eth worth of that share to the user\"}},\"notice\":\"deviations from ERC721 standard: 1. no verificaiton the receiver is a ERC721Reciever - on top of this being a gross waste of gas, the way the swapping logic works makes this only worth calling when a user places an offer - and we did not want to call \\\"onERC721Recieved\\\" when no token was being sent. 2.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/NuggFT.sol\":\"NuggFT\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[]},\"sources\":{\"src/NuggFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721Metadata} from './interfaces/IERC721.sol';\\n\\nimport {INuggFT as a} from './interfaces/INuggFT.sol';\\n\\nimport {TokenExternal as Token} from './token/TokenExternal.sol';\\nimport {SwapExternal as Swapable} from './swap/SwapExternal.sol';\\nimport {ProofExternal as Provable} from './proof/ProofExternal.sol';\\nimport {FileExternal as dotnuggV1} from './file/FileExternal.sol';\\nimport {StakeExternal as Staked} from './stake/StakeExternal.sol';\\nimport {LoanExternal as Loanable} from './loan/LoanExternal.sol';\\nimport {EpochExternal as Epoched} from './epoch/EpochExternal.sol';\\nimport {TrustExternal as Migratable} from './trust/TrustExternal.sol';\\n\\n/// @title NuggFT V1\\n/// @author nugg.xyz - danny7even & dub6ix\\n/// @notice Explain to an end user what this does\\n/// @dev Explain to a developer any extra details\\n/// @dev the words \\\"share\\\" and \\\"nugg\\\" are used interchangably throughout\\n\\n/// deviations from ERC721 standard:\\n/// 1. no verificaiton the receiver is a ERC721Reciever - on top of this being a gross waste of gas,\\n/// the way the swapping logic works makes this only worth calling when a user places an offer - and\\n/// we did not want to call \\\"onERC721Recieved\\\" when no token was being sent.\\n/// 2.\\ncontract NuggFT is a, Swapable, Provable, Loanable, Migratable, Staked, Epoched, dotnuggV1, Token {\\n    constructor(address _defaultResolver) dotnuggV1(_defaultResolver) {}\\n\\n    function tokenURI(uint256 tokenId) public view override(dotnuggV1, IERC721Metadata) returns (string memory) {\\n        return dotnuggV1.tokenURI(tokenId);\\n    }\\n\\n    function name() public pure override returns (string memory) {\\n        return 'Nugg Fungible Token V1';\\n    }\\n\\n    function symbol() public pure override returns (string memory) {\\n        return 'NUGGFT';\\n    }\\n}\\n\",\"keccak256\":\"0x086a4fccf72002aed52e7fe99bb30bba93689378a039fe5f9a182deab8bc7062\",\"license\":\"MIT\"},\"src/epoch/EpochCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\n// MANUAL\\nlibrary EpochCore {\\n    using SafeCastLib for uint256;\\n\\n    struct Storage {\\n        uint32 genesis;\\n    }\\n\\n    uint256 constant INTERVAL = 69;\\n    uint32 constant OFFSET = 3000;\\n\\n    function setGenesis() internal {\\n        Storage storage s;\\n        assembly {\\n            s.slot := 0x100042069\\n        }\\n\\n        s.genesis = uint32(block.number);\\n    }\\n\\n    function getGenesis() internal view returns (uint32) {\\n        Storage storage s;\\n\\n        assembly {\\n            s.slot := 0x100042069\\n        }\\n\\n        return s.genesis;\\n    }\\n\\n    function toStartBlock(uint32 epoch) internal view returns (uint256 res) {\\n        res = ((epoch - OFFSET) * INTERVAL) + getGenesis();\\n    }\\n\\n    function toEpoch(uint256 blocknum) internal view returns (uint32 res) {\\n        res = (((blocknum - getGenesis()) / INTERVAL) + OFFSET).safe32();\\n    }\\n\\n    function toEndBlock(uint32 epoch) internal view returns (uint256 res) {\\n        res = toStartBlock(epoch + 1) - 1;\\n    }\\n\\n    function activeEpoch() internal view returns (uint32 res) {\\n        res = toEpoch(block.number);\\n    }\\n\\n    /// @notice gets unique base based on given epoch and converts encoded bytes to object that can be merged\\n    /// Note: by using the block hash no one knows what a nugg will look like before it's epoch.\\n    /// We considered making this harder to manipulate, but we decided that if someone were able to\\n    /// pull it off and make their own custom nugg, that would be really fucking cool.\\n    function calculateSeed() internal view returns (uint256 res, uint32 epoch) {\\n        epoch = activeEpoch();\\n        uint256 startblock = toStartBlock(epoch);\\n        bytes32 bhash = blockhash(startblock - 1);\\n        require(bhash != 0, 'EPC:SBL');\\n        res = uint256(keccak256(abi.encodePacked(bhash, epoch, address(this))));\\n    }\\n}\\n\",\"keccak256\":\"0x477324e035492d520be3556b0f0350e149edf9abe5bb5594d9d75b031faffbd5\",\"license\":\"MIT\"},\"src/epoch/EpochExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IEpochExternal} from '../interfaces/nuggft/IEpochExternal.sol';\\n\\nimport {EpochCore} from '../epoch/EpochCore.sol';\\n\\nabstract contract EpochExternal is IEpochExternal {\\n    constructor() {\\n        EpochCore.setGenesis();\\n        emit Genesis();\\n    }\\n\\n    /// @inheritdoc IEpochExternal\\n    function epoch() external view override returns (uint32) {\\n        return EpochCore.activeEpoch();\\n    }\\n}\\n\",\"keccak256\":\"0x08432c5fa0f61cf51614f95f726c9223b4ac74c92d97e8ae4c22856aa380dad3\",\"license\":\"MIT\"},\"src/file/FileCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IdotnuggV1Data} from '../interfaces/IdotnuggV1.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {SSTORE2} from '../libraries/SSTORE2.sol';\\n\\nimport {File} from './FileStorage.sol';\\nimport {FilePure} from './FilePure.sol';\\n\\n\\nlibrary FileCore {\\n    using FilePure for uint256;\\n    using SafeCastLib for uint256;\\n    using SafeCastLib for uint16;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TRUSTED\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function storeFiles(\\n        uint8 feature,\\n        uint256[][] calldata data\\n    ) internal {\\n\\n        uint8 len = data.length.safe8();\\n\\n        require(len > 0, 'VC:0');\\n\\n        uint168 working = uint168(len) << 160;\\n\\n        address ptr = SSTORE2.write(abi.encode(data));\\n\\n        File.spointer().ptrs[feature].push(uint168(uint160(ptr)) | working);\\n\\n        uint256 cache = File.spointer().lengthData;\\n\\n        uint8[] memory lengths = FilePure.getLengths(cache);\\n\\n        lengths[feature] += len;\\n\\n        File.spointer().lengthData = FilePure.setLengths(cache, lengths);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                 GET FILES\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function getBatchFiles(uint8[] memory ids) internal view returns (uint256[][] memory data) {\\n        data = new uint256[][](ids.length);\\n\\n        for (uint8 i = 0; i < ids.length; i++) {\\n            if (ids[i] == 0) data[i] = new uint256[](0);\\n            else data[i] = get(i, ids[i]);\\n        }\\n    }\\n\\n    function get(uint8 feature, uint8 pos) internal view returns (uint256[] memory data) {\\n        require(pos != 0, 'VC:2');\\n\\n        pos--;\\n\\n        uint8 totalLength = FilePure.getLengths(File.spointer().lengthData)[feature];\\n\\n        require(pos < totalLength, 'VC:1');\\n\\n        uint168[] memory ptrs = File.spointer().ptrs[feature];\\n\\n        address store;\\n        uint8 storePos;\\n\\n        uint8 workingPos;\\n\\n        for (uint256 i = 0; i < ptrs.length; i++) {\\n            uint8 here = uint8(ptrs[i] >> 160);\\n            if (workingPos + here > pos) {\\n                store = address(uint160(ptrs[i]));\\n                storePos = pos - workingPos;\\n                break;\\n            } else {\\n                workingPos += here;\\n            }\\n        }\\n\\n        require(store != address(0), 'VC:2');\\n\\n        data = abi.decode(SSTORE2.read(address(uint160(store))), (uint256[][]))[storePos];\\n    }\\n}\\n\",\"keccak256\":\"0xc28309b0ab3c388f634efce443572a646cbcf15101fa50157cf91ccd75e2459f\",\"license\":\"MIT\"},\"src/file/FileExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IdotnuggV1Processor} from '../interfaces/IdotnuggV1.sol';\\nimport {IdotnuggV1Resolver} from '../interfaces/IdotnuggV1.sol';\\nimport {IdotnuggV1Data} from '../interfaces/IdotnuggV1.sol';\\nimport {IdotnuggV1Implementer} from '../interfaces/IdotnuggV1.sol';\\nimport {IERC721Metadata} from '../interfaces/IERC721.sol';\\n\\nimport {IFileExternal} from '../interfaces/nuggft/IFileExternal.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport {TokenView} from '../token/TokenView.sol';\\nimport {ProofCore} from '../proof/ProofCore.sol';\\n\\nimport {FileCore} from './FileCore.sol';\\nimport {FileView} from './FileView.sol';\\nimport {File} from './FileStorage.sol';\\n\\nimport {Trust} from '../trust/Trust.sol';\\n\\nabstract contract FileExternal is IFileExternal {\\n    using SafeCastLib for uint256;\\n\\n    /// @inheritdoc IdotnuggV1Implementer\\n    address public override dotnuggV1Processor;\\n\\n    /// @inheritdoc IdotnuggV1Implementer\\n    uint8 public override defaultWidth = 45;\\n\\n    // / @inheritdoc IdotnuggV1Implementer\\n    uint8 public override defaultZoom = 10;\\n\\n    constructor(address _dotnuggV1Processor) {\\n        require(_dotnuggV1Processor != address(0));\\n        dotnuggV1Processor = _dotnuggV1Processor;\\n    }\\n\\n    /// @inheritdoc IFileExternal\\n    function storeFiles(uint256[][] calldata data, uint8 feature) external override {\\n        Trust.check();\\n\\n        FileCore.storeFiles(feature, data);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            RESOLVER MANAGEMENT\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc IdotnuggV1Implementer\\n    function setResolver(uint256 tokenId, address to) public virtual override {\\n        require(TokenView.isApprovedOrOwner(msg.sender, tokenId.safe160()), 'T:0');\\n\\n        File.spointer().resolvers[tokenId] = to;\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            MAIN FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory res) {\\n        uint160 safeTokenId = tokenId.safe160();\\n\\n        address resolver = FileView.hasResolver(safeTokenId) ? FileView.resolverOf(safeTokenId) : dotnuggV1Processor;\\n\\n        res = IdotnuggV1Processor(dotnuggV1Processor).dotnuggToString(address(this), tokenId, resolver, defaultWidth, defaultZoom);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                HELPERS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc IdotnuggV1Implementer\\n    function prepareFiles(uint256 tokenId) public view override returns (uint256[][] memory input, IdotnuggV1Data.Data memory data) {\\n        (uint256 proof, uint8[] memory ids, uint8[] memory extras, uint8[] memory xovers, uint8[] memory yovers) = ProofCore\\n            .parsedProofOfIncludingPending(tokenId.safe160());\\n\\n        input = FileCore.getBatchFiles(ids);\\n\\n        data = IdotnuggV1Data.Data({\\n            version: 1,\\n            renderedAt: block.timestamp,\\n            name: 'NuggFT V1',\\n            desc: 'Nugg Fungible Token V1',\\n            owner: TokenView.exists(tokenId.safe160()) ? TokenView.ownerOf(tokenId.safe160()) : address(0),\\n            tokenId: tokenId,\\n            proof: proof,\\n            ids: ids,\\n            extras: extras,\\n            xovers: xovers,\\n            yovers: yovers\\n        });\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                VIEW\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc IdotnuggV1Implementer\\n    function resolverOf(uint256 tokenId) public view virtual override returns (address) {\\n        return FileView.resolverOf(tokenId.safe160());\\n    }\\n\\n    /// @inheritdoc IFileExternal\\n    function totalLengths() public view override returns (uint8[] memory res) {\\n        res = FileView.totalLengths();\\n    }\\n}\\n\",\"keccak256\":\"0xc69da3f7b60358161c38ca843e75cda921c6abcc35bca7796620af6040db7d8e\",\"license\":\"MIT\"},\"src/file/FilePure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nlibrary FilePure {\\n    using SafeCastLib for uint256;\\n\\n    function decoder(bytes memory data, uint256 feature) internal pure returns (uint256[][] memory res) {\\n        res = abi.decode(abi.decode((data), (bytes[]))[feature], (uint256[][]));\\n    }\\n\\n    function getLengths(uint256 input) internal pure returns (uint8[] memory res) {\\n        res = ShiftLib.getArray(input, 0);\\n    }\\n\\n    function setLengths(uint256 input, uint8[] memory upd) internal pure returns (uint256 res) {\\n        res = ShiftLib.setArray(input, 0, upd);\\n    }\\n\\n    function getAddress(uint256 input) internal pure returns (address res) {\\n        res = address(uint160(input >> 96));\\n    }\\n\\n    function addrsetAddress(uint256 input, address update) internal pure returns (uint256 res) {\\n        res = input & type(uint96).max;\\n        res |= (uint256(uint160(update)) << 96);\\n    }\\n}\\n\",\"keccak256\":\"0x59aa17392f046acb6624c81be6d36807f8df8b7ce0fae9daafcb865c752a3529\",\"license\":\"MIT\"},\"src/file/FileStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\n// TESTED\\nlibrary File {\\n    struct Storage {\\n        uint256 lengthData;\\n        mapping(uint8 => uint168[]) ptrs;\\n        // Mapping from token ID to owner address\\n        mapping(uint256 => address) resolvers;\\n    }\\n\\n    function spointer() internal view returns (Storage storage s) {\\n        return Global.ptr().file;\\n    }\\n}\\n\",\"keccak256\":\"0x84c957212eb5c7dd84e99208f4d495f583b1db88e331b2bc73326c7dfca25e1d\",\"license\":\"MIT\"},\"src/file/FileView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\nimport {File} from './FileStorage.sol';\\nimport {FilePure} from './FilePure.sol';\\n\\n// TESTED\\nlibrary FileView {\\n    function hasResolver(uint160 tokenId) internal view returns (bool) {\\n        return File.spointer().resolvers[tokenId] != address(0);\\n    }\\n\\n    function resolverOf(uint160 tokenId) internal view returns (address) {\\n        return File.spointer().resolvers[tokenId];\\n    }\\n\\n    function totalLengths() internal view returns (uint8[] memory res) {\\n        res = FilePure.getLengths(File.spointer().lengthData);\\n    }\\n}\\n\",\"keccak256\":\"0x9a7f43b6f0be964ee609db3904a3eae3a7fa316c8776ad952b977f1e3ea77bee\",\"license\":\"MIT\"},\"src/global/GlobalStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {File} from '../file/FileStorage.sol';\\nimport {Stake} from '../stake/StakeStorage.sol';\\nimport {Swap} from '../swap/SwapStorage.sol';\\nimport {Proof} from '../proof/ProofStorage.sol';\\nimport {Token} from '../token/TokenStorage.sol';\\nimport {Loan} from '../loan/LoanStorage.sol';\\n\\nlibrary Global {\\n    struct Storage {\\n        Token.Storage token;\\n        Stake.Storage stake;\\n        File.Storage file;\\n        Proof.Storage proof;\\n        Loan.Mapping loan;\\n        Swap.Full swap;\\n    }\\n\\n    function ptr() internal pure returns (Storage storage s) {\\n        assembly {\\n            s.slot := 0x42069\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1bae96634defcc73b04b4e0686aa351e08ff0dd2e1ab188cfadcdc901d34739a\",\"license\":\"MIT\"},\"src/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6dd445f92ecd50eb0287ba77131db4476eb976787dfa3a21e63931322cd8b226\",\"license\":\"MIT\"},\"src/interfaces/INuggFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ITokenExternal} from './nuggft/ITokenExternal.sol';\\nimport {ISwapExternal} from './nuggft/ISwapExternal.sol';\\nimport {IProofExternal} from './nuggft/IProofExternal.sol';\\nimport {IFileExternal} from './nuggft/IFileExternal.sol';\\nimport {IStakeExternal} from './nuggft/IStakeExternal.sol';\\nimport {ILoanExternal} from './nuggft/ILoanExternal.sol';\\nimport {IEpochExternal} from './nuggft/IEpochExternal.sol';\\nimport {ITrustExternal} from './nuggft/ITrustExternal.sol';\\n\\ninterface INuggFT is\\n    ISwapExternal,\\n    ITokenExternal,\\n    IStakeExternal,\\n    ILoanExternal,\\n    IProofExternal,\\n    IFileExternal,\\n    IEpochExternal,\\n    ITrustExternal\\n{}\\n\",\"keccak256\":\"0x5524840e7effa8a5aac7fb2a1c4c9374fc13cd1f3671c1ba767a7fa82123789b\",\"license\":\"MIT\"},\"src/interfaces/INuggFTV1Migrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggFTV1Migrator {\\n    event MigrateV1Accepted(address v1, uint160 tokenId, uint256 proof, address owner, uint96 eth);\\n\\n    function nuggftMigrateFromV1(\\n        uint160 tokenId,\\n        uint256 proof,\\n        address owner\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x904a8d89ba1525b35542f1626bf47ba055b607c92c8c2e601c845ab561a96b7c\",\"license\":\"MIT\"},\"src/interfaces/IdotnuggV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IdotnuggV1Data {\\n    struct Data {\\n        uint256 version;\\n        uint256 renderedAt;\\n        string name;\\n        string desc;\\n        address owner;\\n        uint256 tokenId;\\n        uint256 proof;\\n        uint8[] ids;\\n        uint8[] extras;\\n        uint8[] xovers;\\n        uint8[] yovers;\\n    }\\n}\\n\\ninterface IdotnuggV1Resolver {\\n    function resolveBytes(\\n        uint256[] memory file,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 zoom\\n    ) external view returns (bytes memory res);\\n\\n    function resolveRaw(\\n        uint256[] memory file,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 zoom\\n    ) external view returns (uint256[] memory res);\\n\\n    function resolveData(\\n        uint256[] memory file,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 zoom\\n    ) external view returns (IdotnuggV1Data.Data memory res);\\n\\n    function resolveString(\\n        uint256[] memory file,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 zoom\\n    ) external view returns (string memory res);\\n}\\n\\ninterface IdotnuggV1Processor is IdotnuggV1Resolver {\\n    function dotnuggToBytes(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (bytes memory res);\\n\\n    function dotnuggToRaw(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (uint256[] memory res);\\n\\n    function dotnuggToData(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (IdotnuggV1Data.Data memory res);\\n\\n    function dotnuggToString(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (string memory res);\\n\\n    function process(\\n        address implementer,\\n        uint256 tokenId,\\n        uint8 width\\n    ) external view returns (uint256[] memory file, IdotnuggV1Data.Data memory dat);\\n\\n    function processCore(\\n        uint256[][] memory files,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 width\\n    ) external view returns (uint256[] memory file);\\n}\\n\\ninterface IdotnuggV1Implementer {\\n    function setResolver(uint256 tokenId, address to) external;\\n\\n    function resolverOf(uint256 tokenId) external view returns (address resolver);\\n\\n    function prepareFiles(uint256 tokenId) external view returns (uint256[][] memory file, IdotnuggV1Data.Data memory data);\\n\\n    function dotnuggV1Processor() external returns (address);\\n\\n    function defaultWidth() external returns (uint8);\\n\\n    function defaultZoom() external returns (uint8);\\n}\\n\",\"keccak256\":\"0x2cf3a40c80271c43f4b1c173073621bccb5c9fc4e8a7191d049e823134872e1e\",\"license\":\"MIT\"},\"src/interfaces/nuggft/IEpochExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IEpochExternal {\\n    event Genesis();\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function epoch() external view returns (uint32 res);\\n}\\n\",\"keccak256\":\"0xa5c654c1493d99fbdb2e4422d7ac16c2343761c47379792001912ad6dbdd60d5\",\"license\":\"MIT\"},\"src/interfaces/nuggft/IFileExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721, IERC721Metadata, IERC165} from '../IERC721.sol';\\n\\nimport {IdotnuggV1Implementer} from '../IdotnuggV1.sol';\\n\\ninterface IFileExternal is IERC721Metadata, IdotnuggV1Implementer {\\n    function storeFiles(uint256[][] calldata data, uint8 feature) external;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function totalLengths() external view returns (uint8[] memory res);\\n}\\n\",\"keccak256\":\"0xcdd99edfc43380c4dbde813a91f354cd6d9bdaa71a5f935bd1d579557097df0a\",\"license\":\"MIT\"},\"src/interfaces/nuggft/ILoanExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ILoanExternal {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event TakeLoan(uint160 tokenId, uint96 principal);\\n    event Payoff(uint160 tokenId, address account, uint96 payoffAmount);\\n    event Rebalance(uint160 tokenId, uint96 fee, uint96 earned);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function rebalance(uint160 tokenId) external payable;\\n\\n    function loan(uint160 tokenId) external;\\n\\n    function payoff(uint160 tokenId) external payable;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @notice for a nugg's active loan: calculates the current min eth a user must send to payoff or rebalance\\n    /// @dev contract ->\\n    /// @dev frontend -> used to set the amount of eth for user\\n    /// @param tokenId the token who's current loan to check\\n    /// @return toPayoff ->  the current amount loaned out, plus the final rebalance fee\\n    /// @return toRebalance ->  the fee a user must pay to rebalance (and extend) the loan on their nugg\\n    /// @return earned -> the amount of eth the minSharePrice has increased since loan was last rebalanced\\n    /// @return epochDue -> the final epoch a user is safe from liquidation (inclusive)\\n    /// @return loaner -> the user responsable for the loan\\n    function loanInfo(uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 toPayoff,\\n            uint96 toRebalance,\\n            uint96 earned,\\n            uint32 epochDue,\\n            address loaner\\n        );\\n\\n    /// @notice \\\"toPayoff\\\" value from \\\"loanInfo\\\"\\n    /// @dev should be used to tell user how much eth to send for payoff\\n    function valueForPayoff(uint160 tokenId) external view returns (uint96 res);\\n\\n    /// @notice \\\"toRebalance\\\" value from \\\"loanInfo\\\"\\n    /// @dev should be used to tell user how much eth to send for rebalance\\n    function valueForRebalance(uint160 tokenId) external view returns (uint96 res);\\n}\\n\",\"keccak256\":\"0x194475a9041ddbec5ecf94e3d539fee52c1f9d61bb3f96ba4c895f5999377f8a\",\"license\":\"MIT\"},\"src/interfaces/nuggft/IProofExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IProofExternal {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event SetProof(uint160 tokenId, uint256 proof, uint8[] items);\\n    event PopItem(uint160 tokenId, uint256 proof, uint16 itemId);\\n    event PushItem(uint160 tokenId, uint256 proof, uint16 itemId);\\n    event RotateItem(uint160 tokenId, uint256 proof, uint8 feature);\\n    event SetAnchorOverrides(uint160 tokenId, uint256 proof, uint8[] xs, uint8[] ys);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function rotateFeature(uint160 tokenId, uint8 feature) external;\\n\\n    function setOverrides(\\n        uint160 tokenId,\\n        uint8[] memory xs,\\n        uint8[] memory ys\\n    ) external;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function proofOf(uint160 tokenId) external view returns (uint256);\\n\\n    function parsedProofOf(uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            uint256 proof,\\n            uint8[] memory defaultIds,\\n            uint8[] memory extraIds,\\n            uint8[] memory overxs,\\n            uint8[] memory overys\\n        );\\n}\\n\",\"keccak256\":\"0xd23c6aa3d99d89a071764862ab4b7dab24b0380edfdb7634e107fad2d61ec114\",\"license\":\"MIT\"},\"src/interfaces/nuggft/IStakeExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStakeExternal {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event StakeEth(uint96 stake, uint96 protocol);\\n    event UnStakeEth(uint96 stake, address to);\\n    event ProtocolEthExtracted(uint96 eth);\\n    event MigratorV1Updated(address migrator);\\n    event MigrateV1Sent(address v2, uint160 tokenId, uint256 proof, address owner, uint96 eth);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function migrateStake(uint160 tokenId) external;\\n\\n    /// @notice burns a nugg from existance, dealing the eth worth of that share to the user\\n    /// @dev should only be called directly\\n    /// @param tokenId the id of the nugg being burned\\n    function withdrawStake(uint160 tokenId) external;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function minSharePrice() external view returns (uint96 res);\\n\\n    function totalProtocolEth() external view returns (uint96);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalStakedShares() external view returns (uint64);\\n\\n    function totalStakedEth() external view returns (uint96);\\n\\n    function activeEthPerShare() external view returns (uint96);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TRUSTED\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @notice sends the current protocolEth to the user and resets the value to zero\\n    /// @dev caller must be a trusted user\\n    function extractProtocolEth() external;\\n\\n    /// @notice sets the migrator contract\\n    /// @dev caller must be a trusted user\\n    /// @param migrator the address to set as the migrator contract\\n    function setMigrator(address migrator) external;\\n}\\n\",\"keccak256\":\"0x47f0a4f98e29faf48dd31f81fd5ca6efe3bb4d79721c135dbb70e2a7ffa73749\",\"license\":\"MIT\"},\"src/interfaces/nuggft/ISwapExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ISwapExternal {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event DelegateMint(uint256 epoch, address account, uint96 eth);\\n    event DelegateCommit(uint160 tokenId, address account, uint96 eth);\\n    event DelegateOffer(uint160 tokenId, address account, uint96 eth);\\n    event SwapClaim(uint160 tokenId, address account, uint32 epoch);\\n    event SwapStart(uint160 tokenId, address account, uint96 eth);\\n\\n    event DelegateCommitItem(uint160 sellingTokenId, uint16 itemId, uint160 buyingTokenId, uint96 eth);\\n    event DelegateOfferItem(uint160 sellingTokenId, uint16 itemId, uint160 buyingTokenId, uint96 eth);\\n    event SwapClaimItem(uint160 sellingTokenId, uint16 itemId, uint160 buyingTokenId, uint32 epoch);\\n    event SwapItemStart(uint160 sellingTokenId, uint16 itemId, uint96 eth);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function delegate(uint160 tokenId) external payable;\\n\\n    function delegateItem(\\n        uint160 sellerTokenId,\\n        uint16 itemid,\\n        uint160 buyerTokenId\\n    ) external payable;\\n\\n    function claim(uint160 tokenId) external;\\n\\n    function claimItem(\\n        uint160 sellerTokenId,\\n        uint16 itemid,\\n        uint160 buyerTokenId\\n    ) external;\\n\\n    function swap(uint160 tokenId, uint96 floor) external;\\n\\n    function swapItem(\\n        uint160 tokenId,\\n        uint16 itemid,\\n        uint96 floor\\n    ) external;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @notice calculates the minimum eth that must be sent with a delegate call\\n    /// @dev returns 0 if no delegate can be made for this oken\\n    /// @param tokenId -> the token to be delegated to\\n    /// @param user -> the address of the user who will be delegating\\n    /// @return canDelegate -> instead of reverting this function will return false\\n    /// @return nextSwapAmount -> the minimum value that must be sent with a delegate call\\n    /// @return userCurrentOffer ->\\n    function valueForDelegate(uint160 tokenId, address user)\\n        external\\n        view\\n        returns (\\n            bool canDelegate,\\n            uint96 nextSwapAmount,\\n            uint96 userCurrentOffer\\n        );\\n}\\n\",\"keccak256\":\"0xe990042bde92b0a6826b98b9204c388a7c31cd5fc71609e8f200402f66af3e29\",\"license\":\"MIT\"},\"src/interfaces/nuggft/ITokenExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721, IERC721Metadata, IERC165} from '../IERC721.sol';\\n\\ninterface ITokenExternal is IERC721 {\\n    function mint(uint160 tokenId) external payable;\\n\\n    function trustedMint(uint160 tokenId, address to) external payable;\\n\\n    event TrustedMint(address indexed to, uint160 tokenId);\\n    event UntrustedMint(address indexed by, uint160 tokenId);\\n}\\n\",\"keccak256\":\"0x9232cab51c548f67b4112341f3264d83f524ce31761652e418def1edb178c41d\",\"license\":\"MIT\"},\"src/interfaces/nuggft/ITrustExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITrustExternal {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event TrustUpdated(address indexed user, bool trust);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function setIsTrusted(address user, bool trust) external;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function trusted(address user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x72de4faf0b923cfb861a6b252588df76004aca6064994ebd24e4373ec60667eb\",\"license\":\"MIT\"},\"src/libraries/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/// @notice Read and write to persistent storage at a fraction of the cost.\\n/// @author Modified from 0xSequence (https://github.com/0xsequence/sstore2/blob/master/contracts/SSTORE2.sol)\\nlibrary SSTORE2 {\\n    uint256 internal constant DATA_OFFSET = 1;\\n\\n    function write(bytes memory data) internal returns (address pointer) {\\n        bytes memory runtimeCode = abi.encodePacked(hex'00', data);\\n\\n        bytes memory creationCode = abi.encodePacked(hex'63', uint32(runtimeCode.length), hex'80_60_0E_60_00_39_60_00_F3', runtimeCode);\\n\\n        assembly {\\n            pointer := create(0, add(creationCode, 32), mload(creationCode))\\n        }\\n\\n        require(pointer != address(0), 'DEPLOYMENT_FAILED');\\n    }\\n\\n    function read(address pointer) internal view returns (bytes memory) {\\n        return readBytecode(pointer, DATA_OFFSET, pointer.code.length - DATA_OFFSET);\\n    }\\n\\n    function read(address pointer, uint256 start) internal view returns (bytes memory) {\\n        start += DATA_OFFSET;\\n\\n        return readBytecode(pointer, start, pointer.code.length - start);\\n    }\\n\\n    function read(\\n        address pointer,\\n        uint256 start,\\n        uint256 end\\n    ) internal view returns (bytes memory) {\\n        start += DATA_OFFSET;\\n        end += DATA_OFFSET;\\n\\n        require(pointer.code.length >= end, 'OUT_OF_BOUNDS');\\n\\n        return readBytecode(pointer, start, end - start);\\n    }\\n\\n    function readBytecode(\\n        address pointer,\\n        uint256 start,\\n        uint256 size\\n    ) private view returns (bytes memory data) {\\n        assembly {\\n            data := mload(0x40)\\n            mstore(0x40, add(data, and(add(add(size, add(start, 0x20)), 0x1f), not(0x1f))))\\n            mstore(data, size)\\n            extcodecopy(pointer, add(data, 0x20), start, size)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x92a5788f76f3e7e98643d8791cb2da664f1865cc50f7843594e0e5ecd7a68283\",\"license\":\"MIT\"},\"src/libraries/SafeCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n// OK\\n/// @notice Safe unsigned integer casting library that reverts on overflow.\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\\nlibrary SafeCastLib {\\n    function safe160(uint256 x) internal pure returns (uint160 y) {\\n        require(x <= type(uint160).max);\\n        y = uint160(x);\\n    }\\n\\n    function safe96(uint256 x) internal pure returns (uint96 y) {\\n        require(x <= type(uint96).max);\\n        y = uint96(x);\\n    }\\n\\n    function safe64(uint256 x) internal pure returns (uint64 y) {\\n        require(x <= type(uint64).max);\\n        y = uint64(x);\\n    }\\n\\n    function safe32(uint256 x) internal pure returns (uint32 y) {\\n        require(x <= type(uint32).max);\\n        y = uint32(x);\\n    }\\n\\n    function safe16(uint256 x) internal pure returns (uint16 y) {\\n        require(x <= type(uint16).max);\\n        y = uint16(x);\\n    }\\n\\n    function safe8(uint256 x) internal pure returns (uint8 y) {\\n        require(x <= type(uint8).max);\\n        y = uint8(x);\\n    }\\n}\\n\",\"keccak256\":\"0xabebd3a3bff23b926901d1aad6aa461761cfb4db8c9685a0b803597c78590864\",\"license\":\"MIT\"},\"src/libraries/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721Receiver} from '../interfaces/IERC721.sol';\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\nlibrary SafeTransferLib {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            ETH OPERATIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, 'ETH_TRANSFER_FAILED');\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            NFT OPERATIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function isERC721Receiver(address to, uint256 tokenId) internal returns (bool) {\\n        if (SafeTransferLib.isDeployedContract(to)) {\\n            try IERC721Receiver(to).onERC721Received(msg.sender, address(this), tokenId, '') returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert('ERC721: transfer to non ERC721Receiver implementer');\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function isDeployedContract(address account) internal view returns (bool res) {\\n        res = account.code.length != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x086d01c3b7c7fbf1010e861282d7759db189d901439d0a31f63405fd3be634eb\",\"license\":\"MIT\"},\"src/libraries/ShiftLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeCastLib} from './SafeCastLib.sol';\\n\\nlibrary ShiftLib {\\n    using SafeCastLib for uint256;\\n\\n    /// @notice creates a bit mask\\n    /// @dev res = (2 ^ bits) - 1\\n    /// @param bits d\\n    /// @return res d\\n    /// @dev no need to check if \\\"bits\\\" is < 256 as anything greater than 255 will be treated the same\\n    function mask(uint8 bits) internal pure returns (uint256 res) {\\n        assembly {\\n            res := sub(shl(bits, 1), 1)\\n        }\\n    }\\n\\n    function fullsubmask(uint8 bits, uint8 pos) internal pure returns (uint256 res) {\\n        res = ~(mask(bits) << pos);\\n    }\\n\\n    function set(\\n        uint256 preStore,\\n        uint8 bits,\\n        uint8 pos,\\n        uint256 value\\n    ) internal pure returns (uint256 postStore) {\\n        postStore = preStore & fullsubmask(bits, pos);\\n\\n        assembly {\\n            value := shl(pos, value)\\n        }\\n\\n        postStore |= value;\\n    }\\n\\n    function get(\\n        uint256 store,\\n        uint8 bits,\\n        uint8 pos\\n    ) internal pure returns (uint256 value) {\\n        assembly {\\n            value := shr(pos, store)\\n        }\\n        value &= mask(bits);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                ARRAYS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function getArray(uint256 store, uint8 pos) internal pure returns (uint8[] memory arr) {\\n        store = get(store, 64, pos);\\n\\n        arr = new uint8[](8);\\n        for (uint256 i = 0; i < 8; i++) {\\n            arr[i] = uint8(store & 0xff);\\n            store >>= 8;\\n        }\\n    }\\n\\n    function setArray(\\n        uint256 store,\\n        uint8 pos,\\n        uint8[] memory arr\\n    ) internal pure returns (uint256 res) {\\n        for (uint256 i = 8; i > 0; i--) {\\n            res |= uint256(arr[i - 1]) << ((8 * (i - 1)));\\n        }\\n\\n        res = set(store, 64, pos, res);\\n    }\\n}\\n\",\"keccak256\":\"0x8510e18448ed3be8b7ddbb4578be829e3c69946eb3e0fcecbb872671c127f8dd\",\"license\":\"MIT\"},\"src/loan/LoanExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ILoanExternal} from '../interfaces/nuggft/ILoanExternal.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\nimport {Loan} from '../loan/LoanStorage.sol';\\n\\nimport {TokenCore} from '../token/TokenCore.sol';\\nimport {StakeCore} from '../stake/StakeCore.sol';\\n\\nimport {SwapPure} from '../swap/SwapPure.sol';\\n\\nimport {TokenView} from '../token/TokenView.sol';\\nimport {EpochCore} from '../epoch/EpochCore.sol';\\n\\nabstract contract LoanExternal is ILoanExternal {\\n    using SafeCastLib for uint256;\\n    using SwapPure for uint256;\\n\\n    uint32 constant LIQUIDATION_PERIOD = 1000;\\n    uint96 constant REBALANCE_FEE_BPS = 100;\\n\\n    /// @inheritdoc ILoanExternal\\n    function loan(uint160 tokenId) external override {\\n        // we know the loan data is blank because it is owned by the user\\n        require(TokenView.ownerOf(tokenId) == msg.sender, 'L:2');\\n\\n        uint96 principal = StakeCore.activeEthPerShare();\\n\\n        uint32 epoch = EpochCore.activeEpoch();\\n\\n        (uint256 loanData, ) = SwapPure.buildSwapData(epoch, uint160(msg.sender), principal, false);\\n\\n        Loan.sstore(tokenId, loanData); // starting swap data\\n\\n        emit TakeLoan(tokenId, principal);\\n\\n        TokenCore.approvedTransferToSelf(tokenId);\\n\\n        SafeTransferLib.safeTransferETH(msg.sender, principal);\\n    }\\n\\n    /// @inheritdoc ILoanExternal\\n    function payoff(uint160 tokenId) external payable override {\\n        require(address(this) == TokenView.ownerOf(tokenId), 'L:6');\\n\\n        (uint96 toPayoff, uint96 toRebalance, uint96 earned, uint96 epochDue, address loaner) = loanInfo(tokenId);\\n\\n        Loan.spurge(tokenId); // starting swap data\\n\\n        uint32 epoch = EpochCore.activeEpoch();\\n\\n        // delay liquidation\\n        if (epochDue >= epoch) require(loaner == msg.sender, 'L:7');\\n\\n        require(toPayoff <= msg.value, 'L:8');\\n\\n        uint96 value = msg.value.safe96();\\n\\n        uint96 overpayment = value - toRebalance;\\n\\n        uint96 owed = earned + overpayment;\\n\\n        emit Rebalance(tokenId, toRebalance, earned);\\n\\n        emit Payoff(tokenId, msg.sender, toPayoff);\\n\\n        StakeCore.addStakedEth(toRebalance);\\n\\n        SafeTransferLib.safeTransferETH(msg.sender, owed);\\n\\n        TokenCore.checkedTransferFromSelf(msg.sender, tokenId);\\n    }\\n\\n    /// @inheritdoc ILoanExternal\\n    function rebalance(uint160 tokenId) external payable override {\\n        require(address(this) == TokenView.ownerOf(tokenId), 'L:3');\\n\\n        (, uint96 toRebalance, uint96 earned, uint32 epochDue, address loaner) = loanInfo(tokenId);\\n\\n        require(loaner == msg.sender, 'L:4');\\n\\n        require(toRebalance <= msg.value, 'L:5'); // 70\\n\\n        StakeCore.addStakedEth(toRebalance);\\n\\n        uint96 newPrincipal = StakeCore.activeEthPerShare();\\n\\n        (uint256 loanData, uint96 dust) = SwapPure.buildSwapData(epochDue, uint160(msg.sender), newPrincipal, false);\\n\\n        Loan.sstore(tokenId, loanData); // starting swap data\\n\\n        uint96 overpayment = msg.value.safe96() - toRebalance; // 1 wei\\n\\n        uint96 owed = earned + overpayment + dust;\\n\\n        emit Rebalance(tokenId, toRebalance, earned);\\n\\n        SafeTransferLib.safeTransferETH(msg.sender, owed);\\n    }\\n\\n    /// @inheritdoc ILoanExternal\\n    function valueForPayoff(uint160 tokenId) external view returns (uint96 res) {\\n        (res, , , , ) = loanInfo(tokenId);\\n    }\\n\\n    /// @inheritdoc ILoanExternal\\n    function valueForRebalance(uint160 tokenId) external view returns (uint96 res) {\\n        (, res, , , ) = loanInfo(tokenId);\\n    }\\n\\n    /// @inheritdoc ILoanExternal\\n    function loanInfo(uint160 tokenId)\\n        public\\n        view\\n        returns (\\n            uint96 toPayoff,\\n            uint96 toRebalance,\\n            uint96 earned,\\n            uint32 epochDue,\\n            address loaner\\n        )\\n    {\\n        uint256 state = Loan.sload(tokenId);\\n\\n        // ensure loan exists\\n        require(state != 0, 'L:1');\\n\\n        // the amount of eth currently loanded by user\\n        uint96 curr = state.eth();\\n\\n        uint96 activeEps = StakeCore.activeEthPerShare();\\n\\n        toRebalance = ((curr * REBALANCE_FEE_BPS) / 10000);\\n\\n        toPayoff = curr + toRebalance;\\n\\n        // value earned while lone was taken out\\n        earned = toPayoff >= activeEps ? 0 : activeEps - toPayoff;\\n\\n        epochDue = state.epoch() + LIQUIDATION_PERIOD;\\n\\n        loaner = address(state.account());\\n    }\\n}\\n\",\"keccak256\":\"0xd5fc87095435d0fa2768b0d9d9d9eb8440f438989c4d9beb3ef985e0a7af597c\",\"license\":\"MIT\"},\"src/loan/LoanStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\nlibrary Loan {\\n    struct Mapping {\\n        mapping(uint256 => uint256) map;\\n    }\\n\\n    function sstore(uint160 tokenId, uint256 data) internal {\\n        Global.ptr().loan.map[tokenId] = data;\\n    }\\n\\n    function spurge(uint160 tokenId) internal {\\n        delete Global.ptr().loan.map[tokenId];\\n    }\\n\\n    function sload(uint160 tokenId) internal view returns (uint256) {\\n        return Global.ptr().loan.map[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0xf4d38962a076e171796403317f9f100e0e45352d0dd6caabb5341e476c62a20f\",\"license\":\"MIT\"},\"src/proof/ProofCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport {EpochCore} from '../epoch/EpochCore.sol';\\n\\nimport {Proof} from './ProofStorage.sol';\\n\\nimport {ProofPure} from './ProofPure.sol';\\n\\nimport {TokenView} from '../token/TokenView.sol';\\n\\nimport {FileView} from '../file/FileView.sol';\\nimport {File} from '../file/FileStorage.sol';\\n\\n// OK\\nlibrary ProofCore {\\n    using SafeCastLib for uint256;\\n    using ProofPure for uint256;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event SetProof(uint160 tokenId, uint256 proof, uint8[] items);\\n    event PopItem(uint160 tokenId, uint256 proof, uint16 itemId);\\n    event PushItem(uint160 tokenId, uint256 proof, uint16 itemId);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                VIEW\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function checkedProofOf(uint160 tokenId) internal view returns (uint256 res) {\\n        res = Proof.sload(tokenId);\\n        require(res != 0, 'P:0');\\n    }\\n\\n    function checkedProofOfIncludingPending(uint160 tokenId) internal view returns (uint256 res) {\\n        (uint256 seed, uint256 epoch, uint256 proof, ) = ProofCore.pendingProof();\\n\\n        if (epoch == tokenId && seed != 0) return proof;\\n\\n        res = Proof.sload(tokenId);\\n\\n        require(res != 0, 'P:1');\\n    }\\n\\n    function hasProof(uint160 tokenId) internal view returns (bool res) {\\n        res = Proof.sload(tokenId) != 0;\\n    }\\n\\n    function parsedProofOfIncludingPending(uint160 tokenId)\\n        internal\\n        view\\n        returns (\\n            uint256 proof,\\n            uint8[] memory defaultIds,\\n            uint8[] memory extraIds,\\n            uint8[] memory overxs,\\n            uint8[] memory overys\\n        )\\n    {\\n        proof = checkedProofOfIncludingPending(tokenId);\\n\\n        return ProofPure.fullProof(proof);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            SWAP MANAGEMENT\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function addItem(uint160 tokenId, uint16 itemId) internal {\\n        require(TokenView.ownerOf(tokenId) == msg.sender, 'PC:0');\\n\\n        uint256 working = checkedProofOf(tokenId);\\n\\n        require(Proof.spointer().protcolItems[itemId] > 0, 'RC:3');\\n\\n        Proof.spointer().protcolItems[itemId]--;\\n\\n        working = ProofPure.pushToExtra(working, itemId);\\n\\n        Proof.sstore(tokenId, working);\\n\\n        emit PushItem(tokenId, working, itemId);\\n    }\\n\\n    function removeItem(uint160 tokenId, uint16 itemId) internal {\\n        require(TokenView.ownerOf(tokenId) == msg.sender, 'PC:1');\\n\\n        uint256 working = checkedProofOf(tokenId);\\n\\n        working = ProofPure.pullFromExtra(working, itemId);\\n\\n        Proof.sstore(tokenId, working);\\n\\n        Proof.spointer().protcolItems[itemId]++;\\n\\n        emit PopItem(tokenId, working, itemId);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            INITIALIZATION\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function setProof(uint160 tokenId) internal {\\n        require(!hasProof(tokenId), 'P:0');\\n\\n        uint256 randomEnoughSeed = uint256(keccak256(abi.encodePacked(hex'420690', tokenId, blockhash(block.number - 1))));\\n\\n        require(randomEnoughSeed != 0, 'P:1');\\n\\n        (uint256 res, uint8[] memory picks) = ProofCore.initFromSeed(randomEnoughSeed);\\n\\n        Proof.sstore(tokenId, res);\\n\\n        emit SetProof(tokenId, res, picks);\\n    }\\n\\n    function setProofFromEpoch(uint160 tokenId) internal {\\n        require(!hasProof(tokenId), 'P:2');\\n\\n        (, uint256 epoch, uint256 res, uint8[] memory picks) = pendingProof();\\n\\n        require(epoch == tokenId, 'P:4');\\n\\n        Proof.sstore(tokenId, res);\\n\\n        emit SetProof(tokenId, res, picks);\\n    }\\n\\n    // TODO TO BE TESTED\\n    function initFromSeed(uint256 seed) internal view returns (uint256 res, uint8[] memory upd) {\\n        require(seed != 0, 'P:6');\\n\\n        uint8[] memory lengths = FileView.totalLengths();\\n\\n        upd = new uint8[](8);\\n\\n        uint8[] memory picks = ShiftLib.getArray(seed, 0);\\n\\n        upd[0] = (picks[0] % lengths[0]) + 1;\\n        upd[1] = (picks[1] % lengths[1]) + 1;\\n        upd[2] = (picks[2] % lengths[2]) + 1;\\n\\n        if (picks[3] < 96) upd[3] = (picks[4] % lengths[3]) + 1;\\n        else if (picks[3] < 192) upd[4] = (picks[4] % lengths[4]) + 1;\\n        else if (picks[3] < 250) upd[5] = (picks[4] % lengths[5]) + 1;\\n        else upd[6] = (picks[4] % lengths[6]) + 1;\\n\\n        res = ShiftLib.setArray(res, 0, upd);\\n    }\\n\\n    function pendingProof()\\n        internal\\n        view\\n        returns (\\n            uint256 seed,\\n            uint256 epoch,\\n            uint256 proof,\\n            uint8[] memory defaultIds\\n        )\\n    {\\n        (seed, epoch) = EpochCore.calculateSeed();\\n\\n        (proof, defaultIds) = ProofCore.initFromSeed(seed);\\n    }\\n}\\n\",\"keccak256\":\"0xeca16cfed00297e914798028be3d1608f6dd26c2213e7b665cf42343a85b3048\",\"license\":\"MIT\"},\"src/proof/ProofExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IProofExternal} from '../interfaces/nuggft/IProofExternal.sol';\\n\\nimport {Proof} from './ProofStorage.sol';\\n\\nimport {EpochCore} from '../epoch/EpochCore.sol';\\n\\nimport {ProofCore} from './ProofCore.sol';\\nimport {ProofPure} from './ProofPure.sol';\\n\\nimport {TokenView} from '../token/TokenView.sol';\\n\\nabstract contract ProofExternal is IProofExternal {\\n    /// @inheritdoc IProofExternal\\n    function rotateFeature(uint160 tokenId, uint8 feature) external override {\\n        require(TokenView.ownerOf(tokenId) == msg.sender, 'PC:2');\\n\\n        uint256 working = ProofCore.checkedProofOf(tokenId);\\n\\n        working = ProofPure.rotateDefaultandExtra(working, feature);\\n\\n        working = ProofPure.clearAnchorOverridesForFeature(working, feature);\\n\\n        Proof.sstore(tokenId, working);\\n\\n        emit RotateItem(tokenId, working, feature);\\n    }\\n\\n    /// @inheritdoc IProofExternal\\n    function setOverrides(\\n        uint160 tokenId,\\n        uint8[] memory xs,\\n        uint8[] memory ys\\n    ) external override {\\n        require(TokenView.ownerOf(tokenId) == msg.sender, 'PC:2');\\n\\n        require(xs.length == 8 && ys.length == 8, 'PC:3');\\n\\n        uint256 working = ProofCore.checkedProofOf(tokenId);\\n\\n        working = ProofPure.setNewAnchorOverrides(working, xs, ys);\\n\\n        Proof.sstore(tokenId, working);\\n\\n        emit SetAnchorOverrides(tokenId, working, xs, ys);\\n    }\\n\\n    /// @inheritdoc IProofExternal\\n    function proofOf(uint160 tokenId) public view virtual override returns (uint256) {\\n        return ProofCore.checkedProofOfIncludingPending(tokenId);\\n    }\\n\\n    /// @inheritdoc IProofExternal\\n    function parsedProofOf(uint160 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint256 proof,\\n            uint8[] memory defaultIds,\\n            uint8[] memory extraIds,\\n            uint8[] memory overxs,\\n            uint8[] memory overys\\n        )\\n    {\\n        return ProofCore.parsedProofOfIncludingPending(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x6652314e683b32364cbe930cebe75f772cb43def4bedf453932e699e1518cfda\",\"license\":\"MIT\"},\"src/proof/ProofPure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\n/// @title ProofPure\\n/// @author dub6ix - nugg.xyz\\n/// @notice abstracts all the logic for converting the proof between a the uint256 which is stored in\\n/// in state and the the 4 uint8 arrays that it consists off.\\n/// @dev Explain to a developer any extra details\\n/// @dev itemIds are externally 16 bits, but here there are referenced as 8 bit ids in one of 8 indexs\\n/// where the id is the position the item exists in the file storage, and the index is the feature id\\n/// @dev there is not check - but dotnugg v1 only allows for max 63 for size, so anchor overrides should\\n/// reflect this.\\n/// @dev pushing and pulling is only set up for the extra array, so the user must manage their default array\\n/// by passing through the extra array - this is to reduce complexity\\n/// @dev see the dotnugg specification for more clarificaiton on the values used here\\n///\\n///  uint256 bit allocation of proof \\\"state\\\" variable:\\n/// \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u252c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u252c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n/// \\u2502  0 - 63   \\u2502 64 bits \\u2502  default item ids - 8 x 8 bits     \\u2502\\n/// \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524\\n/// \\u2502 64 - 127  \\u2502 64 bits \\u2502  extra item ids - 8 x 8 bits       \\u2502\\n/// \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524\\n/// \\u2502 128 - 191 \\u2502 64 bits \\u2502  x anchor overrides - 8 x 8 bits   \\u2502\\n/// \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524\\n/// \\u2502 192 - 255 \\u2502 64 bits \\u2502  y anchor overrides - 8 x 8 bits   \\u2502\\n/// \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n///\\nlibrary ProofPure {\\n    /// @notice converts the proof state into a human readable form\\n    /// @dev fully parses the proof from a uint256 to 4 uint8 arrays\\n    /// @param state -> the uint256 proof state\\n    /// @return proof -> the uint256 proof state\\n    /// @return defaultIds -> the modifed uint256 proof state\\n    /// @return extraIds -> the modifed uint256 proof state\\n    /// @return xOverrides -> the modifed uint256 proof state\\n    /// @return yOverrides -> the modifed uint256 proof state\\n    function fullProof(uint256 state)\\n        internal\\n        pure\\n        returns (\\n            uint256 proof,\\n            uint8[] memory defaultIds,\\n            uint8[] memory extraIds,\\n            uint8[] memory xOverrides,\\n            uint8[] memory yOverrides\\n        )\\n    {\\n        proof = state;\\n        defaultIds = ShiftLib.getArray(state, 0);\\n        extraIds = ShiftLib.getArray(state, 64);\\n        xOverrides = ShiftLib.getArray(state, 128);\\n        yOverrides = ShiftLib.getArray(state, 192);\\n    }\\n\\n    /// @notice sets an item to the extra array\\n    /// @dev extra array must be empty at the feature positon being added to\\n    /// @param state -> the uint256 proof state\\n    /// @param itemId -> the itemId being added\\n    /// @return res -> the modifed uint256 proof state\\n    function pushToExtra(uint256 state, uint16 itemId) internal pure returns (uint256 res) {\\n        uint8[] memory arr = ShiftLib.getArray(state, 64);\\n\\n        (uint8 feat, uint8 pos) = parseItemId(itemId);\\n\\n        require(arr[feat] == 0, 'PP:0');\\n\\n        arr[feat] = pos;\\n\\n        res = ShiftLib.setArray(state, 64, arr);\\n    }\\n\\n    /// @notice removes an item from the extra array\\n    /// @dev extra array must NOT be empty at the feature positon being removed\\n    /// @dev the extra array must have that specific feature in that postion\\n    /// @param state -> the uint256 proof state\\n    /// @param itemId -> the itemId being removed\\n    /// @return res -> the modifed uint256 proof state\\n    function pullFromExtra(uint256 state, uint16 itemId) internal pure returns (uint256 res) {\\n        uint8[] memory arr = ShiftLib.getArray(state, 64);\\n\\n        (uint8 feat, uint8 pos) = parseItemId(itemId);\\n\\n        require(arr[feat] == pos, 'PP:1');\\n\\n        arr[feat] = 0;\\n\\n        res = ShiftLib.setArray(state, 64, arr);\\n    }\\n\\n    /// @notice swaps the default feauture x with the extra feature x\\n    /// @dev either default or extra feature value can be empty (0)\\n    /// @param state -> the uint256 proof state\\n    /// @param feature -> the feature to switch items for\\n    /// @return res -> the modifed uint256 proof state\\n    function rotateDefaultandExtra(uint256 state, uint8 feature) internal pure returns (uint256 res) {\\n        uint8[] memory def = ShiftLib.getArray(state, 0);\\n        uint8[] memory ext = ShiftLib.getArray(state, 64);\\n\\n        uint8 tmp = ext[feature];\\n        ext[feature] = def[feature];\\n        def[feature] = tmp;\\n\\n        res = ShiftLib.setArray(state, 0, def);\\n        res = ShiftLib.setArray(res, 64, ext);\\n    }\\n\\n    /// @notice updates the x and y override arrays\\n    /// @dev all must be set at once\\n    /// @param state -> the uint256 proof state\\n    /// @param xOverrides -> uint8 array of new x overrides\\n    /// @param yOverrides -> uint8 array of new x overrides\\n    /// @return res -> the modifed uint256 proof state\\n    function setNewAnchorOverrides(\\n        uint256 state,\\n        uint8[] memory xOverrides,\\n        uint8[] memory yOverrides\\n    ) internal pure returns (uint256 res) {\\n        res = ShiftLib.setArray(state, 128, xOverrides);\\n        res = ShiftLib.setArray(res, 192, yOverrides);\\n    }\\n\\n    /// @notice clears the anchor overrides for a specific feature\\n    /// @dev this should be called each time an item is added or removed from a feature\\n    /// @param state -> the uint256 proof state\\n    /// @param feature -> the feature to switch items for\\n    /// @return res -> the modifed uint256 proof state\\n    function clearAnchorOverridesForFeature(uint256 state, uint8 feature) internal pure returns (uint256 res) {\\n        uint8[] memory x = ShiftLib.getArray(state, 128);\\n        uint8[] memory y = ShiftLib.getArray(state, 192);\\n\\n        y[feature] = 0;\\n        x[feature] = 0;\\n\\n        res = ShiftLib.setArray(state, 128, x);\\n        res = ShiftLib.setArray(res, 192, y);\\n    }\\n\\n    /// @notice parses the external itemId into a feautre and position\\n    /// @dev this follows dotnugg v1 specification\\n    /// @param itemId -> the external itemId\\n    /// @return feat -> the feautre of the item\\n    /// @return pos -> the file storage position of the item\\n    function parseItemId(uint16 itemId) internal pure returns (uint8 feat, uint8 pos) {\\n        feat = uint8(itemId >> 8);\\n        pos = uint8(itemId & 0xff);\\n    }\\n}\\n\",\"keccak256\":\"0x94672a2b11ec831508507a03e0d0305593f22002ee0da977657ed16622c93657\",\"license\":\"MIT\"},\"src/proof/ProofStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\npragma solidity 0.8.9;\\n\\n// OK\\nlibrary Proof {\\n    struct Storage {\\n        mapping(uint256 => uint256) map;\\n        mapping(uint256 => uint256) protcolItems;\\n    }\\n\\n    function spointer() internal view returns (Storage storage s) {\\n        s = Global.ptr().proof;\\n    }\\n\\n    function sload(uint160 tokenId) internal view returns (uint256) {\\n        return spointer().map[tokenId];\\n    }\\n\\n    function sstore(uint160 tokenId, uint256 data) internal {\\n        spointer().map[tokenId] = data;\\n    }\\n}\\n\",\"keccak256\":\"0xd70c4f7b56673a51874b114eb21224906f69f3828f338a37750bb425ae081a4a\",\"license\":\"MIT\"},\"src/stake/StakeCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggFTV1Migrator} from '../interfaces/INuggFTV1Migrator.sol';\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {TokenCore} from '../token/TokenCore.sol';\\nimport {TokenView} from '../token/TokenView.sol';\\n\\nimport {ProofCore} from '../proof/ProofCore.sol';\\n\\nimport {Stake} from './StakeStorage.sol';\\nimport {StakePure} from './StakePure.sol';\\n\\n// SYSTEM\\n/// @title A title that should describe the contract/interface\\n/// @author dub6ix\\n/// @notice Explain to an end user what this does\\n/// @dev Explain to a developer any extra details\\nlibrary StakeCore {\\n    using StakePure for uint256;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                    EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event StakeEth(uint96 stake, uint96 protocol);\\n    event UnStakeEth(uint96 stake, address to);\\n    event ProtocolEthExtracted(uint96 eth);\\n    event MigratorV1Updated(address migrator);\\n    event MigrateV1Sent(address v2, uint160 tokenId, uint256 proof, address owner, uint96 eth);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                    VIEW\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @notice returns the active \\\"ethPerShare\\\" held by the contract\\n    /// @dev this value not always equivilent to the \\\"floor\\\" price which can consist of perceived value.\\n    /// can be looked at as an \\\"intrinsic floor\\\"\\n    /// @dev this is the value that users will receive when their either burn or loan out nuggs\\n    /// @return res -> [current staked eth] / [current staked shares]\\n    function activeEthPerShare() internal view returns (uint96 res) {\\n        res = Stake.sload().getEthPerShare();\\n    }\\n\\n    /// @notice returns the minimum eth that must be added to create a new share\\n    /// @dev premium here is used to push against dillution of supply through ensuring the price always increases\\n    /// @dev used by the front end\\n    /// @return res -> premium + protcolFee + ethPerShare\\n    function minSharePrice() internal view returns (uint96 res) {\\n        (res, , , ) = Stake.sload().minSharePriceBreakdown();\\n    }\\n\\n    /// @notice returns the total number of staked shares held by the contract\\n    /// @dev this is equivilent to the amount of nuggs in existance\\n    function activeStakedShares() internal view returns (uint64 res) {\\n        res = Stake.sload().getStakedShares();\\n    }\\n\\n    /// @notice returns the total amount of staked eth held by the contract\\n    /// @dev can be used as the market-cap or tvl of all nuggft v1\\n    /// @dev not equivilent to the balance of eth the contract holds, which also hs protocolEth and\\n    /// unclaimed eth from unsuccessful swaps\\n    function activeStakedEth() internal view returns (uint96 res) {\\n        res = Stake.sload().getStakedEth();\\n    }\\n\\n    /// @notice returns the amount of eth extractable by protocol\\n    /// @dev this will be\\n    /// @return res -> (PROTOCOL_FEE_BPS * [all eth staked] / 10000) - [all previously extracted eth]\\n    function activeProtocolEth() internal view returns (uint96 res) {\\n        res = Stake.sload().getProtocolEth();\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            ADD STAKE & SHARES\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @notice handles the adding of shares - ensures enough eth is being added\\n    /// @dev this is the only way to add shares - the logic here ensures that \\\"ethPerShare\\\" can never decrease\\n    /// @param eth the amount of eth being put up for a new share - must be some portion of msg.value\\n    function addStakedShareAndEth(uint96 eth) internal {\\n        require(msg.value >= eth, 'T:5'); // \\\"value of tx too low\\\"\\n\\n        uint256 cache = Stake.sload();\\n\\n        (uint64 activeShares, uint96 activeEth, uint96 activeProtoEth) = cache.getStakedSharesAndEth();\\n\\n        (uint96 totalPrice, , uint96 protocolFee, ) = cache.minSharePriceBreakdown();\\n\\n        // logically unnessesary - to help front end\\n        require(eth >= totalPrice, 'T:2'); // \\\"not enough eth to create share\\\"\\n\\n        uint96 overpay = eth - totalPrice;\\n\\n        // the rest of the value gets added to stakedEth\\n        protocolFee += StakePure.calculateProtocolFeeOf(overpay);\\n\\n        Stake.sstore(\\n            cache.setStakedShares(activeShares + 1).setStakedEth(activeEth + (eth - protocolFee)).setProtocolEth(\\n                activeProtoEth + protocolFee\\n            )\\n        );\\n\\n        emit StakeEth(eth - protocolFee, protocolFee);\\n    }\\n\\n    /// @notice handles isolated staking of eth\\n    /// @dev supply of eth goes up while supply of shares stays constant - increasing \\\"minSharePrice\\\"\\n    /// @param eth the amount of eth being staked - must be some portion of msg.value\\n    function addStakedEth(uint96 eth) internal {\\n        require(msg.value >= eth, 'T:7'); // \\\"value of tx too low\\\"\\n\\n        uint256 cache = Stake.sload();\\n\\n        uint96 protocolFee = StakePure.calculateProtocolFeeOf(eth);\\n\\n        Stake.sstore(cache.setStakedEth(cache.getStakedEth() + (eth - protocolFee)).setProtocolEth(cache.getProtocolEth() + protocolFee));\\n\\n        emit StakeEth(eth - protocolFee, protocolFee);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                BURN/MIGRATE\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @notice removes a staked share from the contract,\\n    /// @dev this is the only way to remove a share\\n    /// @dev caculcates but does not handle dealing the eth - which is handled by the two helpers above\\n    /// @dev ensurs the user is the owner of the nugg\\n    /// @param tokenId the id of the nugg being unstaked\\n    /// @return ethOwed -> the amount of eth owed to the unstaking user - equivilent to \\\"ethPerShare\\\"\\n    function subStakedShare(uint160 tokenId) internal returns (uint96 ethOwed) {\\n        require(TokenView.ownerOf(tokenId) == msg.sender, 'T:4');\\n\\n        uint256 cache = Stake.sload();\\n\\n        // hanles all logic not related to staking the nugg\\n        TokenCore.onBurn(tokenId);\\n\\n        (uint64 activeShares, uint96 activeEth, ) = cache.getStakedSharesAndEth();\\n\\n        ethOwed = cache.getEthPerShare();\\n\\n        /// TODO - what the hell are these\\n        require(activeShares >= 1, 'T:5');\\n        require(activeEth >= ethOwed, 'T:6');\\n\\n        Stake.sstore(cache.setStakedShares(activeShares - 1).setStakedEth(activeEth - ethOwed));\\n\\n        emit UnStakeEth(ethOwed, msg.sender);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                 TRUSTED\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n}\\n\",\"keccak256\":\"0x41de7a7942b8971557f58c4d69a2a8df7aef35724b28dbab6ca3b74efb4d6bbf\",\"license\":\"MIT\"},\"src/stake/StakeExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggFTV1Migrator} from '../interfaces/INuggFTV1Migrator.sol';\\n\\nimport {IStakeExternal} from '../interfaces/INuggFT.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {StakeCore} from './StakeCore.sol';\\nimport {StakePure} from './StakePure.sol';\\n\\nimport {Stake} from './StakeStorage.sol';\\n\\nimport {Trust} from '../trust/Trust.sol';\\n\\nimport {ProofCore} from '../proof/ProofCore.sol';\\n\\nabstract contract StakeExternal is IStakeExternal {\\n    using SafeCastLib for uint256;\\n    using StakePure for uint256;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                CORE\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc IStakeExternal\\n    function withdrawStake(uint160 tokenId) external {\\n        uint96 ethOwed = StakeCore.subStakedShare(tokenId);\\n\\n        SafeTransferLib.safeTransferETH(msg.sender, ethOwed);\\n    }\\n\\n    /// @inheritdoc IStakeExternal\\n    function migrateStake(uint160 tokenId) external {\\n        address migrator = Stake.spointer().trustedMigrator;\\n\\n        require(migrator != address(0), 'T:3');\\n\\n        // stores the proof before deleting the nugg\\n        uint256 proof = ProofCore.checkedProofOf(tokenId);\\n\\n        uint96 ethOwed = StakeCore.subStakedShare(tokenId);\\n\\n        INuggFTV1Migrator(migrator).nuggftMigrateFromV1{value: ethOwed}(tokenId, proof, msg.sender);\\n\\n        emit MigrateV1Sent(migrator, tokenId, proof, msg.sender, ethOwed);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TRUSTED\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc IStakeExternal\\n    function extractProtocolEth() external {\\n        Trust.check();\\n\\n        uint256 cache = Stake.sload();\\n\\n        uint96 eth = cache.getProtocolEth();\\n\\n        SafeTransferLib.safeTransferETH(msg.sender, eth);\\n\\n        Stake.sstore(cache.setProtocolEth(0));\\n\\n        emit ProtocolEthExtracted(eth);\\n    }\\n\\n    /// @inheritdoc IStakeExternal\\n    function setMigrator(address migrator) external {\\n        Trust.check();\\n\\n        Stake.spointer().trustedMigrator = migrator;\\n\\n        emit MigratorV1Updated(migrator);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                VIEW\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc IStakeExternal\\n    function minSharePrice() external view override returns (uint96 res) {\\n        res = StakeCore.minSharePrice();\\n    }\\n\\n    /// @inheritdoc IStakeExternal\\n    function totalStakedShares() external view override returns (uint64 res) {\\n        res = StakeCore.activeStakedShares();\\n    }\\n\\n    /// @inheritdoc IStakeExternal\\n    function totalStakedEth() external view override returns (uint96 res) {\\n        res = StakeCore.activeStakedEth();\\n    }\\n\\n    /// @inheritdoc IStakeExternal\\n    function activeEthPerShare() external view override returns (uint96 res) {\\n        res = StakeCore.activeEthPerShare();\\n    }\\n\\n    /// @inheritdoc IStakeExternal\\n    function totalProtocolEth() external view override returns (uint96 res) {\\n        res = StakeCore.activeProtocolEth();\\n    }\\n\\n    /// @inheritdoc IStakeExternal\\n    function totalSupply() external view override returns (uint256 res) {\\n        res = StakeCore.activeStakedShares();\\n    }\\n}\\n\",\"keccak256\":\"0xb6d5ad116c39ac50dca54d28cbdb30294215117e09e4ae347f9df75761c89920\",\"license\":\"MIT\"},\"src/stake/StakePure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\nlibrary StakePure {\\n    /// 96 protocol\\n    /// 96 stakedEth\\n    /// 64 stakedShares\\n\\n    uint96 constant PROTOCOL_FEE_BPS = 1000;\\n\\n    // @test input output unit test\\n    function getProtocolEth(uint256 cache) internal pure returns (uint96 res) {\\n        // using casting to select only 96\\n        res = uint96(cache);\\n    }\\n\\n    function setProtocolEth(uint256 cache, uint96 update) internal pure returns (uint256 res) {\\n        res = cache & ShiftLib.fullsubmask(96, 0);\\n        res |= update;\\n    }\\n\\n    // @test input output unit test\\n    function getStakedEth(uint256 cache) internal pure returns (uint96 res) {\\n        // using casting to select only 96\\n        res = uint96(cache >> 96);\\n    }\\n\\n    function setStakedEth(uint256 cache, uint96 update) internal pure returns (uint256 res) {\\n        // clear stakedEth\\n        res = cache & ShiftLib.fullsubmask(96, 96);\\n        res |= uint256(update) << 96;\\n    }\\n\\n    // @test input output unit test\\n    function getStakedShares(uint256 cache) internal pure returns (uint64 res) {\\n        res = uint64(cache >> 192);\\n    }\\n\\n    function setStakedShares(uint256 cache, uint64 update) internal pure returns (uint256 res) {\\n        res = cache & type(uint192).max;\\n        res |= (uint256(update) << 192);\\n    }\\n\\n    // @test manual ish - combined input output\\n    function getStakedSharesAndEth(uint256 cache)\\n        internal\\n        pure\\n        returns (\\n            uint64 shares,\\n            uint96 eth,\\n            uint96 proto\\n        )\\n    {\\n        shares = getStakedShares(cache);\\n        eth = getStakedEth(cache);\\n        proto = getProtocolEth(cache);\\n    }\\n\\n    function calculateProtocolFeeOf(uint96 any) internal pure returns (uint96 res) {\\n        res = (any * StakePure.PROTOCOL_FEE_BPS) / 10000;\\n    }\\n\\n    // @test manual\\n    function minSharePriceBreakdown(uint256 cache)\\n        internal\\n        pure\\n        returns (\\n            uint96 total,\\n            uint96 ethPerShare,\\n            uint96 protocolFee,\\n            uint96 premium\\n        )\\n    {\\n        ethPerShare = getEthPerShare(cache);\\n\\n        protocolFee = calculateProtocolFeeOf(ethPerShare);\\n\\n        premium = (ethPerShare * getStakedShares(cache)) / 10000;\\n\\n        total = ethPerShare + protocolFee + premium;\\n    }\\n\\n    // @test manual\\n    function getEthPerShare(uint256 cache) internal pure returns (uint96 res) {\\n        res = getStakedShares(cache) == 0 ? 0 : getStakedEth(cache) / getStakedShares(cache);\\n    }\\n}\\n\",\"keccak256\":\"0xdd258428bc88d8bd7a417a448fc3441819ab0e7b12243dbdb5153209460df89e\",\"license\":\"MIT\"},\"src/stake/StakeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\nlibrary Stake {\\n    struct Storage {\\n        address trustedMigrator;\\n        uint256 data;\\n    }\\n\\n    function sstore(uint256 input) internal {\\n        Global.ptr().stake.data = input;\\n    }\\n\\n    function spointer() internal view returns (Storage storage s) {\\n        return Global.ptr().stake;\\n    }\\n\\n    function sload() internal view returns (uint256 res) {\\n        return Global.ptr().stake.data;\\n    }\\n}\\n\",\"keccak256\":\"0x5e070e8f858df9acf6b3c07e2d017c8ea5aaf89005323e51551d3c7d0bbbfb37\",\"license\":\"MIT\"},\"src/swap/SwapCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggFT} from '../interfaces/INuggFT.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {Swap} from './SwapStorage.sol';\\nimport {SwapPure} from '../swap/SwapPure.sol';\\n\\nimport {StakeCore} from '../stake/StakeCore.sol';\\n\\nimport {ProofCore} from '../proof/ProofCore.sol';\\n\\nimport {TokenCore} from '../token/TokenCore.sol';\\nimport {TokenView} from '../token/TokenView.sol';\\n\\nlibrary SwapCore {\\n    using SafeCastLib for uint256;\\n    using SwapPure for uint256;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            COMMON FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function checkClaimerIsWinnerOrLoser(Swap.Memory memory m) internal pure returns (bool winner) {\\n        require(m.offerData != 0, 'S:8');\\n\\n        bool isOver = m.activeEpoch > m.swapData.epoch();\\n        bool isLeader = m.offerData.account() == m.swapData.account();\\n        bool isOwner = m.swapData.isOwner();\\n\\n        return isOwner || (isLeader && isOver);\\n    }\\n\\n    function commit(Swap.Storage storage s, Swap.Memory memory m) internal {\\n        assert(m.offerData == 0 && m.swapData != 0);\\n\\n        assert(m.swapData.isOwner());\\n\\n        (uint256 newSwapData, uint256 increment, uint256 dust) = SwapPure.updateSwapDataWithEpoch(\\n            m.swapData,\\n            m.activeEpoch + 1,\\n            m.sender,\\n            msg.value.safe96()\\n        );\\n\\n        s.data = newSwapData;\\n\\n        s.offers[m.swapData.account()] = m.swapData.epoch(m.activeEpoch + 1);\\n\\n        StakeCore.addStakedEth((increment + dust).safe96());\\n    }\\n\\n    function offer(Swap.Storage storage s, Swap.Memory memory m) internal {\\n        // make sure swap is still active\\n        require(m.activeEpoch <= m.swapData.epoch(), 'SL:OBP:3');\\n\\n        if (m.swapData.account() != m.sender) s.offers[m.swapData.account()] = m.swapData;\\n\\n        (uint256 newSwapData, uint256 increment, uint256 dust) = SwapPure.updateSwapData(\\n            m.swapData,\\n            m.sender,\\n            m.offerData.eth() + msg.value.safe96()\\n        );\\n\\n        s.data = newSwapData;\\n\\n        StakeCore.addStakedEth((increment + dust).safe96());\\n    }\\n}\\n\",\"keccak256\":\"0xdadd548486bce22a7cae29e2e4dc1f933244d6347de1a0f9c97cd1203fc01a47\",\"license\":\"MIT\"},\"src/swap/SwapExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ISwapExternal} from '../interfaces/nuggft/ISwapExternal.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {EpochCore} from '../epoch/EpochCore.sol';\\n\\nimport {StakeCore} from '../stake/StakeCore.sol';\\n\\nimport {Swap} from './SwapStorage.sol';\\nimport {SwapCore} from './SwapCore.sol';\\nimport {SwapPure} from './SwapPure.sol';\\nimport {TokenCore} from '../token/TokenCore.sol';\\nimport {TokenView} from '../token/TokenView.sol';\\nimport {ProofCore} from '../proof/ProofCore.sol';\\n\\nabstract contract SwapExternal is ISwapExternal {\\n    using SwapPure for uint256;\\n    using SafeCastLib for uint256;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                  DELEGATE\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc ISwapExternal\\n    function delegate(uint160 tokenId) external payable override {\\n        (Swap.Storage storage s, Swap.Memory memory m) = Swap.loadTokenSwap(tokenId, msg.sender);\\n\\n        // make sure user is not the owner of swap\\n        // we do not know how much to give them when they call \\\"claim\\\" otherwise\\n\\n        if (m.activeEpoch == tokenId && m.swapData == 0) {\\n            // we do not need this, could take tokenId out as an argument - but do not want to give users\\n            // the ability to accidently place an offer for nugg A and end up minting nugg B.\\n            require(m.swapData == 0 && m.offerData == 0, 'S:3');\\n\\n            (uint256 dat, ) = SwapPure.buildSwapData(m.activeEpoch, uint160(msg.sender), msg.value.safe96(), false);\\n\\n            s.data = dat;\\n\\n            TokenCore.checkedPreMintFromSwap(m.activeEpoch);\\n\\n            emit DelegateMint(tokenId, msg.sender, msg.value.safe96());\\n\\n            return;\\n        }\\n\\n        require(!m.offerData.isOwner(), 'S:0');\\n\\n        require(m.swapData != 0, 'S:1');\\n\\n        if (m.swapData.isOwner()) {\\n            //\\n            require(msg.value >= StakeCore.activeEthPerShare(), 'S:2');\\n\\n            SwapCore.commit(s, m);\\n\\n            emit DelegateCommit(tokenId, msg.sender, msg.value.safe96());\\n        } else {\\n            SwapCore.offer(s, m);\\n\\n            emit DelegateOffer(tokenId, msg.sender, msg.value.safe96());\\n        }\\n    }\\n\\n    /// @inheritdoc ISwapExternal\\n    function delegateItem(\\n        uint160 sellingTokenId,\\n        uint16 itemId,\\n        uint160 buyingTokenId\\n    ) external payable override {\\n        require(TokenView.ownerOf(buyingTokenId) == msg.sender, 'S:5');\\n\\n        (Swap.Storage storage s, Swap.Memory memory m) = Swap.loadItemSwap(sellingTokenId, itemId, buyingTokenId);\\n\\n        // make sure user is not the owner of swap\\n        // we do not know how much to give them when they call \\\"claim\\\" otherwise\\n        require(!m.offerData.isOwner(), 'SL:HSO:0');\\n\\n        if (m.offerData == 0 && m.swapData.isOwner()) {\\n            SwapCore.commit(s, m);\\n\\n            emit DelegateCommitItem(sellingTokenId, itemId, buyingTokenId, msg.value.safe96());\\n        } else {\\n            SwapCore.offer(s, m);\\n\\n            emit DelegateOfferItem(sellingTokenId, itemId, buyingTokenId, msg.value.safe96());\\n        }\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                  CLAIM\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc ISwapExternal\\n    function claim(uint160 tokenId) external override {\\n        (, Swap.Memory memory m) = Swap.loadTokenSwap(tokenId, msg.sender);\\n\\n        Swap.deleteTokenOffer(tokenId, uint160(msg.sender));\\n\\n        if (SwapCore.checkClaimerIsWinnerOrLoser(m)) {\\n            Swap.deleteTokenSwap(tokenId);\\n\\n            TokenCore.checkedTransferFromSelf(msg.sender, tokenId);\\n        } else {\\n            SafeTransferLib.safeTransferETH(msg.sender, m.offerData.eth());\\n        }\\n\\n        emit SwapClaim(tokenId, msg.sender, m.offerData.epoch());\\n    }\\n\\n    /// @inheritdoc ISwapExternal\\n    function claimItem(\\n        uint160 sellingTokenId,\\n        uint16 itemId,\\n        uint160 buyingTokenId\\n    ) external override {\\n        require(TokenView.ownerOf(buyingTokenId) == msg.sender, 'S:6');\\n\\n        (, Swap.Memory memory m) = Swap.loadItemSwap(sellingTokenId, itemId, buyingTokenId);\\n\\n        Swap.deleteItemOffer(sellingTokenId, itemId, buyingTokenId);\\n\\n        if (SwapCore.checkClaimerIsWinnerOrLoser(m)) {\\n            Swap.deleteItemSwap(sellingTokenId, itemId);\\n\\n            ProofCore.addItem(buyingTokenId, itemId);\\n        } else {\\n            SafeTransferLib.safeTransferETH(msg.sender, m.offerData.eth());\\n        }\\n\\n        emit SwapClaimItem(sellingTokenId, itemId, buyingTokenId, m.swapData.epoch());\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                  SWAP\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc ISwapExternal\\n    function swap(uint160 tokenId, uint96 floor) external override {\\n        require(floor >= StakeCore.activeEthPerShare(), 'S:4');\\n\\n        TokenCore.approvedTransferToSelf(tokenId);\\n\\n        (Swap.Storage storage s, Swap.Memory memory m) = Swap.loadTokenSwap(tokenId, msg.sender);\\n\\n        // make sure swap does not exist - this logically should never happen\\n        assert(m.swapData == 0);\\n\\n        (uint256 dat, ) = SwapPure.buildSwapData(0, uint160(msg.sender), floor, true);\\n\\n        s.data = dat;\\n\\n        emit SwapStart(tokenId, msg.sender, floor);\\n    }\\n\\n    /// @inheritdoc ISwapExternal\\n    function swapItem(\\n        uint160 sellingTokenId,\\n        uint16 itemId,\\n        uint96 floor\\n    ) external override {\\n        require(TokenView.ownerOf(sellingTokenId) == msg.sender, 'S:7');\\n\\n        // will revert if they do not have the item\\n        ProofCore.removeItem(sellingTokenId, itemId);\\n\\n        (Swap.Storage storage s, Swap.Memory memory m) = Swap.loadItemSwap(sellingTokenId, itemId, sellingTokenId);\\n\\n        // cannot sell two of the same item at same time\\n        require(m.swapData == 0, 'SC:SI:0');\\n\\n        (uint256 dat, ) = SwapPure.buildSwapData(0, sellingTokenId, floor, true);\\n\\n        s.data = dat;\\n\\n        emit SwapItemStart(sellingTokenId, itemId, dat.eth());\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                VIEW\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    // / @inheritdoc ISwapExternal\\n    function valueForDelegate(uint160 tokenId, address user)\\n        external\\n        view\\n        override\\n        returns (\\n            bool canDelegate,\\n            uint96 nextSwapAmount,\\n            uint96 userCurrentOffer\\n        )\\n    {\\n        (, Swap.Memory memory m) = Swap.loadTokenSwap(tokenId, user);\\n\\n        if (m.activeEpoch == tokenId && m.swapData == 0) {\\n            uint96 minSharePrice = StakeCore.minSharePrice();\\n            return (true, minSharePrice, 0);\\n        }\\n\\n        if (m.swapData == 0) return (false, 0, 0);\\n\\n        uint96 nextOfferMin = uint256(m.swapData.eth()).addIncrement().safe96();\\n\\n        if (nextOfferMin < StakeCore.activeEthPerShare()) nextOfferMin = uint256(StakeCore.activeEthPerShare()).addIncrement().safe96();\\n\\n        if (m.offerData.isOwner()) return (false, nextOfferMin, 0);\\n\\n        // if user is the current leader\\n        if (user == address(m.swapData.account())) return (true, nextOfferMin, 0);\\n\\n        return (true, nextOfferMin, m.offerData.eth());\\n    }\\n}\\n\",\"keccak256\":\"0x2fecd615edd3fd940ee785cc223e3b2c4265380f699b2cba4a764bb8e88d032f\",\"license\":\"MIT\"},\"src/swap/SwapPure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\n/// @title SwapPure\\n/// @author dub6ix.eth\\n/// @notice Explain to an end user what this does\\n/// @dev Explain to a developer any extra details\\nlibrary SwapPure {\\n    using SafeCastLib for uint256;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            CALCULATION\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    // @test  manual\\n    function addIncrement(uint256 value) internal pure returns (uint256) {\\n        return (value * 10200) / 10000;\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            SHIFT HELPERS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n    // @test input output unit test\\n    // type(uint96).max / 10**13 = 0x01C25C268497681 =  7922816251426433\\n    // type(uint56).max          = 0x100000000000000 = 72057594037927936\\n    function eth(uint256 input) internal pure returns (uint96 res) {\\n        return (ShiftLib.get(input, 56, 160) * 0x9184E72A000).safe96();\\n    }\\n\\n    function eth(uint256 input, uint96 update) internal pure returns (uint256 cache, uint96 rem) {\\n        rem = update % uint96(0x9184E72A000);\\n        cache = ShiftLib.set(input, 56, 160, update / uint96(0x9184E72A000));\\n    }\\n\\n    // @test  input output unit test\\n    function epoch(uint256 input, uint32 update) internal pure returns (uint256 res) {\\n        return ShiftLib.set(input, 32, 216, update);\\n    }\\n\\n    function epoch(uint256 input) internal pure returns (uint32 res) {\\n        return ShiftLib.get(input, 32, 216).safe32();\\n    }\\n\\n    // @test  input output unit test\\n    function account(uint256 input) internal pure returns (uint160 res) {\\n        res = ShiftLib.get(input, 160, 0).safe160();\\n    }\\n\\n    function account(uint256 input, uint160 update) internal pure returns (uint256 output) {\\n        output = ShiftLib.set(input, 160, 0, update);\\n    }\\n\\n    // @test  input output unit test\\n    function isOwner(uint256 input, bool update) internal pure returns (uint256 res) {\\n        return ShiftLib.set(input, 1, 255, update ? 0x1 : 0x0);\\n    }\\n\\n    function isOwner(uint256 input) internal pure returns (bool output) {\\n        output = ShiftLib.get(input, 1, 255) == 0x1;\\n    }\\n\\n    // @test  check to see if it does this - will be easy\\n    function flag(uint256 input) internal pure returns (uint256 res) {\\n        res = ShiftLib.set(input, 1, 254, 0x01);\\n    }\\n\\n    // @test  manual\\n    function buildSwapData(\\n        uint32 _epoch,\\n        uint160 _account,\\n        uint96 _eth,\\n        bool _isOwner\\n    ) internal pure returns (uint256 res, uint96 dust) {\\n        res = epoch(res, _epoch);\\n        res = account(res, _account);\\n        if (_isOwner) res = isOwner(res, true);\\n        (res, dust) = eth(res, _eth);\\n        res = flag(res);\\n    }\\n\\n    // @test  manual\\n    function updateSwapData(\\n        uint256 data,\\n        uint160 _account,\\n        uint96 _eth\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 res,\\n            uint256 increment,\\n            uint256 dust\\n        )\\n    {\\n        return updateSwapDataWithEpoch(data, epoch(data), _account, _eth);\\n    }\\n\\n    // @test  unit\\n    function updateSwapDataWithEpoch(\\n        uint256 data,\\n        uint32 _epoch,\\n        uint160 _account,\\n        uint96 _eth\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 res,\\n            uint96 increment,\\n            uint96 dust\\n        )\\n    {\\n        uint96 baseEth = eth(data);\\n\\n        require(addIncrement(baseEth) <= _eth, 'E:1');\\n\\n        (res, dust) = buildSwapData(_epoch, _account, _eth, false);\\n\\n        increment = _eth - baseEth;\\n    }\\n}\\n\",\"keccak256\":\"0x4e330b68a44181faedcd214d525cd87169f0ca32c35205ab871f2369b9a59788\",\"license\":\"MIT\"},\"src/swap/SwapStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\nimport {SwapPure} from './SwapPure.sol';\\n\\nimport {EpochCore} from '../epoch/EpochCore.sol';\\n\\n// SYSTEM TEST\\nlibrary Swap {\\n    using SwapPure for uint256;\\n\\n    struct Full {\\n        mapping(uint160 => Mapping) map;\\n    }\\n\\n    struct Mapping {\\n        Storage self;\\n        mapping(uint16 => Storage) items;\\n    }\\n\\n    struct Storage {\\n        uint256 data;\\n        mapping(uint160 => uint256) offers;\\n    }\\n\\n    struct Memory {\\n        uint256 swapData;\\n        uint256 offerData;\\n        uint32 activeEpoch;\\n        uint160 sender;\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TOKEN SWAP\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function _tokenSwapPtr(uint160 tokenId) private view returns (Storage storage si) {\\n        return Global.ptr().swap.map[tokenId].self;\\n    }\\n\\n    function loadTokenSwap(uint160 tokenId, address account) internal view returns (Storage storage s, Memory memory m) {\\n        s = _tokenSwapPtr(tokenId);\\n        m = _load(s, uint160(account));\\n    }\\n\\n    function deleteTokenOffer(uint160 tokenId, uint160 account) internal {\\n        delete _tokenSwapPtr(tokenId).offers[account];\\n    }\\n\\n    function deleteTokenSwap(uint160 tokenId) internal {\\n        delete _tokenSwapPtr(tokenId).data;\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                ITEM SWAP\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function _itemSwapPtr(uint160 tokenId, uint16 itemId) private view returns (Storage storage si) {\\n        return Global.ptr().swap.map[tokenId].items[itemId];\\n    }\\n\\n    function loadItemSwap(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        uint160 account\\n    ) internal view returns (Storage storage s, Memory memory m) {\\n        s = _itemSwapPtr(tokenId, itemId);\\n        m = _load(s, account);\\n    }\\n\\n    function deleteItemOffer(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        uint160 account\\n    ) internal {\\n        delete _itemSwapPtr(tokenId, itemId).offers[account];\\n    }\\n\\n    function deleteItemSwap(uint160 tokenId, uint16 itemId) internal {\\n        delete _itemSwapPtr(tokenId, itemId).data;\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                COMMON\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function _load(Storage storage ptr, uint160 account) private view returns (Memory memory m) {\\n        uint256 cache = ptr.data;\\n        m.swapData = cache;\\n        m.activeEpoch = EpochCore.activeEpoch();\\n        m.sender = account;\\n\\n        if (account == cache.account()) {\\n            m.offerData = cache;\\n        } else {\\n            m.offerData = ptr.offers[account];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x014c914c9dfb4b88de4413fdee48149d9c3a4de596ebe37fa5a6e99ac2c5bff9\",\"license\":\"MIT\"},\"src/token/TokenCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport {Token} from './TokenStorage.sol';\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\nimport {TokenView} from './TokenView.sol';\\n\\nimport {StakeCore} from '../stake/StakeCore.sol';\\nimport {ProofCore} from '../proof/ProofCore.sol';\\n\\n// system test\\nlibrary TokenCore {\\n    using SafeCastLib for uint256;\\n\\n    uint32 constant TRUSTED_MINT_TOKENS = 500;\\n    uint32 constant UNTRUSTED_MINT_TOKENS = 2500;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    event TrustedMint(address indexed to, uint160 tokenId);\\n    event UntrustedMint(address indexed by, uint160 tokenId);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                APPROVAL\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function checkedSetApprovalForAll(address operator, bool approved) internal {\\n        require(msg.sender != operator && operator == address(this), 'T:0');\\n\\n        Token.ptr().operatorApprovals[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function checkedApprove(address account, uint160 tokenId) internal {\\n        address owner = TokenView.ownerOf(tokenId);\\n\\n        // ERC721: approval to current owner\\n        require(account != owner, 'T:3');\\n\\n        // ERC721: approve caller is not owner nor approved for all\\n        require(msg.sender == owner || TokenView.isApprovedForAll(owner, msg.sender), 'T:1');\\n\\n        Token.ptr().approvals[tokenId] = account;\\n\\n        emit Approval(owner, account, tokenId);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TRANSFER\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function checkedMintTo(address to, uint160 tokenId) internal {\\n        // DEL require(SafeTransferLib.isERC721Receiver(to, tokenId), 'T:5');\\n\\n        // DEL Token.ptr().balances[to] += 1;\\n        Token.ptr().owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    // token does not exist and is < 1000\\n\\n    function checkedTransferFromSelf(address to, uint160 tokenId) internal {\\n        // DEL require(SafeTransferLib.isERC721Receiver(to, tokenId), 'T:2');\\n\\n        // DEL Token.ptr().balances[address(this)] -= 1;\\n        // DEL Token.ptr().balances[to] += 1;\\n        Token.ptr().owners[tokenId] = to;\\n\\n        emit Transfer(address(this), to, tokenId);\\n    }\\n\\n    function approvedTransferToSelf(uint160 tokenId) internal {\\n        // ERC721: transfer caller is not owner nor approved\\n        require(msg.sender == TokenView.ownerOf(tokenId) && TokenView.getApproved(tokenId) == address(this), 'T:4');\\n\\n        // DEL Token.ptr().balances[msg.sender] -= 1;\\n        // DEL Token.ptr().balances[address(this)] += 1;\\n        Token.ptr().owners[tokenId] = address(this);\\n\\n        // Clear approvals from the previous owner\\n        delete Token.ptr().approvals[tokenId];\\n\\n        // emit Approval(address(this), address(0), tokenId);\\n\\n        emit Transfer(msg.sender, address(this), tokenId);\\n    }\\n\\n    function checkedPreMintFromSwap(uint160 tokenId) internal {\\n        StakeCore.addStakedShareAndEth(msg.value.safe96());\\n\\n        ProofCore.setProofFromEpoch(tokenId);\\n\\n        emit Transfer(address(0), address(this), tokenId);\\n    }\\n\\n    function onBurn(uint160 tokenId) internal {\\n        require(TokenView.getApproved(tokenId) == address(this), 'T:6');\\n\\n        require(TokenView.ownerOf(tokenId) == msg.sender, 'T:7');\\n\\n        delete Token.ptr().owners[tokenId];\\n        delete Token.ptr().approvals[tokenId];\\n\\n        delete Global.ptr().swap.map[tokenId];\\n        delete Global.ptr().loan.map[tokenId];\\n        delete Global.ptr().proof.map[tokenId];\\n        delete Global.ptr().file.resolvers[tokenId];\\n\\n        // emit Approval(msg.sender, address(0), tokenId);\\n\\n        // DEL Token.ptr().balances[msg.sender] -= 1;\\n\\n        emit Transfer(msg.sender, address(0), tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xa64eb5a81c4f3e504eebf69aceaefbef4bab82b66cc02ed80005d0af8aee21b4\",\"license\":\"MIT\"},\"src/token/TokenExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721, IERC165, IERC721Metadata} from '../interfaces/IERC721.sol';\\nimport {ITokenExternal} from '../interfaces/nuggft/ITokenExternal.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport {Token} from './TokenStorage.sol';\\nimport {TokenView} from './TokenView.sol';\\nimport {TokenCore} from './TokenCore.sol';\\n\\nimport {StakeCore} from '../stake/StakeCore.sol';\\nimport {ProofCore} from '../proof/ProofCore.sol';\\n\\nimport {Trust} from '../trust/Trust.sol';\\n\\n///\\n/// @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard\\n///\\nabstract contract TokenExternal is ITokenExternal {\\n    using SafeCastLib for uint256;\\n\\n    /// @inheritdoc ITokenExternal\\n    function trustedMint(uint160 tokenId, address to) external payable override {\\n        Trust.check();\\n\\n        require(tokenId < TokenCore.TRUSTED_MINT_TOKENS && tokenId != 0, 'T:1');\\n\\n        require(!TokenView.exists(tokenId), 'T:2');\\n\\n        StakeCore.addStakedShareAndEth(msg.value.safe96());\\n\\n        ProofCore.setProof(tokenId);\\n\\n        TokenCore.checkedMintTo(to, tokenId);\\n\\n        emit TrustedMint(to, tokenId);\\n    }\\n\\n    /// @inheritdoc ITokenExternal\\n    function mint(uint160 tokenId) public payable override {\\n        require(\\n            tokenId < TokenCore.UNTRUSTED_MINT_TOKENS + TokenCore.TRUSTED_MINT_TOKENS && tokenId > TokenCore.TRUSTED_MINT_TOKENS,\\n            'T:1'\\n        );\\n\\n        require(!TokenView.exists(tokenId), 'T:2');\\n\\n        StakeCore.addStakedShareAndEth(msg.value.safe96());\\n\\n        ProofCore.setProof(tokenId);\\n\\n        TokenCore.checkedMintTo(msg.sender, tokenId);\\n\\n        emit UntrustedMint(msg.sender, tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function approve(address to, uint256 tokenId) public override {\\n        TokenCore.checkedApprove(to, tokenId.safe160());\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) public override {\\n        TokenCore.checkedSetApprovalForAll(operator, approved);\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return TokenView.ownerOf(tokenId.safe160());\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        return TokenView.getApproved(tokenId.safe160());\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\n        return TokenView.isApprovedForAll(owner, operator);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                DISABLED\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function balanceOf(address) public pure override returns (uint256) {\\n        return 0;\\n    }\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) public pure override {\\n        revert('wut');\\n    }\\n\\n    function safeTransferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) public pure override {\\n        revert('wut');\\n    }\\n\\n    function safeTransferFrom(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public pure override {\\n        revert('wut');\\n    }\\n}\\n\",\"keccak256\":\"0x60f4255c11cb770c17c1036fa5c2ca6cf41955e1824fd314bac53554ff964e84\",\"license\":\"MIT\"},\"src/token/TokenStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\n// OK\\nlibrary Token {\\n    struct Storage {\\n        mapping(uint256 => address) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    function ptr() internal view returns (Storage storage s) {\\n        return Global.ptr().token;\\n    }\\n}\\n\",\"keccak256\":\"0x39c7ccae8f43496321b2c23c8709bfbb70b10097b4ea58342a4c0a5fea379dee\",\"license\":\"MIT\"},\"src/token/TokenView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Token} from './TokenStorage.sol';\\n\\n// OK\\nlibrary TokenView {\\n    function exists(uint160 tokenId) internal view returns (bool) {\\n        return Token.ptr().owners[tokenId] != address(0);\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) internal view returns (bool) {\\n        return Token.ptr().operatorApprovals[owner][operator];\\n    }\\n\\n    function getApproved(uint160 tokenId) internal view returns (address) {\\n        require(exists(tokenId), 'T:9');\\n        return Token.ptr().approvals[tokenId];\\n    }\\n\\n    function ownerOf(uint160 tokenId) internal view returns (address owner) {\\n        owner = Token.ptr().owners[tokenId];\\n        require(owner != address(0), 'T:A');\\n    }\\n\\n    function balanceOf(address owner) internal view returns (uint256) {\\n        require(owner != address(0), 'T:B');\\n        return Token.ptr().balances[owner];\\n    }\\n\\n    function isApprovedOrOwner(address spender, uint160 tokenId) internal view returns (bool) {\\n        address owner = TokenView.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n}\\n\",\"keccak256\":\"0x196e6cec795be4ebc77f75b100ec835620adbbd5408e70ab7dfb2e3164c9e09d\",\"license\":\"MIT\"},\"src/trust/Trust.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nlibrary Trust {\\n    struct Storage {\\n        mapping(address => bool) trusted;\\n    }\\n\\n    function check() internal view {\\n        Storage storage store;\\n\\n        assembly {\\n            store.slot := 0x20002467\\n        }\\n\\n        require(store.trusted[msg.sender], 'T:1');\\n    }\\n}\\n\",\"keccak256\":\"0x1c7160d5d827be41023aeb19088e9f64c554db1bcea03e82b5f4c02d7d8d3cf8\",\"license\":\"MIT\"},\"src/trust/TrustExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ITrustExternal} from '../interfaces/nuggft/ITrustExternal.sol';\\n\\nimport {Trust} from './Trust.sol';\\n\\nabstract contract TrustExternal is ITrustExternal {\\n    constructor() {\\n        Trust.Storage storage store;\\n\\n        assembly {\\n            store.slot := 0x20002467\\n        }\\n\\n        store.trusted[msg.sender] = true;\\n\\n        emit TrustUpdated(msg.sender, true);\\n    }\\n\\n    /// @inheritdoc ITrustExternal\\n    function setIsTrusted(address user, bool trust) external virtual override {\\n        Trust.check();\\n\\n        Trust.Storage storage store;\\n\\n        assembly {\\n            store.slot := 0x20002467\\n        }\\n\\n        store.trusted[user] = trust;\\n\\n        emit TrustUpdated(user, trust);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                 VIEW\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc ITrustExternal\\n    function trusted(address user) public view override returns (bool) {\\n        Trust.Storage storage store;\\n\\n        assembly {\\n            store.slot := 0x20002467\\n        }\\n\\n        return store.trusted[user];\\n    }\\n}\\n\",\"keccak256\":\"0x8b17d054396ff6ce5c62d1b68b8bc6ef227934ec00ab8591fc83002fe1b9ceec\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000805461ffff60a01b1916610a2d60a01b1790553480156200002657600080fd5b5060405162005e5b38038062005e5b833981016040819052620000499162000136565b33600081815263200024676020818152604092839020805460ff191660019081179091559251928352849391927f01370ae6c2f4315d0915b457ec604f483d0ff6f34a7fdd5c3401ae39fda86aa9910160405180910390a250620000b76200011b60201b620025081760201c565b6040517f6bf6eaff5e9af8fbccb949f4c38cc016936f8775363ccf4224db160365785d5290600090a16001600160a01b038116620000f457600080fd5b600080546001600160a01b0319166001600160a01b03929092169190911790555062000168565b640100042069805463ffffffff19164363ffffffff16179055565b6000602082840312156200014957600080fd5b81516001600160a01b03811681146200016157600080fd5b9392505050565b615ce380620001786000396000f3fe60806040526004361061034a5760003560e01c80639531b94d116101bb578063c5c8beeb116100f7578063e747738311610095578063fa7329921161006f578063fa73299214610a21578063fca840ae14610a34578063fe7e997e14610a54578063ffcf6d3a14610a7457600080fd5b8063e7477383146109c0578063e985e9c5146109e1578063ecc1113f14610a0157600080fd5b8063d7be245c116100d1578063d7be245c146108e9578063d7dc68191461090b578063e5cbd48e14610972578063e63bedde1461099257600080fd5b8063c5c8beeb14610889578063c87b56dd146108a9578063d276db98146108c957600080fd5b8063b3f9e4cb11610164578063bc7b6d621161013e578063bc7b6d6214610815578063be2cfdff14610835578063beace31f14610863578063c06c822f1461087657600080fd5b8063b3f9e4cb146107ba578063b88d4fde146107da578063b88ea014146107f557600080fd5b80639caec886116101955780639caec8861461075a578063a22cb4651461077a578063b3b9f3a71461079a57600080fd5b80639531b94d146106f657806395d89b411461070b5780639a74cb641461073a57600080fd5b8063504cdacf1161028a578063665557c81161023357806370a082311161020d57806370a0823114610678578063750656f614610699578063900cf0cf146106ac5780639066fdf8146106d657600080fd5b8063665557c8146105d55780636ba755d1146105f55780636e9821c21461063c57600080fd5b8063608cceb011610264578063608cceb0146105805780636352211e146105a05780636571595e146105c057600080fd5b8063504cdacf14610523578063570f67ad146105385780635917c58f1461054d57600080fd5b8063099afa17116102f757806323b872dd116102d157806323b872dd146104d057806323cf3118146104f05780632e7a7f5e1461051057806342842e0e146104d057600080fd5b8063099afa171461047a5780631393916a1461048d57806318160ddd146104ad57600080fd5b806306fdde031161032857806306fdde03146103d3578063081812fc14610422578063095ea7b31461045a57600080fd5b806301ffc9a71461034f5780630251f62c1461038457806303bfe17e146103a6575b600080fd5b34801561035b57600080fd5b5061036f61036a366004614eb2565b610aa5565b60405190151581526020015b60405180910390f35b34801561039057600080fd5b506103a461039f366004614ef1565b610af7565b005b3480156103b257600080fd5b506103bb610bf5565b6040516001600160601b03909116815260200161037b565b3480156103df57600080fd5b5060408051808201909152601681527f4e7567672046756e6769626c6520546f6b656e2056310000000000000000000060208201525b60405161037b9190614f66565b34801561042e57600080fd5b5061044261043d366004614f79565b610c04565b6040516001600160a01b03909116815260200161037b565b34801561046657600080fd5b506103a4610475366004614f92565b610c17565b6103a4610488366004614ef1565b610c2d565b34801561049957600080fd5b506103a46104a8366004614fbe565b610eb0565b3480156104b957600080fd5b506104c2610f1e565b60405190815260200161037b565b3480156104dc57600080fd5b506103a46104eb366004614ffc565b610f37565b3480156104fc57600080fd5b506103a461050b366004614ef1565b610f65565b6103a461051e36600461504f565b610fc4565b34801561052f57600080fd5b506103bb61118c565b34801561054457600080fd5b506103a4611196565b34801561055957600080fd5b5060005461056e90600160a01b900460ff1681565b60405160ff909116815260200161037b565b34801561058c57600080fd5b506103bb61059b366004614ef1565b61121d565b3480156105ac57600080fd5b506104426105bb366004614f79565b611233565b3480156105cc57600080fd5b506103bb611246565b3480156105e157600080fd5b506103a46105f0366004614ef1565b611250565b34801561060157600080fd5b50610615610610366004615098565b611346565b6040805193151584526001600160601b03928316602085015291169082015260600161037b565b34801561064857600080fd5b5061036f610657366004614ef1565b6001600160a01b031660009081526320002467602052604090205460ff1690565b34801561068457600080fd5b506104c2610693366004614ef1565b50600090565b6103a46106a7366004614ef1565b611483565b3480156106b857600080fd5b506106c161159f565b60405163ffffffff909116815260200161037b565b3480156106e257600080fd5b506103a46106f13660046150d7565b6115a9565b34801561070257600080fd5b506103bb611675565b34801561071757600080fd5b50604080518082019091526006815265139551d1d19560d21b6020820152610415565b34801561074657600080fd5b506103a4610755366004615103565b61167f565b34801561076657600080fd5b506103a461077536600461504f565b611692565b34801561078657600080fd5b506103a4610795366004614fbe565b6117f1565b3480156107a657600080fd5b506103a46107b5366004614ef1565b6117fb565b3480156107c657600080fd5b506104426107d5366004614f79565b61181b565b3480156107e657600080fd5b506103a46104eb3660046151f6565b34801561080157600080fd5b506104c2610810366004614ef1565b61182e565b34801561082157600080fd5b506103a46108303660046152a5565b611839565b34801561084157600080fd5b5061084a6118ad565b60405167ffffffffffffffff909116815260200161037b565b6103a4610871366004615098565b6118b7565b6103a4610884366004614ef1565b6119c6565b34801561089557600080fd5b506103a46108a43660046152e1565b611b9c565b3480156108b557600080fd5b506104156108c4366004614f79565b611c7d565b3480156108d557600080fd5b506103a46108e4366004614ef1565b611c88565b3480156108f557600080fd5b506108fe611db7565b60405161037b919061534b565b34801561091757600080fd5b5061092b610926366004614ef1565b611dc1565b604080516001600160601b0396871681529486166020860152929094169183019190915263ffffffff1660608201526001600160a01b03909116608082015260a00161037b565b34801561097e57600080fd5b50600054610442906001600160a01b031681565b34801561099e57600080fd5b506109b26109ad366004614f79565b611ebc565b60405161037b92919061543e565b3480156109cc57600080fd5b5060005461056e90600160a81b900460ff1681565b3480156109ed57600080fd5b5061036f6109fc366004615098565b612062565b348015610a0d57600080fd5b506103bb610a1c366004614ef1565b612097565b6103a4610a2f366004614ef1565b6120ad565b348015610a4057600080fd5b506103a4610a4f3660046154d3565b6122cf565b348015610a6057600080fd5b506103a4610a6f3660046155a0565b6123e9565b348015610a8057600080fd5b50610a94610a8f366004614ef1565b6124e5565b60405161037b959493929190615616565b60006001600160e01b031982166380ac58cd60e01b1480610ad657506001600160e01b03198216635b5e139f60e01b145b80610af157506001600160e01b031982166301ffc9a760e01b145b92915050565b33610b0182612523565b6001600160a01b031614610b425760405162461bcd60e51b8152602060048201526003602482015262261d1960e91b60448201526064015b60405180910390fd5b6000610b4c612578565b90506000610b5861258d565b90506000610b698233856000612598565b506001600160a01b038516600090815262042074602052604090208190559050604080516001600160a01b03861681526001600160601b03851660208201527fdf65fae456ee5bcd916efcb9b5ad07667d7fc396aff61536c465f280393fbd3e910160405180910390a1610bdc846125ea565b610bef33846001600160601b03166126c4565b50505050565b6000610bff612578565b905090565b6000610af1610c128361271f565b612739565b610c2982610c248361271f565b6127b5565b5050565b600080610c3a83336128db565b91509150826001600160a01b0316816040015163ffffffff16148015610c5f57508051155b15610d42578051158015610c7557506020810151155b610ca75760405162461bcd60e51b8152602060048201526003602482015262533a3360e81b6044820152606401610b39565b6000610cc2826040015133610cbb34612929565b6000612598565b508084556040830151909150610cdd9063ffffffff1661293f565b7fb05be3e18f19a4aac09f77432c65062f81615fefa61e76300a99fb2d08c019138433610d0934612929565b604080516001600160a01b0394851681529390921660208401526001600160601b0316908201526060015b60405180910390a150505050565b602081015160ff1c60011415610d805760405162461bcd60e51b81526020600482015260036024820152620533a360ec1b6044820152606401610b39565b8051610db45760405162461bcd60e51b8152602060048201526003602482015262533a3160e81b6044820152606401610b39565b805160ff1c60011415610e7557610dc9612578565b6001600160601b0316341015610e075760405162461bcd60e51b8152602060048201526003602482015262299d1960e91b6044820152606401610b39565b610e11828261298f565b7f8e9681d7ef6204b5eb1f7e898910b723018e455d09ba77c2c9e43346968c887f8333610e3d34612929565b604080516001600160a01b0394851681529390921660208401526001600160601b0316908201526060015b60405180910390a1505050565b610e7f8282612a66565b7f695e0d4736a959eec71a66de118059220f6144b53eb2ed3e6ca8508ce8cd1f0a8333610e3d34612929565b505050565b610eb8612b76565b6001600160a01b038216600081815263200024676020818152604092839020805460ff191686151590811790915592519283529092917f01370ae6c2f4315d0915b457ec604f483d0ff6f34a7fdd5c3401ae39fda86aa9910160405180910390a2505050565b6000610f28612bc4565b67ffffffffffffffff16905090565b60405162461bcd60e51b81526020600482015260036024820152621ddd5d60ea1b6044820152606401610b39565b610f6d612b76565b806204206d80546001600160a01b0319166001600160a01b0392831617905560405190821681527fc97e86a927b4a897832650767255fd568e377e7fbe9586c81d26b77a2c3ffc8b9060200160405180910390a150565b33610fce82612523565b6001600160a01b03161461100a5760405162461bcd60e51b8152602060048201526003602482015262533a3560e81b6044820152606401610b39565b600080611018858585612bda565b6020810151919350915060ff1c600114156110755760405162461bcd60e51b815260206004820152600860248201527f534c3a48534f3a300000000000000000000000000000000000000000000000006044820152606401610b39565b602081015115801561108b5750805160ff1c6001145b1561110c5761109a828261298f565b7fdcd75b8c1f9c84e8b7d26df979d7ddbc4139b72f6c8e0e7123bb63d63ba1c3258585856110c734612929565b604080516001600160a01b03958616815261ffff94909416602085015291909316908201526001600160601b03909116606082015260800160405180910390a1611185565b6111168282612a66565b7f3bbfe02e9ee64811b7404130d1c8a263edbb6ab73af1dc502dd56d43a3ddd1a385858561114334612929565b604080516001600160a01b03958616815261ffff94909416602085015291909316908201526001600160601b0390911660608201526080015b60405180910390a15b5050505050565b6000610bff612c38565b61119e612b76565b60006111ab6204206e5490565b9050806111c1336001600160601b0383166126c4565b6111dc6bffffffffffffffffffffffff1983165b6204206e55565b6040516001600160601b03821681527f8e4dbe2f73d3458c68bca94210eabefac52a4d20c038a8e50197ac9db654291b906020015b60405180910390a15050565b600061122882611dc1565b509195945050505050565b6000610af16112418361271f565b612523565b6000610bff612c4e565b600061125c82336128db565b6001600160a01b03841660009081526204207560209081526040808320338452600101909152812055915061128e9050565b61129781612c61565b156112cb576112bc826001600160a01b03166000908152620420756020526040812055565b6112c63383612d24565b6112ea565b6112ea336112dc8360200151612d81565b6001600160601b03166126c4565b7f10c1106c1b3c266f6cf55047c56a839a002c11736bbf9c4acdec566e80677e9b823361131a8460200151612da3565b604080516001600160a01b03948516815293909216602084015263ffffffff1690820152606001611211565b60008060008061135686866128db565b915050856001600160a01b0316816040015163ffffffff1614801561137a57508051155b1561139b576000611389612dbd565b6001955093506000925061147c915050565b80516113b25760008060009350935093505061147c565b60006113da6113d56113c78460000151612d81565b6001600160601b0316612ddb565b612929565b90506113e4612578565b6001600160601b0316816001600160601b0316101561140e5761140b6113d56113c7612578565b90505b602082015160ff1c6001141561142e5760009450925083915061147c9050565b815161143990612df6565b6001600160a01b0316866001600160a01b03161415611463576001945092506000915061147c9050565b6001816114738460200151612d81565b94509450945050505b9250925092565b6114916101f46109c461568b565b63ffffffff16816001600160a01b03161080156114b857506101f46001600160a01b038216115b6114ea5760405162461bcd60e51b8152602060048201526003602482015262543a3160e81b6044820152606401610b39565b6001600160a01b038082166000908152620420696020526040902054161561153a5760405162461bcd60e51b81526020600482015260036024820152622a1d1960e91b6044820152606401610b39565b61154b61154634612929565b612e0a565b61155481613013565b61155e3382613150565b6040516001600160a01b038216815233907f6717cdc2f702204391319559ab130cf2bdd1a3f69aa0c4078efc85c629dc86af9060200160405180910390a250565b6000610bff61258d565b336115b383612523565b6001600160a01b0316146115f25760405162461bcd60e51b8152600401610b399060208082526004908201526328219d1960e11b604082015260600190565b60006115fd836131ad565b905061160981836131fb565b905061161581836132cf565b6001600160a01b03841660008181526204207260209081526040918290208490558151928352820183905260ff8516908201529091507fe0b01689336e903dba5ec8bc01d79a4ec6aa4f944cd16d45d32700fb594b74ae90606001610e68565b6000610bff612dbd565b611687612b76565b610eab81848461335e565b3361169c82612523565b6001600160a01b0316146116d85760405162461bcd60e51b8152602060048201526003602482015262299d1b60e91b6044820152606401610b39565b60006116e5848484612bda565b6001600160a01b038087166000908152620420756020908152604080832061ffff8a168452600201825280832093881683526001909301905290812055915061172b9050565b61173481612c61565b15611775576001600160a01b0384166000908152620420756020908152604080832061ffff8716845260020190915281205561177082846134bd565b611786565b611786336112dc8360200151612d81565b7f95e8db1d2cc4bd26402c98c45fdb7ff875bb955206591a210b51aa82b4ba5acb8484846117b78560000151612da3565b604080516001600160a01b03958616815261ffff949094166020850152919093169082015263ffffffff9091166060820152608001610d34565b610c2982826135f0565b6000611806826136b1565b9050610c2933826001600160601b03166126c4565b6000610af16118298361271f565b61385c565b6000610af182613867565b61184b336118468461271f565b6138f8565b61187d5760405162461bcd60e51b81526020600482015260036024820152620543a360ec1b6044820152606401610b39565b600091825262042071602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000610bff612bc4565b6118bf612b76565b6101f46001600160a01b0383161080156118e157506001600160a01b03821615155b6119135760405162461bcd60e51b8152602060048201526003602482015262543a3160e81b6044820152606401610b39565b6001600160a01b03808316600090815262042069602052604090205416156119635760405162461bcd60e51b81526020600482015260036024820152622a1d1960e91b6044820152606401610b39565b61196f61154634612929565b61197882613013565b6119828183613150565b6040516001600160a01b0383811682528216907ff720aad51e634650c6c404c3527f059ca40ad43d391f5ac5758f49bae2ff62609060200160405180910390a25050565b6119cf81612523565b6001600160a01b0316306001600160a01b031614611a155760405162461bcd60e51b81526020600482015260036024820152624c3a3360e81b6044820152606401610b39565b600080600080611a2485611dc1565b945094509450945050336001600160a01b0316816001600160a01b031614611a745760405162461bcd60e51b8152602060048201526003602482015262130e8d60ea1b6044820152606401610b39565b34846001600160601b03161115611ab35760405162461bcd60e51b81526020600482015260036024820152624c3a3560e81b6044820152606401610b39565b611abc84613979565b6000611ac6612578565b9050600080611ad88533856000612598565b6001600160a01b038a1660009081526204207460205260408120839055919350915087611b0434612929565b611b0e91906156b3565b9050600082611b1d838a6156db565b611b2791906156db565b604080516001600160a01b038d1681526001600160601b038c811660208301528b168183015290519192507f55ab9f648a42ab2ae7eed81f0683a7bae5d54989d8125f397a88f72bec826917919081900360600190a1611b9033826001600160601b03166126c4565b50505050505050505050565b611ba4612578565b6001600160601b0316816001600160601b03161015611beb5760405162461bcd60e51b815260206004820152600360248201526214ce8d60ea1b6044820152606401610b39565b611bf4826125ea565b600080611c0184336128db565b8051919350915015611c1557611c156156fd565b6000611c25600033866001612598565b50808455604080516001600160a01b03881681523360208201526001600160601b038716918101919091529091507f3d175b4f67d380f8c4185f649f2cfeda5da34c1156302187ac843b620f9c9cd39060600161117c565b6060610af182613a8f565b6204206d546001600160a01b031680611cc95760405162461bcd60e51b8152602060048201526003602482015262543a3360e81b6044820152606401610b39565b6000611cd4836131ad565b90506000611ce1846136b1565b6040516380011aa760e01b81526001600160a01b03868116600483015260248201859052336044830152919250908416906380011aa7906001600160601b038416906064016000604051808303818588803b158015611d3f57600080fd5b505af1158015611d53573d6000803e3d6000fd5b5050604080516001600160a01b038089168252891660208201529081018690523360608201526001600160601b03851660808201527f58ca548c1fd63f641dfb02f79df36d4f29bd995f0733d2ed3595b6cfde7db4e1935060a0019150610d349050565b6060610bff613b88565b600080600080600080611deb876001600160a01b0316600090815262042074602052604090205490565b905080611e205760405162461bcd60e51b81526020600482015260036024820152624c3a3160e81b6044820152606401610b39565b6000611e2b82612d81565b90506000611e37612578565b9050612710611e47606484615713565b611e519190615758565b9650611e5d87836156db565b9750806001600160601b0316886001600160601b03161015611e8857611e8388826156b3565b611e8b565b60005b95506103e8611e9984612da3565b611ea3919061568b565b9450611eae83612df6565b935050505091939590929450565b6060611f246040518061016001604052806000815260200160008152602001606081526020016060815260200160006001600160a01b031681526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b6000806000806000611f3d611f388961271f565b613b98565b94509450945094509450611f5084613bb4565b9650604051806101600160405280600181526020014281526020016040518060400160405280600981526020017f4e7567674654205631000000000000000000000000000000000000000000000081525081526020016040518060400160405280601681526020017f4e7567672046756e6769626c6520546f6b656e20563100000000000000000000815250815260200161200f611fed8b61271f565b6001600160a01b03908116600090815262042069602052604090205416151590565b61201a576000612026565b6120266112418b61271f565b6001600160a01b031681526020018981526020018681526020018581526020018481526020018381526020018281525095505050505050915091565b6001600160a01b0380831660009081526204206c6020908152604080832093851683529290529081205460ff165b9392505050565b60006120a282611dc1565b509295945050505050565b6120b681612523565b6001600160a01b0316306001600160a01b0316146120fc5760405162461bcd60e51b8152602060048201526003602482015262261d1b60e91b6044820152606401610b39565b600080600080600061210d86611dc1565b945063ffffffff16945094509450945061213d866001600160a01b03166000908152620420746020526040812055565b600061214761258d565b90508063ffffffff16836001600160601b03161061219d576001600160a01b038216331461219d5760405162461bcd60e51b81526020600482015260036024820152624c3a3760e81b6044820152606401610b39565b34866001600160601b031611156121dc5760405162461bcd60e51b815260206004820152600360248201526209874760eb1b6044820152606401610b39565b60006121e734612929565b905060006121f587836156b3565b9050600061220382886156db565b604080516001600160a01b038d1681526001600160601b038b811660208301528a168183015290519192507f55ab9f648a42ab2ae7eed81f0683a7bae5d54989d8125f397a88f72bec826917919081900360600190a1604080516001600160a01b038c1681523360208201526001600160601b038b168183015290517f563fb66b43e6ac55166c353532257057a2fe86a1566c988840baecf6bca1025a9181900360600190a16122b288613979565b6122c533826001600160601b03166126c4565b611b90338b612d24565b336122d984612523565b6001600160a01b0316146123155760405162461bcd60e51b8152602060048201526003602482015262533a3760e81b6044820152606401610b39565b61231f8383613cd2565b60008061232d858587612bda565b805191935091501561236b5760405162461bcd60e51b8152602060048201526007602482015266053433a53493a360cc1b6044820152606401610b39565b600061237b600087866001612598565b5080845590507f77cfc3b2aafc5344a53b50b3c7938afac3d04e0f564e929aa8d1f398e67f1ccc86866123ad84612d81565b604080516001600160a01b03909416845261ffff90921660208401526001600160601b03169082015260600160405180910390a1505050505050565b336123f384612523565b6001600160a01b0316146124325760405162461bcd60e51b8152600401610b399060208082526004908201526328219d1960e11b604082015260600190565b81516008148015612444575080516008145b6124795760405162461bcd60e51b8152600401610b399060208082526004908201526350433a3360e01b604082015260600190565b6000612484846131ad565b9050612491818484613dc4565b6001600160a01b0385166000908152620420726020526040902081905590507f73904d03f919661d854e7b284dd6f818c038e7cce6237422aca32cc599a0826784828585604051610d34949392919061577e565b60006060806060806124f686613b98565b939a9299509097509550909350915050565b640100042069805463ffffffff19164363ffffffff16179055565b6001600160a01b03818116600090815262042069602052604090205416806125735760405162461bcd60e51b8152602060048201526003602482015262543a4160e81b6044820152606401610b39565b919050565b6000610bff6125886204206e5490565b613de0565b6000610bff43613e30565b6000806125a58287613e71565b91506125b18286613eaa565b915082156125c7576125c4826001613ec7565b91505b6125d18285613efe565b90925090506125df82613f58565b915094509492505050565b6125f381612523565b6001600160a01b0316336001600160a01b031614801561262357503061261882612739565b6001600160a01b0316145b6126555760405162461bcd60e51b8152602060048201526003602482015262150e8d60ea1b6044820152606401610b39565b6001600160a01b038116600081815262042069602090815260408083208054306001600160a01b031991821681179092556204206b909352818420805490931690925551909133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a450565b600080600080600085875af1905080610eab5760405162461bcd60e51b815260206004820152601360248201527f4554485f5452414e534645525f4641494c4544000000000000000000000000006044820152606401610b39565b60006001600160a01b0382111561273557600080fd5b5090565b6001600160a01b03808216600090815262042069602052604081205490911661278a5760405162461bcd60e51b8152602060048201526003602482015262543a3960e81b6044820152606401610b39565b620420695b6001600160a01b0392831660009081526002919091016020526040902054909116919050565b60006127c082612523565b9050806001600160a01b0316836001600160a01b0316141561280a5760405162461bcd60e51b8152602060048201526003602482015262543a3360e81b6044820152606401610b39565b336001600160a01b038216148061284657506001600160a01b03811660009081526204206c6020908152604080832033845290915290205460ff165b6128785760405162461bcd60e51b8152602060048201526003602482015262543a3160e81b6044820152606401610b39565b6001600160a01b0382811660008181526204206b602052604080822080546001600160a01b031916888616908117909155905192939092908516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6040805160808101825260008082526020808301829052828401829052606083018290526001600160a01b038616825262042075905291822091506129208284613f88565b90509250929050565b60006001600160601b0382111561273557600080fd5b61294b61154634612929565b61295481614028565b6040516001600160a01b0382169030906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a450565b60208101511580156129a15750805115155b6129ad576129ad6156fd565b805160ff1c6001146129c1576129c16156fd565b60008060006129f28460000151856040015160016129df919061568b565b86606001516129ed34612929565b6140ea565b82885560408701519295506001600160601b039182169450169150612a2490612a1c90600161568b565b855190613e71565b856001016000612a378760000151612df6565b6001600160a01b03168152602081019190915260400160002055611185612a616113d583856157c3565b613979565b8051612a7190612da3565b63ffffffff16816040015163ffffffff161115612ad05760405162461bcd60e51b815260206004820152600860248201527f534c3a4f42503a330000000000000000000000000000000000000000000000006044820152606401610b39565b80606001516001600160a01b0316612aeb8260000151612df6565b6001600160a01b031614612b25578051600183016000612b0a83612df6565b6001600160a01b031681526020810191909152604001600020555b6000806000612b5c84600001518560600151612b4034612929565b612b4d8860200151612d81565b612b5791906156db565b614174565b82885591945092509050611185612a616113d583856157c3565b3360009081526320002467602081905260409091205460ff16612bc15760405162461bcd60e51b8152602060048201526003602482015262543a3160e81b6044820152606401610b39565b50565b6000610bff612bd46204206e5490565b60c01c90565b6040805160808101825260008082526020808301829052828401829052606083018290526001600160a01b038716825262042075815283822061ffff8716835260020190529182209150612c2e8284613f88565b9050935093915050565b6000610bff612c486204206e5490565b60601c90565b6000610bff612c5e6204206e5490565b90565b6000816020015160001415612c9e5760405162461bcd60e51b81526020600482015260036024820152620a674760eb1b6044820152606401610b39565b6000612cad8360000151612da3565b63ffffffff16836040015163ffffffff161190506000612cd08460000151612df6565b6001600160a01b0316612ce68560200151612df6565b6001600160a01b03161490506000612d088560000151600160ff9190911c1490565b90508080612d1b5750818015612d1b5750825b95945050505050565b6001600160a01b03818116600081815262042069602052604080822080546001600160a01b03191694871694851790555191929130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a45050565b6000610af16113d560a084901c66ffffffffffffff166509184e72a0006157db565b6000610af163ffffffff60d884901c166141a7565b6141a7565b6000612dd2612dcd6204206e5490565b6141ba565b50919392505050565b6000612710612dec836127d86157db565b610af191906157fa565b6000610af16001600160a01b03831661271f565b806001600160601b0316341015612e495760405162461bcd60e51b8152602060048201526003602482015262543a3560e81b6044820152606401610b39565b6000612e566204206e5490565b90506000806000612e6684614221565b925092509250600080612e78866141ba565b509250509150816001600160601b0316876001600160601b03161015612ec65760405162461bcd60e51b81526020600482015260036024820152622a1d1960e91b6044820152606401610b39565b6000612ed283896156b3565b9050612edd81614246565b612ee790836156db565b9150612fbc6111d5612ef984876156db565b612f9d612f06868d6156b3565b612f10908a6156db565b612f5e612f1e8c600161580e565b77ffffffffffffffffffffffffffffffffffffffffffffffff8e1660c09190911b77ffffffffffffffffffffffffffffffffffffffffffffffff19161790565b77ffffffffffffffffffffffff000000000000000000000000191660609190911b77ffffffffffffffffffffffff000000000000000000000000161790565b6bffffffffffffffffffffffff19166001600160601b03919091161790565b7fcc7b20c8500e3dfc952e445cc296459e4e7148bead08f530844981e1c1236e4e612fe7838a6156b3565b604080516001600160601b03928316815291851660208301520160405180910390a15050505050505050565b6001600160a01b0381166000908152620420726020526040902054156130615760405162461bcd60e51b81526020600482015260036024820152620503a360ec1b6044820152606401610b39565b60008161306f600143615831565b6040516204206960ec1b602082015260609290921b6bffffffffffffffffffffffff1916602383015240603782015260570160408051601f1981840301815291905280516020909101209050806130ee5760405162461bcd60e51b8152602060048201526003602482015262503a3160e81b6044820152606401610b39565b6000806130fa83614261565b6001600160a01b0386166000908152620420726020526040902082905590925090505b7f3c2693eb3bc9fd62db9b727df67972a7372cca5a21f9b4a5c05d48363273c247848383604051610d3493929190615848565b6001600160a01b03818116600081815262042069602052604080822080546001600160a01b0319169487169485179055519192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0381166000908152620420726020526040902054806125735760405162461bcd60e51b81526020600482015260036024820152620503a360ec1b6044820152606401610b39565b600080613209846000614659565b90506000613218856040614659565b90506000818560ff168151811061323157613231615870565b60200260200101519050828560ff168151811061325057613250615870565b6020026020010151828660ff168151811061326d5761326d615870565b602002602001019060ff16908160ff168152505080838660ff168151811061329757613297615870565b602002602001019060ff16908160ff16815250506132b7866000856146d9565b93506132c5846040846146d9565b9695505050505050565b6000806132dd846080614659565b905060006132ec8560c0614659565b90506000818560ff168151811061330557613305615870565b602002602001019060ff16908160ff16815250506000828560ff168151811061333057613330615870565b602002602001019060ff16908160ff1681525050613350856080846146d9565b9250612d1b8360c0836146d9565b600061336982614755565b905060008160ff16116133a75760405162461bcd60e51b8152600401610b3990602080825260049082015263056433a360e41b604082015260600190565b60405174ff000000000000000000000000000000000000000060a083901b16906000906133f2906133de90879087906020016158d5565b604051602081830303815290604052614765565b60ff871660009081526204207060209081526040822080546001810182559083529082200180547fffffffffffffffffffffff000000000000000000000000000000000000000000166001600160a01b03841674ffffffffffffffffffffffffffffffffffffffffff8716171790556204206f5491925061347282614819565b905084818960ff168151811061348a5761348a615870565b6020026020010181815161349e9190615973565b60ff169052506134ae8282614826565b6204206f555050505050505050565b336134c783612523565b6001600160a01b0316146135065760405162461bcd60e51b8152600401610b3990602080825260049082015263050433a360e41b604082015260600190565b6000613511836131ad565b61ffff8316600090815262042073602052604090205490915061355f5760405162461bcd60e51b8152600401610b399060208082526004908201526352433a3360e01b604082015260600190565b61ffff82166000908152620420736020526040812080549161358083615998565b919050555061358f8183614834565b6001600160a01b03841660008181526204207260209081526040918290208490558151928352820183905261ffff8516908201529091507f1e3ac88633ac111203e2a7614365c5e3df507302c9fb545dd85d8fcef753afce90606001610e68565b336001600160a01b0383161480159061361157506001600160a01b03821630145b6136435760405162461bcd60e51b81526020600482015260036024820152620543a360ec1b6044820152606401610b39565b3360008181526204206c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000336136bd83612523565b6001600160a01b0316146136f95760405162461bcd60e51b8152602060048201526003602482015262150e8d60ea1b6044820152606401610b39565b60006137066204206e5490565b9050613711836148e0565b60008061371d83614221565b509150915061372b83613de0565b935060018267ffffffffffffffff16101561376e5760405162461bcd60e51b8152602060048201526003602482015262543a3560e81b6044820152606401610b39565b836001600160601b0316816001600160601b031610156137b65760405162461bcd60e51b81526020600482015260036024820152622a1d1b60e91b6044820152606401610b39565b6138146111d56137c686846156b3565b612f5e6137d46001876159af565b77ffffffffffffffffffffffffffffffffffffffffffffffff881660c09190911b77ffffffffffffffffffffffffffffffffffffffffffffffff19161790565b604080516001600160601b03861681523360208201527e96b8566d099a5618a665405b3df20d5a7f2293fce2fc9405d36a2ee3deab3f910160405180910390a1505050919050565b60006204206f61278f565b600080600080613875614a0a565b50925092509250846001600160a01b03168214801561389357508215155b156138a057949350505050565b6001600160a01b03851660009081526204207260205260409020549350836138f05760405162461bcd60e51b8152602060048201526003602482015262503a3160e81b6044820152606401610b39565b505050919050565b60008061390483612523565b9050806001600160a01b0316846001600160a01b0316148061393f5750836001600160a01b031661393484612739565b6001600160a01b0316145b8061397157506001600160a01b0380821660009081526204206c602090815260408083209388168352929052205460ff165b949350505050565b806001600160601b03163410156139b85760405162461bcd60e51b8152602060048201526003602482015262543a3760e81b6044820152606401610b39565b60006139c56204206e5490565b905060006139d283614246565b9050613a456111d56139e483856156db565b612f9d6139f185886156b3565b6139fb8760601c90565b613a0591906156db565b77ffffffffffffffffffffffff00000000000000000000000019871660609190911b77ffffffffffffffffffffffff000000000000000000000000161790565b7fcc7b20c8500e3dfc952e445cc296459e4e7148bead08f530844981e1c1236e4e613a7082856156b3565b604080516001600160601b039283168152918416602083015201610e68565b60606000613a9c8361271f565b6001600160a01b0380821660009081526204207160205260408120549293509116613ad2576000546001600160a01b0316613adb565b613adb8261385c565b6000546040516303235b5f60e31b8152306004820152602481018790526001600160a01b03838116604483015260ff600160a01b840481166064840152600160a81b840416608483015292935091169063191adaf89060a40160006040518083038186803b158015613b4c57600080fd5b505afa158015613b60573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261397191908101906159d0565b6060610bff6204206f5b54614819565b6000606080606080613ba986613867565b94506124f685614a3a565b6060815167ffffffffffffffff811115613bd057613bd0615187565b604051908082528060200260200182016040528015613c0357816020015b6060815260200190600190039081613bee5790505b50905060005b82518160ff161015613ccc57828160ff1681518110613c2a57613c2a615870565b602002602001015160ff1660001415613c73576040805160008152602081019091528251839060ff8416908110613c6357613c63615870565b6020026020010181905250613cba565b613c9981848360ff1681518110613c8c57613c8c615870565b6020026020010151614a7d565b828260ff1681518110613cae57613cae615870565b60200260200101819052505b80613cc481615a3e565b915050613c09565b50919050565b33613cdc83612523565b6001600160a01b031614613d1b5760405162461bcd60e51b8152600401610b399060208082526004908201526350433a3160e01b604082015260600190565b6000613d26836131ad565b9050613d328183614ce5565b6001600160a01b03841660009081526204207260205260409020819055905061ffff821660009081526204207360205260408120805491613d7283615a5e565b9091555050604080516001600160a01b03851681526020810183905261ffff8416918101919091527f399c4ec95d9ea42a0f3dda50055e3a2901f9640121b0b29865e688c08188596b90606001610e68565b6000613dd2846080856146d9565b90506139718160c0846146d9565b6000613dec8260c01c90565b67ffffffffffffffff1615613e2857613e058260c01c90565b67ffffffffffffffff16613e198360601c90565b613e239190615758565b610af1565b600092915050565b6000610af1610bb86045613e4d6401000420695463ffffffff1690565b613e5d9063ffffffff1686615831565b613e6791906157fa565b612db891906157c3565b60007fff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff831663ffffffff60d81b60d884901b1617612090565b60006001600160a01b031983166001600160a01b03831617612090565b600061209083600160ff85613edd576000613ee0565b60015b60ff16811b600190921b6000190160ff919091161b19919091161790565b600080613f116509184e72a00084615a79565b9050613f4f84603860a0613f2b6509184e72a00088615758565b6001600160601b0316811b600190921b6000190160ff919091161b19919091161790565b91509250929050565b60007fbfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8216600160fe1b17610af1565b6040805160808101825260006020820181905291810182905260608101919091528254808252613fb661258d565b63ffffffff1660408301526001600160a01b0383166060830152613fd981612df6565b6001600160a01b0316836001600160a01b03161415613ffe5760208201819052614021565b6001600160a01b0383166000908152600185016020908152604090912054908301525b5092915050565b6001600160a01b0381166000908152620420726020526040902054156140765760405162461bcd60e51b8152602060048201526003602482015262281d1960e91b6044820152606401610b39565b6000806000614083614a0a565b93509350935050836001600160a01b031683146140c85760405162461bcd60e51b8152602060048201526003602482015262140e8d60ea1b6044820152606401610b39565b6001600160a01b0384166000908152620420726020526040902082905561311d565b6000806000806140f988612d81565b9050846001600160601b0316614117826001600160601b0316612ddb565b111561414b5760405162461bcd60e51b8152602060048201526003602482015262453a3160e81b6044820152606401610b39565b6141588787876000612598565b909450915061416781866156b3565b9250509450945094915050565b600080600061418d8661418688612da3565b87876140ea565b91986001600160601b039182169850911695509350505050565b600063ffffffff82111561273557600080fd5b6000806000806141c985613de0565b92506141d483614246565b91506127106141e38660c01c90565b6141f79067ffffffffffffffff1685615713565b6142019190615758565b90508061420e83856156db565b61421891906156db565b93509193509193565b60008060006142308460c01c90565b925061423c8460601c90565b9294929392915050565b60006127106142576103e884615713565b610af19190615758565b60006060826142985760405162461bcd60e51b8152602060048201526003602482015262281d1b60e91b6044820152606401610b39565b60006142a2613b88565b6040805160088082526101208201909252919250602082016101008036833701905050915060006142d4856000614659565b9050816000815181106142e9576142e9615870565b60200260200101518160008151811061430457614304615870565b60200260200101516143169190615a9f565b614321906001615973565b8360008151811061433457614334615870565b602002602001019060ff16908160ff16815250508160018151811061435b5761435b615870565b60200260200101518160018151811061437657614376615870565b60200260200101516143889190615a9f565b614393906001615973565b836001815181106143a6576143a6615870565b602002602001019060ff16908160ff1681525050816002815181106143cd576143cd615870565b6020026020010151816002815181106143e8576143e8615870565b60200260200101516143fa9190615a9f565b614405906001615973565b8360028151811061441857614418615870565b602002602001019060ff16908160ff168152505060608160038151811061444157614441615870565b602002602001015160ff1610156144c9578160038151811061446557614465615870565b60200260200101518160048151811061448057614480615870565b60200260200101516144929190615a9f565b61449d906001615973565b836003815181106144b0576144b0615870565b602002602001019060ff16908160ff1681525050614644565b60c0816003815181106144de576144de615870565b602002602001015160ff16101561454d578160048151811061450257614502615870565b60200260200101518160048151811061451d5761451d615870565b602002602001015161452f9190615a9f565b61453a906001615973565b836004815181106144b0576144b0615870565b60fa8160038151811061456257614562615870565b602002602001015160ff1610156145d1578160058151811061458657614586615870565b6020026020010151816004815181106145a1576145a1615870565b60200260200101516145b39190615a9f565b6145be906001615973565b836005815181106144b0576144b0615870565b816006815181106145e4576145e4615870565b6020026020010151816004815181106145ff576145ff615870565b60200260200101516146119190615a9f565b61461c906001615973565b8360068151811061462f5761462f615870565b602002602001019060ff16908160ff16815250505b614650846000856146d9565b93505050915091565b604080516008808252610120820190925292821c67ffffffffffffffff1692606091602082016101008036833701905050905060005b6008811015614021578360ff168282815181106146ae576146ae615870565b60ff9092166020928302919091019091015260089390931c92806146d181615a5e565b91505061468f565b600060085b801561473a576146ef600182615831565b6146fa9060086157db565b83614706600184615831565b8151811061471657614716615870565b602002602001015160ff16901b82179150808061473290615998565b9150506146de565b5067ffffffffffffffff60ff84161b19841681841b17613971565b600060ff82111561273557600080fd5b600080826040516020016147799190615ac1565b604051602081830303815290604052905060008151826040516020016147a0929190615ae7565b60405160208183030381529060405290508051602082016000f092506001600160a01b0383166148125760405162461bcd60e51b815260206004820152601160248201527f4445504c4f594d454e545f4641494c45440000000000000000000000000000006044820152606401610b39565b5050919050565b6060610af1826000614659565b6000612090836000846146d9565b600080614842846040614659565b805190915060ff600885901c8116919085169083908390811061486757614867615870565b602002602001015160ff166000146148aa5760405162461bcd60e51b8152600401610b3990602080825260049082015263050503a360e41b604082015260600190565b80838360ff16815181106148c0576148c0615870565b602002602001019060ff16908160ff16815250506132c5866040856146d9565b306148ea82612739565b6001600160a01b0316146149265760405162461bcd60e51b81526020600482015260036024820152622a1d1b60e91b6044820152606401610b39565b3361493082612523565b6001600160a01b03161461496c5760405162461bcd60e51b8152602060048201526003602482015262543a3760e81b6044820152606401610b39565b6001600160a01b0381166000818152620420696020908152604080832080546001600160a01b03199081169091556204206b83528184208054821690556204207583528184208490556204207483528184208490556204207283528184208490556204207190925280832080549092169091555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a450565b60008060006060614a19614d72565b90945063ffffffff169250614a2d84614261565b9495939490939092509050565b806060808080614a4b856000614659565b9350614a58866040614659565b9250614a65866080614659565b9150614a728660c0614659565b905091939590929450565b606060ff8216614ab85760405162461bcd60e51b8152600401610b39906020808252600490820152632b219d1960e11b604082015260600190565b81614ac281615b49565b9250506000614ad4613b926204206f90565b8460ff1681518110614ae857614ae8615870565b602002602001015190508060ff168360ff1610614b305760405162461bcd60e51b8152600401610b399060208082526004908201526356433a3160e01b604082015260600190565b60ff84166000908152620420706020908152604080832080548251818502810185019093528083529192909190830182828015614ba457602002820191906000526020600020905b815474ffffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311614b78575b50505050509050600080600080600090505b8451811015614c6057600060a0868381518110614bd557614bd5615870565b602002602001015174ffffffffffffffffffffffffffffffffffffffffff16901c90508860ff168184614c089190615973565b60ff161115614c4157858281518110614c2357614c23615870565b602002602001015194508289614c399190615b66565b935050614c60565b614c4b8184615973565b92505080614c5881615a5e565b915050614bb6565b506001600160a01b038316614ca05760405162461bcd60e51b8152600401610b39906020808252600490820152632b219d1960e11b604082015260600190565b614ca983614e29565b806020019051810190614cbc9190615b89565b8260ff1681518110614cd057614cd0615870565b60200260200101519550505050505092915050565b600080614cf3846040614659565b805190915060ff600885901c811691908516908190849084908110614d1a57614d1a615870565b602002602001015160ff1614614d5b5760405162461bcd60e51b8152600401610b399060208082526004908201526350503a3160e01b604082015260600190565b6000838360ff16815181106148c0576148c0615870565b600080614d7d61258d565b90506000614d8a82614e4a565b90506000614d99600183615831565b40905080614dd35760405162461bcd60e51b8152602060048201526007602482015266115410ce94d09360ca1b6044820152606401610b39565b6040805160208082019390935260e085901b6001600160e01b031916818301523060601b6bffffffffffffffffffffffff1916604482015281516038818303018152605890910190915280519101209391925050565b6060610af1826001614e45816001600160a01b0384163b615831565b614e8d565b6000614e5f6401000420695463ffffffff1690565b63ffffffff166045614e73610bb885615c90565b63ffffffff16614e8391906157db565b610af191906157c3565b60408051603f83850101601f19168101909152818152818360208301863c9392505050565b600060208284031215614ec457600080fd5b81356001600160e01b03198116811461209057600080fd5b6001600160a01b0381168114612bc157600080fd5b600060208284031215614f0357600080fd5b813561209081614edc565b60005b83811015614f29578181015183820152602001614f11565b83811115610bef5750506000910152565b60008151808452614f52816020860160208601614f0e565b601f01601f19169290920160200192915050565b6020815260006120906020830184614f3a565b600060208284031215614f8b57600080fd5b5035919050565b60008060408385031215614fa557600080fd5b8235614fb081614edc565b946020939093013593505050565b60008060408385031215614fd157600080fd5b8235614fdc81614edc565b915060208301358015158114614ff157600080fd5b809150509250929050565b60008060006060848603121561501157600080fd5b833561501c81614edc565b9250602084013561502c81614edc565b929592945050506040919091013590565b803561ffff8116811461257357600080fd5b60008060006060848603121561506457600080fd5b833561506f81614edc565b925061507d6020850161503d565b9150604084013561508d81614edc565b809150509250925092565b600080604083850312156150ab57600080fd5b82356150b681614edc565b91506020830135614ff181614edc565b803560ff8116811461257357600080fd5b600080604083850312156150ea57600080fd5b82356150f581614edc565b9150612920602084016150c6565b60008060006040848603121561511857600080fd5b833567ffffffffffffffff8082111561513057600080fd5b818601915086601f83011261514457600080fd5b81358181111561515357600080fd5b8760208260051b850101111561516857600080fd5b60209283019550935061517e91860190506150c6565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156151c6576151c6615187565b604052919050565b600067ffffffffffffffff8211156151e8576151e8615187565b50601f01601f191660200190565b6000806000806080858703121561520c57600080fd5b843561521781614edc565b9350602085013561522781614edc565b925060408501359150606085013567ffffffffffffffff81111561524a57600080fd5b8501601f8101871361525b57600080fd5b803561526e615269826151ce565b61519d565b81815288602083850101111561528357600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b600080604083850312156152b857600080fd5b823591506020830135614ff181614edc565b80356001600160601b038116811461257357600080fd5b600080604083850312156152f457600080fd5b82356152ff81614edc565b9150612920602084016152ca565b600081518084526020808501945080840160005b8381101561534057815160ff1687529582019590820190600101615321565b509495945050505050565b602081526000612090602083018461530d565b60006101608251845260208301516020850152604083015181604086015261538882860182614f3a565b915050606083015184820360608601526153a28282614f3a565b91505060808301516153bf60808601826001600160a01b03169052565b5060a083015160a085015260c083015160c085015260e083015184820360e08601526153eb828261530d565b9150506101008084015185830382870152615406838261530d565b925050506101208084015185830382870152615422838261530d565b9250505061014080840151858303828701526132c5838261530d565b6000604082016040835280855180835260608501915060608160051b860101925060208088016000805b848110156154bc57888703605f19018652825180518089529085019085890190845b818110156154a65783518352928701929187019160010161548a565b5090985050509483019491830191600101615468565b50505085840381870152505050612d1b818561535e565b6000806000606084860312156154e857600080fd5b83356154f381614edc565b92506155016020850161503d565b915061517e604085016152ca565b600067ffffffffffffffff82111561552957615529615187565b5060051b60200190565b600082601f83011261554457600080fd5b813560206155546152698361550f565b82815260059290921b8401810191818101908684111561557357600080fd5b8286015b8481101561559557615588816150c6565b8352918301918301615577565b509695505050505050565b6000806000606084860312156155b557600080fd5b83356155c081614edc565b9250602084013567ffffffffffffffff808211156155dd57600080fd5b6155e987838801615533565b935060408601359150808211156155ff57600080fd5b5061560c86828701615533565b9150509250925092565b85815260a06020820152600061562f60a083018761530d565b8281036040840152615641818761530d565b90508281036060840152615655818661530d565b90508281036080840152615669818561530d565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff8083168185168083038211156156aa576156aa615675565b01949350505050565b60006001600160601b03838116908316818110156156d3576156d3615675565b039392505050565b60006001600160601b038083168185168083038211156156aa576156aa615675565b634e487b7160e01b600052600160045260246000fd5b60006001600160601b038083168185168183048111821515161561573957615739615675565b02949350505050565b634e487b7160e01b600052601260045260246000fd5b60006001600160601b038084168061577257615772615742565b92169190910492915050565b6001600160a01b03851681528360208201526080604082015260006157a6608083018561530d565b82810360608401526157b8818561530d565b979650505050505050565b600082198211156157d6576157d6615675565b500190565b60008160001904831182151516156157f5576157f5615675565b500290565b60008261580957615809615742565b500490565b600067ffffffffffffffff8083168185168083038211156156aa576156aa615675565b60008282101561584357615843615675565b500390565b6001600160a01b0384168152826020820152606060408201526000612d1b606083018461530d565b634e487b7160e01b600052603260045260246000fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156158b857600080fd5b8260051b8083602087013760009401602001938452509192915050565b6020808252818101839052600090600560408085019086831b86010187855b8881101561596557878303603f190184528135368b9003601e1901811261591a57600080fd5b8a01803567ffffffffffffffff81111561593357600080fd5b80871b36038c131561594457600080fd5b61595185828a8501615886565b9588019594505050908501906001016158f4565b509098975050505050505050565b600060ff821660ff84168060ff0382111561599057615990615675565b019392505050565b6000816159a7576159a7615675565b506000190190565b600067ffffffffffffffff838116908316818110156156d3576156d3615675565b6000602082840312156159e257600080fd5b815167ffffffffffffffff8111156159f957600080fd5b8201601f81018413615a0a57600080fd5b8051615a18615269826151ce565b818152856020838501011115615a2d57600080fd5b612d1b826020830160208601614f0e565b600060ff821660ff811415615a5557615a55615675565b60010192915050565b6000600019821415615a7257615a72615675565b5060010190565b60006001600160601b0380841680615a9357615a93615742565b92169190910692915050565b600060ff831680615ab257615ab2615742565b8060ff84160691505092915050565b6000815260008251615ada816001850160208701614f0e565b9190910160010192915050565b606360f81b815263ffffffff60e01b8360e01b1660018201527f80600e6000396000f30000000000000000000000000000000000000000000000600582015260008251615b3b81600e850160208701614f0e565b91909101600e019392505050565b600060ff821680615b5c57615b5c615675565b6000190192915050565b600060ff821660ff841680821015615b8057615b80615675565b90039392505050565b60006020808385031215615b9c57600080fd5b825167ffffffffffffffff80821115615bb457600080fd5b818501915085601f830112615bc857600080fd5b8151615bd66152698261550f565b818152600591821b8401850191858201919089841115615bf557600080fd5b8686015b84811015615c8157805186811115615c115760008081fd5b8701603f81018c13615c235760008081fd5b888101516040615c356152698361550f565b82815291851b83018101918b8101908f841115615c525760008081fd5b938201935b83851015615c705784518252938c0193908c0190615c57565b885250505093880193508701615bf9565b50909998505050505050505050565b600063ffffffff838116908316818110156156d3576156d361567556fea2646970667358221220c8e8a3fada1f72949b84f9fc9585d2557edd28dfb26d29b832fb7dd340a85bc164736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "extractProtocolEth()": {
        "details": "caller must be a trusted user"
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
      },
      "loanInfo(uint160)": {
        "details": "contract ->frontend -> used to set the amount of eth for user",
        "params": {
          "tokenId": "the token who's current loan to check"
        },
        "returns": {
          "earned": "-> the amount of eth the minSharePrice has increased since loan was last rebalanced",
          "epochDue": "-> the final epoch a user is safe from liquidation (inclusive)",
          "loaner": "-> the user responsable for the loan",
          "toPayoff": "->  the current amount loaned out, plus the final rebalance fee",
          "toRebalance": "->  the fee a user must pay to rebalance (and extend) the loan on their nugg"
        }
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "setMigrator(address)": {
        "details": "caller must be a trusted user",
        "params": {
          "migrator": "the address to set as the migrator contract"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "valueForDelegate(uint160,address)": {
        "details": "returns 0 if no delegate can be made for this oken",
        "params": {
          "tokenId": "-> the token to be delegated to",
          "user": "-> the address of the user who will be delegating"
        },
        "returns": {
          "canDelegate": "-> instead of reverting this function will return false",
          "nextSwapAmount": "-> the minimum value that must be sent with a delegate call",
          "userCurrentOffer": "->"
        }
      },
      "valueForPayoff(uint160)": {
        "details": "should be used to tell user how much eth to send for payoff"
      },
      "valueForRebalance(uint160)": {
        "details": "should be used to tell user how much eth to send for rebalance"
      },
      "withdrawStake(uint160)": {
        "details": "should only be called directly",
        "params": {
          "tokenId": "the id of the nugg being burned"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "extractProtocolEth()": {
        "notice": "sends the current protocolEth to the user and resets the value to zero"
      },
      "loanInfo(uint160)": {
        "notice": "for a nugg's active loan: calculates the current min eth a user must send to payoff or rebalance"
      },
      "setMigrator(address)": {
        "notice": "sets the migrator contract"
      },
      "valueForDelegate(uint160,address)": {
        "notice": "calculates the minimum eth that must be sent with a delegate call"
      },
      "valueForPayoff(uint160)": {
        "notice": "\"toPayoff\" value from \"loanInfo\""
      },
      "valueForRebalance(uint160)": {
        "notice": "\"toRebalance\" value from \"loanInfo\""
      },
      "withdrawStake(uint160)": {
        "notice": "burns a nugg from existance, dealing the eth worth of that share to the user"
      }
    },
    "notice": "deviations from ERC721 standard: 1. no verificaiton the receiver is a ERC721Reciever - on top of this being a gross waste of gas, the way the swapping logic works makes this only worth calling when a user places an offer - and we did not want to call \"onERC721Recieved\" when no token was being sent. 2.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3847,
        "contract": "src/NuggFT.sol:NuggFT",
        "label": "dotnuggV1Processor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3852,
        "contract": "src/NuggFT.sol:NuggFT",
        "label": "defaultWidth",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3856,
        "contract": "src/NuggFT.sol:NuggFT",
        "label": "defaultZoom",
        "offset": 21,
        "slot": "0",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}