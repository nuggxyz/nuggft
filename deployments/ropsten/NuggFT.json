{
  "address": "0x42069a24CD53DaB160d8D35ca9dB57937A457F8B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        }
      ],
      "name": "Launched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "launch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launched",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nuggGet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nuggSet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "onBuyerClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "onMinterClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbeeb334e27ae9a715046e26ebe500c66e6404149c8cb9b0f5732fcc5e0913e5c",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xB666C13b621568FeC210724DF161604adccfA257",
    "contractAddress": null,
    "transactionIndex": 60,
    "gasUsed": "4709338",
    "logsBloom": "0x
    "blockHash": "0x85e33e6bb0fd944088a7c1d25bfbe4e3720727d7f988198fb9d9e725675adf2c",
    "transactionHash": "0xbeeb334e27ae9a715046e26ebe500c66e6404149c8cb9b0f5732fcc5e0913e5c",
    "logs": [],
    "blockNumber": 11243280,
    "cumulativeGasUsed": "6207302",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "24ac09d9bc97ff10fe4e0604109f49d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"Launched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nuggGet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nuggSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"onBuyerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"onMinterClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Nugg Labs - @danny7even & @dub6ix - 2021\",\"details\":\"this is art Note: epochs correlate directly to tokenIDs Note: no images are stored in their final form - they are generated by view/pure functions at query time completly onchain Note: the block hash corresponding to the start of an epoch is used as the \\\"random\\\" seed Note: epochs are 256 blocks long as block hashes only exist for 256 blocks\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"deployer()\":{\"details\":\"#TODO\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"launch(bytes)\":{\"details\":\"#TODO\"},\"launched()\":{\"details\":\"#TODO\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}. MODIFICATION 0\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"title\":\"Nugg Labs NFT Collection 0 - \\\"NuggFT\\\"\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"launch(bytes)\":{\"notice\":\"inializes contract outside of constructor\"},\"pendingTokenURI()\":{\"notice\":\"equivilent of tokenURI function, but for only for active epoch as real uri does not exist yet\"}},\"notice\":\"entrily onchain generative NFT and stakable auction contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NuggFT.sol\":\"NuggFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a9a31f278ee3ed0568ab7e3c09ecb72bf92f922475a274760b4c58f87f9ad0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/NuggFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './libraries/Base64.sol';\\nimport './libraries/SeedMath.sol';\\nimport './libraries/Uint.sol';\\n\\nimport './base/Launchable.sol';\\nimport './base/Seedable.sol';\\nimport './base/Epochable.sol';\\n\\nimport './erc721/ERC721.sol';\\n\\nimport './core/interfaces/IDotNugg.sol';\\nimport './interfaces/INuggFT.sol';\\nimport './auction/NuggMinter.sol';\\nimport './auction/NuggSeller.sol';\\n\\nimport './gen/DotNuggGenerated.sol';\\n\\nimport './weth/interfaces/INuggETH.sol';\\n\\n/**\\n * @title Nugg Labs NFT Collection 0 - \\\"NuggFT\\\"\\n * @author Nugg Labs - @danny7even & @dub6ix - 2021\\n * @notice entrily onchain generative NFT and stakable auction contract\\n * @dev this is art\\n *\\n * Note: epochs correlate directly to tokenIDs\\n * Note: no images are stored in their final form - they are generated by view/pure functions at query time completly onchain\\n * Note: the block hash corresponding to the start of an epoch is used as the \\\"random\\\" seed\\n * Note: epochs are 256 blocks long as block hashes only exist for 256 blocks\\n */\\ncontract NuggFT is INuggFT, ERC721, Launchable, DotNuggGenerated, Mutexable {\\n    using SeedMath for bytes32;\\n    using Uint256 for uint256;\\n\\n    uint8 private constant _MAX_FEATURES = 3;\\n\\n    uint8[] private _featureIDs;\\n\\n    IDotNugg internal _DOTNUGG;\\n    INuggETH internal _NUGGETH;\\n    INuggMinter internal _MINTER;\\n    INuggSeller internal _SELLER;\\n\\n    Mutex transfer;\\n\\n    constructor() ERC721('Nugg Fungable Token', 'NuggFT') {\\n        transfer = initMutex();\\n    }\\n\\n    function onMinterClaim(address minter, uint256 tokenId) external override lock(transfer) {\\n        require(msg_sender() == address(_MINTER), 'NFT:OMC:0');\\n        _safeMint(minter, tokenId);\\n    }\\n\\n    function onBuyerClaim(address buyer, uint256 tokenId) external override lock(transfer) {\\n        require(msg_sender() == address(_SELLER), 'NFT:OBC:0');\\n        _safeTransfer(address(_SELLER), buyer, tokenId, '');\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address,\\n        address,\\n        uint256\\n    ) internal view override {\\n        require(msg_sender() == address(_MINTER) || msg_sender() == address(_SELLER), 'NFT:BTT:0');\\n    }\\n\\n    /**\\n     * @notice inializes contract outside of constructor\\n     * @inheritdoc Launchable\\n     */\\n    function launch(bytes memory data) public override {\\n        super.launch(data);\\n        (address nuggeth, address dotnugg, address minter, address seller) = abi.decode(data, (address, address, address, address));\\n        _NUGGETH = INuggETH(nuggeth);\\n        _DOTNUGG = IDotNugg(dotnugg);\\n        _MINTER = INuggMinter(minter);\\n        _SELLER = INuggSeller(seller);\\n\\n        IDotNugg.Collection memory coll = _DOTNUGG.bytesToCollection(_collection());\\n        for (uint8 i = 0; i < coll.features.length; i++) {\\n            _featureIDs.push(coll.features[i].id);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721\\n     */\\n    function tokenURI(uint256 tokenId) public view override isLaunched returns (string memory res) {\\n        require(_MINTER.seedExists(tokenId), 'NUG:TURI:0');\\n        res = _generateTokenURI(tokenId, _MINTER.getSeed(tokenId).toUint256());\\n    }\\n\\n    /**\\n     * @notice equivilent of tokenURI function, but for only for active epoch as real uri does not exist yet\\n     */\\n    function pendingTokenURI() public view override isLaunched returns (string memory res) {\\n        uint256 id = _MINTER.currentEpochId();\\n        bytes32 seed = _MINTER.seedExists(id) ? _MINTER.getSeed(id) : _MINTER.calculateCurrentSeed();\\n        res = _generateTokenURI(id, seed.toUint256());\\n    }\\n\\n    /**\\n     * @notice calcualtes the token uri for a given epoch\\n     */\\n    function _generateTokenURI(uint256 epoch, uint256 seed) internal view returns (string memory) {\\n        string memory uriName = string(abi.encodePacked('NuggFT #', epoch.toString()));\\n        string memory uriDesc = 'TDB';\\n        IDotNugg.Base memory base = _getBase(seed);\\n        IDotNugg.Attribute[] memory attrs = _getAttributes(seed);\\n\\n        IDotNugg.Display memory display = _DOTNUGG.newDisplay(base, attrs);\\n\\n        string memory uriImage = Base64.encodeSvg(_DOTNUGG.toSvg(display, 10));\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Base64.encodeJson(bytes(abi.encodePacked('{\\\"name\\\":\\\"', uriName, '\\\",\\\"description\\\":\\\"', uriDesc, '\\\", \\\"image\\\": \\\"', uriImage, '\\\"}')))\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice gets unique attribtues based on given epoch and converts encoded bytes to object that can be merged\\n     */\\n    function _getAttributes(uint256 seed) internal view returns (IDotNugg.Attribute[] memory res) {\\n        uint16[] memory randomAttributeIDs = new uint16[](30);\\n        for (uint8 i = 0; i < 30; i++) {\\n            randomAttributeIDs[i] = uint16((seed >> i) % attributes_.length);\\n        }\\n\\n        uint8[] memory selectedFeatureIDCheck = new uint8[](_featureIDs.length);\\n\\n        res = new IDotNugg.Attribute[](_MAX_FEATURES);\\n\\n        uint8 selectedAttrIndex = 0;\\n        for (uint8 i = 0; i < randomAttributeIDs.length; i++) {\\n            IDotNugg.Attribute memory potentialAttribute = _DOTNUGG.bytesToAttribute(_attributes(randomAttributeIDs[i]));\\n            if (selectedFeatureIDCheck[potentialAttribute.feature.id] == 0) {\\n                res[selectedAttrIndex++] = potentialAttribute;\\n                selectedFeatureIDCheck[potentialAttribute.feature.id] == 1;\\n            }\\n            if (selectedAttrIndex == _MAX_FEATURES) {\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice gets unique base based on given epoch and converts encoded bytes to object that can be merged\\n     */\\n    function _getBase(uint256 seed) internal view returns (IDotNugg.Base memory res) {\\n        res = _DOTNUGG.bytesToBase(_bases(seed % bases_.length));\\n    }\\n}\\n\",\"keccak256\":\"0x76a145adf6cd3b7c2a9aec5277ef08f1495a22869b5db3e8e129cd722922ba5e\",\"license\":\"MIT\"},\"contracts/auction/NuggMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './base/Auctionable.sol';\\nimport '../base/Launchable.sol';\\n\\nimport '../base/Seedable.sol';\\nimport '../base/Epochable.sol';\\nimport './interfaces/INuggMinter.sol';\\nimport './periphery/IAuctionableImplementer.sol';\\n\\ncontract NuggMinter is INuggMinter, Auctionable, Launchable, Epochable, Seedable {\\n    IAuctionableImplementer internal _NUGGFT;\\n\\n    INuggETH internal _NUGGETH;\\n    IWETH9 internal _WETH;\\n\\n    // uint256 private constant _OFFSET = 42069;\\n\\n    // uint256 private _pendingReward = _OFFSET;\\n\\n    constructor() Epochable(25) {}\\n\\n    /**\\n     * @inheritdoc Exchangeable\\n     */\\n    function WETH() internal view override returns (IWETH9 res) {\\n        res = _WETH;\\n    }\\n\\n    /**\\n     * @inheritdoc Exchangeable\\n     */\\n    function NUGGETH() internal view override returns (INuggETH res) {\\n        res = _NUGGETH;\\n    }\\n\\n    // function calculateCurrentAuctionId() internal view virtual returns (uint256 res);\\n\\n    /**\\n     * @notice inializes contract outside of constructor\\n     * @inheritdoc Launchable\\n     */\\n    function launch(bytes memory data) public override {\\n        super.launch(data);\\n        (address nuggft, address nuggeth, address weth) = abi.decode(data, (address, address, address));\\n        _NUGGFT = IAuctionableImplementer(nuggft);\\n        _WETH = IWETH9(weth);\\n        _NUGGETH = INuggETH(nuggeth);\\n    }\\n\\n    /**\\n     * @inheritdoc Auctionable\\n     */\\n    function _onWinnerClaim(Bid memory bid) internal override {\\n        super._onWinnerClaim(bid);\\n        _NUGGFT.onMinterClaim(bid.account, bid.auctionId);\\n    }\\n\\n    /**\\n     * @inheritdoc Auctionable\\n     */\\n    function _onBidPlaced(Auction memory auction) internal override {\\n        super._onBidPlaced(auction);\\n        if (!seedExists(auction.auctionId)) {\\n            setSeed(auction.auctionId, calculateCurrentSeed());\\n        }\\n        _NUGGETH.depositRewards{value: auction.top.amount - auction.last.amount}(address(this));\\n    }\\n\\n    /**\\n     * @inheritdoc Auctionable\\n     */\\n    function _auctionIsActive(Auction memory auction) internal view override returns (bool res) {\\n        return epochStatus(auction.auctionId) == EpochMath.Status.ACTIVE;\\n    }\\n\\n    /**\\n     * @inheritdoc Auctionable\\n     */\\n    function _auctionIsOver(Auction memory auction) internal view override returns (bool res) {\\n        return epochStatus(auction.auctionId) == EpochMath.Status.OVER;\\n    }\\n\\n    function currentAuction() public view virtual override returns (Auction memory res) {\\n        uint256 auctionId = currentEpochId();\\n        res = getAuction(auctionId);\\n    }\\n\\n    /**\\n     * @notice gets unique base based on given epoch and converts encoded bytes to object that can be merged\\n     * Note: by using the block hash no one knows what a nugg will look like before it's epoch.\\n     * We considered making this harder to manipulate, but we decided that if someone were able to\\n     * pull it off and make their own custom nugg, that would be really fucking cool.\\n     */\\n    function calculateCurrentSeed() public view override returns (bytes32 res) {\\n        uint256 num = blocknumFromId(currentEpochId()) - 1;\\n        res = block_hash(num);\\n        require(res != 0, 'EPC:SBL');\\n        res = keccak256(abi.encodePacked(res, num));\\n    }\\n}\\n\",\"keccak256\":\"0xe4ebe09e29a04bd16579696660bd407b2e221749b666f0369abf5bb6e2d5daa2\",\"license\":\"MIT\"},\"contracts/auction/NuggSeller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './base/Auctionable.sol';\\nimport '../base/Launchable.sol';\\n\\nimport '../base/Seedable.sol';\\nimport '../base/Epochable.sol';\\nimport './interfaces/INuggSeller.sol';\\nimport '../interfaces/INuggFT.sol';\\nimport '../erc721/ERC721Holder.sol';\\n\\ncontract NuggSeller is INuggSeller, Auctionable, Launchable, ERC721Holder {\\n    INuggFT internal _NUGGFT;\\n\\n    INuggETH internal _NUGGETH;\\n    IWETH9 internal _WETH;\\n\\n    uint256 private _counter = 1;\\n\\n    mapping(uint256 => Sale) _sales;\\n\\n    mapping(uint256 => uint256) _lastSaleByToken;\\n\\n    constructor() {}\\n\\n    /**\\n     * @inheritdoc Exchangeable\\n     */\\n    function WETH() internal view override returns (IWETH9 res) {\\n        res = _WETH;\\n    }\\n\\n    /**\\n     * @inheritdoc Exchangeable\\n     */\\n    function NUGGETH() internal view override returns (INuggETH res) {\\n        res = _NUGGETH;\\n    }\\n\\n    function startSale(\\n        uint256 tokenId,\\n        uint256 length,\\n        uint256 floor\\n    ) external {\\n        Sale memory sale = Sale({sold: false, claimed: false, tokenId: tokenId, startblock: block.number, length: length, floor: floor, seller: msg_sender()});\\n\\n        _NUGGFT.safeTransferFrom(sale.seller, address(this), tokenId);\\n\\n        require(_NUGGFT.ownerOf(tokenId) == address(this), 'NS:START:0');\\n        uint256 saleId = _counter++;\\n        _sales[saleId] = sale;\\n        _lastSaleByToken[tokenId] = saleId;\\n\\n        emit SaleStart(saleId, tokenId, length, floor);\\n    }\\n\\n    function claimSale(uint256 saleId, Currency currency) external {\\n        Sale memory sale = _sales[saleId];\\n\\n        require(block_num() > sale.startblock + sale.length, 'NS:CS:0');\\n        require(msg_sender() == sale.seller, 'NS:CS:1');\\n        require(sale.claimed == false, 'NS:CS:2');\\n\\n        _sales[saleId].claimed = true;\\n\\n        if (sale.sold) {\\n            uint256 amount = _bidsAmt[saleId][_topAddr[saleId]];\\n            uint256 royalties = (amount * 15) / 100;\\n            _NUGGETH.depositRewards{value: royalties}(address(this));\\n            giveCurrency(msg_sender(), amount - royalties, currency);\\n        } else {\\n            _NUGGFT.safeTransferFrom(address(this), sale.seller, sale.tokenId);\\n            emit SaleStop(saleId);\\n        }\\n    }\\n\\n    function stopSale(uint256 saleId) public {\\n        Sale memory sale = _sales[saleId];\\n        require(msg_sender() == sale.seller, 'NS:SS:0');\\n        require(!sale.sold, 'NS:SS:1');\\n        require(!sale.claimed, 'NS:SS:2');\\n\\n        _sales[saleId].claimed = true;\\n\\n        _NUGGFT.safeTransferFrom(address(this), sale.seller, sale.tokenId);\\n        emit SaleStop(saleId);\\n    }\\n\\n    /**\\n     * @notice inializes contract outside of constructor\\n     * @inheritdoc Launchable\\n     */\\n    function launch(bytes memory data) public override {\\n        super.launch(data);\\n        (address nuggft, address nuggeth, address weth) = abi.decode(data, (address, address, address));\\n        _NUGGFT = INuggFT(nuggft);\\n        _WETH = IWETH9(weth);\\n        _NUGGETH = INuggETH(nuggeth);\\n        _NUGGFT.setApprovalForAll(nuggft, true);\\n    }\\n\\n    /**\\n     * @notice returns id of last and/or current sale for a given token id\\n     * @inheritdoc INuggSeller\\n     */\\n    function lastSaleByToken(uint256 tokenId) public view override returns (uint256 res) {\\n        return _lastSaleByToken[tokenId];\\n    }\\n\\n    /**\\n     * @inheritdoc Auctionable\\n     */\\n    function _onWinnerClaim(Bid memory bid) internal override {\\n        super._onWinnerClaim(bid);\\n        _NUGGFT.onBuyerClaim(bid.account, _sales[bid.auctionId].tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc Auctionable\\n     */\\n    function _onBidPlaced(Auction memory auction) internal override {\\n        require(auction.top.amount >= _sales[auction.auctionId].floor, 'NS:OBP:0');\\n        super._onBidPlaced(auction);\\n        if (auction.last.amount == 0) _sales[auction.auctionId].sold = true;\\n    }\\n\\n    /**\\n     * @inheritdoc Auctionable\\n     */\\n    function _auctionIsActive(Auction memory auction) internal view override returns (bool res) {\\n        Sale memory sale = _sales[auction.auctionId];\\n        res = block_num() >= sale.startblock && block_num() < sale.startblock + sale.length;\\n    }\\n\\n    /**\\n     * @inheritdoc Auctionable\\n     */\\n    function _auctionIsOver(Auction memory auction) internal view override returns (bool res) {\\n        Sale memory sale = _sales[auction.auctionId];\\n        res = block_num() > sale.startblock + sale.length;\\n    }\\n}\\n\",\"keccak256\":\"0xa4e20caff5cdc9ef99a2f01d37045632842c0f0ac405fa25c097792756b16f27\",\"license\":\"MIT\"},\"contracts/auction/base/Auctionable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\n\\nimport '../interfaces/IAuctionable.sol';\\nimport '../../libraries/QuadMath.sol';\\nimport '../../libraries/Exchange.sol';\\nimport '../../base/Mutexable.sol';\\nimport '../../base/Testable.sol';\\nimport '../../base/Exchangeable.sol';\\nimport '../../interfaces/IWETH9.sol';\\n\\n\\n/**\\n * @title Auctionable\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice enables children contracts to bidreak themselves into auctions\\n */\\nabstract contract Auctionable is IAuctionable, Mutexable, Exchangeable {\\n    using Address for address payable;\\n    using QuadMath for uint256;\\n\\n    Mutex private local;\\n\\n    mapping(uint256 => address) internal _topAddr;\\n    mapping(uint256 => mapping(address => uint256)) internal _bidsAmt;\\n    mapping(uint256 => mapping(address => bool)) internal _bidsBool;\\n\\n    constructor() {\\n        local = initMutex();\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function placeBid(\\n        uint256 auctionId,\\n        uint256 amount,\\n        Currency currency\\n    ) external payable override {\\n        _placeBid(msg_sender(), amount, auctionId, currency);\\n    }\\n\\n    function getBid(uint256 auctionId, address account) public view override returns (Bid memory res) {\\n        res.amount = _bidsAmt[auctionId][account];\\n        res.account = account;\\n        res.claimed = _bidsBool[auctionId][account];\\n        res.auctionId = auctionId;\\n    }\\n\\n    function getAuction(uint256 auctionId) public view override returns (Auction memory res) {\\n        res.auctionId = auctionId;\\n        res.top = getBid(auctionId, _topAddr[auctionId]);\\n        res.init = res.top.amount > 0;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function claim(uint256 auctionId, Currency currency) external override {\\n        _claim(auctionId, msg_sender(), currency);\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function _fallback() internal pure override {\\n        require(false, 'AUC:ETHF:0');\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function _claim(\\n        uint256 auctionId,\\n        address account,\\n        Currency currency\\n    ) internal lock(global) {\\n        Auction memory auction;\\n        auction.auctionId = auctionId;\\n\\n        Bid memory bid = _optimisticBid(auctionId, account, 0, currency);\\n\\n        _claimableChecks(auction, bid);\\n\\n        _bidsBool[auctionId][account] = true;\\n\\n        if (_topAddr[auctionId] == account) {\\n            _onWinnerClaim(bid);\\n        } else {\\n            _onNormalClaim(bid);\\n        }\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function _placeBid(\\n        address account,\\n        uint256 amount,\\n        uint256 auctionId,\\n        Currency currency\\n    ) internal lock(global) {\\n        require(amount > 0, 'AUC:MSG0:0');\\n\\n        takeCurrency(account, amount, currency);\\n\\n        Bid memory bid = _optimisticBid(auctionId, account, amount, currency);\\n        Auction memory auction = _optimisticAuction(bid);\\n\\n        _biddableChecks(auction);\\n\\n        _onBidPlaced(auction);\\n\\n        _bidsAmt[auctionId][account] = bid.amount;\\n        if (_topAddr[auctionId] != account) _topAddr[auctionId] = account;\\n    }\\n\\n    function _optimisticAuction(Bid memory bid) internal view returns (Auction memory auction) {\\n        auction.auctionId = bid.auctionId;\\n        auction.last.amount = _bidsAmt[bid.auctionId][_topAddr[bid.auctionId]];\\n        auction.top = bid;\\n    }\\n\\n    /**\\n     * @notice mints erc721 to auction winner\\n     */\\n    function _onBidPlaced(Auction memory auction) internal virtual {\\n        emit BidPlaced(auction.auctionId, auction.top.account, auction.top.amount, auction.top.currency);\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function _onWinnerClaim(Bid memory bid) internal virtual {\\n        emit WinningClaim(bid.auctionId, bid.account, bid.amount);\\n    }\\n\\n    /**\\n     * @notice mints erc721 to auction winner\\n     */\\n    function _onNormalClaim(Bid memory bid) internal virtual {\\n        giveCurrency(bid.account, bid.amount, bid.currency);\\n        emit NormalClaim(bid.auctionId, bid.account, bid.amount, bid.currency);\\n    }\\n\\n    function _optimisticBid(\\n        uint256 auctionId,\\n        address account,\\n        uint256 amount,\\n        Currency currency\\n    ) internal view returns (Bid memory bid) {\\n        uint256 amt = _bidsAmt[auctionId][account];\\n        bid.amount = amt + amount;\\n        bid.account = account;\\n        bid.auctionId = auctionId;\\n        bid.currency = currency;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function _biddableChecks(Auction memory auction) internal view {\\n        require(_auctionIsActive(auction), 'AUC:BC:0');\\n        require(auction.last.amount < auction.top.amount, 'AUC:RVA:0');\\n        require(auction.top.account != 0x0000000000000000000000000000006269746368, 'AUC:WUT:0');\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function _claimableChecks(Auction memory auction, Bid memory bid) internal view {\\n        // require(_auctionIsOver(auction) || auction.top.account != bid.account, 'AUC:CC:0');\\n        require(_auctionIsOver(auction), 'AUC:CC:0');\\n        require(bid.claimed == false, 'AUC:CC:1');\\n        require(bid.amount > 0, 'AUC:CC:2');\\n    }\\n\\n    function _auctionIsActive(Auction memory auction) internal view virtual returns (bool);\\n\\n    function _auctionIsOver(Auction memory auction) internal view virtual returns (bool);\\n\\n    function bidhash(uint256 auctionId, address account) internal view returns (bytes32 res) {\\n        res = keccak256(abi.encodePacked('bidhash', address(this), auctionId, account));\\n    }\\n}\\n\",\"keccak256\":\"0x421fde3613824cce8a73c0e0b831cf35e6fd04574135370c066d36ad4d65bab6\",\"license\":\"MIT\"},\"contracts/auction/interfaces/IAuctionable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../../interfaces/IExchangeable.sol';\\nimport '../../interfaces/IWETH9.sol';\\n\\n/**\\n * @title IAuctionable\\n * @dev interface for Auctionable.sol\\n */\\ninterface IAuctionable is IExchangeable {\\n    struct Bid {\\n        bytes32 id;\\n        uint256 auctionId;\\n        address account;\\n        uint256 amount;\\n        bool claimed;\\n        Currency currency;\\n        uint256 bidnum;\\n        bool first;\\n    }\\n\\n    struct Auction {\\n        uint256 auctionId;\\n        bool init;\\n        Bid top;\\n        Bid last;\\n        // uint256 bidCount;\\n        // bytes data;\\n        // Bid top;\\n        // Bid lastId;\\n    }\\n\\n    event WinningClaim(uint256 indexed epoch, address indexed user, uint256 amount);\\n\\n    event NormalClaim(uint256 indexed epoch, address indexed user, uint256 amount, Currency currency);\\n\\n    event BidPlaced(uint256 indexed epoch, address indexed user, uint256 amount, Currency currency);\\n\\n    event AuctionInit(uint256 indexed epoch, uint256 amount);\\n\\n    function getAuction(uint256 id) external view returns (Auction memory res);\\n\\n    // function getBidByHash(bytes32 bidhash) external view returns (Bid memory res);\\n\\n    function getBid(uint256 auctionId, address account) external view returns (Bid memory bid);\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function placeBid(\\n        uint256 epoch,\\n        uint256 amount,\\n        Currency currency\\n    ) external payable;\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function claim(uint256 epoch, Currency currency) external;\\n}\\n\",\"keccak256\":\"0x5e757cc33f8cdb75880b321be55d076e4f0ebc30cf351de0d3aca569a2f8e3bb\",\"license\":\"MIT\"},\"contracts/auction/interfaces/INuggMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './IAuctionable.sol';\\nimport '../../interfaces/ISeedable.sol';\\nimport '../../interfaces/IEpochable.sol';\\n\\n/**\\n * @title ISeedable\\n * @dev interface for Seedable.sol\\n */\\ninterface INuggMinter is IAuctionable, ISeedable, IEpochable {\\n    // function pendingReward() external returns (uint256);\\n    // function movePendingReward() external;\\n\\n    function currentAuction() external view returns (Auction memory res);\\n}\\n\",\"keccak256\":\"0x0718cfce565e7f1b0786ba737c403270418917647dce4af8f520721d904bb663\",\"license\":\"MIT\"},\"contracts/auction/interfaces/INuggSeller.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\nimport './IAuctionable.sol';\\nimport '../../interfaces/ISeedable.sol';\\nimport '../../interfaces/IEpochable.sol';\\n\\n/**\\n * @title ISeedable\\n * @dev interface for Seedable.sol\\n */\\ninterface INuggSeller is IAuctionable {\\n    event SaleStart(uint256 saleId, uint256 tokenId, uint256 floor, uint256 length);\\n\\n    event SaleStop(uint256 saleId);\\n\\n    struct Sale {\\n        uint256 startblock;\\n        uint256 length;\\n        uint256 floor;\\n        address seller;\\n        uint256 tokenId;\\n        bool claimed;\\n        bool sold;\\n    }\\n\\n    function lastSaleByToken(uint256 tokenId) external returns (uint256 res);\\n}\\n\",\"keccak256\":\"0xd59cfd0fb83db76e0e68ef0ce2e17e62668b0401c2ccc666652ca14a2077ba2d\"},\"contracts/auction/periphery/IAuctionableImplementer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../interfaces/IAuctionable.sol';\\n\\ninterface IAuctionableImplementer {\\n    // function onBidPlaced(IAuctionable.Auction memory auction) external payable;\\n\\n    function onMinterClaim(address minter, uint256 tokenId) external;\\n\\n    function onBuyerClaim(address buyer, uint256 tokenId) external;\\n\\n    // function auctionIsActive(IAuctionable.Auction memory auction) external view returns (bool);\\n\\n    // function auctionIsOver(IAuctionable.Auction memory auction) external view returns (bool);\\n\\n    // function calculateAuctionData(IAuctionable.Auction memory auction) external view returns (bytes memory res);\\n\\n    // function calculateCurrentAuctionId() external view returns (uint256 res);\\n\\n    // function auctionable() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa2b799cc46cbe2c17611575c17197fbcc1c6cd7b5521de2ad3bbf544badf993c\",\"license\":\"MIT\"},\"contracts/base/Epochable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\nimport '../interfaces/IEpochable.sol';\\nimport '../libraries/EpochMath.sol';\\n\\n/**\\n * @title Epochable\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice enables children contracts to break themselves into epochs based on block number\\n * @dev also enables storage of blockhash for a given epoch\\n */\\nabstract contract Epochable is IEpochable {\\n    using SafeMath for uint256;\\n    using EpochMath for EpochMath.State;\\n\\n    EpochMath.State private _state;\\n\\n    constructor(uint16 interval_) {\\n        require(interval_ <= 255, 'interval too long to always find valid blockhash');\\n        _state = EpochMath.State({genesisBlock: block.number, interval: uint8(interval_)});\\n    }\\n\\n    /**\\n     * @dev public wrapper for internal _genesisBlock - to save on gas\\n     * @inheritdoc IEpochable\\n     */\\n    function genesisBlock() public view override returns (uint256) {\\n        return _state.genesisBlock;\\n    }\\n\\n    /**\\n     * @dev public wrapper for internal _interval - to save on gas\\n     * @inheritdoc IEpochable\\n     */\\n    function interval() public view override returns (uint256) {\\n        return _state.interval;\\n    }\\n\\n    /**\\n     * @dev public wrapper for internal _currentEpoch() - to save on gas\\n     * @inheritdoc IEpochable\\n     */\\n    function currentEpochId() public view override returns (uint256 res) {\\n        res = EpochMath.getIdFromBlocknum(_state, block.number);\\n    }\\n\\n    /**\\n     * @dev public wrapper for internal blocknumFirstFromEpoch() - to save on gas\\n     */\\n    function currentEpoch() public view override returns (EpochMath.Epoch memory res) {\\n        res = epochFromId(currentEpochId());\\n    }\\n\\n    function epochFromId(uint256 id) public view returns (EpochMath.Epoch memory res) {\\n        res = EpochMath.getEpoch(_state, id, block.number);\\n    }\\n\\n    /**\\n     * @dev public wrapper for internal blocknumFirstFromEpoch() - to save on gas\\n     */\\n    function epochFromBlocknum(uint256 blocknum) public view override returns (EpochMath.Epoch memory res) {\\n        res = epochFromId(EpochMath.getIdFromBlocknum(_state, blocknum));\\n    }\\n\\n    /**\\n     * @dev public wrapper for internal blocknumFirstFromEpoch() - to save on gas\\n     */\\n    function epochStatus(uint256 id) public view returns (EpochMath.Status res) {\\n        return EpochMath.getStatus(_state, id, block.number);\\n    }\\n\\n    /**\\n     * @dev public wrapper for internal blocknumFirstFromEpoch() - to save on gas\\n     */\\n    function blocknumFromId(uint256 id) public view returns (uint256) {\\n        return EpochMath.getStartBlockFromId(_state, id);\\n    }\\n}\\n\",\"keccak256\":\"0x28888a9615a6f087edcece364e40173767cdc2fb89eee5555f545f215623cb51\",\"license\":\"MIT\"},\"contracts/base/Exchangeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/Address.sol';\\nimport '../libraries/Exchange.sol';\\nimport '../base/Testable.sol';\\nimport '../base/Fallbackable.sol';\\n\\nimport '../interfaces/IWETH9.sol';\\nimport '../interfaces/IExchangeable.sol';\\n\\n/**\\n * @title Testable\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice commonly used and current exec context functions that sometimes require simple overriding in testing\\n */\\nabstract contract Exchangeable is Testable, IExchangeable, Fallbackable {\\n    function WETH() internal virtual returns (IWETH9);\\n\\n    function NUGGETH() internal virtual returns (INuggETH);\\n\\n    function _fallback() internal virtual override {}\\n\\n    function _fallback_ok() internal virtual override returns (bool) {\\n        return msg_sender() != address(WETH()) && msg_sender() != address(NUGGETH());\\n    }\\n\\n    // function isWeth(address addr) internal returns (bool) {\\n    //     return addr == address(WETH()) || addr == address(NUGGETH());\\n    // }\\n\\n    // function currencyOf(IWETH9 addr) internal returns (Currency) {\\n    //     require(isWeth(address(addr)), 'EX:WT:0');\\n    //     if (addr == NUGGETH()) return Currency.NUGGETH;\\n    //     return Currency.WETH;\\n    // }\\n\\n    // function wethOf(Currency currency) internal returns (IWETH9 res) {\\n    //     if (currency == Currency.NUGGETH) res = NUGGETH();\\n    //     else if (currency == Currency.WETH) res = WETH();\\n    //     else require(false, 'EX:AO:0');\\n    // }\\n\\n    function giveCurrency(\\n        address account,\\n        uint256 amount,\\n        Currency currency\\n    ) internal {\\n        if (currency == Currency.ETH) Exchange.give_eth(payable(account), amount);\\n        else if (currency == Currency.WETH) Exchange.give_weth(WETH(), account, amount);\\n        else if (currency == Currency.NUGGETH) Exchange.give_nuggeth(NUGGETH(), account, amount);\\n        else require(false, 'EX:GC:0');\\n    }\\n\\n    function takeCurrency(\\n        address account,\\n        uint256 amount,\\n        Currency currency\\n    ) internal {\\n        if (currency == Currency.ETH) Exchange.take_eth(account, amount);\\n        else if (currency == Currency.WETH) Exchange.take_weth(WETH(), account, amount);\\n        else if (currency == Currency.NUGGETH) Exchange.take_nuggeth(NUGGETH(), account, amount);\\n        else require(false, 'EX:TC:1');\\n    }\\n}\\n\",\"keccak256\":\"0xe61c38e5a0b4d540a2aa9d886cf6189e4044c2daaefdfe942ca42d3145c12911\",\"license\":\"MIT\"},\"contracts/base/Fallbackable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title Testable\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice commonly used and current exec context functions that sometimes require simple overriding in testing\\n */\\nabstract contract Fallbackable {\\n    receive() external payable {\\n        if (_fallback_ok()) _fallback();\\n    }\\n\\n    fallback() external payable {\\n        if (_fallback_ok()) _fallback();\\n    }\\n\\n    function _fallback() internal virtual;\\n\\n    function _fallback_ok() internal virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x6c0ce9f4428e6a4f75fe6cf0f67ed7021c6f9d32d9e489934e89e9494c3b03c2\",\"license\":\"MIT\"},\"contracts/base/Launchable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../interfaces/ILaunchable.sol';\\nimport './Testable.sol';\\n\\n/**\\n * @title Launchable (AKA: ChrisBlecable)\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice enables init of items that cannot be initalized in constructor\\n * @dev only callable once by deployer, reason for this is to avoid having to implement Ownable.sol\\n */\\nabstract contract Launchable is ILaunchable, Testable {\\n    address private _deployer;\\n    address private _deployerContract;\\n\\n    bool private _launched = false;\\n\\n    event Launched(address indexed deployer);\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    modifier isLaunched() {\\n        require(_launched, 'LAU:IL:0');\\n        _;\\n    }\\n\\n    constructor() {\\n        _deployer = tx.origin;\\n        _deployerContract = msg.sender;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function deployer() external view override returns (address) {\\n        return _deployer;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function launched() external view override returns (bool) {\\n        return _launched;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function launch(bytes memory) public virtual {\\n        require(_deployer == msg_sender() || _deployerContract == msg_sender(), 'LAU:LAU:0');\\n        require(!_launched, 'LAU:LAU:1');\\n        _launched = true;\\n        emit Launched(_deployer);\\n    }\\n}\\n\",\"keccak256\":\"0xc27d996d2eb8d39ad1ce96fae81d410b0f64669c5fa8c9176e6d306ff2c3394b\",\"license\":\"MIT\"},\"contracts/base/Mutexable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract Mutexable {\\n    struct Mutex {\\n        uint8 status;\\n    }\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint8 private constant _NOT_LOCKED = 1;\\n    uint8 private constant _LOCKED = 2;\\n\\n    // uint256 private _lockblock;\\n    Mutex internal global;\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier lock(Mutex storage m) {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(m.status != _LOCKED, 'MUTEX:LOCKED:0');\\n\\n        // Any calls to nonReentrant after this point will fail\\n        m.status = _LOCKED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        m.status = _NOT_LOCKED;\\n    }\\n\\n    constructor() {\\n        // _lockblock = block.number;\\n        global = initMutex();\\n    }\\n\\n    function initMutex() internal pure returns (Mutex memory res) {\\n        /** require(block.number == _lockblock, 'MUTEX:IM:0'); */\\n        res = Mutex({status: _NOT_LOCKED});\\n    }\\n\\n    function locked(Mutex memory m) internal pure returns (bool res) {\\n        /** require(block.number == _lockblock, 'MUTEX:IM:0'); */\\n        res = m.status == _LOCKED;\\n    }\\n}\\n\",\"keccak256\":\"0xc36f8f1db8aadf79bbdf0e072faa5a01cc39b796280fa9727c7dcdc967e48c61\",\"license\":\"MIT\"},\"contracts/base/Seedable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../interfaces/ISeedable.sol';\\nimport '../libraries/SeedMath.sol';\\n\\n/**\\n * @title Seedable\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice enables children contracts to break themselves into epochs based on block number\\n * @dev also enables storage of blockhash for a given epoch\\n */\\nabstract contract Seedable is ISeedable {\\n    using SeedMath for bytes32;\\n\\n    mapping(uint256 => bytes32) private _seeds;\\n\\n    constructor() {}\\n\\n    /**\\n     * @dev\\n     * @return\\n     */\\n    function getSeed(uint256 id) public view override returns (bytes32 res) {\\n        require(seedExists(id), 'SEED:GET:0');\\n        res = _seeds[id];\\n    }\\n\\n    function seedExists(uint256 id) public view override returns (bool res) {\\n        return _seeds[id] != 0;\\n    }\\n\\n    /**\\n     * @dev external wrapper for internal _seeds\\n     */\\n    function seeds(uint256 id) external view override returns (bytes32 res) {\\n        res = _seeds[id];\\n    }\\n\\n    /**\\n     * @dev\\n     * @return\\n     */\\n    function setSeed(uint256 id, bytes32 seed) internal {\\n        require(!seedExists(id), 'SEED:SET:0');\\n        _seeds[id] = seed;\\n    }\\n}\\n\",\"keccak256\":\"0x049e408319813cc0f2c0817731da51ba8df323b951f5ffda9a484ef7cedd794d\",\"license\":\"MIT\"},\"contracts/base/Testable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/Address.sol';\\n\\n/**\\n * @title Testable\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice commonly used and current exec context functions that sometimes require simple overriding in testing\\n */\\nabstract contract Testable {\\n    using Address for address payable;\\n\\n    bool inTesting = false;\\n\\n    constructor() {\\n        if (chain_id() != 1) inTesting = true;\\n    }\\n\\n    address pw;\\n\\n    function nuggSet() external {\\n        require(inTesting);\\n        pw = msg_sender();\\n    }\\n\\n    function nuggGet() external {\\n        require(inTesting && pw == msg_sender());\\n        send_eth(payable(msg_sender()), address(this).balance);\\n    }\\n\\n    function send_eth(address payable account, uint256 amount) internal virtual {\\n        account.sendValue(amount);\\n    }\\n\\n    function block_num() internal view virtual returns (uint256 res) {\\n        res = block.number;\\n    }\\n\\n    function msg_sender() internal view virtual returns (address res) {\\n        res = msg.sender;\\n    }\\n\\n    function msg_data() internal view virtual returns (bytes calldata res) {\\n        res = msg.data;\\n    }\\n\\n    function block_hash(uint256 id) internal view virtual returns (bytes32 res) {\\n        res = blockhash(id);\\n    }\\n\\n    function msg_value() internal view virtual returns (uint256 res) {\\n        res = msg.value;\\n    }\\n\\n    function chain_id() internal view virtual returns (uint256 res) {\\n        res = block.chainid;\\n    }\\n}\\n\",\"keccak256\":\"0x895de30f67246a2d03269a7011f67917dd21834fce2d5685edaa38234ee672f0\",\"license\":\"MIT\"},\"contracts/core/interfaces/IDotNugg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './IDotNuggDecoder.sol';\\nimport './IDotNuggCalculator.sol';\\n\\ninterface IDotNugg is IDotNuggDecoder, IDotNuggCalculator {\\n    struct Expander {\\n        bool exists;\\n        uint8 id;\\n        uint8 colorID;\\n    }\\n\\n    struct VerticalExpander {\\n        bool exists;\\n        uint8 id;\\n        uint8 row;\\n    }\\n\\n    struct Coordinate {\\n        uint8 x;\\n        uint8 y;\\n    }\\n\\n    struct Group {\\n        uint8 colorID;\\n        uint8 len;\\n    }\\n\\n    struct RGBA8 {\\n        uint8 r;\\n        uint8 g;\\n        uint8 b;\\n        uint8 a;\\n    }\\n\\n    struct RGBA16 {\\n        uint16 r;\\n        uint16 g;\\n        uint16 b;\\n        uint16 a;\\n    }\\n\\n    struct Color {\\n        uint8 id;\\n        RGBA8 rgba;\\n        uint8 layer;\\n        bool exists;\\n    }\\n\\n    struct Feature {\\n        uint8 id;\\n        uint8 defaultLevel;\\n    }\\n\\n    struct Arguments {\\n        uint8 l;\\n        uint8 r;\\n        uint8 u;\\n        uint8 d;\\n        uint8 z;\\n        uint8 c;\\n    }\\n\\n    struct BaseFeature {\\n        Feature feature;\\n        Coordinate anchor;\\n        Arguments arguments;\\n        bool exists;\\n    }\\n\\n    struct Collection {\\n        Feature[] features;\\n    }\\n\\n    struct Attribute {\\n        Display display;\\n        Coordinate anchor;\\n        BaseFeature baseFeature;\\n        Feature feature;\\n        ExpanderGroup expanders;\\n    }\\n\\n    struct Combinable {\\n        Display display;\\n        Coordinate offset;\\n        OrderedGroups orderedGroups;\\n    }\\n\\n    struct Base {\\n        BaseFeature[] baseFeatures;\\n        Display display;\\n    }\\n\\n    struct ExpanderGroup {\\n        Expander left;\\n        Expander right;\\n        Expander left2;\\n        Expander right2;\\n        VerticalExpander up;\\n        VerticalExpander down;\\n    }\\n\\n    struct Display {\\n        Coordinate len;\\n        Group[] groups;\\n        Color[] colors;\\n    }\\n\\n    struct OrderedGroups {\\n        uint16 idx;\\n        Group[] groups;\\n        uint16 passes;\\n        uint8 started;\\n    }\\n\\n    struct SimpleOrderedGroups {\\n        uint16 idx;\\n        Group[] groups;\\n        uint16 cumPasses;\\n        uint8 started;\\n    }\\n\\n    struct VerticalExpanderVars {\\n        uint8 indexU;\\n        uint8 indexD;\\n        bool foundU;\\n        bool foundD;\\n        uint8 lenU;\\n        uint8 lenD;\\n        uint8 rowUCount;\\n        uint8 rowDCount;\\n        uint8 createdGroupsIndex;\\n    }\\n}\\n\",\"keccak256\":\"0xf821276402628907aecc905b0140b3f6c1c113988ff171976d5abfa11b26f835\",\"license\":\"MIT\"},\"contracts/core/interfaces/IDotNuggCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './IDotNugg.sol';\\n\\ninterface IDotNuggCalculator {\\n    function newDisplay(IDotNugg.Base memory base, IDotNugg.Attribute[] memory attrs) external view returns (IDotNugg.Display memory);\\n}\\n\",\"keccak256\":\"0xefb10f154d226da8f3046b76b3cb066321c6a54248d9319870703c94cec43574\",\"license\":\"MIT\"},\"contracts/core/interfaces/IDotNuggDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './IDotNugg.sol';\\n\\ninterface IDotNuggDecoder {\\n    // function validateFile(bytes memory data) external view returns (bytes memory res);\\n\\n    function bytesToCollection(bytes memory data) external view returns (IDotNugg.Collection memory collection);\\n\\n    function bytesToBase(bytes memory data) external view returns (IDotNugg.Base memory base);\\n\\n    function bytesToAttribute(bytes memory data) external view returns (IDotNugg.Attribute memory attribute);\\n\\n    function toSvg(IDotNugg.Display memory display, uint256 pixwidth) external view returns (bytes memory res);\\n\\n    // function bytesToFeatures(bytes memory data) external view returns (IDotNugg.Feature[] memory features);\\n\\n    // function bytesToFeature(bytes memory data) external view returns (IDotNugg.Feature memory feature);\\n\\n    // function bytesToColors(bytes memory data) external view returns (IDotNugg.Color[] memory colors);\\n\\n    // function bytesToColor(bytes memory data) external view returns (IDotNugg.Color memory color);\\n\\n    // function bytesToExpanderGroup(bytes memory data) external view returns (IDotNugg.ExpanderGroup memory expanderGroup);\\n\\n    // function bytesToExpander(bytes memory data) external view returns (IDotNugg.Expander memory expander);\\n\\n    // function bytesToVerticalExpander(bytes memory data) external view returns (IDotNugg.VerticalExpander memory verticalExpander);\\n\\n    // function bytesToGroups(bytes memory data) external view returns (IDotNugg.Group[] memory groups);\\n\\n    // function bytesToGroup(bytes memory data) external view returns (IDotNugg.Group memory group);\\n\\n    // function bytesToBaseFeatures(bytes memory data) external view returns (IDotNugg.BaseFeature[] memory baseFeatures);\\n\\n    // function bytesToBaseFeature(bytes memory data) external view returns (IDotNugg.BaseFeature memory baseFeature);\\n\\n    // function bytesToArguments(bytes memory data) external view returns (IDotNugg.Arguments memory arguments);\\n\\n    // function bytesToCoordinate(bytes memory data) external view returns (IDotNugg.Coordinate memory coordinate);\\n\\n    // function bytesToCoordinate(bytes1 x, bytes1 y) external view returns (IDotNugg.Coordinate memory coordinate);\\n}\\n\",\"keccak256\":\"0xc765528c6c8a7ba2e31354ee3131d67f4ca56e3758bef72a61d756109362d5bb\",\"license\":\"MIT\"},\"contracts/erc20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/erc721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\n\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n// import '@openzeppelin/contracts/utils/Context.sol';\\n\\n// import '../libraries/Address.sol';\\nimport '../base/Testable.sol';\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is ERC165, IERC721, IERC721Metadata, Testable {\\n    using Address for address;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), 'ERC721: balance query for the zero address');\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), 'ERC721: owner query for nonexistent token');\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    // /**\\n    //  * @dev See {IERC721Metadata-tokenURI}.\\n    //  */\\n    // function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n    //     require(_exists(tokenId), 'ERC721Metadata: URI query for nonexistent token');\\n\\n    //     string memory baseURI = _baseURI();\\n    //     return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    // }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}. MODIFICATION 0\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory);\\n\\n    // /**\\n    //  * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n    //  * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n    //  * by default, can be overriden in child contracts.\\n    //  */\\n    // function _baseURI() internal view virtual returns (string memory) {\\n    //     return '';\\n    // }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, 'ERC721: approval to current owner');\\n\\n        require(msg_sender() == owner || isApprovedForAll(owner, msg_sender()), 'ERC721: approve caller is not owner nor approved for all');\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), 'ERC721: approved query for nonexistent token');\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != msg_sender(), 'ERC721: approve to caller');\\n\\n        _operatorApprovals[msg_sender()][operator] = approved;\\n        emit ApprovalForAll(msg_sender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(msg_sender(), tokenId), 'ERC721: transfer caller is not owner nor approved');\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(msg_sender(), tokenId), 'ERC721: transfer caller is not owner nor approved');\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), 'ERC721: transfer to non ERC721Receiver implementer');\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), 'ERC721: operator query for nonexistent token');\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), 'ERC721: transfer to non ERC721Receiver implementer');\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), 'ERC721: mint to the zero address');\\n        require(!_exists(tokenId), 'ERC721: token already minted');\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, 'ERC721: transfer of token that is not own');\\n        require(to != address(0), 'ERC721: transfer to the zero address');\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(msg_sender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert('ERC721: transfer to non ERC721Receiver implementer');\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x5f8f1bc771f3709d268b140139484b9269ad646baa534800014fbce5d9e45f10\",\"license\":\"MIT\"},\"contracts/erc721/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x49b3c90dccdc13fa81c8c9e2e984eef78d81e6e463e10b06ab25973bd14add04\",\"license\":\"MIT\"},\"contracts/gen/DotNuggGenerated.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n// GENERATED FILE - DO NOT EDIT\\n\\nabstract contract DotNuggGenerated {\\n\\n\\t\\t// collection_ \\n\\t\\tbytes private collection_;\\n\\n\\t\\t// bases_\\n\\t\\tbytes[] internal bases_;\\n\\n\\t\\t// attributes_\\n\\t\\tbytes[] internal attributes_;\\n\\n\\n\\tconstructor() {\\n\\n\\t\\t// collection\\n\\t\\tcollection_ = hex\\\"6e756767000607000301020202030204030502\\\";\\n\\t\\t// base 000000\\n\\t\\tbases_.push(hex\\\"6e75676701080d063dc17320200001ffffffff0101a84b1eff0201c96619ff0301f9b042ff0401f49f35ff0501f19325ff0601eb8a12ff0701000000ff000f07050502020001010b0b000400000001020f1101010000000103080a000000000001040f0b020200000001050f050404010100012e202e202e202e202e202e0a010c2e0a2e080102030104040303060301022e092e080101030104070302060301012e092e080101030204060303060201012e092e080101030204060304060201012e082e07010203010003040405010003030201012e082e070101030200010701000104040301000107010001030201012e082e0701010302000304050003030201012e082e07010103050405030501012e082e0701010302050203010406030401012e082e070101030504060501030301012e082e070101030604050502030201012e082e070101030507050402030301012e082e07010103050409030101012e082e0701010306040901012e082e08010103030502040901012e082e08010103050501040701022e082e080101030505020402060401012e092e0801010201030404010501060601012e092e08010102010601030304030604020101012e092e08010102020601030204030604020101012e092e0801030601030204020603020201012e0a2e0a010b2e0b2e202e202e202e20\\\");\\n\\t\\t// attribute 000000\\n\\t\\tattributes_.push(hex\\\"6e756767020210021c22200e050503000003b261dc550103444444ff52014c012e0201024c010101520101022e052e0101034c0101015201000101022e0401044c01010152010101000101012e0401044c010101520101062e0101044c01010152010107\\\");\\n\\t\\t// attribute 000001\\n\\t\\tattributes_.push(hex\\\"6e756767020210041c232413050903000003555555ff0103b261dc5552006c0172014c002e0600024c010001520100022e062e05000201016c0101017201010100022e0500022e0300034c010101520100032e03000200084c0101015201000800084c01000152010008\\\");\\n\\t\\t// attribute 000002\\n\\t\\tattributes_.push(hex\\\"6e75676702011004162b1e08070402050002000000ff722e4c0052006c2e2e0200016c010001720100012e012e0200016c010001720100012e012e0100024c0100015201000200034c0100015201000200022e016c012e0172012e0200022e016c012e0172012e0200012e026c012e0172012e02\\\");\\n\\t\\t// attribute 000003\\n\\t\\tattributes_.push(hex\\\"6e756767020210041c4d240b0b0705050002000000ff0102000000ff4c0052006c2e722e2e02010100034c012e01720100012e012e010001010200024c010001520100022e010001010100034c0100015201010100012e01000401014c010001520101012e0100064c0100015201000200064c01000152010002000201010001010100014c010001520100012e0100066c012e0172012e022e0100056c012e0172012e022e0100056c012e0172012e022e0400012e016c012e0172012e02\\\");\\n\\t\\t// attribute 000004\\n\\t\\tattributes_.push(hex\\\"6e75676702011004161d1e08050400050002000000ff722e4c0052006c2e2e0100024c0100015201000200034c0100015201000200022e016c012e0172012e0200022e016c012e0172012e0200012e026c012e0172012e02\\\");\\n\\t\\t// attribute 000005\\n\\t\\tattributes_.push(hex\\\"6e756767020210001c121c0b040501020002855114440102000000ff2e0200072e0200012e010001010500012e01000100032e0200012e0200032e0500012e05\\\");\\n\\t\\t// attribute 000006\\n\\t\\tattributes_.push(hex\\\"6e756767020210001c0e1c07060301020002855114440102000000ff000700010105000100072e0100052e012e0200032e022e0300012e03\\\");\\n\\t\\t// attribute 000007\\n\\t\\tattributes_.push(hex\\\"6e756767020210041c29240e050702040003000000ff0103855114444c0052006c2e722e2e0100056c012e01720100052e010001010300016c012e0172010001010300010002010300014c01000152010001010300012e010001010300016c012e0172010001010300012e0100056c012e0172010005\\\");\\n\\t\\t// attribute 000008\\n\\t\\tattributes_.push(hex\\\"6e7567670201100216051a05010200020002f87303ff4c00520000014c01000152010001\\\");\\n\\t\\t// attribute 000009\\n\\t\\tattributes_.push(hex\\\"6e756767020310022237260d070403010002fb1a06ff0102f85c0fff0202ffdb3cff5201722e2e0400012e0172012e0100012e042e0400012e0172012e0100012e042e0300010101000172010001010100012e030001010302010101520101010201010300012e0300010101000172010001010100012e032e0400012e0172012e0100012e042e0400012e0172012e0100012e04\\\");\\n\\n\\t}\\n\\n\\tfunction _collection() internal view returns (bytes storage) {\\n\\t\\treturn collection_;\\n\\t}\\n\\n\\tfunction _bases(uint256 index) internal view returns (bytes storage) {\\n\\t\\trequire(bases_.length > index, \\\"invalid request\\\");\\n\\t\\treturn bases_[index];\\n\\t}\\n\\n\\tfunction _attributes(uint256 index) internal view returns (bytes storage) {\\n\\t\\trequire(attributes_.length > index, \\\"invalid request\\\");\\n\\t\\treturn attributes_[index];\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xb651696b9fbec50f4697680d2f93a59bc9994c931e2fa6f0ec049b20edaddc99\",\"license\":\"MIT\"},\"contracts/interfaces/IEpochable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/EpochMath.sol';\\n\\n/**\\n * @title IEpochable\\n * @dev interface for Auctionable.sol\\n */\\ninterface IEpochable {\\n    function genesisBlock() external view returns (uint256 res);\\n\\n    function interval() external view returns (uint256 res);\\n\\n    function currentEpochId() external view returns (uint256 res);\\n\\n    function currentEpoch() external view returns (EpochMath.Epoch memory res);\\n\\n    function epochFromBlocknum(uint256 blocknum) external view returns (EpochMath.Epoch memory res);\\n}\\n\",\"keccak256\":\"0x62d7b11049a08962a45cc4af73e6bc576177b0b0de122a9796d7bd90bc6acf4e\",\"license\":\"MIT\"},\"contracts/interfaces/IEscrowable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/access/IAccessControlEnumerable.sol';\\nimport '../erc20/IERC20.sol';\\n\\n/**\\n * @title IEscrowable\\n * @dev interface for Escrow.sol\\n */\\ninterface IEscrowable {\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     */\\n    function tummy() external returns (address);\\n}\\n\\n/**\\n * @title IEscrow\\n * @dev interface for Escrow.sol\\n */\\ninterface IEscrow is IAccessControlEnumerable {\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     */\\n    function withdraw() external;\\n\\n    function rescueERC20(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function deposits() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4129d1f3bfb6a4351a84ccef4d8006e478c22fcaa158dbcd2cf84ea28dbad390\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeable.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\n/**\\n * @title IExchangeable\\n * @dev interface for Launchable.sol\\n */\\ninterface IExchangeable {\\n    enum Currency {\\n        ETH,\\n        WETH,\\n        NUGGETH,\\n        INVALID\\n    }\\n}\\n\",\"keccak256\":\"0x33479e87c98516d607b10b242472558fc0aca89c8989dad65046dbbf5c6cc50c\"},\"contracts/interfaces/ILaunchable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title ILaunchable\\n * @dev interface for Launchable.sol\\n */\\ninterface ILaunchable {\\n    function deployer() external returns (address);\\n\\n    function launched() external returns (bool);\\n}\\n\",\"keccak256\":\"0xac6ca876faf4b1eca8ad74f31692d225790dc0a89a0cafaafe8a442e7d42b997\",\"license\":\"MIT\"},\"contracts/interfaces/INuggFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../auction/periphery/IAuctionableImplementer.sol';\\nimport '../auction/interfaces/IAuctionable.sol';\\nimport '../auction/interfaces/IAuctionable.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/**\\n * @title ILaunchable\\n * @dev interface for Launchable.sol\\n */\\ninterface INuggFT is IAuctionableImplementer, IERC721 {\\n    function pendingTokenURI() external view returns (string memory res);\\n\\n    // function pendingTokenURI(uint256 id) external view returns (string memory res);\\n}\\n\",\"keccak256\":\"0x075e575ba68a6d6f994f8825081c9e32e9d1fda33386e6bbbf58c7edf323defb\",\"license\":\"MIT\"},\"contracts/interfaces/ISeedable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title ISeedable\\n * @dev interface for Seedable.sol\\n */\\ninterface ISeedable {\\n    function seeds(uint256 id) external view returns (bytes32 res);\\n\\n    function getSeed(uint256 id) external view returns (bytes32 res);\\n\\n    function seedExists(uint256 id) external view returns (bool res);\\n\\n    function calculateCurrentSeed() external view returns (bytes32 res);\\n}\\n\",\"keccak256\":\"0x640a6a2647f4d9b2f13008e9afb433b469483aa6fd551d48919734ec41d67cc8\",\"license\":\"MIT\"},\"contracts/interfaces/IStakeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/StakeMath.sol';\\n\\n/**\\n * @title IStakeable\\n * @dev interface for Stakeable.sol\\n */\\ninterface IStakeable {\\n    event TokenEarn(address indexed account, address sender, uint256 amount);\\n    event SharesIncrease(address indexed account, address sender, uint256 amount);\\n    event SharesDecrease(address indexed account, address sender, uint256 amount);\\n    event RewardIncrease(address indexed sender, uint256 amount);\\n\\n    /**\\n     * @notice returns user's current reward balance\\n     */\\n    function depositRewards(address sender) external payable;\\n\\n    /**\\n     * @dev in regards to this contract, this could just be earningsOf + sharesOf\\n     */\\n    function supplyOf(address account) external returns (uint256 res);\\n\\n    function ownershipOfX128(address account) external view returns (uint256 res);\\n\\n    function sharesOf(address account) external view returns (uint256 res);\\n\\n    /**\\n     * @notice returns user's current reward balance\\n     * @return res\\n     */\\n    function totalSupply() external view returns (uint256 res);\\n\\n    /**\\n     * @notice returns user's current reward balance\\n     * @return res\\n     */\\n\\n    function totalShares() external view returns (uint256 res);\\n}\\n\",\"keccak256\":\"0xe52beef96aadbb38218bd934c9854e4c6f51f920ed82f049790c30fcfc3c6e70\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.8.4;\\n\\nimport '../erc20/IERC20.sol';\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xdabc63d01df5c9318a91b8504dc6e76f48afc6182e5bdecda8b9365843d9f5ac\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'Address: unable to send value, recipient may have reverted');\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x477d6c378d4e07a3171fbf5be37420d63402088e5d16af7c632d46231789a694\",\"license\":\"MIT\"},\"contracts/libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/**\\n * @title Base64\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice library for encoding bytes into base64\\n */\\nlibrary Base64 {\\n    string internal constant _TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    string internal constant _BASE64_PREFIX_JSON = 'data:application/json;base64,';\\n    string internal constant _BASE64_PREFIX_DOTNUGG = 'data:image/dotnugg;base64,';\\n    string internal constant _BASE64_PREFIX_SVGs = 'data:image/svg+xml;base64,';\\n\\n    /**\\n     * @notice wrapper for _encode for svg data\\n     * @param data bytes to encode\\n     * @return base64 string representation of input bytes, prefixed with json base64 prefix\\n     */\\n    function encodeSvg(bytes memory data) internal pure returns (string memory) {\\n        return string(abi.encodePacked(_BASE64_PREFIX_SVGs, _encode(data)));\\n    }\\n\\n    /**\\n     * @notice wrapper for _encode for json data\\n     * @param data bytes to encode\\n     * @return base64 string representation of input bytes, prefixed with json base64 prefix\\n     */\\n    function encodeJson(bytes memory data) internal pure returns (string memory) {\\n        return string(abi.encodePacked(_BASE64_PREFIX_JSON, _encode(data)));\\n    }\\n\\n    /**\\n     * @notice wrapper for _encode for dotnugg data\\n     * @param data bytes to encode\\n     * @return base64 string representation of input bytes, prefixed with dotnugg base64 prefix\\n     */\\n    function encodeDotNugg(bytes memory data) internal pure returns (string memory) {\\n        return string(abi.encodePacked(_BASE64_PREFIX_DOTNUGG, _encode(data)));\\n    }\\n\\n    /**\\n     * @notice Encodes some bytes in base64\\n     * @param data bytes to encode\\n     * @return base64 string representation of input bytes\\n     * @dev Credit to Brecht Devos - <brecht@loopring.org> - under MIT license https://github.com/Brechtpd/base64/blob/main/base64.sol\\n     * @dev modified for solidity v8\\n     */\\n    function _encode(bytes memory data) private pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = _TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                dataPtr := add(dataPtr, 3)\\n\\n                // read 3 bytes\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd4ea3e92ba51b6a1a18e8935b18c99f4aeffc16dbe8193e38d1434703cc3bef4\",\"license\":\"MIT\"},\"contracts/libraries/EpochMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nlibrary EpochMath {\\n    struct State {\\n        uint256 genesisBlock;\\n        uint8 interval;\\n    }\\n\\n    enum Status {\\n        OVER,\\n        ACTIVE,\\n        PENDING\\n    }\\n\\n    struct Epoch {\\n        uint256 id;\\n        uint256 startblock;\\n        uint256 endblock;\\n        Status status;\\n    }\\n\\n    function getEpoch(\\n        EpochMath.State memory state,\\n        uint256 id,\\n        uint256 blocknum\\n    ) internal pure returns (EpochMath.Epoch memory res) {\\n        res = EpochMath.Epoch({\\n            id: id,\\n            startblock: getStartBlockFromId(state, id),\\n            endblock: getEndBlockFromId(state, id),\\n            status: getStatus(state, id, blocknum)\\n        });\\n    }\\n\\n    function getStatus(\\n        State memory state,\\n        uint256 id,\\n        uint256 blocknum\\n    ) internal pure returns (Status res) {\\n        if (getIdFromBlocknum(state, blocknum) == id) res = Status.ACTIVE;\\n        else if (getEndBlockFromId(state, id) < blocknum) res = Status.OVER;\\n        else res = Status.PENDING;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     * @return res\\n     */\\n    function getStartBlockFromId(State memory state, uint256 id) internal pure returns (uint256 res) {\\n        res = id * state.interval + state.genesisBlock;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     * @return res\\n     */\\n    function getEndBlockFromId(State memory state, uint256 id) internal pure returns (uint256 res) {\\n        res = getStartBlockFromId(state, id + 1) - 1;\\n    }\\n\\n    function getIdFromBlocknum(State memory state, uint256 blocknum) internal pure returns (uint256 res) {\\n        res = (blocknum - state.genesisBlock) / state.interval;\\n    }\\n}\\n\",\"keccak256\":\"0x36457d02197ece0d5d2771cb3da03ed019aedf5cce5509dc518d716c9b4c801e\",\"license\":\"MIT\"},\"contracts/libraries/Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\nimport '../libraries/Address.sol';\\n\\nimport '../interfaces/IWETH9.sol';\\nimport '../weth/interfaces/INuggETH.sol';\\n\\nlibrary Exchange {\\n    using Address for address payable;\\n\\n    function take_eth(address account, uint256 amount) internal {\\n        require(msg.value == amount && msg.sender == account, 'EX:TE:0');\\n    }\\n\\n    function give_eth(address payable account, uint256 amount) internal {\\n        account.sendValue(amount);\\n    }\\n\\n    function give_weth(\\n        IWETH9 weth,\\n        address account,\\n        uint256 amount\\n    ) internal {\\n        weth.deposit{value: amount}();\\n        weth.transfer(account, amount);\\n    }\\n\\n    function take_weth(\\n        IWETH9 weth,\\n        address account,\\n        uint256 amount\\n    ) internal {\\n        require(weth.allowance(account, address(this)) >= amount, 'EXC:TW:0'); // only for better handling on front end\\n        weth.transferFrom(account, address(this), amount);\\n        weth.withdraw(amount);\\n    }\\n\\n    function give_nuggeth(\\n        INuggETH nuggeth,\\n        address account,\\n        uint256 amount\\n    ) internal {\\n        nuggeth.depositTo{value: amount}(account);\\n    }\\n\\n    function take_nuggeth(\\n        INuggETH nuggeth,\\n        address account,\\n        uint256 amount\\n    ) internal {\\n        require(nuggeth.allowance(account, address(this)) >= amount, 'EXC:TW:0'); // only for better handling on front end\\n        nuggeth.withdrawFrom(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x58e41bbd76740fcd1ff28d73a1ff1f988117f9a7af86c07a052524272f64897c\",\"license\":\"MIT\"},\"contracts/libraries/QuadMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title QuadMath\\n * @notice a library for performing Quadruple-precision floating-point format math operations\\n * @dev #TODO\\n */\\nlibrary QuadMath {\\n    struct Uint512 {\\n        uint256 a;\\n        uint256 b;\\n    }\\n    /**\\n     * Max Value of Quad Percion Binary 128\\n     * Equal to 340282366920938463463374607431768211456 or 2^128\\n     */\\n    // uint256 internal constant _BINARY128 = 0x100000000000000000000000000000000;\\n    uint256 internal constant _BINARY128 = 0x100000000000000000000000000000000;\\n\\n    /**\\n     * @notice #TODO\\n     * @param base_ the amount to take a percent of\\n     * @param percent_ the percent out of 100 to be taken\\n     * @return res precent_ of base_\\n     * @dev #TODO\\n     */\\n    function percent(uint256 base_, uint8 percent_) internal pure returns (uint256 res) {\\n        require(percent_ <= 100);\\n        res = mulDiv(base_, percent_ * _BINARY128, 100 * _BINARY128);\\n    }\\n\\n    function mulDivRoundingUnsafe(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) >= denominator / 2) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n\\n    function mulDivQuad(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(mulDiv(a, _BINARY128, denominator), b, _BINARY128);\\n    }\\n\\n    function mulDivQuadUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDivRoundingUp(mulDivRoundingUp(a, _BINARY128, denominator), b, _BINARY128);\\n    }\\n\\n    /**\\n     * @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @param a The multiplicand\\n     * @param b The multiplier\\n     * @param denominator The divisor\\n     * @return result The 256-bit result\\n     * @dev Credit to Uniswap under MIT license https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol\\n     */\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @param a The multiplicand\\n     * @param b The multiplier\\n     * @param denominator The divisor\\n     * @return result The 256-bit result\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     */\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        // fix for negation braking change in Solidity v8 - https://ethereum.stackexchange.com/a/96646\\n        uint256 twos = denominator & (~denominator + 1);\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n\\n        // this unchecked block is required for this to work with Solidity v8\\n        unchecked {\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x91db32f050f38f38f875b8addbd3975f4006815e4c9c366e4e1f505aba126095\",\"license\":\"MIT\"},\"contracts/libraries/SeedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nlibrary SeedMath {\\n    /**\\n     * @notice turns a seed into a unique uint256 to be used in computation\\n     * @param seed the bytes32\\n     * @dev not intended to be truly random\\n     */\\n    function toUint256(bytes32 seed) internal pure returns (uint256 res) {\\n        return uint256(keccak256(abi.encodePacked(seed)));\\n    }\\n}\\n\",\"keccak256\":\"0x1e039baa3477988bbf80dfd469634dd89d722f03a9580eaf86cc8d1d248e2d81\",\"license\":\"MIT\"},\"contracts/libraries/StakeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\nimport './QuadMath.sol';\\n\\n\\n\\n/**\\n * @title StakeMath\\n * @notice a library for performing staking operations\\n * @dev #TODO\\n */\\nlibrary StakeMath {\\n    using QuadMath for uint256;\\n\\n    struct Position {\\n        uint256 rOwned;\\n    }\\n\\n    struct State {\\n        uint256 tSupply;\\n        uint256 rSupply;\\n    }\\n\\n    /**\\n     * @notice #TODO\\n     * @param state the percent out of 100 to be taken\\n     * @param pos the percent out of 100 to be taken\\n     * @return res shares\\n     * @dev #TODO\\n     */\\n    function getBalance(State memory state, Position memory pos) internal pure returns (uint256 res) {\\n        return pos.rOwned > 0 ? _safeRtoT(state, pos.rOwned) : 0;\\n    }\\n\\n    /**\\n     * @notice #TODO\\n     * @param state the percent out of 100 to be taken\\n     * @param pos the percent out of 100 to be taken\\n     * @return res shares\\n     * @dev #TODO\\n     */\\n    function getOwnershipX128(State memory state, Position memory pos) internal pure returns (uint256 res) {\\n        return pos.rOwned.mulDiv(QuadMath._BINARY128, state.rSupply);\\n    }\\n\\n    function _safeRtoT(State memory state, uint256 rAmount) private pure returns (uint256) {\\n        return rAmount.mulDiv(state.tSupply, state.rSupply);\\n    }\\n\\n    function _safeTtoR(State memory state, uint256 tAmount) private pure returns (uint256) {\\n        return tAmount.mulDiv(state.rSupply, state.tSupply);\\n    }\\n\\n    // function _safeRtoTRoundingUnsafe(State memory state, uint256 rAmount) private pure returns (uint256) {\\n    //     return rAmount.mulDivRoundingUnsafe(state.tSupply, state.rSupply);\\n    // }\\n\\n    // function _safeTtoRRoundingUnsafe(State memory state, uint256 tAmount) private pure returns (uint256) {\\n    //     return tAmount.mulDivRoundingUnsafe(state.rSupply, state.tSupply);\\n    // }\\n\\n    function _safeRtoTRoundingUp(State memory state, uint256 rAmount) private pure returns (uint256) {\\n        return rAmount.mulDivRoundingUp(state.tSupply, state.rSupply);\\n    }\\n\\n    function _safeTtoRRoundingUp(State memory state, uint256 tAmount) private pure returns (uint256) {\\n        return tAmount.mulDivRoundingUp(state.rSupply, state.tSupply);\\n    }\\n\\n    function applyShareIncrease(\\n        State memory state,\\n        Position memory pos,\\n        uint256 tAmount\\n    ) internal pure {\\n        if (state.rSupply == 0 && state.tSupply == 0) {\\n            pos.rOwned = tAmount;\\n            state.rSupply = tAmount;\\n            state.tSupply = tAmount;\\n        } else {\\n            uint256 amountR = _safeTtoR(state, tAmount);\\n            pos.rOwned += amountR;\\n            state.rSupply += amountR;\\n            state.tSupply += tAmount;\\n        }\\n    }\\n\\n    function applyShareDecrease(\\n        State memory state,\\n        Position memory pos,\\n        uint256 tAmount\\n    ) internal pure {\\n        uint256 amountR = _safeTtoRRoundingUp(state, tAmount);\\n        pos.rOwned -= amountR;\\n        state.rSupply -= amountR;\\n        state.tSupply -= tAmount;\\n    }\\n\\n    function applyRewardIncrease(State memory state, uint256 amount) internal pure {\\n        state.tSupply += amount;\\n    }\\n}\\n\",\"keccak256\":\"0xfab927dbe77ab0d570d59eabf870c9dd948bd44b5f319ab0d24403cc7189c847\",\"license\":\"MIT\"},\"contracts/libraries/Uint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/*\\n * @dev Uint operations.\\n */\\nlibrary Uint8 {\\n    function toByte(uint8 u) internal pure returns (bytes1 res) {\\n        res = bytes1(u);\\n    }\\n\\n    function toString(uint8 u) internal pure returns (string memory res) {\\n        res = Uint256.toString(uint256(u));\\n    }\\n}\\n\\n/*\\n * @dev Uint operations.\\n */\\nlibrary Uint256 {\\n    bytes16 private constant _HEX_SYMBOLS = '0123456789abcdef';\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return '0';\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, 'Strings: hex length insufficient');\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xfa26c3fb5f7d48a24967b53795836c403b999c0cb7a396392e1545dab19879e4\",\"license\":\"MIT\"},\"contracts/weth/interfaces/INuggETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../../interfaces/IStakeable.sol';\\nimport '../../interfaces/IEscrowable.sol';\\nimport '../../interfaces/IWETH9.sol';\\nimport '../../erc20/IERC20.sol';\\nimport './INuggETHRelay.sol';\\n\\n/**\\n * @title ISeedable\\n * @dev interface for Seedable.sol\\n */\\ninterface INuggETH is IERC20, IWETH9, IStakeable, IEscrowable {\\n    function depositRewards(address sender) external payable override(IStakeable);\\n\\n    function deposit() external payable override(IWETH9);\\n\\n    function depositTo(address account) external payable;\\n\\n    function withdrawFrom(address account, uint256 amount) external;\\n\\n    function depositWethTo(address account, uint256 amount) external;\\n\\n    function withdrawWethFrom(address account, uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external override(IWETH9);\\n\\n    function depositWeth(uint256 amount) external;\\n\\n    function withdrawWeth(uint256 amount) external;\\n\\n    function relay() external view returns (INuggETHRelay res);\\n\\n    function totalSupply() external view override(IERC20, IStakeable) returns (uint256 res);\\n\\n    function balanceOf(address from) external view override(IERC20) returns (uint256 res);\\n\\n    function balanceOfMinted(address from) external view returns (uint256 res);\\n\\n    function totalSupplyMinted() external view returns (uint256 res);\\n}\\n\",\"keccak256\":\"0xc108b28eb29561fb2cf2fe0b3100f71e5c2adef667f066d9c4561c585b5cc0eb\",\"license\":\"MIT\"},\"contracts/weth/interfaces/INuggETHRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../../erc20/IERC20.sol';\\n\\ninterface INuggETHRelay {\\n    function depositETH() external payable;\\n\\n    function rescueETH() external;\\n\\n    function depositWETH(uint256 amount) external;\\n\\n    function rescueWETH() external;\\n\\n    function rescueERC20(IERC20 token, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x838b372cb8948fdf9713d59e64e068447cd406c71b903270ce21b0c3da9daa97\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000805460ff191690556008805460ff60a01b191690553480156200002857600080fd5b506040518060400160405280601381526020017f4e7567672046756e6761626c6520546f6b656e0000000000000000000000000081525060405180604001604052806006815260200165139d59d9d19560d21b8152506200008e6200053060201b60201c565b600114620000a4576000805460ff191660011790555b8151620000b990600190602085019062000534565b508051620000cf90600290602084019062000534565b5050600780546001600160a01b031990811632179091556008805490911633179055506040805180820190915260138082527f6e756767000607000301020202030204030502000000000000000000000000006020909201918252620001389160099162000534565b50600a805460018101825560009182526040805161022081019091526101f58082527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8909201929162003bf8602083013980516200019e93925060209091019062000534565b50600b805460018101825560009182526040805160a0810190915260648082526000805160206200402783398151915290920192916200407f60208301398051620001f193925060209091019062000534565b50600b805460018101825560009182526040805160a08101909152606a808252600080516020620040278339815191529092019291620041a1602083013980516200024493925060209091019062000534565b50600b805460018101825560009182526040805160a08101909152607480825260008051602062004027833981519152909201929162003f8f602083013980516200029793925060209091019062000534565b50600b805460018101825560009182526040805160e0810190915260be808252600080516020620040278339815191529092019291620040e360208301398051620002ea93925060209091019062000534565b50600b805460018101825560009182526040805160808101909152605880825260008051602062004027833981519152909201929162003f37602083013980516200033d93925060209091019062000534565b50600b80546001810182556000918252604080516060810182528181526000805160206200402783398151915290920192919062003ded602083013980516200038e93925060209091019062000534565b50600b80546001810182556000918252604080516060810190915260388082526000805160206200402783398151915290920192916200404760208301398051620003e193925060209091019062000534565b50600b805460018101825560009182526040805160a08101909152607680825260008051602062004027833981519152909201929162003e2d602083013980516200043493925060209091019062000534565b50600b805460018101825560009182526040805160608101909152602480825260008051602062004027833981519152909201929162004003602083013980516200048793925060209091019062000534565b50600b805460018101825560009182526040805160c08101909152609480825260008051602062004027833981519152909201929162003ea360208301398051620004da93925060209091019062000534565b50604080516020808201835260009182905282518082018452600190819052600c805460ff1990811683179091558451808401865293909352835191820190935282905260128054909116909117905562000617565b4690565b8280546200054290620005da565b90600052602060002090601f016020900481019282620005665760008555620005b1565b82601f106200058157805160ff1916838001178555620005b1565b82800160010185558215620005b1579182015b82811115620005b157825182559160200191906001019062000594565b50620005bf929150620005c3565b5090565b5b80821115620005bf5760008155600101620005c4565b600181811c90821680620005ef57607f821691505b602082108114156200061157634e487b7160e01b600052602260045260246000fd5b50919050565b6135d180620006276000396000f3fe608060405234801561001057600080fd5b50600436106101175760003560e01c806370a08231116100a857806370a08231146101ea578063779fbab91461020b5780638091f3bf1461021e57806395d89b4114610230578063a22cb46514610238578063b51adf1b1461024b578063b88d4fde1461025e578063c415f75914610271578063c87b56dd14610284578063d5f3948814610297578063e985e9c5146102a857600080fd5b806301ffc9a71461011c57806306fdde0314610144578063081812fc14610159578063095ea7b3146101845780631527e5d61461019957806323b872dd146101a15780633beba2ee146101b457806342842e0e146101bc57806354761214146101cf5780636352211e146101d7575b600080fd5b61012f61012a3660046127c3565b6102bb565b60405190151581526020015b60405180910390f35b61014c61030d565b60405161013b9190612fa8565b61016c610167366004612b88565b61039f565b6040516001600160a01b03909116815260200161013b565b610197610192366004612764565b61042c565b005b61014c61053d565b6101976101af36600461268e565b61078e565b6101976107bf565b6101976101ca36600461268e565b6107f6565b610197610811565b61016c6101e5366004612b88565b610839565b6101fd6101f83660046125d5565b6108b0565b60405190815260200161013b565b610197610219366004612764565b610937565b600854600160a01b900460ff1661012f565b61014c6109d7565b610197610246366004612737565b6109e6565b610197610259366004612764565b610aa7565b61019761026c3660046126ce565b610b57565b61019761027f3660046127fb565b610b8f565b61014c610292366004612b88565b610d20565b6007546001600160a01b031661016c565b61012f6102b6366004612656565b610e8a565b60006001600160e01b031982166380ac58cd60e01b14806102ec57506001600160e01b03198216635b5e139f60e01b145b8061030757506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606001805461031c90613453565b80601f016020809104026020016040519081016040528092919081815260200182805461034890613453565b80156103955780601f1061036a57610100808354040283529160200191610395565b820191906000526020600020905b81548152906001019060200180831161037857829003601f168201915b5050505050905090565b60006103aa82610eb8565b6104105760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b600061043782610839565b9050806001600160a01b0316836001600160a01b031614156104a55760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610407565b336001600160a01b03821614806104c157506104c18133610e8a565b61052e5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608401610407565b6105388383610ed5565b505050565b600854606090600160a01b900460ff166105695760405162461bcd60e51b81526004016104079061305e565b6010546040805163eacdc5ff60e01b815290516000926001600160a01b03169163eacdc5ff916004808301926020929190829003018186803b1580156105ae57600080fd5b505afa1580156105c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e691906127ab565b60105460405163428a031960e01b8152600481018390529192506000916001600160a01b039091169063428a03199060240160206040518083038186803b15801561063057600080fd5b505afa158015610644573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610668919061278f565b6106f757601060009054906101000a90046001600160a01b03166001600160a01b031663c7608b226040518163ffffffff1660e01b815260040160206040518083038186803b1580156106ba57600080fd5b505afa1580156106ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f291906127ab565b610773565b60105460405163e0d4ea3760e01b8152600481018490526001600160a01b039091169063e0d4ea379060240160206040518083038186803b15801561073b57600080fd5b505afa15801561074f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077391906127ab565b90506107878261078283610f43565b610f76565b9250505090565b610798338261114b565b6107b45760405162461bcd60e51b815260040161040790613080565b610538838383611215565b60005460ff1680156107e157506000546001600160a01b036101009091041633145b6107ea57600080fd5b6107f433476113c0565b565b61053883838360405180602001604052806000815250610b57565b60005460ff1661082057600080fd5b60008054610100600160a81b0319163361010002179055565b6000818152600360205260408120546001600160a01b0316806103075760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610407565b60006001600160a01b03821661091b5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610407565b506001600160a01b031660009081526004602052604090205490565b6012805460ff166002141561095e5760405162461bcd60e51b81526004016104079061300d565b805460ff191660021781556010546001600160a01b031661097c3390565b6001600160a01b0316146109be5760405162461bcd60e51b815260206004820152600960248201526804e46543a4f4d433a360bc1b6044820152606401610407565b6109c883836113d7565b805460ff191660011790555050565b60606002805461031c90613453565b6001600160a01b038216331415610a3b5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610407565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6012805460ff1660021415610ace5760405162461bcd60e51b81526004016104079061300d565b805460ff191660021781556011546001600160a01b0316610aec3390565b6001600160a01b031614610b2e5760405162461bcd60e51b815260206004820152600960248201526804e46543a4f42433a360bc1b6044820152606401610407565b6011546040805160208101909152600081526109c8916001600160a01b031690859085906113f1565b610b61338361114b565b610b7d5760405162461bcd60e51b815260040161040790613080565b610b89848484846113f1565b50505050565b610b9881611424565b60008060008084806020019051810190610bb291906125f8565b600f80546001600160a01b038087166001600160a01b031992831617909255600e805483871690831681179091556010805484871690841617905560118054938516939092169290921790559397509195509350915060009063b4e1f09e610c18600990565b6040518263ffffffff1660e01b8152600401610c349190612f02565b60006040518083038186803b158015610c4c57600080fd5b505afa158015610c60573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c889190810190612ac2565b905060005b81515160ff82161015610d1757600d82600001518260ff1681518110610cc357634e487b7160e01b600052603260045260246000fd5b602090810291909101810151518254600181018455600093845292829020918304909101805460ff928316601f9094166101000a938402929093021990921617905580610d0f816134a9565b915050610c8d565b50505050505050565b600854606090600160a01b900460ff16610d4c5760405162461bcd60e51b81526004016104079061305e565b60105460405163428a031960e01b8152600481018490526001600160a01b039091169063428a03199060240160206040518083038186803b158015610d9057600080fd5b505afa158015610da4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc8919061278f565b610e015760405162461bcd60e51b815260206004820152600a60248201526904e55473a545552493a360b41b6044820152606401610407565b60105460405163e0d4ea3760e01b815260048101849052610307918491610782916001600160a01b03169063e0d4ea379060240160206040518083038186803b158015610e4d57600080fd5b505afa158015610e61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8591906127ab565b610f43565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6000908152600360205260409020546001600160a01b0316151590565b600081815260056020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610f0a82610839565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081604051602001610f5891815260200190565b60408051601f19818403018152919052805160209091012092915050565b60606000610f8384611513565b604051602001610f939190612e95565b60408051601f1981840301815282820190915260038252622a222160e91b602083015291506000610fc38561162c565b90506000610fd0866116cf565b600e5460405163dc9efae760e01b81529192506000916001600160a01b039091169063dc9efae79061100890869086906004016130d1565b60006040518083038186803b15801561102057600080fd5b505afa158015611034573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261105c9190810190612b56565b600e5460405163bd16de3160e01b81529192506000916110f0916001600160a01b03169063bd16de3190611097908690600a90600401613279565b60006040518083038186803b1580156110af57600080fd5b505afa1580156110c3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110eb919081019061282d565b611993565b905061111e86868360405160200161110a93929190612df5565b6040516020818303038152906040526119f8565b60405160200161112e9190612daa565b604051602081830303815290604052965050505050505092915050565b600061115682610eb8565b6111b75760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610407565b60006111c283610839565b9050806001600160a01b0316846001600160a01b031614806111fd5750836001600160a01b03166111f28461039f565b6001600160a01b0316145b8061120d575061120d8185610e8a565b949350505050565b826001600160a01b031661122882610839565b6001600160a01b0316146112905760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610407565b6001600160a01b0382166112f25760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610407565b6112fd838383611a39565b611308600082610ed5565b6001600160a01b0383166000908152600460205260408120805460019290611331908490613410565b90915550506001600160a01b038216600090815260046020526040812080546001929061135f9084906133c5565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6113d36001600160a01b03831682611aa6565b5050565b6113d3828260405180602001604052806000815250611bbc565b6113fc848484611215565b61140884848484611bef565b610b895760405162461bcd60e51b815260040161040790612fbb565b6007546001600160a01b031633148061144757506008546001600160a01b031633145b61147f5760405162461bcd60e51b815260206004820152600960248201526804c41553a4c41553a360bc1b6044820152606401610407565b600854600160a01b900460ff16156114c55760405162461bcd60e51b81526020600482015260096024820152684c41553a4c41553a3160b81b6044820152606401610407565b6008805460ff60a01b1916600160a01b1790556007546040516001600160a01b03909116907fb900795bb40f8a7bc484866009ca19ebf7b277001a839428e1b8e1a21d8e216c90600090a250565b6060816115375750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611561578061154b8161348e565b915061155a9050600a836133dd565b915061153b565b6000816001600160401b0381111561158957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115b3576020820181803683370190505b5090505b841561120d576115c8600183613410565b91506115d5600a866134c9565b6115e09060306133c5565b60f81b81838151811061160357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611625600a866133dd565b94506115b7565b61163461204b565b600e54600a546001600160a01b039091169063cde5539f9061165f9061165a90866134c9565b611cfc565b6040518263ffffffff1660e01b815260040161167b9190612f02565b60006040518083038186803b15801561169357600080fd5b505afa1580156116a7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261030791908101906129d4565b60408051601e8082526103e0820190925260609160009190602082016103c08036833701905050905060005b601e8160ff16101561176257600b5461171a9060ff831686901c6134c9565b828260ff168151811061173d57634e487b7160e01b600052603260045260246000fd5b61ffff909216602092830291909101909101528061175a816134a9565b9150506116fb565b50600d546000906001600160401b0381111561178e57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156117b7578160200160208202803683370190505b5060408051600380825260808201909252919250816020015b6117d861206a565b8152602001906001900390816117d05790505092506000805b83518160ff16101561198a57600e5484516000916001600160a01b0316906381e8c61f9061184d90889060ff871690811061183c57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff16611d52565b6040518263ffffffff1660e01b81526004016118699190612f02565b60006040518083038186803b15801561188157600080fd5b505afa158015611895573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118bd919081019061289f565b90508381606001516000015160ff16815181106118ea57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff166000141561196557808684611909816134a9565b955060ff168151811061192c57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508381606001516000015160ff168151811061196257634e487b7160e01b600052603260045260246000fd5b50505b60ff831660031415611977575061198a565b5080611982816134a9565b9150506117f1565b50505050919050565b60606040518060400160405280601a81526020017919185d184e9a5b5859d94bdcdd99cade1b5b0ed8985cd94d8d0b60321b8152506119d183611d97565b6040516020016119e2929190612dc6565b6040516020818303038152906040529050919050565b60606040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152506119d183611d97565b6010546001600160a01b0316336001600160a01b03161480611a6e57506011546001600160a01b0316336001600160a01b0316145b6105385760405162461bcd60e51b815260206004820152600960248201526804e46543a4254543a360bc1b6044820152606401610407565b80471015611af65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610407565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611b43576040519150601f19603f3d011682016040523d82523d6000602084013e611b48565b606091505b50509050806105385760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610407565b611bc68383611f0c565b611bd36000848484611bef565b6105385760405162461bcd60e51b815260040161040790612fbb565b60006001600160a01b0384163b15611cf157604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611c33903390899088908890600401612ec5565b602060405180830381600087803b158015611c4d57600080fd5b505af1925050508015611c7d575060408051601f3d908101601f19168201909252611c7a918101906127df565b60015b611cd7573d808015611cab576040519150601f19603f3d011682016040523d82523d6000602084013e611cb0565b606091505b508051611ccf5760405162461bcd60e51b815260040161040790612fbb565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061120d565b506001949350505050565b600a546000908210611d205760405162461bcd60e51b815260040161040790613035565b600a8281548110611d4157634e487b7160e01b600052603260045260246000fd5b906000526020600020019050919050565b600b546000908210611d765760405162461bcd60e51b815260040161040790613035565b600b8281548110611d4157634e487b7160e01b600052603260045260246000fd5b6060815160001415611db757505060408051602081019091526000815290565b600060405180606001604052806040815260200161355c6040913990506000600384516002611de691906133c5565b611df091906133dd565b611dfb9060046133f1565b90506000611e0a8260206133c5565b6001600160401b03811115611e2f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611e59576020820181803683370190505b509050818152600183018586518101602084015b81831015611ec75760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401611e6d565b600389510660018114611ee15760028114611ef257611efe565b613d3d60f01b600119830152611efe565b603d60f81b6000198301525b509398975050505050505050565b6001600160a01b038216611f625760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610407565b611f6b81610eb8565b15611fb85760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610407565b611fc460008383611a39565b6001600160a01b0382166000908152600460205260408120805460019290611fed9084906133c5565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6040518060400160405280606081526020016120656120de565b905290565b6040518060a0016040528061207d6120de565b815260200161209c604080518082019091526000808252602082015290565b81526020016120a9612110565b81526020016120d16040518060400160405280600060ff168152602001600060ff1681525090565b815260200161206561218f565b6040805160a0810190915260006060820181815260808301919091528190815260200160608152602001606081525090565b6040805160c0810190915260006080820181815260a08301919091528190815260200161214d604080518082019091526000808252602082015290565b81526040805160c08101825260008082526020828101829052928201819052606082018190526080820181905260a08201529101908152600060209091015290565b6040518060c001604052806121a26121df565b81526020016121af6121df565b81526020016121bc6121df565b81526020016121c96121df565b81526020016121d66121df565b81526020016120655b604080516060810182526000808252602082018190529181019190915290565b600061221261220d8461337b565b61334b565b9050808382526020808301915083868660061b8601111561223257600080fd5b60005b8681101561225c57612247888361239b565b84529282019260409190910190600101612235565b505050509392505050565b805161227281613537565b919050565b600082601f830112612287578081fd5b813561229561220d8261339e565b8181528460208386010111156122a9578283fd5b816020850160208301379081016020019190915292915050565b60008183036101608112156122d6578182fd5b6122de61329b565b91506122ea848461239b565b82526122f9846040850161239b565b602083015260c0607f198201121561231057600080fd5b506123196132c3565b612325608084016125c4565b815261233360a084016125c4565b602082015261234460c084016125c4565b604082015261235560e084016125c4565b606082015261236761010084016125c4565b608082015261237961012084016125c4565b60a082015260408201526123906101408301612267565b606082015292915050565b6000604082840312156123ac578081fd5b6123b46132e5565b90506123bf826125c4565b81526123cd602083016125c4565b602082015292915050565b600060808083850312156123ea578182fd5b6123f2613307565b91506123fe848461239b565b82526040808401516001600160401b038082111561241b57600080fd5b818601915086601f83011261242f57600080fd5b8151602061244089838387016121ff565b81880152606093508388015191508282111561245b57600080fd5b818801925088601f84011261246f57600080fd5b8251915061247f61220d8361337b565b8281528181019084830160e0808602870185018d101561249e57600080fd5b600096505b8587101561255f57818d03818112156124bb57600080fd5b6124c361329b565b6124cc846125c4565b81528b601f19830112156124df57600080fd5b6124e761329b565b91506124f48785016125c4565b82526125018b85016125c4565b878301526125108a85016125c4565b8b83015261251f8c85016125c4565b8a830152818782015261253460a085016125c4565b8b82015261254460c08501612267565b818b01528552506001969096019592840192908101906124a3565b505080878a0152505050505050505092915050565b600060608284031215612585578081fd5b61258d613307565b9050815161259a81613537565b81526125a8602083016125c4565b60208201526125b9604083016125c4565b604082015292915050565b805160ff8116811461227257600080fd5b6000602082840312156125e6578081fd5b81356125f18161351f565b9392505050565b6000806000806080858703121561260d578283fd5b84516126188161351f565b60208601519094506126298161351f565b604086015190935061263a8161351f565b606086015190925061264b8161351f565b939692955090935050565b60008060408385031215612668578182fd5b82356126738161351f565b915060208301356126838161351f565b809150509250929050565b6000806000606084860312156126a2578081fd5b83356126ad8161351f565b925060208401356126bd8161351f565b929592945050506040919091013590565b600080600080608085870312156126e3578182fd5b84356126ee8161351f565b935060208501356126fe8161351f565b92506040850135915060608501356001600160401b0381111561271f578182fd5b61272b87828801612277565b91505092959194509250565b60008060408385031215612749578182fd5b82356127548161351f565b9150602083013561268381613537565b60008060408385031215612776578182fd5b82356127818161351f565b946020939093013593505050565b6000602082840312156127a0578081fd5b81516125f181613537565b6000602082840312156127bc578081fd5b5051919050565b6000602082840312156127d4578081fd5b81356125f181613545565b6000602082840312156127f0578081fd5b81516125f181613545565b60006020828403121561280c578081fd5b81356001600160401b03811115612821578182fd5b61120d84828501612277565b60006020828403121561283e578081fd5b81516001600160401b03811115612853578182fd5b8201601f81018413612863578182fd5b805161287161220d8261339e565b818152856020838501011115612885578384fd5b612896826020830160208601613427565b95945050505050565b6000602082840312156128b0578081fd5b81516001600160401b03808211156128c6578283fd5b908301908185036104408112156128db578384fd5b6128e3613329565b8351838111156128f1578586fd5b6128fd888287016123d8565b82525061290d876020860161239b565b602082015261291f87606086016122c3565b6040820152612932876101c0860161239b565b60608201526102406101ff198301121561294a578485fd5b6129526132c3565b9250612962876102008601612574565b8352612972876102608601612574565b6020840152612985876102c08601612574565b6040840152612998876103208601612574565b60608401526129ab876103808601612574565b60808401526129be876103e08601612574565b60a0840152608081019290925250949350505050565b600060208083850312156129e6578182fd5b82516001600160401b03808211156129fc578384fd5b9084019060408287031215612a0f578384fd5b612a176132e5565b825182811115612a25578586fd5b8301601f81018813612a35578586fd5b8051612a4361220d8261337b565b8181528681019083880161016080850286018a018d1015612a62578a8bfd5b8a95505b84861015612a8e57612a788d836122c3565b8452600195909501949289019290810190612a66565b505084525050508284015182811115612aa5578586fd5b612ab1888286016123d8565b948201949094529695505050505050565b600060208284031215612ad3578081fd5b81516001600160401b0380821115612ae9578283fd5b9083019060208286031215612afc578283fd5b604051602081018181108382111715612b1757612b17613509565b604052825182811115612b28578485fd5b80840193505085601f840112612b3c578384fd5b612b4b868451602086016121ff565b815295945050505050565b600060208284031215612b67578081fd5b81516001600160401b03811115612b7c578182fd5b61120d848285016123d8565b600060208284031215612b99578081fd5b5035919050565b60008151808452612bb8816020860160208601613427565b601f01601f19169290920160200192915050565b612be7828251805160ff908116835260209182015116910152565b6020810151612c096040840182805160ff908116835260209182015116910152565b50604081015160ff8082511660808501528060208301511660a08501528060408301511660c08501528060608301511660e0850152806080830151166101008501528060a0830151166101208501525050606081015161053861014084018215159052565b60006080808401612c90858551805160ff908116835260209182015116910152565b602084810151604087810185905281519384905260a0939183019184890190875b81811015612ce457612cd4838651805160ff908116835260209182015116910152565b9385019391830191600101612cb1565b50508188015192506060898203818b0152818451808452868401915086860195508993505b80841015612d77578551805160ff908116845288820151805182168a860152808a015182168886015287810151821686860152850151168a84015285810151612d568a85018260ff169052565b50830151151560c0830152948601946001939093019260e090910190612d09565b509a9950505050505050505050565b80511515825260ff602082015116602083015260ff60408201511660408301525050565b60008251612dbc818460208701613427565b9190910192915050565b60008351612dd8818460208801613427565b835190830190612dec818360208801613427565b01949350505050565b683d913730b6b2911d1160b91b81528351600090612e1a816009850160208901613427565b701116113232b9b1b934b83a34b7b7111d1160791b6009918401918201528451612e4b81601a840160208901613427565b6c1116101134b6b0b3b2911d101160991b601a92909101918201528351612e79816027840160208801613427565b61227d60f01b6027929091019182015260290195945050505050565b674e7567674654202360c01b815260008251612eb8816008850160208701613427565b9190910160080192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612ef890830184612ba0565b9695505050505050565b6000602080835281845483600182811c915080831680612f2357607f831692505b858310811415612f4157634e487b7160e01b87526022600452602487fd5b878601838152602001818015612f5e5760018114612f6f57612f99565b60ff19861682528782019650612f99565b60008b815260209020895b86811015612f9357815484820152908501908901612f7a565b83019750505b50949998505050505050505050565b6020815260006125f16020830184612ba0565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252600e908201526d04d555445583a4c4f434b45443a360941b604082015260600190565b6020808252600f908201526e1a5b9d985b1a59081c995c5d595cdd608a1b604082015260600190565b60208082526008908201526704c41553a494c3a360c41b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000604080835260808084018651838487015281815180845260a09350838801915060208084019350875b828110156131235761310f848651612bcc565b9381019361016093909301926001016130fc565b50808b0151935060609150603f1989840301828a01526131438385612c6e565b898103828b01528a518082529094508185019350600581901b850182018b83018a5b8381101561326657601f198884030187528151610440815181865261318c82870182612c6e565b915050868201516131af88870182805160ff908116835260209182015116910152565b508c8201516131c089870182612bcc565b5081880151805160ff9081166101c08801526020820151166101e0870152508b82015191506131f461020086018351612d86565b86820151613206610260870182612d86565b508c8201516132196102c0870182612d86565b508782015161322c610320870182612d86565b508b82015161323f610380870182612d86565b50908a0151906132536103e0860183612d86565b9786019793505090840190600101613165565b50909d9c50505050505050505050505050565b60408152600061328c6040830185612c6e565b90508260208301529392505050565b604051608081016001600160401b03811182821017156132bd576132bd613509565b60405290565b60405160c081016001600160401b03811182821017156132bd576132bd613509565b604080519081016001600160401b03811182821017156132bd576132bd613509565b604051606081016001600160401b03811182821017156132bd576132bd613509565b60405160a081016001600160401b03811182821017156132bd576132bd613509565b604051601f8201601f191681016001600160401b038111828210171561337357613373613509565b604052919050565b60006001600160401b0382111561339457613394613509565b5060051b60200190565b60006001600160401b038211156133b7576133b7613509565b50601f01601f191660200190565b600082198211156133d8576133d86134dd565b500190565b6000826133ec576133ec6134f3565b500490565b600081600019048311821515161561340b5761340b6134dd565b500290565b600082821015613422576134226134dd565b500390565b60005b8381101561344257818101518382015260200161342a565b83811115610b895750506000910152565b600181811c9082168061346757607f821691505b6020821081141561348857634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156134a2576134a26134dd565b5060010190565b600060ff821660ff8114156134c0576134c06134dd565b60010192915050565b6000826134d8576134d86134f3565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461353457600080fd5b50565b801515811461353457600080fd5b6001600160e01b03198116811461353457600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220e29cf6d194fe3755a3e5e483be4c1df63e337d58641d9225b88a2b6beb62eea664736f6c634300080400336e75676701080d063dc17320200001ffffffff0101a84b1eff0201c96619ff0301f9b042ff0401f49f35ff0501f19325ff0601eb8a12ff0701000000ff000f07050502020001010b0b000400000001020f1101010000000103080a000000000001040f0b020200000001050f050404010100012e202e202e202e202e202e0a010c2e0a2e080102030104040303060301022e092e080101030104070302060301012e092e080101030204060303060201012e092e080101030204060304060201012e082e07010203010003040405010003030201012e082e070101030200010701000104040301000107010001030201012e082e0701010302000304050003030201012e082e07010103050405030501012e082e0701010302050203010406030401012e082e070101030504060501030301012e082e070101030604050502030201012e082e070101030507050402030301012e082e07010103050409030101012e082e0701010306040901012e082e08010103030502040901012e082e08010103050501040701022e082e080101030505020402060401012e092e0801010201030404010501060601012e092e08010102010601030304030604020101012e092e08010102020601030204030604020101012e092e0801030601030204020603020201012e0a2e0a010b2e0b2e202e202e202e206e756767020210001c121c0b040501020002855114440102000000ff2e0200072e0200012e010001010500012e01000100032e0200012e0200032e0500012e056e756767020210041c29240e050702040003000000ff0103855114444c0052006c2e722e2e0100056c012e01720100052e010001010300016c012e0172010001010300010002010300014c01000152010001010300012e010001010300016c012e0172010001010300012e0100056c012e01720100056e756767020310022237260d070403010002fb1a06ff0102f85c0fff0202ffdb3cff5201722e2e0400012e0172012e0100012e042e0400012e0172012e0100012e042e0300010101000172010001010100012e030001010302010101520101010201010300012e0300010101000172010001010100012e032e0400012e0172012e0100012e042e0400012e0172012e0100012e046e75676702011004161d1e08050400050002000000ff722e4c0052006c2e2e0100024c0100015201000200034c0100015201000200022e016c012e0172012e0200022e016c012e0172012e0200012e026c012e0172012e026e75676702011004162b1e08070402050002000000ff722e4c0052006c2e2e0200016c010001720100012e012e0200016c010001720100012e012e0100024c0100015201000200034c0100015201000200022e016c012e0172012e0200022e016c012e0172012e0200012e026c012e0172012e026e7567670201100216051a05010200020002f87303ff4c00520000014c010001520100010175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db96e756767020210001c0e1c07060301020002855114440102000000ff000700010105000100072e0100052e012e0200032e022e0300012e036e756767020210021c22200e050503000003b261dc550103444444ff52014c012e0201024c010101520101022e052e0101034c0101015201000101022e0401044c01010152010101000101012e0401044c010101520101062e0101044c010101520101076e756767020210041c4d240b0b0705050002000000ff0102000000ff4c0052006c2e722e2e02010100034c012e01720100012e012e010001010200024c010001520100022e010001010100034c0100015201010100012e01000401014c010001520101012e0100064c0100015201000200064c01000152010002000201010001010100014c010001520100012e0100066c012e0172012e022e0100056c012e0172012e022e0100056c012e0172012e022e0400012e016c012e0172012e026e756767020210041c232413050903000003555555ff0103b261dc5552006c0172014c002e0600024c010001520100022e062e05000201016c0101017201010100022e0500022e0300034c010101520100032e03000200084c0101015201000800084c01000152010008",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101175760003560e01c806370a08231116100a857806370a08231146101ea578063779fbab91461020b5780638091f3bf1461021e57806395d89b4114610230578063a22cb46514610238578063b51adf1b1461024b578063b88d4fde1461025e578063c415f75914610271578063c87b56dd14610284578063d5f3948814610297578063e985e9c5146102a857600080fd5b806301ffc9a71461011c57806306fdde0314610144578063081812fc14610159578063095ea7b3146101845780631527e5d61461019957806323b872dd146101a15780633beba2ee146101b457806342842e0e146101bc57806354761214146101cf5780636352211e146101d7575b600080fd5b61012f61012a3660046127c3565b6102bb565b60405190151581526020015b60405180910390f35b61014c61030d565b60405161013b9190612fa8565b61016c610167366004612b88565b61039f565b6040516001600160a01b03909116815260200161013b565b610197610192366004612764565b61042c565b005b61014c61053d565b6101976101af36600461268e565b61078e565b6101976107bf565b6101976101ca36600461268e565b6107f6565b610197610811565b61016c6101e5366004612b88565b610839565b6101fd6101f83660046125d5565b6108b0565b60405190815260200161013b565b610197610219366004612764565b610937565b600854600160a01b900460ff1661012f565b61014c6109d7565b610197610246366004612737565b6109e6565b610197610259366004612764565b610aa7565b61019761026c3660046126ce565b610b57565b61019761027f3660046127fb565b610b8f565b61014c610292366004612b88565b610d20565b6007546001600160a01b031661016c565b61012f6102b6366004612656565b610e8a565b60006001600160e01b031982166380ac58cd60e01b14806102ec57506001600160e01b03198216635b5e139f60e01b145b8061030757506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606001805461031c90613453565b80601f016020809104026020016040519081016040528092919081815260200182805461034890613453565b80156103955780601f1061036a57610100808354040283529160200191610395565b820191906000526020600020905b81548152906001019060200180831161037857829003601f168201915b5050505050905090565b60006103aa82610eb8565b6104105760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b600061043782610839565b9050806001600160a01b0316836001600160a01b031614156104a55760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610407565b336001600160a01b03821614806104c157506104c18133610e8a565b61052e5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608401610407565b6105388383610ed5565b505050565b600854606090600160a01b900460ff166105695760405162461bcd60e51b81526004016104079061305e565b6010546040805163eacdc5ff60e01b815290516000926001600160a01b03169163eacdc5ff916004808301926020929190829003018186803b1580156105ae57600080fd5b505afa1580156105c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e691906127ab565b60105460405163428a031960e01b8152600481018390529192506000916001600160a01b039091169063428a03199060240160206040518083038186803b15801561063057600080fd5b505afa158015610644573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610668919061278f565b6106f757601060009054906101000a90046001600160a01b03166001600160a01b031663c7608b226040518163ffffffff1660e01b815260040160206040518083038186803b1580156106ba57600080fd5b505afa1580156106ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f291906127ab565b610773565b60105460405163e0d4ea3760e01b8152600481018490526001600160a01b039091169063e0d4ea379060240160206040518083038186803b15801561073b57600080fd5b505afa15801561074f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077391906127ab565b90506107878261078283610f43565b610f76565b9250505090565b610798338261114b565b6107b45760405162461bcd60e51b815260040161040790613080565b610538838383611215565b60005460ff1680156107e157506000546001600160a01b036101009091041633145b6107ea57600080fd5b6107f433476113c0565b565b61053883838360405180602001604052806000815250610b57565b60005460ff1661082057600080fd5b60008054610100600160a81b0319163361010002179055565b6000818152600360205260408120546001600160a01b0316806103075760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610407565b60006001600160a01b03821661091b5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610407565b506001600160a01b031660009081526004602052604090205490565b6012805460ff166002141561095e5760405162461bcd60e51b81526004016104079061300d565b805460ff191660021781556010546001600160a01b031661097c3390565b6001600160a01b0316146109be5760405162461bcd60e51b815260206004820152600960248201526804e46543a4f4d433a360bc1b6044820152606401610407565b6109c883836113d7565b805460ff191660011790555050565b60606002805461031c90613453565b6001600160a01b038216331415610a3b5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610407565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6012805460ff1660021415610ace5760405162461bcd60e51b81526004016104079061300d565b805460ff191660021781556011546001600160a01b0316610aec3390565b6001600160a01b031614610b2e5760405162461bcd60e51b815260206004820152600960248201526804e46543a4f42433a360bc1b6044820152606401610407565b6011546040805160208101909152600081526109c8916001600160a01b031690859085906113f1565b610b61338361114b565b610b7d5760405162461bcd60e51b815260040161040790613080565b610b89848484846113f1565b50505050565b610b9881611424565b60008060008084806020019051810190610bb291906125f8565b600f80546001600160a01b038087166001600160a01b031992831617909255600e805483871690831681179091556010805484871690841617905560118054938516939092169290921790559397509195509350915060009063b4e1f09e610c18600990565b6040518263ffffffff1660e01b8152600401610c349190612f02565b60006040518083038186803b158015610c4c57600080fd5b505afa158015610c60573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c889190810190612ac2565b905060005b81515160ff82161015610d1757600d82600001518260ff1681518110610cc357634e487b7160e01b600052603260045260246000fd5b602090810291909101810151518254600181018455600093845292829020918304909101805460ff928316601f9094166101000a938402929093021990921617905580610d0f816134a9565b915050610c8d565b50505050505050565b600854606090600160a01b900460ff16610d4c5760405162461bcd60e51b81526004016104079061305e565b60105460405163428a031960e01b8152600481018490526001600160a01b039091169063428a03199060240160206040518083038186803b158015610d9057600080fd5b505afa158015610da4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc8919061278f565b610e015760405162461bcd60e51b815260206004820152600a60248201526904e55473a545552493a360b41b6044820152606401610407565b60105460405163e0d4ea3760e01b815260048101849052610307918491610782916001600160a01b03169063e0d4ea379060240160206040518083038186803b158015610e4d57600080fd5b505afa158015610e61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8591906127ab565b610f43565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6000908152600360205260409020546001600160a01b0316151590565b600081815260056020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610f0a82610839565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081604051602001610f5891815260200190565b60408051601f19818403018152919052805160209091012092915050565b60606000610f8384611513565b604051602001610f939190612e95565b60408051601f1981840301815282820190915260038252622a222160e91b602083015291506000610fc38561162c565b90506000610fd0866116cf565b600e5460405163dc9efae760e01b81529192506000916001600160a01b039091169063dc9efae79061100890869086906004016130d1565b60006040518083038186803b15801561102057600080fd5b505afa158015611034573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261105c9190810190612b56565b600e5460405163bd16de3160e01b81529192506000916110f0916001600160a01b03169063bd16de3190611097908690600a90600401613279565b60006040518083038186803b1580156110af57600080fd5b505afa1580156110c3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110eb919081019061282d565b611993565b905061111e86868360405160200161110a93929190612df5565b6040516020818303038152906040526119f8565b60405160200161112e9190612daa565b604051602081830303815290604052965050505050505092915050565b600061115682610eb8565b6111b75760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610407565b60006111c283610839565b9050806001600160a01b0316846001600160a01b031614806111fd5750836001600160a01b03166111f28461039f565b6001600160a01b0316145b8061120d575061120d8185610e8a565b949350505050565b826001600160a01b031661122882610839565b6001600160a01b0316146112905760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610407565b6001600160a01b0382166112f25760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610407565b6112fd838383611a39565b611308600082610ed5565b6001600160a01b0383166000908152600460205260408120805460019290611331908490613410565b90915550506001600160a01b038216600090815260046020526040812080546001929061135f9084906133c5565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6113d36001600160a01b03831682611aa6565b5050565b6113d3828260405180602001604052806000815250611bbc565b6113fc848484611215565b61140884848484611bef565b610b895760405162461bcd60e51b815260040161040790612fbb565b6007546001600160a01b031633148061144757506008546001600160a01b031633145b61147f5760405162461bcd60e51b815260206004820152600960248201526804c41553a4c41553a360bc1b6044820152606401610407565b600854600160a01b900460ff16156114c55760405162461bcd60e51b81526020600482015260096024820152684c41553a4c41553a3160b81b6044820152606401610407565b6008805460ff60a01b1916600160a01b1790556007546040516001600160a01b03909116907fb900795bb40f8a7bc484866009ca19ebf7b277001a839428e1b8e1a21d8e216c90600090a250565b6060816115375750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611561578061154b8161348e565b915061155a9050600a836133dd565b915061153b565b6000816001600160401b0381111561158957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115b3576020820181803683370190505b5090505b841561120d576115c8600183613410565b91506115d5600a866134c9565b6115e09060306133c5565b60f81b81838151811061160357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611625600a866133dd565b94506115b7565b61163461204b565b600e54600a546001600160a01b039091169063cde5539f9061165f9061165a90866134c9565b611cfc565b6040518263ffffffff1660e01b815260040161167b9190612f02565b60006040518083038186803b15801561169357600080fd5b505afa1580156116a7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261030791908101906129d4565b60408051601e8082526103e0820190925260609160009190602082016103c08036833701905050905060005b601e8160ff16101561176257600b5461171a9060ff831686901c6134c9565b828260ff168151811061173d57634e487b7160e01b600052603260045260246000fd5b61ffff909216602092830291909101909101528061175a816134a9565b9150506116fb565b50600d546000906001600160401b0381111561178e57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156117b7578160200160208202803683370190505b5060408051600380825260808201909252919250816020015b6117d861206a565b8152602001906001900390816117d05790505092506000805b83518160ff16101561198a57600e5484516000916001600160a01b0316906381e8c61f9061184d90889060ff871690811061183c57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff16611d52565b6040518263ffffffff1660e01b81526004016118699190612f02565b60006040518083038186803b15801561188157600080fd5b505afa158015611895573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118bd919081019061289f565b90508381606001516000015160ff16815181106118ea57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff166000141561196557808684611909816134a9565b955060ff168151811061192c57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508381606001516000015160ff168151811061196257634e487b7160e01b600052603260045260246000fd5b50505b60ff831660031415611977575061198a565b5080611982816134a9565b9150506117f1565b50505050919050565b60606040518060400160405280601a81526020017919185d184e9a5b5859d94bdcdd99cade1b5b0ed8985cd94d8d0b60321b8152506119d183611d97565b6040516020016119e2929190612dc6565b6040516020818303038152906040529050919050565b60606040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152506119d183611d97565b6010546001600160a01b0316336001600160a01b03161480611a6e57506011546001600160a01b0316336001600160a01b0316145b6105385760405162461bcd60e51b815260206004820152600960248201526804e46543a4254543a360bc1b6044820152606401610407565b80471015611af65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610407565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611b43576040519150601f19603f3d011682016040523d82523d6000602084013e611b48565b606091505b50509050806105385760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610407565b611bc68383611f0c565b611bd36000848484611bef565b6105385760405162461bcd60e51b815260040161040790612fbb565b60006001600160a01b0384163b15611cf157604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611c33903390899088908890600401612ec5565b602060405180830381600087803b158015611c4d57600080fd5b505af1925050508015611c7d575060408051601f3d908101601f19168201909252611c7a918101906127df565b60015b611cd7573d808015611cab576040519150601f19603f3d011682016040523d82523d6000602084013e611cb0565b606091505b508051611ccf5760405162461bcd60e51b815260040161040790612fbb565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061120d565b506001949350505050565b600a546000908210611d205760405162461bcd60e51b815260040161040790613035565b600a8281548110611d4157634e487b7160e01b600052603260045260246000fd5b906000526020600020019050919050565b600b546000908210611d765760405162461bcd60e51b815260040161040790613035565b600b8281548110611d4157634e487b7160e01b600052603260045260246000fd5b6060815160001415611db757505060408051602081019091526000815290565b600060405180606001604052806040815260200161355c6040913990506000600384516002611de691906133c5565b611df091906133dd565b611dfb9060046133f1565b90506000611e0a8260206133c5565b6001600160401b03811115611e2f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611e59576020820181803683370190505b509050818152600183018586518101602084015b81831015611ec75760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401611e6d565b600389510660018114611ee15760028114611ef257611efe565b613d3d60f01b600119830152611efe565b603d60f81b6000198301525b509398975050505050505050565b6001600160a01b038216611f625760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610407565b611f6b81610eb8565b15611fb85760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610407565b611fc460008383611a39565b6001600160a01b0382166000908152600460205260408120805460019290611fed9084906133c5565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6040518060400160405280606081526020016120656120de565b905290565b6040518060a0016040528061207d6120de565b815260200161209c604080518082019091526000808252602082015290565b81526020016120a9612110565b81526020016120d16040518060400160405280600060ff168152602001600060ff1681525090565b815260200161206561218f565b6040805160a0810190915260006060820181815260808301919091528190815260200160608152602001606081525090565b6040805160c0810190915260006080820181815260a08301919091528190815260200161214d604080518082019091526000808252602082015290565b81526040805160c08101825260008082526020828101829052928201819052606082018190526080820181905260a08201529101908152600060209091015290565b6040518060c001604052806121a26121df565b81526020016121af6121df565b81526020016121bc6121df565b81526020016121c96121df565b81526020016121d66121df565b81526020016120655b604080516060810182526000808252602082018190529181019190915290565b600061221261220d8461337b565b61334b565b9050808382526020808301915083868660061b8601111561223257600080fd5b60005b8681101561225c57612247888361239b565b84529282019260409190910190600101612235565b505050509392505050565b805161227281613537565b919050565b600082601f830112612287578081fd5b813561229561220d8261339e565b8181528460208386010111156122a9578283fd5b816020850160208301379081016020019190915292915050565b60008183036101608112156122d6578182fd5b6122de61329b565b91506122ea848461239b565b82526122f9846040850161239b565b602083015260c0607f198201121561231057600080fd5b506123196132c3565b612325608084016125c4565b815261233360a084016125c4565b602082015261234460c084016125c4565b604082015261235560e084016125c4565b606082015261236761010084016125c4565b608082015261237961012084016125c4565b60a082015260408201526123906101408301612267565b606082015292915050565b6000604082840312156123ac578081fd5b6123b46132e5565b90506123bf826125c4565b81526123cd602083016125c4565b602082015292915050565b600060808083850312156123ea578182fd5b6123f2613307565b91506123fe848461239b565b82526040808401516001600160401b038082111561241b57600080fd5b818601915086601f83011261242f57600080fd5b8151602061244089838387016121ff565b81880152606093508388015191508282111561245b57600080fd5b818801925088601f84011261246f57600080fd5b8251915061247f61220d8361337b565b8281528181019084830160e0808602870185018d101561249e57600080fd5b600096505b8587101561255f57818d03818112156124bb57600080fd5b6124c361329b565b6124cc846125c4565b81528b601f19830112156124df57600080fd5b6124e761329b565b91506124f48785016125c4565b82526125018b85016125c4565b878301526125108a85016125c4565b8b83015261251f8c85016125c4565b8a830152818782015261253460a085016125c4565b8b82015261254460c08501612267565b818b01528552506001969096019592840192908101906124a3565b505080878a0152505050505050505092915050565b600060608284031215612585578081fd5b61258d613307565b9050815161259a81613537565b81526125a8602083016125c4565b60208201526125b9604083016125c4565b604082015292915050565b805160ff8116811461227257600080fd5b6000602082840312156125e6578081fd5b81356125f18161351f565b9392505050565b6000806000806080858703121561260d578283fd5b84516126188161351f565b60208601519094506126298161351f565b604086015190935061263a8161351f565b606086015190925061264b8161351f565b939692955090935050565b60008060408385031215612668578182fd5b82356126738161351f565b915060208301356126838161351f565b809150509250929050565b6000806000606084860312156126a2578081fd5b83356126ad8161351f565b925060208401356126bd8161351f565b929592945050506040919091013590565b600080600080608085870312156126e3578182fd5b84356126ee8161351f565b935060208501356126fe8161351f565b92506040850135915060608501356001600160401b0381111561271f578182fd5b61272b87828801612277565b91505092959194509250565b60008060408385031215612749578182fd5b82356127548161351f565b9150602083013561268381613537565b60008060408385031215612776578182fd5b82356127818161351f565b946020939093013593505050565b6000602082840312156127a0578081fd5b81516125f181613537565b6000602082840312156127bc578081fd5b5051919050565b6000602082840312156127d4578081fd5b81356125f181613545565b6000602082840312156127f0578081fd5b81516125f181613545565b60006020828403121561280c578081fd5b81356001600160401b03811115612821578182fd5b61120d84828501612277565b60006020828403121561283e578081fd5b81516001600160401b03811115612853578182fd5b8201601f81018413612863578182fd5b805161287161220d8261339e565b818152856020838501011115612885578384fd5b612896826020830160208601613427565b95945050505050565b6000602082840312156128b0578081fd5b81516001600160401b03808211156128c6578283fd5b908301908185036104408112156128db578384fd5b6128e3613329565b8351838111156128f1578586fd5b6128fd888287016123d8565b82525061290d876020860161239b565b602082015261291f87606086016122c3565b6040820152612932876101c0860161239b565b60608201526102406101ff198301121561294a578485fd5b6129526132c3565b9250612962876102008601612574565b8352612972876102608601612574565b6020840152612985876102c08601612574565b6040840152612998876103208601612574565b60608401526129ab876103808601612574565b60808401526129be876103e08601612574565b60a0840152608081019290925250949350505050565b600060208083850312156129e6578182fd5b82516001600160401b03808211156129fc578384fd5b9084019060408287031215612a0f578384fd5b612a176132e5565b825182811115612a25578586fd5b8301601f81018813612a35578586fd5b8051612a4361220d8261337b565b8181528681019083880161016080850286018a018d1015612a62578a8bfd5b8a95505b84861015612a8e57612a788d836122c3565b8452600195909501949289019290810190612a66565b505084525050508284015182811115612aa5578586fd5b612ab1888286016123d8565b948201949094529695505050505050565b600060208284031215612ad3578081fd5b81516001600160401b0380821115612ae9578283fd5b9083019060208286031215612afc578283fd5b604051602081018181108382111715612b1757612b17613509565b604052825182811115612b28578485fd5b80840193505085601f840112612b3c578384fd5b612b4b868451602086016121ff565b815295945050505050565b600060208284031215612b67578081fd5b81516001600160401b03811115612b7c578182fd5b61120d848285016123d8565b600060208284031215612b99578081fd5b5035919050565b60008151808452612bb8816020860160208601613427565b601f01601f19169290920160200192915050565b612be7828251805160ff908116835260209182015116910152565b6020810151612c096040840182805160ff908116835260209182015116910152565b50604081015160ff8082511660808501528060208301511660a08501528060408301511660c08501528060608301511660e0850152806080830151166101008501528060a0830151166101208501525050606081015161053861014084018215159052565b60006080808401612c90858551805160ff908116835260209182015116910152565b602084810151604087810185905281519384905260a0939183019184890190875b81811015612ce457612cd4838651805160ff908116835260209182015116910152565b9385019391830191600101612cb1565b50508188015192506060898203818b0152818451808452868401915086860195508993505b80841015612d77578551805160ff908116845288820151805182168a860152808a015182168886015287810151821686860152850151168a84015285810151612d568a85018260ff169052565b50830151151560c0830152948601946001939093019260e090910190612d09565b509a9950505050505050505050565b80511515825260ff602082015116602083015260ff60408201511660408301525050565b60008251612dbc818460208701613427565b9190910192915050565b60008351612dd8818460208801613427565b835190830190612dec818360208801613427565b01949350505050565b683d913730b6b2911d1160b91b81528351600090612e1a816009850160208901613427565b701116113232b9b1b934b83a34b7b7111d1160791b6009918401918201528451612e4b81601a840160208901613427565b6c1116101134b6b0b3b2911d101160991b601a92909101918201528351612e79816027840160208801613427565b61227d60f01b6027929091019182015260290195945050505050565b674e7567674654202360c01b815260008251612eb8816008850160208701613427565b9190910160080192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612ef890830184612ba0565b9695505050505050565b6000602080835281845483600182811c915080831680612f2357607f831692505b858310811415612f4157634e487b7160e01b87526022600452602487fd5b878601838152602001818015612f5e5760018114612f6f57612f99565b60ff19861682528782019650612f99565b60008b815260209020895b86811015612f9357815484820152908501908901612f7a565b83019750505b50949998505050505050505050565b6020815260006125f16020830184612ba0565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252600e908201526d04d555445583a4c4f434b45443a360941b604082015260600190565b6020808252600f908201526e1a5b9d985b1a59081c995c5d595cdd608a1b604082015260600190565b60208082526008908201526704c41553a494c3a360c41b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000604080835260808084018651838487015281815180845260a09350838801915060208084019350875b828110156131235761310f848651612bcc565b9381019361016093909301926001016130fc565b50808b0151935060609150603f1989840301828a01526131438385612c6e565b898103828b01528a518082529094508185019350600581901b850182018b83018a5b8381101561326657601f198884030187528151610440815181865261318c82870182612c6e565b915050868201516131af88870182805160ff908116835260209182015116910152565b508c8201516131c089870182612bcc565b5081880151805160ff9081166101c08801526020820151166101e0870152508b82015191506131f461020086018351612d86565b86820151613206610260870182612d86565b508c8201516132196102c0870182612d86565b508782015161322c610320870182612d86565b508b82015161323f610380870182612d86565b50908a0151906132536103e0860183612d86565b9786019793505090840190600101613165565b50909d9c50505050505050505050505050565b60408152600061328c6040830185612c6e565b90508260208301529392505050565b604051608081016001600160401b03811182821017156132bd576132bd613509565b60405290565b60405160c081016001600160401b03811182821017156132bd576132bd613509565b604080519081016001600160401b03811182821017156132bd576132bd613509565b604051606081016001600160401b03811182821017156132bd576132bd613509565b60405160a081016001600160401b03811182821017156132bd576132bd613509565b604051601f8201601f191681016001600160401b038111828210171561337357613373613509565b604052919050565b60006001600160401b0382111561339457613394613509565b5060051b60200190565b60006001600160401b038211156133b7576133b7613509565b50601f01601f191660200190565b600082198211156133d8576133d86134dd565b500190565b6000826133ec576133ec6134f3565b500490565b600081600019048311821515161561340b5761340b6134dd565b500290565b600082821015613422576134226134dd565b500390565b60005b8381101561344257818101518382015260200161342a565b83811115610b895750506000910152565b600181811c9082168061346757607f821691505b6020821081141561348857634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156134a2576134a26134dd565b5060010190565b600060ff821660ff8114156134c0576134c06134dd565b60010192915050565b6000826134d8576134d86134f3565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461353457600080fd5b50565b801515811461353457600080fd5b6001600160e01b03198116811461353457600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220e29cf6d194fe3755a3e5e483be4c1df63e337d58641d9225b88a2b6beb62eea664736f6c63430008040033",
  "devdoc": {
    "author": "Nugg Labs - @danny7even & @dub6ix - 2021",
    "details": "this is art Note: epochs correlate directly to tokenIDs Note: no images are stored in their final form - they are generated by view/pure functions at query time completly onchain Note: the block hash corresponding to the start of an epoch is used as the \"random\" seed Note: epochs are 256 blocks long as block hashes only exist for 256 blocks",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "deployer()": {
        "details": "#TODO"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "launch(bytes)": {
        "details": "#TODO"
      },
      "launched()": {
        "details": "#TODO"
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}. MODIFICATION 0"
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "title": "Nugg Labs NFT Collection 0 - \"NuggFT\"",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "launch(bytes)": {
        "notice": "inializes contract outside of constructor"
      },
      "pendingTokenURI()": {
        "notice": "equivilent of tokenURI function, but for only for active epoch as real uri does not exist yet"
      }
    },
    "notice": "entrily onchain generative NFT and stakable auction contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5341,
        "contract": "contracts/NuggFT.sol:NuggFT",
        "label": "inTesting",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5356,
        "contract": "contracts/NuggFT.sol:NuggFT",
        "label": "pw",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12324,
        "contract": "contracts/NuggFT.sol:NuggFT",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 12326,
        "contract": "contracts/NuggFT.sol:NuggFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 12330,
        "contract": "contracts/NuggFT.sol:NuggFT",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 12334,
        "contract": "contracts/NuggFT.sol:NuggFT",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12338,
        "contract": "contracts/NuggFT.sol:NuggFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 12344,
        "contract": "contracts/NuggFT.sol:NuggFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4664,
        "contract": "contracts/NuggFT.sol:NuggFT",
        "label": "_deployer",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4666,
        "contract": "contracts/NuggFT.sol:NuggFT",
        "label": "_deployerContract",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 4669,
        "contract": "contracts/NuggFT.sol:NuggFT",
        "label": "_launched",
        "offset": 20,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 13678,
        "contract": "contracts/NuggFT.sol:NuggFT",
        "label": "collection_",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes_storage"
      },
      {
        "astId": 13681,
        "contract": "contracts/NuggFT.sol:NuggFT",
        "label": "bases_",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_bytes_storage)dyn_storage"
      },
      {
        "astId": 13684,
        "contract": "contracts/NuggFT.sol:NuggFT",
        "label": "attributes_",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_bytes_storage)dyn_storage"
      },
      {
        "astId": 4767,
        "contract": "contracts/NuggFT.sol:NuggFT",
        "label": "global",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Mutex)4758_storage"
      },
      {
        "astId": 1985,
        "contract": "contracts/NuggFT.sol:NuggFT",
        "label": "_featureIDs",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_uint8)dyn_storage"
      },
      {
        "astId": 1988,
        "contract": "contracts/NuggFT.sol:NuggFT",
        "label": "_DOTNUGG",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IDotNugg)10166"
      },
      {
        "astId": 1991,
        "contract": "contracts/NuggFT.sol:NuggFT",
        "label": "_NUGGETH",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(INuggETH)17387"
      },
      {
        "astId": 1994,
        "contract": "contracts/NuggFT.sol:NuggFT",
        "label": "_MINTER",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(INuggMinter)4038"
      },
      {
        "astId": 1997,
        "contract": "contracts/NuggFT.sol:NuggFT",
        "label": "_SELLER",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(INuggSeller)4083"
      },
      {
        "astId": 2000,
        "contract": "contracts/NuggFT.sol:NuggFT",
        "label": "transfer",
        "offset": 0,
        "slot": "18",
        "type": "t_struct(Mutex)4758_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IDotNugg)10166": {
        "encoding": "inplace",
        "label": "contract IDotNugg",
        "numberOfBytes": "20"
      },
      "t_contract(INuggETH)17387": {
        "encoding": "inplace",
        "label": "contract INuggETH",
        "numberOfBytes": "20"
      },
      "t_contract(INuggMinter)4038": {
        "encoding": "inplace",
        "label": "contract INuggMinter",
        "numberOfBytes": "20"
      },
      "t_contract(INuggSeller)4083": {
        "encoding": "inplace",
        "label": "contract INuggSeller",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Mutex)4758_storage": {
        "encoding": "inplace",
        "label": "struct Mutexable.Mutex",
        "members": [
          {
            "astId": 4757,
            "contract": "contracts/NuggFT.sol:NuggFT",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}