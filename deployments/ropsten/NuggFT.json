{
  "address": "0x0ae31C4Fe4634061d97B591e8EaE23d691774c3c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultResolver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "DelegateCommit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "sellingTokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "buyingTokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "DelegateCommitItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "DelegateMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "DelegateOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "sellingTokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "buyingTokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "DelegateOfferItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Genesis",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "v2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "MigrateV1Sent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "migrator",
          "type": "address"
        }
      ],
      "name": "MigratorV1Updated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "payoffAmount",
          "type": "uint96"
        }
      ],
      "name": "Payoff",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        }
      ],
      "name": "PopItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "ProtocolEthExtracted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        }
      ],
      "name": "PushItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "earned",
          "type": "uint96"
        }
      ],
      "name": "Rebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "feature",
          "type": "uint8"
        }
      ],
      "name": "RotateItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "xs",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "ys",
          "type": "uint8[]"
        }
      ],
      "name": "SetAnchorOverrides",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "items",
          "type": "uint8[]"
        }
      ],
      "name": "SetProof",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "stake",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "protocol",
          "type": "uint96"
        }
      ],
      "name": "StakeEth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "epoch",
          "type": "uint32"
        }
      ],
      "name": "SwapClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "sellingTokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "buyingTokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "epoch",
          "type": "uint32"
        }
      ],
      "name": "SwapClaimItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "sellingTokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "SwapItemStart",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "SwapStart",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "principal",
          "type": "uint96"
        }
      ],
      "name": "TakeLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "TrustUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "TrustedMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "stake",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "UnStakeEth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "UntrustedMint",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "activeEthPerShare",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "res",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "sellingTokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint16",
          "name": "itemid",
          "type": "uint16"
        },
        {
          "internalType": "uint160",
          "name": "buyingTokenId",
          "type": "uint160"
        }
      ],
      "name": "claimItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultWidth",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultZoom",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "sellingTokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint16",
          "name": "itemid",
          "type": "uint16"
        },
        {
          "internalType": "uint160",
          "name": "buyingTokenId",
          "type": "uint160"
        }
      ],
      "name": "delegateItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dotnuggV1Processor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extractProtocolEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "getActiveSwap",
      "outputs": [
        {
          "internalType": "address",
          "name": "leader",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        },
        {
          "internalType": "uint32",
          "name": "_epoch",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "isOwner",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getOfferByAccount",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "loan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "migrateStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "parsedProofOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "defaultIds",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "extraIds",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "overxs",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "overys",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "payoff",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "prepareFiles",
      "outputs": [
        {
          "internalType": "uint256[][]",
          "name": "input",
          "type": "uint256[][]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renderedAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "proof",
              "type": "uint256"
            },
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "extras",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "xovers",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "yovers",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct IdotnuggV1Data.Data",
          "name": "data",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "proofOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "resolverOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint8",
          "name": "feature",
          "type": "uint8"
        }
      ],
      "name": "rotateFeature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "setIsTrusted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint8[]",
          "name": "xs",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "ys",
          "type": "uint8[]"
        }
      ],
      "name": "setOverrides",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "setResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[][]",
          "name": "data",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint8",
          "name": "feature",
          "type": "uint8"
        }
      ],
      "name": "storeFiles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint96",
          "name": "floor",
          "type": "uint96"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "sellingTokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint16",
          "name": "itemid",
          "type": "uint16"
        },
        {
          "internalType": "uint96",
          "name": "floor",
          "type": "uint96"
        }
      ],
      "name": "swapItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLengths",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "res",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalProtocolEth",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "res",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedEth",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "res",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedShares",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "res",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trusted",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "trustedMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe6c762ccd6704c064f99715a9b9489245edc7eb21bb1fe059895ef932bcf1db0",
  "receipt": {
    "to": null,
    "from": "0xB666C13b621568FeC210724DF161604adccfA257",
    "contractAddress": "0x0ae31C4Fe4634061d97B591e8EaE23d691774c3c",
    "transactionIndex": 2,
    "gasUsed": "5426395",
    "logsBloom": "0x
    "blockHash": "0xb9e3ecda7156604ecc79a42a6e5c37c9f17cd2cfbd01b38ddec626e929fdf682",
    "transactionHash": "0xe6c762ccd6704c064f99715a9b9489245edc7eb21bb1fe059895ef932bcf1db0",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 11659789,
        "transactionHash": "0xe6c762ccd6704c064f99715a9b9489245edc7eb21bb1fe059895ef932bcf1db0",
        "address": "0x0ae31C4Fe4634061d97B591e8EaE23d691774c3c",
        "topics": [
          "0x57860cff71823f3deabfecdd98d8536e7358fdeff8b092fd59e9f71c5078f322",
          "0x000000000000000000000000b666c13b621568fec210724df161604adccfa257"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb9e3ecda7156604ecc79a42a6e5c37c9f17cd2cfbd01b38ddec626e929fdf682"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 11659789,
        "transactionHash": "0xe6c762ccd6704c064f99715a9b9489245edc7eb21bb1fe059895ef932bcf1db0",
        "address": "0x0ae31C4Fe4634061d97B591e8EaE23d691774c3c",
        "topics": [
          "0x6bf6eaff5e9af8fbccb949f4c38cc016936f8775363ccf4224db160365785d52"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xb9e3ecda7156604ecc79a42a6e5c37c9f17cd2cfbd01b38ddec626e929fdf682"
      }
    ],
    "blockNumber": 11659789,
    "cumulativeGasUsed": "6051472",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x488b62261D2D5ba4d2dcB446aCc355979405953D"
  ],
  "solcInputHash": "f0036cb8afb1ebe4cd0dacc16b49169c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultResolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"DelegateCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sellingTokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"buyingTokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"DelegateCommitItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"DelegateMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"DelegateOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sellingTokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"buyingTokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"DelegateOfferItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Genesis\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"v2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"MigrateV1Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"migrator\",\"type\":\"address\"}],\"name\":\"MigratorV1Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"payoffAmount\",\"type\":\"uint96\"}],\"name\":\"Payoff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"}],\"name\":\"PopItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"ProtocolEthExtracted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"}],\"name\":\"PushItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"earned\",\"type\":\"uint96\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feature\",\"type\":\"uint8\"}],\"name\":\"RotateItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"xs\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"ys\",\"type\":\"uint8[]\"}],\"name\":\"SetAnchorOverrides\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"items\",\"type\":\"uint8[]\"}],\"name\":\"SetProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"protocol\",\"type\":\"uint96\"}],\"name\":\"StakeEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"SwapClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sellingTokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"buyingTokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"SwapClaimItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sellingTokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"SwapItemStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"SwapStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"principal\",\"type\":\"uint96\"}],\"name\":\"TakeLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"TrustUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"TrustedMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"UnStakeEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"UntrustedMint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeEthPerShare\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"res\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sellingTokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint16\",\"name\":\"itemid\",\"type\":\"uint16\"},{\"internalType\":\"uint160\",\"name\":\"buyingTokenId\",\"type\":\"uint160\"}],\"name\":\"claimItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultWidth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultZoom\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sellingTokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint16\",\"name\":\"itemid\",\"type\":\"uint16\"},{\"internalType\":\"uint160\",\"name\":\"buyingTokenId\",\"type\":\"uint160\"}],\"name\":\"delegateItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dotnuggV1Processor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractProtocolEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"getActiveSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"leader\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"_epoch\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isOwner\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOfferByAccount\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"loan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"migrateStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"parsedProofOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"defaultIds\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"extraIds\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"overxs\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"overys\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"payoff\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"prepareFiles\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"input\",\"type\":\"uint256[][]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renderedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"extras\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"}],\"internalType\":\"struct IdotnuggV1Data.Data\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"proofOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"resolverOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint8\",\"name\":\"feature\",\"type\":\"uint8\"}],\"name\":\"rotateFeature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setIsTrusted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint8[]\",\"name\":\"xs\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"ys\",\"type\":\"uint8[]\"}],\"name\":\"setOverrides\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"data\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint8\",\"name\":\"feature\",\"type\":\"uint8\"}],\"name\":\"storeFiles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint96\",\"name\":\"floor\",\"type\":\"uint96\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sellingTokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint16\",\"name\":\"itemid\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"floor\",\"type\":\"uint96\"}],\"name\":\"swapItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLengths\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"res\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProtocolEth\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"res\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedEth\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"res\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedShares\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"res\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trusted\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"trustedMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/NuggFT.sol\":\"NuggFT\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"src/NuggFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721Metadata} from './interfaces/IERC721.sol';\\n\\nimport {INuggFT as a} from './interfaces/INuggFT.sol';\\n\\nimport {TokenExternal as ERC721} from './token/TokenExternal.sol';\\nimport {SwapExternal as Swapable} from './swap/SwapExternal.sol';\\nimport {ProofExternal as Provable} from './proof/ProofExternal.sol';\\nimport {FileExternal as DotNugg} from './file/FileExternal.sol';\\nimport {StakeExternal as Staked} from './stake/StakeExternal.sol';\\nimport {LoanExternal as Loanable} from './loan/LoanExternal.sol';\\nimport {EpochExternal as Epoched} from './epoch/EpochExternal.sol';\\nimport {TrustExternal as Migratable} from './trust/TrustExternal.sol';\\n\\ncontract NuggFT is a, Swapable, Provable, Loanable, Migratable, Staked, Epoched, DotNugg, ERC721 {\\n    constructor(address _defaultResolver) DotNugg(_defaultResolver) {\\n        emit Genesis();\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override(DotNugg, IERC721Metadata) returns (string memory) {\\n        return DotNugg.tokenURI(tokenId);\\n    }\\n\\n    function name() public pure override returns (string memory) {\\n        return 'Nugg Fungible Token V1';\\n    }\\n\\n    function symbol() public pure override returns (string memory) {\\n        return 'NUGGFT';\\n    }\\n}\\n\",\"keccak256\":\"0x7d632a6d6e720a6bfe527a5044b9a7e5319abd9a8fcbedd3f4cc896fa181cc45\",\"license\":\"MIT\"},\"src/epoch/EpochCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\n// MANUAL\\nlibrary EpochCore {\\n    using SafeCastLib for uint256;\\n\\n    struct Storage {\\n        uint32 genesis;\\n    }\\n\\n    uint256 constant INTERVAL = 0xff;\\n    uint32 constant OFFSET = 3000;\\n\\n    function setGenesis() internal {\\n        Storage storage s;\\n        assembly {\\n            s.slot := 0x100042069\\n        }\\n\\n        s.genesis = uint32(block.number);\\n    }\\n\\n    function getGenesis() internal view returns (uint32) {\\n        Storage storage s;\\n\\n        assembly {\\n            s.slot := 0x100042069\\n        }\\n\\n        return s.genesis;\\n    }\\n\\n    function toStartBlock(uint32 epoch) internal view returns (uint256 res) {\\n        res = ((epoch - OFFSET) * INTERVAL) + getGenesis();\\n    }\\n\\n    function toEpoch(uint256 blocknum) internal view returns (uint32 res) {\\n        res = (((blocknum - getGenesis()) / INTERVAL) + OFFSET).safe32();\\n    }\\n\\n    function toEndBlock(uint32 epoch) internal view returns (uint256 res) {\\n        res = toStartBlock(epoch + 1) - 1;\\n    }\\n\\n    function activeEpoch() internal view returns (uint32 res) {\\n        res = toEpoch(block.number);\\n    }\\n\\n    /// @notice gets unique base based on given epoch and converts encoded bytes to object that can be merged\\n    /// Note: by using the block hash no one knows what a nugg will look like before it's epoch.\\n    /// We considered making this harder to manipulate, but we decided that if someone were able to\\n    /// pull it off and make their own custom nugg, that would be really fucking cool.\\n    function calculateSeed() internal view returns (uint256 res, uint32 epoch) {\\n        epoch = activeEpoch();\\n        uint256 startblock = toStartBlock(epoch);\\n        bytes32 bhash = blockhash(startblock - 1);\\n        require(bhash != 0, 'EPC:SBL');\\n        res = uint256(keccak256(abi.encodePacked(bhash, epoch, address(this))));\\n    }\\n}\\n\",\"keccak256\":\"0xe489b85217a581af820269065f757e58160889880772a4b4859d10f5414f650e\",\"license\":\"MIT\"},\"src/epoch/EpochExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IEpochExternal} from '../interfaces/INuggFT.sol';\\n\\nimport {EpochCore} from '../epoch/EpochCore.sol';\\n\\nabstract contract EpochExternal is IEpochExternal {\\n    constructor() {\\n        EpochCore.setGenesis();\\n    }\\n\\n    //\\n    function epoch() external view override returns (uint32) {\\n        return EpochCore.activeEpoch();\\n    }\\n}\\n\",\"keccak256\":\"0xf6000715a26778650617c77671bfb474adab59082fae20430c7f28065c0a9e68\",\"license\":\"MIT\"},\"src/file/FileCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IdotnuggV1Data} from '../interfaces/IdotnuggV1.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {SSTORE2} from '../libraries/SSTORE2.sol';\\n\\nimport {File} from './FileStorage.sol';\\nimport {FilePure} from './FilePure.sol';\\nimport {FileView} from './FileView.sol';\\nimport {ProofPure} from '../proof/ProofPure.sol';\\nimport {ProofView} from '../proof/ProofView.sol';\\n\\nimport {TokenView} from '../token/TokenView.sol';\\n\\nimport {Trust} from '../trust/TrustStorage.sol';\\n\\nlibrary FileCore {\\n    using FilePure for uint256;\\n    using SafeCastLib for uint256;\\n    using SafeCastLib for uint16;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                PROCESS FILES\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function prepareForProcess(uint160 tokenId) internal view returns (uint256[][] memory files, IdotnuggV1Data.Data memory data) {\\n        (uint256 proof, uint8[] memory ids, uint8[] memory extras, uint8[] memory xovers, uint8[] memory yovers) = ProofView\\n            .parsedProofOfIncludingPending(tokenId);\\n\\n        files = FileCore.getBatchFiles(ids);\\n\\n        data = IdotnuggV1Data.Data({\\n            version: 1,\\n            renderedAt: block.timestamp,\\n            name: 'NuggFT V1',\\n            desc: 'Nugg Fungible Token V1 by nugg.xyz',\\n            owner: TokenView.ownerOf(tokenId),\\n            tokenId: tokenId,\\n            proof: proof,\\n            ids: ids,\\n            extras: extras,\\n            xovers: xovers,\\n            yovers: yovers\\n        });\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                RESOLVER SET\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function setResolver(uint160 tokenId, address to) internal {\\n        require(TokenView.isApprovedOrOwner(msg.sender, tokenId), 'T:0');\\n\\n        File.spointer().resolvers[tokenId] = to;\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TRUSTED\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function trustedStoreFiles(\\n        Trust.Storage storage trust,\\n        uint8 feature,\\n        uint256[][] calldata data\\n    ) internal {\\n        require(trust._isTrusted, 'T:0');\\n\\n        uint8 len = data.length.safe8();\\n\\n        require(len > 0, 'VC:0');\\n\\n        uint168 working = uint168(len) << 160;\\n\\n        address ptr = SSTORE2.write(abi.encode(data));\\n\\n        File.spointer().ptrs[feature].push(uint168(uint160(ptr)) | working);\\n\\n        uint256 cache = File.spointer().lengthData;\\n\\n        uint8[] memory lengths = FilePure.getLengths(cache);\\n\\n        lengths[feature] += len;\\n\\n        File.spointer().lengthData = FilePure.setLengths(cache, lengths);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                 GET FILES\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function getBatchFiles(uint8[] memory ids) internal view returns (uint256[][] memory data) {\\n        data = new uint256[][](ids.length);\\n\\n        for (uint8 i = 0; i < ids.length; i++) {\\n            if (ids[i] == 0) data[i] = new uint256[](0);\\n            else data[i] = get(i, ids[i]);\\n        }\\n    }\\n\\n    function get(uint8 feature, uint8 pos) internal view returns (uint256[] memory data) {\\n        require(pos != 0, 'VC:2');\\n\\n        pos--;\\n\\n        uint8 totalLength = FilePure.getLengths(File.spointer().lengthData)[feature];\\n\\n        require(pos < totalLength, 'VC:1');\\n\\n        uint168[] memory ptrs = File.spointer().ptrs[feature];\\n\\n        address store;\\n        uint8 storePos;\\n\\n        uint8 workingPos;\\n\\n        for (uint256 i = 0; i < ptrs.length; i++) {\\n            uint8 here = uint8(ptrs[i] >> 160);\\n            if (workingPos + here > pos) {\\n                store = address(uint160(ptrs[i]));\\n                storePos = pos - workingPos;\\n                break;\\n            } else {\\n                workingPos += here;\\n            }\\n        }\\n\\n        require(store != address(0), 'VC:2');\\n\\n        data = abi.decode(SSTORE2.read(address(uint160(store))), (uint256[][]))[storePos];\\n    }\\n}\\n\",\"keccak256\":\"0xd6d0354aacc28a1e1922c3e90d233b78afb7ce416f4a3537bf38054476ac9f19\",\"license\":\"MIT\"},\"src/file/FileExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IFileExternal} from '../interfaces/INuggFT.sol';\\n\\nimport {IdotnuggV1Processor} from '../interfaces/IdotnuggV1.sol';\\nimport {IdotnuggV1Resolver} from '../interfaces/IdotnuggV1.sol';\\nimport {IdotnuggV1Data} from '../interfaces/IdotnuggV1.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport {FileCore} from './FileCore.sol';\\nimport {FileView} from './FileView.sol';\\nimport {File} from './FileStorage.sol';\\n\\nabstract contract FileExternal is IFileExternal {\\n    using SafeCastLib for uint256;\\n\\n    address public dotnuggV1Processor;\\n\\n    uint8 public defaultWidth = 45;\\n\\n    uint8 public defaultZoom = 10;\\n\\n    constructor(address _dotnuggV1Processor) {\\n        require(_dotnuggV1Processor != address(0));\\n        dotnuggV1Processor = _dotnuggV1Processor;\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            RESOLVER MANAGEMENT\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function setResolver(uint256 tokenId, address to) public virtual override {\\n        FileCore.setResolver(tokenId.safe160(), to);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            MAIN FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory res) {\\n        uint160 safeTokenId = tokenId.safe160();\\n\\n        address resolver = FileView.hasResolver(safeTokenId) ? FileView.resolverOf(safeTokenId) : dotnuggV1Processor;\\n\\n        res = IdotnuggV1Processor(dotnuggV1Processor).dotnuggToString(address(this), tokenId, resolver, defaultWidth, defaultZoom);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                HELPERS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function prepareFiles(uint256 tokenId) public view override returns (uint256[][] memory input, IdotnuggV1Data.Data memory data) {\\n        (input, data) = FileCore.prepareForProcess(tokenId.safe160());\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                VIEW\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function resolverOf(uint256 tokenId) public view virtual override returns (address) {\\n        return FileView.resolverOf(tokenId.safe160());\\n    }\\n\\n    function totalLengths() public view override returns (uint8[] memory res) {\\n        res = FileView.totalLengths();\\n    }\\n}\\n\",\"keccak256\":\"0x06ef922cde5c886674e8a9b67c0eeb4d9e1ea7ac4af507e41720ca098ed53586\",\"license\":\"MIT\"},\"src/file/FilePure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nlibrary FilePure {\\n    using SafeCastLib for uint256;\\n\\n    function decoder(bytes memory data, uint256 feature) internal pure returns (uint256[][] memory res) {\\n        res = abi.decode(abi.decode((data), (bytes[]))[feature], (uint256[][]));\\n    }\\n\\n    function getLengths(uint256 input) internal pure returns (uint8[] memory res) {\\n        res = ShiftLib.getArray(input, 0);\\n    }\\n\\n    function setLengths(uint256 input, uint8[] memory upd) internal pure returns (uint256 res) {\\n        res = ShiftLib.setArray(input, 0, upd);\\n    }\\n\\n    function getAddress(uint256 input) internal pure returns (address res) {\\n        res = address(uint160(input >> 96));\\n    }\\n\\n    function addrsetAddress(uint256 input, address update) internal pure returns (uint256 res) {\\n        res = input & type(uint96).max;\\n        res |= (uint256(uint160(update)) << 96);\\n    }\\n}\\n\",\"keccak256\":\"0x59aa17392f046acb6624c81be6d36807f8df8b7ce0fae9daafcb865c752a3529\",\"license\":\"MIT\"},\"src/file/FileStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\n// TESTED\\nlibrary File {\\n    struct Storage {\\n        uint256 lengthData;\\n        mapping(uint8 => uint168[]) ptrs;\\n        // Mapping from token ID to owner address\\n        mapping(uint256 => address) resolvers;\\n    }\\n\\n    function spointer() internal view returns (Storage storage s) {\\n        return Global.ptr().file;\\n    }\\n}\\n\",\"keccak256\":\"0x84c957212eb5c7dd84e99208f4d495f583b1db88e331b2bc73326c7dfca25e1d\",\"license\":\"MIT\"},\"src/file/FileView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\nimport {File} from './FileStorage.sol';\\nimport {FilePure} from './FilePure.sol';\\n\\n// TESTED\\nlibrary FileView {\\n    function hasResolver(uint160 tokenId) internal view returns (bool) {\\n        return File.spointer().resolvers[tokenId] != address(0);\\n    }\\n\\n    function resolverOf(uint160 tokenId) internal view returns (address) {\\n        return File.spointer().resolvers[tokenId];\\n    }\\n\\n    function totalLengths() internal view returns (uint8[] memory res) {\\n        res = FilePure.getLengths(File.spointer().lengthData);\\n    }\\n}\\n\",\"keccak256\":\"0x9a7f43b6f0be964ee609db3904a3eae3a7fa316c8776ad952b977f1e3ea77bee\",\"license\":\"MIT\"},\"src/global/GlobalStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {File} from '../file/FileStorage.sol';\\nimport {Stake} from '../stake/StakeStorage.sol';\\nimport {Swap} from '../swap/SwapStorage.sol';\\nimport {Proof} from '../proof/ProofStorage.sol';\\nimport {Token} from '../token/TokenStorage.sol';\\nimport {Loan} from '../loan/LoanStorage.sol';\\n\\nlibrary Global {\\n    struct Storage {\\n        Token.Storage token;\\n        Stake.Storage stake;\\n        File.Storage file;\\n        Proof.Storage proof;\\n        Loan.Mapping loan;\\n        Swap.Full swap;\\n    }\\n\\n    function ptr() internal pure returns (Storage storage s) {\\n        assembly {\\n            s.slot := 0x42069\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1bae96634defcc73b04b4e0686aa351e08ff0dd2e1ab188cfadcdc901d34739a\",\"license\":\"MIT\"},\"src/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6dd445f92ecd50eb0287ba77131db4476eb976787dfa3a21e63931322cd8b226\",\"license\":\"MIT\"},\"src/interfaces/INuggFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721, IERC721Metadata, IERC165} from './IERC721.sol';\\n\\nimport {IdotnuggV1Implementer} from '../interfaces/IdotnuggV1.sol';\\n\\ninterface ITrustExternal {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event TrustUpdated(address indexed user);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n    function trustedMint(uint160 tokenId, address to) external;\\n\\n    function extractProtocolEth() external;\\n\\n    function storeFiles(uint256[][] calldata data, uint8 feature) external;\\n\\n    function setIsTrusted(address user) external;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function trusted() external view returns (address);\\n}\\n\\ninterface IStakeExternal {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event StakeEth(uint96 stake, uint96 protocol);\\n    event UnStakeEth(uint96 stake, address to);\\n    event ProtocolEthExtracted(uint96 eth);\\n    event MigratorV1Updated(address migrator);\\n    event MigrateV1Sent(address v2, uint160 tokenId, uint256 proof, address owner, uint96 eth);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function migrateStake(uint160 tokenId) external;\\n\\n    function withdrawStake(uint160 tokenId) external;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function totalProtocolEth() external view returns (uint96);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalStakedShares() external view returns (uint64);\\n\\n    function totalStakedEth() external view returns (uint96);\\n\\n    function activeEthPerShare() external view returns (uint96);\\n}\\n\\ninterface IProofExternal {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event SetProof(uint160 tokenId, uint256 proof, uint8[] items);\\n    event PopItem(uint160 tokenId, uint256 proof, uint16 itemId);\\n    event PushItem(uint160 tokenId, uint256 proof, uint16 itemId);\\n    event RotateItem(uint160 tokenId, uint256 proof, uint8 feature);\\n    event SetAnchorOverrides(uint160 tokenId, uint256 proof, uint8[] xs, uint8[] ys);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function rotateFeature(uint160 tokenId, uint8 feature) external;\\n\\n    function setOverrides(\\n        uint160 tokenId,\\n        uint8[] memory xs,\\n        uint8[] memory ys\\n    ) external;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function proofOf(uint160 tokenId) external view returns (uint256);\\n\\n    function parsedProofOf(uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            uint256 proof,\\n            uint8[] memory defaultIds,\\n            uint8[] memory extraIds,\\n            uint8[] memory overxs,\\n            uint8[] memory overys\\n        );\\n}\\n\\ninterface IFileExternal is IERC721Metadata, IdotnuggV1Implementer {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function totalLengths() external view returns (uint8[] memory res);\\n}\\n\\ninterface ILoanExternal {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event TakeLoan(uint160 tokenId, uint96 principal);\\n    event Payoff(uint160 tokenId, address account, uint96 payoffAmount);\\n    event Rebalance(uint160 tokenId, uint96 fee, uint96 earned);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function rebalance(uint160 tokenId) external payable;\\n\\n    function loan(uint160 tokenId) external;\\n\\n    function payoff(uint160 tokenId) external payable;\\n}\\n\\ninterface ITokenExternal is IERC721 {\\n    function mint(uint160 tokenId) external;\\n\\n    event TrustedMint(address indexed to, uint160 tokenId);\\n    event UntrustedMint(address indexed by, uint160 tokenId);\\n}\\n\\ninterface ISwapExternal {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event DelegateMint(uint256 epoch, address account, uint96 eth);\\n    event DelegateCommit(uint160 tokenId, address account, uint96 eth);\\n    event DelegateOffer(uint160 tokenId, address account, uint96 eth);\\n    event SwapClaim(uint160 tokenId, address account, uint32 epoch);\\n    event SwapStart(uint160 tokenId, address account, uint96 eth);\\n\\n    event DelegateCommitItem(uint160 sellingTokenId, uint16 itemId, uint160 buyingTokenId, uint96 eth);\\n    event DelegateOfferItem(uint160 sellingTokenId, uint16 itemId, uint160 buyingTokenId, uint96 eth);\\n    event SwapClaimItem(uint160 sellingTokenId, uint16 itemId, uint160 buyingTokenId, uint32 epoch);\\n    event SwapItemStart(uint160 sellingTokenId, uint16 itemId, uint96 eth);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function delegate(uint160 tokenId) external payable;\\n\\n    function delegateItem(\\n        uint160 sellerTokenId,\\n        uint16 itemid,\\n        uint160 buyerTokenId\\n    ) external payable;\\n\\n    function claim(uint160 tokenId) external;\\n\\n    function claimItem(\\n        uint160 sellerTokenId,\\n        uint16 itemid,\\n        uint160 buyerTokenId\\n    ) external;\\n\\n    function swap(uint160 tokenId, uint96 floor) external;\\n\\n    function swapItem(\\n        uint160 tokenId,\\n        uint16 itemid,\\n        uint96 floor\\n    ) external;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function getOfferByAccount(uint160 tokenId, address account) external view returns (uint96 eth);\\n\\n    function getActiveSwap(uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            address leader,\\n            uint96 eth,\\n            uint32 _epoch,\\n            bool isOwner\\n        );\\n}\\n\\ninterface IEpochExternal {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function epoch() external view returns (uint32 res);\\n}\\n\\ninterface INuggFT is\\n    ISwapExternal,\\n    ITokenExternal,\\n    IStakeExternal,\\n    ILoanExternal,\\n    IProofExternal,\\n    IFileExternal,\\n    IEpochExternal,\\n    ITrustExternal\\n{\\n    event Genesis();\\n}\\n\",\"keccak256\":\"0xc5938f7ad2f3ea3970ab9e63969d039e618f3c141a7a62ddb418db3ac345b56f\",\"license\":\"MIT\"},\"src/interfaces/INuggFTV1Migrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggFTV1Migrator {\\n    event MigrateV1Accepted(address v1, uint160 tokenId, uint256 proof, address owner, uint96 eth);\\n\\n    function nuggftMigrateFromV1(\\n        uint160 tokenId,\\n        uint256 proof,\\n        address owner\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x904a8d89ba1525b35542f1626bf47ba055b607c92c8c2e601c845ab561a96b7c\",\"license\":\"MIT\"},\"src/interfaces/IdotnuggV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IdotnuggV1Data {\\n    struct Data {\\n        uint256 version;\\n        uint256 renderedAt;\\n        string name;\\n        string desc;\\n        address owner;\\n        uint256 tokenId;\\n        uint256 proof;\\n        uint8[] ids;\\n        uint8[] extras;\\n        uint8[] xovers;\\n        uint8[] yovers;\\n    }\\n}\\n\\ninterface IdotnuggV1Resolver {\\n    function resolveBytes(\\n        uint256[] memory file,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 zoom\\n    ) external view returns (bytes memory res);\\n\\n    function resolveRaw(\\n        uint256[] memory file,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 zoom\\n    ) external view returns (uint256[] memory res);\\n\\n    function resolveData(\\n        uint256[] memory file,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 zoom\\n    ) external view returns (IdotnuggV1Data.Data memory res);\\n\\n    function resolveString(\\n        uint256[] memory file,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 zoom\\n    ) external view returns (string memory res);\\n}\\n\\ninterface IdotnuggV1Processor is IdotnuggV1Resolver {\\n    function dotnuggToBytes(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (bytes memory res);\\n\\n    function dotnuggToRaw(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (uint256[] memory res);\\n\\n    function dotnuggToData(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (IdotnuggV1Data.Data memory res);\\n\\n    function dotnuggToString(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (string memory res);\\n\\n    function process(\\n        address implementer,\\n        uint256 tokenId,\\n        uint8 width\\n    ) external view returns (uint256[] memory file, IdotnuggV1Data.Data memory dat);\\n\\n    function processCore(\\n        uint256[][] memory files,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 width\\n    ) external view returns (uint256[] memory file);\\n}\\n\\ninterface IdotnuggV1Implementer {\\n    function setResolver(uint256 tokenId, address to) external;\\n\\n    function resolverOf(uint256 tokenId) external view returns (address resolver);\\n\\n    function prepareFiles(uint256 tokenId) external view returns (uint256[][] memory file, IdotnuggV1Data.Data memory data);\\n}\\n\",\"keccak256\":\"0x183196b8cacf20439ef116622fcdbe0bbbe5138a7cdae895cea7eaa9c30d5749\",\"license\":\"MIT\"},\"src/libraries/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/// @notice Read and write to persistent storage at a fraction of the cost.\\n/// @author Modified from 0xSequence (https://github.com/0xsequence/sstore2/blob/master/contracts/SSTORE2.sol)\\nlibrary SSTORE2 {\\n    uint256 internal constant DATA_OFFSET = 1;\\n\\n    function write(bytes memory data) internal returns (address pointer) {\\n        bytes memory runtimeCode = abi.encodePacked(hex'00', data);\\n\\n        bytes memory creationCode = abi.encodePacked(hex'63', uint32(runtimeCode.length), hex'80_60_0E_60_00_39_60_00_F3', runtimeCode);\\n\\n        assembly {\\n            pointer := create(0, add(creationCode, 32), mload(creationCode))\\n        }\\n\\n        require(pointer != address(0), 'DEPLOYMENT_FAILED');\\n    }\\n\\n    function read(address pointer) internal view returns (bytes memory) {\\n        return readBytecode(pointer, DATA_OFFSET, pointer.code.length - DATA_OFFSET);\\n    }\\n\\n    function read(address pointer, uint256 start) internal view returns (bytes memory) {\\n        start += DATA_OFFSET;\\n\\n        return readBytecode(pointer, start, pointer.code.length - start);\\n    }\\n\\n    function read(\\n        address pointer,\\n        uint256 start,\\n        uint256 end\\n    ) internal view returns (bytes memory) {\\n        start += DATA_OFFSET;\\n        end += DATA_OFFSET;\\n\\n        require(pointer.code.length >= end, 'OUT_OF_BOUNDS');\\n\\n        return readBytecode(pointer, start, end - start);\\n    }\\n\\n    function readBytecode(\\n        address pointer,\\n        uint256 start,\\n        uint256 size\\n    ) private view returns (bytes memory data) {\\n        assembly {\\n            data := mload(0x40)\\n            mstore(0x40, add(data, and(add(add(size, add(start, 0x20)), 0x1f), not(0x1f))))\\n            mstore(data, size)\\n            extcodecopy(pointer, add(data, 0x20), start, size)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x92a5788f76f3e7e98643d8791cb2da664f1865cc50f7843594e0e5ecd7a68283\",\"license\":\"MIT\"},\"src/libraries/SafeCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n// OK\\n/// @notice Safe unsigned integer casting library that reverts on overflow.\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\\nlibrary SafeCastLib {\\n    function safe160(uint256 x) internal pure returns (uint160 y) {\\n        require(x <= type(uint160).max);\\n        y = uint160(x);\\n    }\\n\\n    function safe96(uint256 x) internal pure returns (uint96 y) {\\n        require(x <= type(uint96).max);\\n        y = uint96(x);\\n    }\\n\\n    function safe64(uint256 x) internal pure returns (uint64 y) {\\n        require(x <= type(uint64).max);\\n        y = uint64(x);\\n    }\\n\\n    function safe32(uint256 x) internal pure returns (uint32 y) {\\n        require(x <= type(uint32).max);\\n        y = uint32(x);\\n    }\\n\\n    function safe16(uint256 x) internal pure returns (uint16 y) {\\n        require(x <= type(uint16).max);\\n        y = uint16(x);\\n    }\\n\\n    function safe8(uint256 x) internal pure returns (uint8 y) {\\n        require(x <= type(uint8).max);\\n        y = uint8(x);\\n    }\\n}\\n\",\"keccak256\":\"0xabebd3a3bff23b926901d1aad6aa461761cfb4db8c9685a0b803597c78590864\",\"license\":\"MIT\"},\"src/libraries/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721Receiver} from '../interfaces/IERC721.sol';\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\nlibrary SafeTransferLib {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            ETH OPERATIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, 'ETH_TRANSFER_FAILED');\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            NFT OPERATIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function isERC721Receiver(address to, uint256 tokenId) internal returns (bool) {\\n        if (SafeTransferLib.isDeployedContract(to)) {\\n            try IERC721Receiver(to).onERC721Received(msg.sender, address(this), tokenId, '') returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert('ERC721: transfer to non ERC721Receiver implementer');\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function isDeployedContract(address account) internal view returns (bool res) {\\n        res = account.code.length != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x086d01c3b7c7fbf1010e861282d7759db189d901439d0a31f63405fd3be634eb\",\"license\":\"MIT\"},\"src/libraries/ShiftLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeCastLib} from './SafeCastLib.sol';\\n\\nlibrary ShiftLib {\\n    using SafeCastLib for uint256;\\n\\n    /// @notice creates a bit mask\\n    /// @dev res = (2 ^ bits) - 1\\n    /// @param bits d\\n    /// @return res d\\n    /// @dev no need to check if \\\"bits\\\" is < 256 as anything greater than 255 will be treated the same\\n    function mask(uint8 bits) internal pure returns (uint256 res) {\\n        assembly {\\n            res := sub(shl(bits, 1), 1)\\n        }\\n    }\\n\\n    function fullsubmask(uint8 bits, uint8 pos) internal pure returns (uint256 res) {\\n        res = ~(mask(bits) << pos);\\n    }\\n\\n    function set(\\n        uint256 preStore,\\n        uint8 bits,\\n        uint8 pos,\\n        uint256 value\\n    ) internal pure returns (uint256 postStore) {\\n        postStore = preStore & fullsubmask(bits, pos);\\n\\n        assembly {\\n            value := shl(pos, value)\\n        }\\n\\n        postStore |= value;\\n    }\\n\\n    function get(\\n        uint256 store,\\n        uint8 bits,\\n        uint8 pos\\n    ) internal pure returns (uint256 value) {\\n        assembly {\\n            value := shr(pos, store)\\n        }\\n        value &= mask(bits);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                ARRAYS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function getArray(uint256 store, uint8 pos) internal pure returns (uint8[] memory arr) {\\n        store = get(store, 64, pos);\\n\\n        arr = new uint8[](8);\\n        for (uint256 i = 0; i < 8; i++) {\\n            arr[i] = uint8(store & 0xff);\\n            store >>= 8;\\n        }\\n    }\\n\\n    function setArray(\\n        uint256 store,\\n        uint8 pos,\\n        uint8[] memory arr\\n    ) internal pure returns (uint256 res) {\\n        for (uint256 i = 8; i > 0; i--) {\\n            res |= uint256(arr[i - 1]) << ((8 * (i - 1)));\\n        }\\n\\n        res = set(store, 64, pos, res);\\n    }\\n}\\n\",\"keccak256\":\"0x8510e18448ed3be8b7ddbb4578be829e3c69946eb3e0fcecbb872671c127f8dd\",\"license\":\"MIT\"},\"src/loan/LoanCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\nimport {Loan} from '../loan/LoanStorage.sol';\\n\\nimport {TokenCore} from '../token/TokenCore.sol';\\nimport {StakeCore} from '../stake/StakeCore.sol';\\n\\nimport {SwapPure} from '../swap/SwapPure.sol';\\n\\nimport {TokenView} from '../token/TokenView.sol';\\nimport {StakeView} from '../stake/StakeView.sol';\\nimport {EpochCore} from '../epoch/EpochCore.sol';\\n\\nlibrary LoanCore {\\n    using SafeCastLib for uint256;\\n    using SwapPure for uint256;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    uint32 constant LIQUIDATION_PERIOD = 1000;\\n    uint96 constant REBALANCE_FEE_BPS = 100;\\n    uint32 constant REBALANCE_PERIOD_INCREASE = 1000;\\n\\n    event TakeLoan(uint160 tokenId, uint96 principal);\\n    event Payoff(uint160 tokenId, address account, uint96 payoffAmount);\\n    event Rebalance(uint160 tokenId, uint96 fee, uint96 earned);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            LOAN MANAGEMENT\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    // @hh system tests\\n    function loan(uint160 tokenId) internal {\\n        // we know the loan data is blank because it is owned by the user\\n        require(TokenView.ownerOf(tokenId) == msg.sender, 'LOAN:L:0');\\n\\n        TokenCore.approvedTransferToSelf(tokenId);\\n\\n        uint96 principal = StakeView.getActiveEthPerShare();\\n\\n        uint32 epoch = EpochCore.activeEpoch();\\n\\n        (uint256 loanData, ) = SwapPure.buildSwapData(epoch, uint160(msg.sender), principal, false);\\n\\n        Loan.sstore(tokenId, loanData); // starting swap data\\n\\n        SafeTransferLib.safeTransferETH(msg.sender, principal);\\n\\n        emit TakeLoan(tokenId, principal);\\n    }\\n\\n    // @hh system tests\\n    function rebalance(uint160 tokenId) internal {\\n        require(address(this) == TokenView.ownerOf(tokenId), 'LOAN:P:0');\\n\\n        uint256 cache = Loan.sload(tokenId);\\n\\n        require(cache != 0 && cache.account() == uint160(msg.sender), 'LOAN:P:2');\\n\\n        uint96 curr = cache.eth(); // in their pocket atm\\n\\n        uint96 fee = ((curr * REBALANCE_FEE_BPS) / 10000); // fee to be paid 69\\n\\n        require(fee <= msg.value, 'LOAN:RE:0'); // 70\\n\\n        uint96 preEps = StakeView.getActiveEthPerShare();\\n\\n        StakeCore.addStakedEth(fee);\\n\\n        uint96 newPrincipal = StakeView.getActiveEthPerShare();\\n\\n        (uint256 loanData, uint96 dust) = SwapPure.buildSwapData(\\n            cache.epoch() + REBALANCE_PERIOD_INCREASE,\\n            uint160(msg.sender),\\n            newPrincipal,\\n            false\\n        );\\n\\n        Loan.sstore(tokenId, loanData); // starting swap data\\n\\n        uint96 overpayment = msg.value.safe96() - fee; // 1 wei\\n\\n        uint96 update = curr + fee;\\n\\n        // value earned while lone was taken out\\n        uint96 earnings = update >= preEps ? 0 : preEps - update;\\n\\n        uint96 owed = earnings + overpayment + dust;\\n\\n        SafeTransferLib.safeTransferETH(msg.sender, owed);\\n\\n        emit Rebalance(tokenId, fee, earnings);\\n    }\\n\\n    // @hh system tests\\n    function payoff(uint160 tokenId) internal {\\n        require(address(this) == TokenView.ownerOf(tokenId), 'LOAN:P:0');\\n\\n        uint256 cache = Loan.sload(tokenId);\\n\\n        Loan.spurge(tokenId); // starting swap data\\n\\n        uint32 epoch = EpochCore.activeEpoch();\\n\\n        if (cache.epoch() + LIQUIDATION_PERIOD >= epoch) {\\n            require(cache.account() == uint160(msg.sender), 'LOAN:P:1');\\n        }\\n\\n        require(cache != 0, 'LOAN:P:2');\\n\\n        uint96 curr = cache.eth(); // in their pocket atm\\n\\n        uint96 fee = (curr * REBALANCE_FEE_BPS) / 10000; // fee to be paid\\n\\n        uint96 payoffAmount = fee + curr;\\n\\n        require(payoffAmount <= msg.value, 'LOAN:RE:0');\\n\\n        uint96 value = msg.value.safe96();\\n\\n        uint96 overpayment = value - fee;\\n\\n        uint96 update = curr + fee;\\n\\n        uint96 activeEps = StakeView.getActiveEthPerShare();\\n\\n        // value earned while lone was taken out\\n        uint96 earnings = update >= activeEps ? 0 : activeEps - update;\\n\\n        uint96 owed = earnings + overpayment;\\n\\n        StakeCore.addStakedEth(fee);\\n\\n        SafeTransferLib.safeTransferETH(msg.sender, owed);\\n\\n        TokenCore.checkedTransferFromSelf(msg.sender, tokenId);\\n\\n        emit Rebalance(tokenId, fee, earnings);\\n\\n        emit Payoff(tokenId, msg.sender, payoffAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xead941e2b90d0d9659c81114983f17a9ad2d619a4fb4986ec4c960707107e067\",\"license\":\"MIT\"},\"src/loan/LoanExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ILoanExternal} from '../interfaces/INuggFT.sol';\\n\\nimport {LoanCore} from './LoanCore.sol';\\n\\nabstract contract LoanExternal is ILoanExternal {\\n    function loan(uint160 tokenId) external override {\\n        LoanCore.loan(tokenId);\\n    }\\n\\n    function payoff(uint160 tokenId) external payable override {\\n        LoanCore.payoff(tokenId);\\n    }\\n\\n    function rebalance(uint160 tokenId) external payable override {\\n        LoanCore.rebalance(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xf41f2ae257a1a3e4d7170f97db9053d93641f63df6424f41e89f6d5136995673\",\"license\":\"MIT\"},\"src/loan/LoanStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\nlibrary Loan {\\n    struct Mapping {\\n        mapping(uint256 => uint256) map;\\n    }\\n\\n    function sstore(uint160 tokenId, uint256 data) internal {\\n        Global.ptr().loan.map[tokenId] = data;\\n    }\\n\\n    function spurge(uint160 tokenId) internal {\\n        delete Global.ptr().loan.map[tokenId];\\n    }\\n\\n    function sload(uint160 tokenId) internal view returns (uint256) {\\n        return Global.ptr().loan.map[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0xf4d38962a076e171796403317f9f100e0e45352d0dd6caabb5341e476c62a20f\",\"license\":\"MIT\"},\"src/proof/ProofCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport {EpochCore} from '../epoch/EpochCore.sol';\\n\\nimport {Proof} from './ProofStorage.sol';\\n\\nimport {ProofPure} from './ProofPure.sol';\\nimport {ProofView} from './ProofView.sol';\\n\\nimport {TokenView} from '../token/TokenView.sol';\\n\\nimport {FileView} from '../file/FileView.sol';\\nimport {File} from '../file/FileStorage.sol';\\nimport {Trust} from '../trust/TrustStorage.sol';\\n\\n// OK\\nlibrary ProofCore {\\n    using SafeCastLib for uint256;\\n    using ProofPure for uint256;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event SetProof(uint160 tokenId, uint256 proof, uint8[] items);\\n    event PopItem(uint160 tokenId, uint256 proof, uint16 itemId);\\n    event PushItem(uint160 tokenId, uint256 proof, uint16 itemId);\\n    event RotateItem(uint160 tokenId, uint256 proof, uint8 feature);\\n    event SetAnchorOverrides(uint160 tokenId, uint256 proof, uint8[] xs, uint8[] ys);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            EXTERNAL MANAGEMENT\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function rotateFeature(uint160 tokenId, uint8 feature) internal {\\n        require(TokenView.ownerOf(tokenId) == msg.sender, 'PC:2');\\n\\n        uint256 working = ProofView.checkedProofOf(tokenId);\\n\\n        working = ProofPure.rotateDefaultandExtra(working, feature);\\n\\n        working = ProofPure.clearAnchorOverridesForFeature(working, feature);\\n\\n        Proof.set(tokenId, working);\\n\\n        emit RotateItem(tokenId, working, feature);\\n    }\\n\\n    function setAnchorOverrides(\\n        uint160 tokenId,\\n        uint8[] memory xs,\\n        uint8[] memory ys\\n    ) internal {\\n        require(TokenView.ownerOf(tokenId) == msg.sender, 'PC:2');\\n\\n        require(xs.length == 8 && ys.length == 8, 'PC:3');\\n\\n        uint256 working = ProofView.checkedProofOf(tokenId);\\n\\n        working = ProofPure.setNewAnchorOverrides(working, xs, ys);\\n\\n        Proof.set(tokenId, working);\\n\\n        emit SetAnchorOverrides(tokenId, working, xs, ys);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            SWAP MANAGEMENT\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function addItem(uint160 tokenId, uint16 itemId) internal {\\n        require(TokenView.ownerOf(tokenId) == msg.sender, 'PC:0');\\n\\n        uint256 working = ProofView.checkedProofOf(tokenId);\\n\\n        require(Proof.ptr().protcolItems[itemId] > 0, 'RC:3');\\n\\n        Proof.ptr().protcolItems[itemId]--;\\n\\n        working = ProofPure.pushToExtra(working, itemId);\\n\\n        Proof.set(tokenId, working);\\n\\n        emit PushItem(tokenId, working, itemId);\\n    }\\n\\n    function removeItem(uint160 tokenId, uint16 itemId) internal {\\n        require(TokenView.ownerOf(tokenId) == msg.sender, 'PC:1');\\n\\n        uint256 working = ProofView.checkedProofOf(tokenId);\\n\\n        working = ProofPure.pullFromExtra(working, itemId);\\n\\n        Proof.set(tokenId, working);\\n\\n        Proof.ptr().protcolItems[itemId]++;\\n\\n        emit PopItem(tokenId, working, itemId);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            INITIALIZATION\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function setProof(uint160 tokenId) internal {\\n        require(!ProofView.hasProof(tokenId), 'P:0');\\n\\n        uint256 randomEnoughSeed = uint256(keccak256(abi.encodePacked(hex'420690', tokenId, blockhash(block.number - 1))));\\n\\n        require(randomEnoughSeed != 0, 'P:1');\\n\\n        (uint256 res, uint8[] memory picks) = ProofCore.initFromSeed(randomEnoughSeed);\\n\\n        Proof.set(tokenId, res);\\n\\n        emit SetProof(tokenId, res, picks);\\n    }\\n\\n    function setProofFromEpoch(uint160 tokenId) internal {\\n        require(!ProofView.hasProof(tokenId), 'P:2');\\n\\n        (uint256 seed, uint256 epoch, uint256 res, uint8[] memory picks) = pendingProof();\\n\\n        require(seed != 0, 'P:3');\\n        require(epoch == tokenId, 'P:4');\\n\\n        Proof.set(tokenId, res);\\n\\n        emit SetProof(tokenId, res, picks);\\n    }\\n\\n    // TODO TO BE TESTED\\n    function initFromSeed(uint256 seed) internal view returns (uint256 res, uint8[] memory upd) {\\n        require(seed != 0, 'P:6');\\n\\n        uint8[] memory lengths = FileView.totalLengths();\\n\\n        upd = new uint8[](8);\\n\\n        uint8[] memory picks = ShiftLib.getArray(seed, 0);\\n\\n        upd[0] = (picks[0] % lengths[0]) + 1;\\n        upd[1] = (picks[1] % lengths[1]) + 1;\\n        upd[2] = (picks[2] % lengths[2]) + 1;\\n\\n        if (picks[3] < 96) upd[3] = (picks[4] % lengths[3]) + 1;\\n        else if (picks[3] < 192) upd[4] = (picks[4] % lengths[4]) + 1;\\n        else if (picks[3] < 250) upd[5] = (picks[4] % lengths[5]) + 1;\\n        else upd[6] = (picks[4] % lengths[6]) + 1;\\n\\n        res = ShiftLib.setArray(res, 0, upd);\\n    }\\n\\n    function pendingProof()\\n        internal\\n        view\\n        returns (\\n            uint256 seed,\\n            uint256 epoch,\\n            uint256 proof,\\n            uint8[] memory defaultIds\\n        )\\n    {\\n        (seed, epoch) = EpochCore.calculateSeed();\\n\\n        (proof, defaultIds) = ProofCore.initFromSeed(seed);\\n    }\\n}\\n\",\"keccak256\":\"0x281b1c35fae75577950ab577117648bb4ecca4fb54b820eac1d6723365f5a0c5\",\"license\":\"MIT\"},\"src/proof/ProofExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IProofExternal} from '../interfaces/INuggFT.sol';\\n\\nimport {Proof} from './ProofStorage.sol';\\n\\nimport {EpochCore} from '../epoch/EpochCore.sol';\\n\\nimport {ProofCore} from './ProofCore.sol';\\nimport {ProofView} from './ProofView.sol';\\n\\n// OK\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ProofExternal is IProofExternal {\\n    function rotateFeature(uint160 tokenId, uint8 feature) external override {\\n        ProofCore.rotateFeature(tokenId, feature);\\n    }\\n\\n    function setOverrides(\\n        uint160 tokenId,\\n        uint8[] memory xs,\\n        uint8[] memory ys\\n    ) external override {\\n        ProofCore.setAnchorOverrides(tokenId, xs, ys);\\n    }\\n\\n    function proofOf(uint160 tokenId) public view virtual override returns (uint256) {\\n        return ProofView.checkedProofOfIncludingPending(tokenId);\\n    }\\n\\n    function parsedProofOf(uint160 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint256 proof,\\n            uint8[] memory defaultIds,\\n            uint8[] memory extraIds,\\n            uint8[] memory overxs,\\n            uint8[] memory overys\\n        )\\n    {\\n        return ProofView.parsedProofOfIncludingPending(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x06ba47ea7ad4f888ed2cdec87c505b7b2eaa2550d99d84ec82a5cc06d2397e70\",\"license\":\"MIT\"},\"src/proof/ProofPure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\nimport {FilePure} from '../file/FilePure.sol';\\n\\n// import {Print} from '../_test/utils/Print.sol';\\n\\nlibrary ProofPure {\\n    using ShiftLib for uint256;\\n\\n    function fullProof(uint256 input)\\n        internal\\n        pure\\n        returns (\\n            uint256 proof,\\n            uint8[] memory defaultIds,\\n            uint8[] memory extraIds,\\n            uint8[] memory overxs,\\n            uint8[] memory overys\\n        )\\n    {\\n        proof = input;\\n        defaultIds = ShiftLib.getArray(proof, 0);\\n        extraIds = ShiftLib.getArray(proof, 64);\\n        overxs = ShiftLib.getArray(proof, 128);\\n        overys = ShiftLib.getArray(proof, 192);\\n    }\\n\\n    function pushToExtra(uint256 input, uint16 itemId) internal pure returns (uint256 res) {\\n        uint8[] memory arr = ShiftLib.getArray(input, 64);\\n\\n        (uint8 feat, uint8 pos) = parseItemId(itemId);\\n\\n        require(arr[feat] == 0, 'PP:0');\\n\\n        arr[feat] = pos;\\n\\n        res = ShiftLib.setArray(input, 64, arr);\\n    }\\n\\n    function pullFromExtra(uint256 input, uint16 itemId) internal pure returns (uint256 res) {\\n        uint8[] memory arr = ShiftLib.getArray(input, 64);\\n\\n        (uint8 feat, uint8 pos) = parseItemId(itemId);\\n\\n        require(arr[feat] == pos, 'PP:1');\\n\\n        arr[feat] = 0;\\n\\n        res = ShiftLib.setArray(input, 64, arr);\\n    }\\n\\n    function rotateDefaultandExtra(uint256 input, uint8 feature) internal pure returns (uint256 res) {\\n        uint8[] memory def = ShiftLib.getArray(input, 0);\\n        uint8[] memory ext = ShiftLib.getArray(input, 64);\\n\\n        uint8 tmp = ext[feature];\\n        ext[feature] = def[feature];\\n        def[feature] = tmp;\\n\\n        res = ShiftLib.setArray(input, 0, def);\\n        res = ShiftLib.setArray(res, 64, ext);\\n    }\\n\\n    function setNewAnchorOverrides(\\n        uint256 input,\\n        uint8[] memory xs,\\n        uint8[] memory ys\\n    ) internal pure returns (uint256 res) {\\n        res = ShiftLib.setArray(input, 128, xs);\\n        res = ShiftLib.setArray(res, 192, ys);\\n    }\\n\\n    function clearAnchorOverridesForFeature(uint256 input, uint8 feature) internal pure returns (uint256 res) {\\n        uint8[] memory x = ShiftLib.getArray(input, 128);\\n        uint8[] memory y = ShiftLib.getArray(input, 192);\\n\\n        y[feature] = 0;\\n        x[feature] = 0;\\n\\n        res = ShiftLib.setArray(input, 128, x);\\n        res = ShiftLib.setArray(res, 192, y);\\n    }\\n\\n    function parseItemId(uint16 itemId) internal pure returns (uint8 feat, uint8 pos) {\\n        feat = uint8(itemId >> 8);\\n        pos = uint8(itemId & 0xff);\\n    }\\n}\\n\",\"keccak256\":\"0xebb427f3401c882d6ea0bd70557adf5c79f853bb34234d7651169b851e0a1e27\",\"license\":\"MIT\"},\"src/proof/ProofStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\npragma solidity 0.8.9;\\n\\n// OK\\nlibrary Proof {\\n    struct Storage {\\n        mapping(uint256 => uint256) map;\\n        mapping(uint256 => uint256) protcolItems;\\n    }\\n\\n    function ptr() internal view returns (Storage storage s) {\\n        s = Global.ptr().proof;\\n    }\\n\\n    function get(uint160 tokenId) internal view returns (uint256) {\\n        return ptr().map[tokenId];\\n    }\\n\\n    function set(uint160 tokenId, uint256 data) internal {\\n        ptr().map[tokenId] = data;\\n    }\\n}\\n\",\"keccak256\":\"0x0bd274b62ab7116d8a76c5be7d6271f127eed65a749d269046515941bb19e676\",\"license\":\"MIT\"},\"src/proof/ProofView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\nimport {EpochCore} from '../epoch/EpochCore.sol';\\n\\nimport {ProofCore} from './ProofCore.sol';\\n\\nimport {ProofPure} from './ProofPure.sol';\\n\\nimport {Proof} from './ProofStorage.sol';\\n\\n// OK\\nlibrary ProofView {\\n    function checkedProofOf(uint160 tokenId) internal view returns (uint256 res) {\\n        res = Proof.get(tokenId);\\n        require(res != 0, 'PROOF:PO:0');\\n    }\\n\\n    function checkedProofOfIncludingPending(uint160 tokenId) internal view returns (uint256 res) {\\n        (uint256 seed, uint256 epoch, uint256 proof, ) = ProofCore.pendingProof();\\n\\n        if (epoch == tokenId && seed != 0) return proof;\\n\\n        res = Proof.get(tokenId);\\n\\n        require(res != 0, 'PO:1');\\n    }\\n\\n    function hasProof(uint160 tokenId) internal view returns (bool res) {\\n        res = Proof.get(tokenId) != 0;\\n    }\\n\\n    function parsedProofOfIncludingPending(uint160 tokenId)\\n        internal\\n        view\\n        returns (\\n            uint256 proof,\\n            uint8[] memory defaultIds,\\n            uint8[] memory extraIds,\\n            uint8[] memory overxs,\\n            uint8[] memory overys\\n        )\\n    {\\n        proof = checkedProofOfIncludingPending(tokenId);\\n\\n        return ProofPure.fullProof(proof);\\n    }\\n}\\n\",\"keccak256\":\"0x73bed356d87ac239741bb03c7434eb15692a276cc07247f78c161cf8f2c6ebd5\",\"license\":\"MIT\"},\"src/stake/StakeCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggFTV1Migrator} from '../interfaces/INuggFTV1Migrator.sol';\\n\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\nimport {TokenCore} from '../token/TokenCore.sol';\\nimport {TokenView} from '../token/TokenView.sol';\\nimport {ProofView} from '../proof/ProofView.sol';\\n\\nimport {StakePure} from './StakePure.sol';\\nimport {StakeView} from './StakeView.sol';\\nimport {Stake} from './StakeStorage.sol';\\nimport {Trust} from '../trust/TrustStorage.sol';\\n\\n// SYSTEM\\n/// @title A title that should describe the contract/interface\\n/// @author dub6ix\\n/// @notice Explain to an end user what this does\\n/// @dev Explain to a developer any extra details\\nlibrary StakeCore {\\n    using StakePure for uint256;\\n\\n    uint96 constant PROTOCOL_FEE_BPS = 1000;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event StakeEth(uint96 stake, uint96 protocol);\\n    event UnStakeEth(uint96 stake, address to);\\n    event ProtocolEthExtracted(uint96 eth);\\n    event MigratorV1Updated(address migrator);\\n    event MigrateV1Sent(address v2, uint160 tokenId, uint256 proof, address owner, uint96 eth);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                 TRUSTED\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function trustedExtractProtocolEth(Trust.Storage storage trust) internal {\\n        require(trust._isTrusted, 'T:0');\\n\\n        uint256 cache = Stake.sload();\\n\\n        uint96 eth = cache.getProtocolEth();\\n\\n        SafeTransferLib.safeTransferETH(msg.sender, eth);\\n\\n        Stake.sstore(cache.setProtocolEth(0));\\n\\n        emit ProtocolEthExtracted(eth);\\n    }\\n\\n    function trustedSetMigrator(Trust.Storage storage trust, address migrator) internal {\\n        require(trust._isTrusted, 'T:1');\\n\\n        Stake.spointer().trustedMigrator = migrator;\\n\\n        emit MigratorV1Updated(migrator);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                 ADD\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function addStakedShareAndEth(uint96 eth) internal {\\n        uint256 cache = Stake.sload();\\n\\n        (uint64 activeShares, uint96 activeEth, uint96 activeProtocolEth) = cache.getStakedSharesAndEth();\\n\\n        uint96 protocol = (eth * PROTOCOL_FEE_BPS) / 10000;\\n\\n        eth -= protocol;\\n\\n        require(eth >= cache.getEthPerShare(), 'SL:M:0');\\n\\n        Stake.sstore(cache.setStakedShares(activeShares + 1).setStakedEth(activeEth + eth).setProtocolEth(activeProtocolEth + protocol));\\n\\n        emit StakeEth(eth, protocol);\\n    }\\n\\n    function addStakedShares(uint64 amount) internal {\\n        uint256 cache = Stake.sload();\\n\\n        require(cache.getStakedEth() == 0, 'SC:0');\\n\\n        Stake.sstore(cache.setStakedShares(cache.getStakedShares() + amount));\\n    }\\n\\n    function addStakedEth(uint96 amount) internal {\\n        uint256 cache = Stake.sload();\\n\\n        uint96 protocol = (amount * PROTOCOL_FEE_BPS) / 10000;\\n\\n        amount -= protocol;\\n\\n        Stake.sstore(cache.setStakedEth(cache.getStakedEth() + amount).setProtocolEth(cache.getProtocolEth() + protocol));\\n\\n        emit StakeEth(amount, protocol);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                BURN/MIGRATE\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function migrateStakedShare(uint160 tokenId) internal {\\n        address migrator = Stake.spointer().trustedMigrator;\\n\\n        require(migrator != address(0));\\n\\n        uint256 proof = ProofView.checkedProofOf(tokenId);\\n\\n        uint96 ethOwed = subStakedShare(tokenId);\\n\\n        INuggFTV1Migrator(migrator).nuggftMigrateFromV1{value: ethOwed}(tokenId, proof, msg.sender);\\n\\n        emit MigrateV1Sent(migrator, tokenId, proof, msg.sender, ethOwed);\\n    }\\n\\n    function burnStakedShare(uint160 tokenId) internal {\\n        uint96 ethOwed = subStakedShare(tokenId);\\n\\n        SafeTransferLib.safeTransferETH(msg.sender, ethOwed);\\n    }\\n\\n    function subStakedShare(uint160 tokenId) private returns (uint96 ethOwed) {\\n        require(TokenView.ownerOf(tokenId) == msg.sender, 'SC:9');\\n\\n        uint256 cache = Stake.sload();\\n\\n        TokenCore.onBurn(tokenId);\\n\\n        (uint64 activeShares, uint96 activeEth, ) = cache.getStakedSharesAndEth();\\n\\n        ethOwed = cache.getEthPerShare();\\n\\n        require(activeShares >= 1, 'SC:10');\\n        require(activeEth >= ethOwed, 'SC:11');\\n\\n        Stake.sstore(cache.setStakedShares(activeShares - 1).setStakedEth(activeEth - ethOwed));\\n\\n        emit UnStakeEth(ethOwed, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6604cd66ce28ea7c04802aeff81aa3f800ce7ed10f28fa3a48fbfad0864289\",\"license\":\"MIT\"},\"src/stake/StakeExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport {IStakeExternal} from '../interfaces/INuggFT.sol';\\n\\nimport {StakeView} from './StakeView.sol';\\nimport {StakeCore} from './StakeCore.sol';\\n\\nabstract contract StakeExternal is IStakeExternal {\\n    using SafeCastLib for uint256;\\n\\n    function migrateStake(uint160 tokenId) external override {\\n        StakeCore.migrateStakedShare(tokenId);\\n    }\\n\\n    function withdrawStake(uint160 tokenId) external override {\\n        StakeCore.burnStakedShare(tokenId);\\n    }\\n\\n    function totalStakedShares() external view override returns (uint64 res) {\\n        res = StakeView.getActiveStakedShares();\\n    }\\n\\n    function totalStakedEth() external view override returns (uint96 res) {\\n        res = StakeView.getActiveStakedEth();\\n    }\\n\\n    function activeEthPerShare() external view override returns (uint96 res) {\\n        res = StakeView.getActiveEthPerShare();\\n    }\\n\\n    function totalProtocolEth() external view override returns (uint96 res) {\\n        res = StakeView.getActiveProtocolEth();\\n    }\\n\\n    function totalSupply() external view override returns (uint256 res) {\\n        res = StakeView.getActiveStakedShares();\\n    }\\n}\\n\",\"keccak256\":\"0x1433bc98c8b6517d9619ab1cd308f109ca606eaf7b63d205bd2adc8853af33f9\",\"license\":\"MIT\"},\"src/stake/StakePure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\nlibrary StakePure {\\n    /// 96 protocol\\n    /// 96 stakedEth\\n    /// 64 stakedShares\\n\\n    // @test input output unit test\\n    function getProtocolEth(uint256 cache) internal pure returns (uint96 res) {\\n        // using casting to select only 96\\n        res = uint96(cache);\\n    }\\n\\n    function setProtocolEth(uint256 cache, uint96 update) internal pure returns (uint256 res) {\\n        res = cache & ShiftLib.fullsubmask(96, 0);\\n        res |= update;\\n    }\\n\\n    // @test input output unit test\\n    function getStakedEth(uint256 cache) internal pure returns (uint96 res) {\\n        // using casting to select only 96\\n        res = uint96(cache >> 96);\\n    }\\n\\n    function setStakedEth(uint256 cache, uint96 update) internal pure returns (uint256 res) {\\n        // clear stakedEth\\n        res = cache & ShiftLib.fullsubmask(96, 96);\\n        res |= uint256(update) << 96;\\n    }\\n\\n    // @test input output unit test\\n    function getStakedShares(uint256 cache) internal pure returns (uint64 res) {\\n        res = uint64(cache >> 192);\\n    }\\n\\n    function setStakedShares(uint256 cache, uint64 update) internal pure returns (uint256 res) {\\n        res = cache & type(uint192).max;\\n        res |= (uint256(update) << 192);\\n    }\\n\\n    // @test manual ish - combined input output\\n    function getStakedSharesAndEth(uint256 cache)\\n        internal\\n        pure\\n        returns (\\n            uint64 shares,\\n            uint96 eth,\\n            uint96 proto\\n        )\\n    {\\n        shares = getStakedShares(cache);\\n        eth = getStakedEth(cache);\\n        proto = getProtocolEth(cache);\\n    }\\n\\n    // @test manual\\n    function getEthPerShare(uint256 cache) internal pure returns (uint96 res) {\\n        res = getStakedShares(cache) == 0 ? 0 : getStakedEth(cache) / getStakedShares(cache);\\n    }\\n}\\n\",\"keccak256\":\"0xa07f909e24f4c5d154c4f6bb2260aff4d0143d1111dd05f6252191edc436a8e2\",\"license\":\"MIT\"},\"src/stake/StakeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\nlibrary Stake {\\n    struct Storage {\\n        address trustedMigrator;\\n        uint256 data;\\n    }\\n\\n    function sstore(uint256 input) internal {\\n        Global.ptr().stake.data = input;\\n    }\\n\\n    function spointer() internal view returns (Storage storage s) {\\n        return Global.ptr().stake;\\n    }\\n\\n    function sload() internal view returns (uint256 res) {\\n        return Global.ptr().stake.data;\\n    }\\n}\\n\",\"keccak256\":\"0x5e070e8f858df9acf6b3c07e2d017c8ea5aaf89005323e51551d3c7d0bbbfb37\",\"license\":\"MIT\"},\"src/stake/StakeView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\nimport {StakePure} from './StakePure.sol';\\n\\nimport {Stake} from './StakeStorage.sol';\\n\\n/// @title StakeView\\n/// @author dub6ix\\n/// @notice functions that combine access to Stake storage and logic for access by outside modules\\nlibrary StakeView {\\n    using StakePure for uint256;\\n\\n    function getActiveEthPerShare() internal view returns (uint96 res) {\\n        res = Stake.sload().getEthPerShare();\\n    }\\n\\n    function getActiveStakedShares() internal view returns (uint64 res) {\\n        res = Stake.sload().getStakedShares();\\n    }\\n\\n    function getActiveStakedEth() internal view returns (uint96 res) {\\n        res = Stake.sload().getStakedEth();\\n    }\\n\\n    function getActiveProtocolEth() internal view returns (uint96 res) {\\n        res = Stake.sload().getProtocolEth();\\n    }\\n}\\n\",\"keccak256\":\"0x4e430594a74674afa0b9c38954ffa724c7dd3fbac7eb61a3628f35e09a8abc62\",\"license\":\"MIT\"},\"src/swap/SwapCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {Swap} from './SwapStorage.sol';\\nimport {SwapPure} from '../swap/SwapPure.sol';\\n\\nimport {StakeView} from '../stake/StakeView.sol';\\nimport {StakeCore} from '../stake/StakeCore.sol';\\n\\nimport {ProofCore} from '../proof/ProofCore.sol';\\n\\nimport {TokenCore} from '../token/TokenCore.sol';\\nimport {TokenView} from '../token/TokenView.sol';\\n\\nlibrary SwapCore {\\n    using SafeCastLib for uint256;\\n    using SwapPure for uint256;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event DelegateMint(uint256 epoch, address account, uint96 eth);\\n    event DelegateCommit(uint160 tokenId, address account, uint96 eth);\\n    event DelegateOffer(uint160 tokenId, address account, uint96 eth);\\n    event SwapClaim(uint160 tokenId, address account, uint32 epoch);\\n    event SwapStart(uint160 tokenId, address account, uint96 eth);\\n\\n    event DelegateCommitItem(uint160 sellingTokenId, uint16 itemId, uint160 buyingTokenId, uint96 eth);\\n    event DelegateOfferItem(uint160 sellingTokenId, uint16 itemId, uint160 buyingTokenId, uint96 eth);\\n    event SwapClaimItem(uint160 sellingTokenId, uint16 itemId, uint160 buyingTokenId, uint32 epoch);\\n    event SwapItemStart(uint160 sellingTokenId, uint16 itemId, uint96 eth);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            TOKEN SWAP FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @notice Explain to an end user what this does\\n    /// @dev E\\n    /// @param tokenId a\\n    /// @custom:test hardhat\\n    ///\\n    function delegate(uint160 tokenId) internal {\\n        (Swap.Storage storage s, Swap.Memory memory m) = Swap.loadTokenSwap(tokenId, msg.sender);\\n\\n        // make sure user is not the owner of swap\\n        // we do not know how much to give them when they call \\\"claim\\\" otherwise\\n\\n        if (m.activeEpoch == tokenId && m.swapData == 0) {\\n            // we do not need this, could take tokenId out as an argument - but do not want to give users\\n            // the ability to accidently place an offer for nugg A and end up minting nugg B.\\n            mint(s, m);\\n\\n            emit DelegateMint(tokenId, msg.sender, msg.value.safe96());\\n\\n            return;\\n        }\\n\\n        require(!m.offerData.isOwner(), 'SL:HSO:0');\\n\\n        require(m.swapData != 0, 'NS:0:0');\\n\\n        if (m.offerData == 0 && m.swapData.isOwner()) {\\n            require(msg.value >= StakeView.getActiveEthPerShare(), 'SL:S:0');\\n\\n            commit(s, m);\\n\\n            emit DelegateCommit(tokenId, msg.sender, msg.value.safe96());\\n        } else {\\n            offer(s, m);\\n\\n            emit DelegateOffer(tokenId, msg.sender, msg.value.safe96());\\n        }\\n    }\\n\\n    function mint(Swap.Storage storage s, Swap.Memory memory m) internal {\\n        require(m.swapData == 0 && m.offerData == 0, 'NS:M:D');\\n\\n        (uint256 dat, ) = SwapPure.buildSwapData(m.activeEpoch, uint160(msg.sender), msg.value.safe96(), false);\\n\\n        s.data = dat;\\n\\n        StakeCore.addStakedShareAndEth(msg.value.safe96());\\n\\n        ProofCore.setProof(m.activeEpoch);\\n    }\\n\\n    function claim(uint160 tokenId) internal {\\n        (, Swap.Memory memory m) = Swap.loadTokenSwap(tokenId, msg.sender);\\n\\n        Swap.deleteTokenOffer(tokenId, uint160(msg.sender));\\n\\n        if (checkClaimerIsWinnerOrLoser(m)) {\\n            Swap.deleteTokenSwap(tokenId);\\n\\n            // if this is a minting nugg\\n            if (tokenId == m.swapData.epoch()) {\\n                TokenCore.checkedMintTo(msg.sender, tokenId);\\n            } else {\\n                TokenCore.checkedTransferFromSelf(msg.sender, tokenId);\\n            }\\n        } else {\\n            SafeTransferLib.safeTransferETH(msg.sender, m.offerData.eth());\\n        }\\n\\n        emit SwapClaim(tokenId, msg.sender, m.swapData.epoch());\\n    }\\n\\n    function unsafeClaimERC721To(uint160 tokenId, address to) internal {}\\n\\n    function swap(uint160 tokenId, uint96 floor) internal {\\n        require(floor >= StakeView.getActiveEthPerShare(), 'SL:S:0');\\n\\n        TokenCore.approvedTransferToSelf(tokenId);\\n\\n        (Swap.Storage storage s, Swap.Memory memory m) = Swap.loadTokenSwap(tokenId, msg.sender);\\n\\n        // make sure swap does not exist - this logically should never happen\\n        assert(m.swapData == 0);\\n\\n        (uint256 dat, ) = SwapPure.buildSwapData(0, uint160(msg.sender), msg.value.safe96(), true);\\n\\n        s.data = dat;\\n\\n        emit SwapStart(tokenId, msg.sender, floor);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            ITEM SWAP FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function delegateItem(\\n        uint160 sellingTokenId,\\n        uint16 itemId,\\n        uint160 sendingTokenId\\n    ) internal {\\n        require(TokenView.ownerOf(sendingTokenId) == msg.sender, 'AUC:TT:3');\\n\\n        (Swap.Storage storage s, Swap.Memory memory m) = Swap.loadItemSwap(sellingTokenId, itemId, sendingTokenId);\\n\\n        // make sure user is not the owner of swap\\n        // we do not know how much to give them when they call \\\"claim\\\" otherwise\\n        require(!m.offerData.isOwner(), 'SL:HSO:0');\\n\\n        if (m.offerData == 0 && m.swapData.isOwner()) {\\n            commit(s, m);\\n\\n            emit DelegateCommitItem(sellingTokenId, itemId, sendingTokenId, msg.value.safe96());\\n        } else {\\n            offer(s, m);\\n\\n            emit DelegateOfferItem(sellingTokenId, itemId, sendingTokenId, msg.value.safe96());\\n        }\\n    }\\n\\n    function claimItem(\\n        uint160 sellingTokenId,\\n        uint16 itemId,\\n        uint160 buyingTokenId\\n    ) internal {\\n        require(TokenView.ownerOf(buyingTokenId) == msg.sender, 'AUC:TT:3');\\n\\n        (, Swap.Memory memory m) = Swap.loadItemSwap(sellingTokenId, itemId, buyingTokenId);\\n\\n        Swap.deleteItemOffer(sellingTokenId, itemId, buyingTokenId);\\n\\n        if (checkClaimerIsWinnerOrLoser(m)) {\\n            Swap.deleteItemSwap(sellingTokenId, itemId);\\n\\n            ProofCore.addItem(buyingTokenId, itemId);\\n        } else {\\n            SafeTransferLib.safeTransferETH(msg.sender, m.offerData.eth());\\n        }\\n\\n        emit SwapClaimItem(sellingTokenId, itemId, buyingTokenId, m.swapData.epoch());\\n    }\\n\\n    function swapItem(\\n        uint16 itemId,\\n        uint96 floor,\\n        uint160 sellingTokenId\\n    ) internal {\\n        require(TokenView.ownerOf(sellingTokenId) == msg.sender, 'AUC:TT:3');\\n\\n        // will revert if they do not have the item\\n        ProofCore.removeItem(sellingTokenId, itemId);\\n\\n        (Swap.Storage storage s, Swap.Memory memory m) = Swap.loadItemSwap(sellingTokenId, itemId, sellingTokenId);\\n\\n        // cannot sell two of the same item at same time\\n        require(m.swapData == 0, 'SC:SI:0');\\n\\n        (uint256 dat, ) = SwapPure.buildSwapData(0, sellingTokenId, floor, true);\\n\\n        s.data = dat;\\n\\n        emit SwapItemStart(sellingTokenId, itemId, dat.eth());\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            COMMON FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function checkClaimerIsWinnerOrLoser(Swap.Memory memory m) internal pure returns (bool winner) {\\n        require(m.offerData != 0, 'SL:CC:1');\\n\\n        bool isOver = m.activeEpoch > m.swapData.epoch();\\n        bool isLeader = m.offerData.account() == m.swapData.account();\\n        bool isOwner = m.swapData.isOwner();\\n\\n        return isOwner || (isLeader && isOver);\\n    }\\n\\n    function commit(Swap.Storage storage s, Swap.Memory memory m) internal {\\n        assert(m.offerData == 0 && m.swapData != 0);\\n\\n        assert(m.swapData.isOwner());\\n\\n        (uint256 newSwapData, uint256 increment, uint256 dust) = SwapPure.updateSwapDataWithEpoch(\\n            m.swapData,\\n            m.activeEpoch + 1,\\n            m.sender,\\n            msg.value.safe96()\\n        );\\n\\n        s.data = newSwapData;\\n\\n        s.offers[m.swapData.account()] = m.swapData;\\n\\n        StakeCore.addStakedEth((increment + dust).safe96());\\n    }\\n\\n    function offer(Swap.Storage storage s, Swap.Memory memory m) internal {\\n        // make sure swap is still active\\n        require(m.activeEpoch <= m.swapData.epoch(), 'SL:OBP:3');\\n\\n        if (m.swapData.account() != m.sender) s.offers[m.swapData.account()] = m.swapData;\\n\\n        (uint256 newSwapData, uint256 increment, uint256 dust) = SwapPure.updateSwapData(\\n            m.swapData,\\n            m.sender,\\n            m.offerData.eth() + msg.value.safe96()\\n        );\\n\\n        s.data = newSwapData;\\n\\n        StakeCore.addStakedEth((increment + dust).safe96());\\n    }\\n}\\n\",\"keccak256\":\"0x36c4a92e8cd3c1999f2c2c900da929f842377a3c4d9325409d600b053f7ffd46\",\"license\":\"MIT\"},\"src/swap/SwapExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ISwapExternal} from '../interfaces/INuggFT.sol';\\n\\nimport {EpochCore} from '../epoch/EpochCore.sol';\\n\\nimport {Swap} from './SwapStorage.sol';\\nimport {SwapCore} from './SwapCore.sol';\\nimport {SwapView} from './SwapView.sol';\\n\\n// OK\\nabstract contract SwapExternal is ISwapExternal {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function delegate(uint160 tokenId) external payable override {\\n        SwapCore.delegate(tokenId);\\n    }\\n\\n    function delegateItem(\\n        uint160 sellingTokenId,\\n        uint16 itemid,\\n        uint160 buyingTokenId\\n    ) external payable override {\\n        SwapCore.delegateItem(sellingTokenId, itemid, buyingTokenId);\\n    }\\n\\n    function claim(uint160 tokenId) external override {\\n        SwapCore.claim(tokenId);\\n    }\\n\\n    function claimItem(\\n        uint160 sellingTokenId,\\n        uint16 itemid,\\n        uint160 buyingTokenId\\n    ) external override {\\n        SwapCore.claimItem(sellingTokenId, itemid, buyingTokenId);\\n    }\\n\\n    function swap(uint160 tokenId, uint96 floor) external override {\\n        SwapCore.swap(tokenId, floor);\\n    }\\n\\n    function swapItem(\\n        uint160 sellingTokenId,\\n        uint16 itemid,\\n        uint96 floor\\n    ) external override {\\n        SwapCore.swapItem(itemid, floor, sellingTokenId);\\n    }\\n\\n    // function delegate2(uint160 tokenId) external payable {\\n    //     SwapCore.delegate(tokenId);\\n    // }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                VIEW\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function getActiveSwap(uint160 tokenId)\\n        external\\n        view\\n        override\\n        returns (\\n            address leader,\\n            uint96 amount,\\n            uint32 _epoch,\\n            bool isOwner\\n        )\\n    {\\n        return SwapView.getActiveSwap(tokenId);\\n    }\\n\\n    function getOfferByAccount(uint160 tokenId, address account) external view override returns (uint96 amount) {\\n        return SwapView.getOfferByAccount(tokenId, account);\\n    }\\n}\\n\",\"keccak256\":\"0xe753c840a455c922835c183712e91e8347ee51b3c0bf90b6aaf123e90d231d19\",\"license\":\"MIT\"},\"src/swap/SwapPure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\n/// @title SwapPure\\n/// @author dub6ix.eth\\n/// @notice Explain to an end user what this does\\n/// @dev Explain to a developer any extra details\\nlibrary SwapPure {\\n    using SafeCastLib for uint256;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            CALCULATION\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    // @test  manual\\n    function addIncrement(uint256 value) internal pure returns (uint256) {\\n        return (value * 10100) / 10000;\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            SHIFT HELPERS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n    // @test input output unit test\\n    // type(uint96).max / 10**13 = 0x01C25C268497681 =  7922816251426433\\n    // type(uint56).max          = 0x100000000000000 = 72057594037927936\\n    function eth(uint256 input) internal pure returns (uint96 res) {\\n        return (ShiftLib.get(input, 56, 160) * 0x9184E72A000).safe96();\\n    }\\n\\n    function eth(uint256 input, uint96 update) internal pure returns (uint256 cache, uint96 rem) {\\n        rem = update % uint96(0x9184E72A000);\\n        cache = ShiftLib.set(input, 56, 160, update / uint96(0x9184E72A000));\\n    }\\n\\n    // @test  input output unit test\\n    function epoch(uint256 input, uint32 update) internal pure returns (uint256 res) {\\n        return ShiftLib.set(input, 32, 216, update);\\n    }\\n\\n    function epoch(uint256 input) internal pure returns (uint32 res) {\\n        return ShiftLib.get(input, 32, 216).safe32();\\n    }\\n\\n    // @test  input output unit test\\n    function account(uint256 input) internal pure returns (uint160 res) {\\n        res = ShiftLib.get(input, 160, 0).safe160();\\n    }\\n\\n    function account(uint256 input, uint160 update) internal pure returns (uint256 output) {\\n        output = ShiftLib.set(input, 160, 0, update);\\n    }\\n\\n    // @test  input output unit test\\n    function isOwner(uint256 input, bool update) internal pure returns (uint256 res) {\\n        return ShiftLib.set(input, 1, 255, update ? 0x1 : 0x0);\\n    }\\n\\n    function isOwner(uint256 input) internal pure returns (bool output) {\\n        output = ShiftLib.get(input, 1, 255) == 0x1;\\n    }\\n\\n    // @test  check to see if it does this - will be easy\\n    function flag(uint256 input) internal pure returns (uint256 res) {\\n        res = ShiftLib.set(input, 1, 254, 0x01);\\n    }\\n\\n    // @test  manual\\n    function buildSwapData(\\n        uint32 _epoch,\\n        uint160 _account,\\n        uint96 _eth,\\n        bool _isOwner\\n    ) internal pure returns (uint256 res, uint96 dust) {\\n        res = epoch(res, _epoch);\\n        res = account(res, _account);\\n        if (_isOwner) res = isOwner(res, true);\\n        (res, dust) = eth(res, _eth);\\n        res = flag(res);\\n    }\\n\\n    // @test  manual\\n    function updateSwapData(\\n        uint256 data,\\n        uint160 _account,\\n        uint96 _eth\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 res,\\n            uint256 increment,\\n            uint256 dust\\n        )\\n    {\\n        return updateSwapDataWithEpoch(data, epoch(data), _account, _eth);\\n    }\\n\\n    // @test  unit\\n    function updateSwapDataWithEpoch(\\n        uint256 data,\\n        uint32 _epoch,\\n        uint160 _account,\\n        uint96 _eth\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 res,\\n            uint96 increment,\\n            uint96 dust\\n        )\\n    {\\n        uint96 baseEth = eth(data);\\n\\n        require(addIncrement(baseEth) < _eth);\\n\\n        (res, dust) = buildSwapData(_epoch, _account, _eth, false);\\n\\n        increment = _eth - baseEth;\\n    }\\n}\\n\",\"keccak256\":\"0xe93d868a09d597e0ad39049b0ec90ce0a0885e8c33eac18f6ba4fc00ecc342c2\",\"license\":\"MIT\"},\"src/swap/SwapStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\nimport {SwapPure} from './SwapPure.sol';\\n\\nimport {EpochCore} from '../epoch/EpochCore.sol';\\n\\n// SYSTEM TEST\\nlibrary Swap {\\n    using SwapPure for uint256;\\n\\n    struct Full {\\n        mapping(uint160 => Mapping) map;\\n    }\\n\\n    struct Mapping {\\n        Storage self;\\n        mapping(uint16 => Storage) items;\\n    }\\n\\n    struct Storage {\\n        uint256 data;\\n        mapping(uint160 => uint256) offers;\\n    }\\n\\n    struct Memory {\\n        uint256 swapData;\\n        uint256 offerData;\\n        uint32 activeEpoch;\\n        uint160 sender;\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TOKEN SWAP\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function _tokenSwapPtr(uint160 tokenId) private view returns (Storage storage si) {\\n        return Global.ptr().swap.map[tokenId].self;\\n    }\\n\\n    function loadTokenSwap(uint160 tokenId, address account) internal view returns (Storage storage s, Memory memory m) {\\n        s = _tokenSwapPtr(tokenId);\\n        m = _load(s, uint160(account));\\n    }\\n\\n    function deleteTokenOffer(uint160 tokenId, uint160 account) internal {\\n        delete _tokenSwapPtr(tokenId).offers[account];\\n    }\\n\\n    function deleteTokenSwap(uint160 tokenId) internal {\\n        delete _tokenSwapPtr(tokenId).data;\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                ITEM SWAP\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function _itemSwapPtr(uint160 tokenId, uint16 itemId) private view returns (Storage storage si) {\\n        return Global.ptr().swap.map[tokenId].items[itemId];\\n    }\\n\\n    function loadItemSwap(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        uint160 account\\n    ) internal view returns (Storage storage s, Memory memory m) {\\n        s = _itemSwapPtr(tokenId, itemId);\\n        m = _load(s, account);\\n    }\\n\\n    function deleteItemOffer(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        uint160 account\\n    ) internal {\\n        delete _itemSwapPtr(tokenId, itemId).offers[account];\\n    }\\n\\n    function deleteItemSwap(uint160 tokenId, uint16 itemId) internal {\\n        delete _itemSwapPtr(tokenId, itemId).data;\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                COMMON\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function _load(Storage storage ptr, uint160 account) private view returns (Memory memory m) {\\n        uint256 cache = ptr.data;\\n        m.swapData = cache;\\n        m.activeEpoch = EpochCore.activeEpoch();\\n        m.sender = account;\\n\\n        if (account == cache.account()) {\\n            m.offerData = cache;\\n        } else {\\n            m.offerData = ptr.offers[account];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x014c914c9dfb4b88de4413fdee48149d9c3a4de596ebe37fa5a6e99ac2c5bff9\",\"license\":\"MIT\"},\"src/swap/SwapView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\nimport {Swap} from './SwapStorage.sol';\\nimport {SwapPure} from './SwapPure.sol';\\n\\n// IDC\\nlibrary SwapView {\\n    using SwapPure for uint256;\\n\\n    function getActiveSwap(uint160 tokenId)\\n        internal\\n        view\\n        returns (\\n            address leader,\\n            uint96 amount,\\n            uint32 _epoch,\\n            bool isOwner\\n        )\\n    {\\n        (, Swap.Memory memory m) = Swap.loadTokenSwap(tokenId, address(0));\\n        require(m.swapData != 0, 'NS:GS:0');\\n        leader = address(m.swapData.account());\\n        amount = m.swapData.eth();\\n        _epoch = m.swapData.epoch();\\n        isOwner = m.swapData.isOwner();\\n    }\\n\\n    function getOfferByAccount(uint160 tokenId, address account) internal view returns (uint96 amount) {\\n        (, Swap.Memory memory m) = Swap.loadTokenSwap(tokenId, account);\\n        require(m.offerData != 0, 'NS:GS:0');\\n        amount = m.offerData.eth();\\n    }\\n}\\n\",\"keccak256\":\"0x0cee2f36ada8e379ec67bda60c11c47e01734612319fffd0d19217a73e12c51c\",\"license\":\"MIT\"},\"src/token/TokenCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {Token} from './TokenStorage.sol';\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\nimport {TokenView} from './TokenView.sol';\\n\\nimport {StakeCore} from '../stake/StakeCore.sol';\\nimport {ProofCore} from '../proof/ProofCore.sol';\\n\\nimport {Trust} from '../trust/TrustStorage.sol';\\n\\n// system test\\nlibrary TokenCore {\\n    uint32 constant TRUSTED_MINT_TOKENS = 500;\\n    uint32 constant UNTRUSTED_MINT_TOKENS = 2500;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    event TrustedMint(address indexed to, uint160 tokenId);\\n    event UntrustedMint(address indexed by, uint160 tokenId);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                APPROVAL\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function checkedSetApprovalForAll(address operator, bool approved) internal {\\n        require(msg.sender != operator && operator == address(this), 'T:0');\\n\\n        Token.ptr().operatorApprovals[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function checkedApprove(address account, uint160 tokenId) internal {\\n        address owner = TokenView.ownerOf(tokenId);\\n\\n        // ERC721: approval to current owner\\n        require(account != owner, 'T:3');\\n\\n        // ERC721: approve caller is not owner nor approved for all\\n        require(msg.sender == owner || TokenView.isApprovedForAll(owner, msg.sender), 'T:1');\\n\\n        Token.ptr().approvals[tokenId] = account;\\n\\n        emit Approval(owner, account, tokenId);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TRANSFER\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function untrustedMint(uint160 tokenId) internal {\\n        require(tokenId < UNTRUSTED_MINT_TOKENS + TRUSTED_MINT_TOKENS && tokenId > TRUSTED_MINT_TOKENS, 'T:1');\\n\\n        require(!TokenView.exists(tokenId), 'T:2');\\n\\n        ProofCore.setProof(tokenId);\\n\\n        checkedMintTo(msg.sender, tokenId);\\n\\n        emit UntrustedMint(msg.sender, tokenId);\\n    }\\n\\n    function trustedMint(\\n        Trust.Storage storage trust,\\n        address to,\\n        uint160 tokenId\\n    ) internal {\\n        require(trust._isTrusted, 'T:0');\\n\\n        require(tokenId < TRUSTED_MINT_TOKENS && tokenId != 0, 'T:1');\\n\\n        require(!TokenView.exists(tokenId), 'T:2');\\n\\n        ProofCore.setProof(tokenId);\\n\\n        checkedMintTo(to, tokenId);\\n\\n        emit TrustedMint(to, tokenId);\\n    }\\n\\n    // token does not exist and is < 1000\\n\\n    function checkedTransferFromSelf(address to, uint160 tokenId) internal {\\n        require(SafeTransferLib.isERC721Receiver(to, tokenId), 'T:2');\\n\\n        Token.ptr().balances[address(this)] -= 1;\\n        Token.ptr().balances[to] += 1;\\n        Token.ptr().owners[tokenId] = to;\\n\\n        emit Transfer(address(this), to, tokenId);\\n    }\\n\\n    function approvedTransferToSelf(uint160 tokenId) internal {\\n        // ERC721: transfer caller is not owner nor approved\\n        require(msg.sender == TokenView.ownerOf(tokenId) && TokenView.getApproved(tokenId) == address(this), 'T:4');\\n\\n        Token.ptr().balances[msg.sender] -= 1;\\n        Token.ptr().balances[address(this)] += 1;\\n        Token.ptr().owners[tokenId] = address(this);\\n\\n        // Clear approvals from the previous owner\\n        delete Token.ptr().approvals[tokenId];\\n\\n        emit Approval(address(this), address(0), tokenId);\\n\\n        emit Transfer(msg.sender, address(this), tokenId);\\n    }\\n\\n    function checkedMintTo(address to, uint160 tokenId) internal {\\n        // ERC721: transfer caller is not owner nor approved\\n        require(SafeTransferLib.isERC721Receiver(to, tokenId), 'T:5');\\n\\n        Token.ptr().balances[to] += 1;\\n        Token.ptr().owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    function onBurn(uint160 tokenId) internal {\\n        require(TokenView.getApproved(tokenId) == address(this), 'T:6');\\n\\n        require(TokenView.ownerOf(tokenId) == msg.sender, 'T:7');\\n\\n        delete Token.ptr().owners[tokenId];\\n        delete Token.ptr().approvals[tokenId];\\n\\n        delete Global.ptr().swap.map[tokenId];\\n        delete Global.ptr().loan.map[tokenId];\\n        delete Global.ptr().proof.map[tokenId];\\n        delete Global.ptr().file.resolvers[tokenId];\\n\\n        emit Approval(msg.sender, address(0), tokenId);\\n\\n        Token.ptr().balances[msg.sender] -= 1;\\n\\n        emit Transfer(msg.sender, address(0), tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x442b07511120f64811e73a67f0a0c2a165e5a4916423dbacfd6a68c8c88543dc\",\"license\":\"MIT\"},\"src/token/TokenExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport {IERC721Receiver, IERC721, IERC165, IERC721Metadata} from '../interfaces/IERC721.sol';\\nimport {ITokenExternal} from '../interfaces/INuggFT.sol';\\n\\nimport {Token} from './TokenStorage.sol';\\n\\nimport {TokenView} from './TokenView.sol';\\n\\nimport {TokenCore} from './TokenCore.sol';\\n\\n//OK\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard\\n */\\nabstract contract TokenExternal is ITokenExternal {\\n    using SafeCastLib for uint256;\\n\\n    function mint(uint160 tokenId) public override {\\n        TokenCore.untrustedMint(tokenId);\\n    }\\n\\n    function approve(address to, uint256 tokenId) public override {\\n        TokenCore.checkedApprove(to, tokenId.safe160());\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public override {\\n        TokenCore.checkedSetApprovalForAll(operator, approved);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        return TokenView.balanceOf(owner);\\n    }\\n\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return TokenView.ownerOf(tokenId.safe160());\\n    }\\n\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        return TokenView.getApproved(tokenId.safe160());\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\n        return TokenView.isApprovedForAll(owner, operator);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                DISABLED\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) public pure override {\\n        revert('wut');\\n    }\\n\\n    function safeTransferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) public pure override {\\n        revert('wut');\\n    }\\n\\n    function safeTransferFrom(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public pure override {\\n        revert('wut');\\n    }\\n}\\n\",\"keccak256\":\"0xaf8bb8ac7afaae9a04e73c6705c56c0cc1333af14e93db8267cc66d8fe345e12\",\"license\":\"MIT\"},\"src/token/TokenStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Global} from '../global/GlobalStorage.sol';\\n\\n// OK\\nlibrary Token {\\n    struct Storage {\\n        mapping(uint256 => address) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    function ptr() internal view returns (Storage storage s) {\\n        return Global.ptr().token;\\n    }\\n}\\n\",\"keccak256\":\"0x39c7ccae8f43496321b2c23c8709bfbb70b10097b4ea58342a4c0a5fea379dee\",\"license\":\"MIT\"},\"src/token/TokenView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Token} from './TokenStorage.sol';\\n\\n// OK\\nlibrary TokenView {\\n    function exists(uint160 tokenId) internal view returns (bool) {\\n        return Token.ptr().owners[tokenId] != address(0);\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) internal view returns (bool) {\\n        return Token.ptr().operatorApprovals[owner][operator];\\n    }\\n\\n    function getApproved(uint160 tokenId) internal view returns (address) {\\n        require(exists(tokenId), 'T:9');\\n        return Token.ptr().approvals[tokenId];\\n    }\\n\\n    function ownerOf(uint160 tokenId) internal view returns (address owner) {\\n        owner = Token.ptr().owners[tokenId];\\n        require(owner != address(0), 'T:A');\\n    }\\n\\n    function balanceOf(address owner) internal view returns (uint256) {\\n        require(owner != address(0), 'T:B');\\n        return Token.ptr().balances[owner];\\n    }\\n\\n    function isApprovedOrOwner(address spender, uint160 tokenId) internal view returns (bool) {\\n        address owner = TokenView.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n}\\n\",\"keccak256\":\"0x196e6cec795be4ebc77f75b100ec835620adbbd5408e70ab7dfb2e3164c9e09d\",\"license\":\"MIT\"},\"src/trust/TrustExternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ITrustExternal} from '../interfaces/INuggFT.sol';\\n\\nimport {StakeCore} from '../stake/StakeCore.sol';\\nimport {TokenCore} from '../token/TokenCore.sol';\\n\\nimport {Trust} from './TrustStorage.sol';\\n\\nimport {FileCore} from '../file/FileCore.sol';\\n\\nabstract contract TrustExternal is ITrustExternal {\\n    address private _trusted;\\n\\n    Trust.Storage private _trust;\\n\\n    modifier requiresTrust() {\\n        require(_trusted == msg.sender, 'UNTRUSTED');\\n        _trust._isTrusted = true;\\n        _;\\n        _trust._isTrusted = false;\\n    }\\n\\n    constructor() {\\n        _trusted = msg.sender;\\n\\n        emit TrustUpdated(msg.sender);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TRUSTED\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n    function trustedMint(uint160 tokenId, address to) external override requiresTrust {\\n        TokenCore.trustedMint(_trust, to, tokenId);\\n    }\\n\\n    function extractProtocolEth() external override requiresTrust {\\n        StakeCore.trustedExtractProtocolEth(_trust);\\n    }\\n\\n    function setMigrator(address addr) external requiresTrust {\\n        StakeCore.trustedSetMigrator(_trust, addr);\\n    }\\n\\n    function storeFiles(uint256[][] calldata data, uint8 feature) external override requiresTrust {\\n        FileCore.trustedStoreFiles(_trust, feature, data);\\n    }\\n\\n    function setIsTrusted(address user) external virtual override requiresTrust {\\n        _trusted = user;\\n\\n        emit TrustUpdated(user);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                 VIEW\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function trusted() public view override returns (address) {\\n        return _trusted;\\n    }\\n}\\n\",\"keccak256\":\"0xedcb0272660e99a42ee525769b60d348494995846e2890eb7a9ee5db7e77aba8\",\"license\":\"MIT\"},\"src/trust/TrustStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary Trust {\\n    struct Storage {\\n        bool _isTrusted;\\n    }\\n}\\n\",\"keccak256\":\"0x1b2eda9c3321b1e9d6e2e59bdfa6ca2314577e978ba11b8fbfb8f1f764bc51d8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526002805461ffff60a01b1916610a2d60a01b1790553480156200002657600080fd5b506040516200613338038062006133833981016040819052620000499162000119565b600080546001600160a01b03191633908117825560405183927f57860cff71823f3deabfecdd98d8536e7358fdeff8b092fd59e9f71c5078f32291a26200009a620000fe60201b62000f4b1760201c565b6001600160a01b038116620000ae57600080fd5b600280546001600160a01b0319166001600160a01b03929092169190911790556040517f6bf6eaff5e9af8fbccb949f4c38cc016936f8775363ccf4224db160365785d5290600090a1506200014b565b640100042069805463ffffffff19164363ffffffff16179055565b6000602082840312156200012c57600080fd5b81516001600160a01b03811681146200014457600080fd5b9392505050565b615fd8806200015b6000396000f3fe6080604052600436106103295760003560e01c806395d89b41116101a5578063c06c822f116100ec578063e63bedde11610095578063fa7329921161006f578063fa73299214610977578063fca840ae1461098a578063fe7e997e146109aa578063ffcf6d3a146109ca57600080fd5b8063e63bedde14610908578063e747738314610936578063e985e9c51461095757600080fd5b8063d276db98116100c6578063d276db98146108a6578063d7be245c146108c6578063e5cbd48e146108e857600080fd5b8063c06c822f14610853578063c5c8beeb14610866578063c87b56dd1461088657600080fd5b8063b3f9e4cb1161014e578063bc7b6d6211610128578063bc7b6d62146107e5578063be2cfdff14610805578063beace31f1461083357600080fd5b8063b3f9e4cb1461078a578063b88d4fde146107aa578063b88ea014146107c557600080fd5b8063a19ce9d61161017f578063a19ce9d61461072a578063a22cb4651461074a578063b3b9f3a71461076a57600080fd5b806395d89b41146106bb5780639a74cb64146106ea5780639caec8861461070a57600080fd5b806342842e0e11610274578063665557c81161021d5780637e2a6db8116101f75780637e2a6db81461063357806388fb73e614610651578063900cf0cf146106715780639066fdf81461069b57600080fd5b8063665557c8146105d357806370a08231146105f3578063750656f61461061357600080fd5b80635917c58f1161024e5780635917c58f1461056b5780636352211e1461059e5780636571595e146105be57600080fd5b806342842e0e146104ee578063504cdacf14610541578063570f67ad1461055657600080fd5b8063099afa17116102d657806323b872dd116102b057806323b872dd146104ee57806323cf31181461050e5780632e7a7f5e1461052e57600080fd5b8063099afa1714610459578063127913e21461046c57806318160ddd146104cb57600080fd5b806306fdde031161030757806306fdde03146103b2578063081812fc14610401578063095ea7b31461043957600080fd5b806301ffc9a71461032e5780630251f62c1461036357806303bfe17e14610385575b600080fd5b34801561033a57600080fd5b5061034e610349366004615182565b6109fb565b60405190151581526020015b60405180910390f35b34801561036f57600080fd5b5061038361037e3660046151b4565b610a4d565b005b34801561039157600080fd5b5061039a610a59565b6040516001600160601b03909116815260200161035a565b3480156103be57600080fd5b5060408051808201909152601681527f4e7567672046756e6769626c6520546f6b656e2056310000000000000000000060208201525b60405161035a919061522d565b34801561040d57600080fd5b5061042161041c366004615240565b610a68565b6040516001600160a01b03909116815260200161035a565b34801561044557600080fd5b50610383610454366004615259565b610a7b565b6103836104673660046151b4565b610a91565b34801561047857600080fd5b5061048c6104873660046151b4565b610a9a565b604080516001600160a01b0390951685526001600160601b03909316602085015263ffffffff909116918301919091521515606082015260800161035a565b3480156104d757600080fd5b506104e0610ab8565b60405190815260200161035a565b3480156104fa57600080fd5b50610383610509366004615285565b610ad1565b34801561051a57600080fd5b506103836105293660046151b4565b610b04565b61038361053c3660046152d8565b610b6d565b34801561054d57600080fd5b5061039a610b7d565b34801561056257600080fd5b50610383610b87565b34801561057757600080fd5b5060025461058c90600160a01b900460ff1681565b60405160ff909116815260200161035a565b3480156105aa57600080fd5b506104216105b9366004615240565b610bee565b3480156105ca57600080fd5b5061039a610c01565b3480156105df57600080fd5b506103836105ee3660046151b4565b610c0b565b3480156105ff57600080fd5b506104e061060e3660046151b4565b610c14565b34801561061f57600080fd5b5061038361062e3660046151b4565b610c1f565b34801561063f57600080fd5b506000546001600160a01b0316610421565b34801561065d57600080fd5b5061038361066c3660046151b4565b610c28565b34801561067d57600080fd5b50610686610ccc565b60405163ffffffff909116815260200161035a565b3480156106a757600080fd5b506103836106b6366004615332565b610cd6565b3480156106c757600080fd5b50604080518082019091526006815265139551d1d19560d21b60208201526103f4565b3480156106f657600080fd5b5061038361070536600461535e565b610ce0565b34801561071657600080fd5b506103836107253660046152d8565b610d4d565b34801561073657600080fd5b5061039a6107453660046153e2565b610d58565b34801561075657600080fd5b5061038361076536600461541b565b610d6b565b34801561077657600080fd5b506103836107853660046151b4565b610d75565b34801561079657600080fd5b506104216107a5366004615240565b610d7e565b3480156107b657600080fd5b506103836105093660046154bd565b3480156107d157600080fd5b506104e06107e03660046151b4565b610d91565b3480156107f157600080fd5b5061038361080036600461556c565b610d9c565b34801561081157600080fd5b5061081a610dae565b60405167ffffffffffffffff909116815260200161035a565b34801561083f57600080fd5b5061038361084e3660046153e2565b610db8565b6103836108613660046151b4565b610e23565b34801561087257600080fd5b506103836108813660046155a8565b610e2c565b34801561089257600080fd5b506103f46108a1366004615240565b610e36565b3480156108b257600080fd5b506103836108c13660046151b4565b610e41565b3480156108d257600080fd5b506108db610e4a565b60405161035a9190615612565b3480156108f457600080fd5b50600254610421906001600160a01b031681565b34801561091457600080fd5b50610928610923366004615240565b610e54565b60405161035a929190615705565b34801561094257600080fd5b5060025461058c90600160a81b900460ff1681565b34801561096357600080fd5b5061034e6109723660046153e2565b610ed7565b6103836109853660046151b4565b610f09565b34801561099657600080fd5b506103836109a536600461579a565b610f12565b3480156109b657600080fd5b506103836109c5366004615867565b610f1d565b3480156109d657600080fd5b506109ea6109e53660046151b4565b610f28565b60405161035a9594939291906158dd565b60006001600160e01b031982166380ac58cd60e01b1480610a2c57506001600160e01b03198216635b5e139f60e01b145b80610a4757506001600160e01b031982166301ffc9a760e01b145b92915050565b610a5681610f66565b50565b6000610a63611065565b905090565b6000610a47610a768361107a565b611094565b610a8d82610a888361107a565b611110565b5050565b610a5681611236565b600080600080610aa985611425565b93509350935093509193509193565b6000610ac26114b5565b67ffffffffffffffff16905090565b60405162461bcd60e51b81526020600482015260036024820152621ddd5d60ea1b60448201526064015b60405180910390fd5b6000546001600160a01b03163314610b4a5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b6044820152606401610afb565b6001805460ff191681178155610b6090826114cb565b506001805460ff19169055565b610b7883838361155b565b505050565b6000610a63611713565b6000546001600160a01b03163314610bcd5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b6044820152606401610afb565b6001805460ff191681178155610be290611729565b6001805460ff19169055565b6000610a47610bfc8361107a565b6117d7565b6000610a6361182c565b610a568161183f565b6000610a4782611960565b610a56816119bc565b6000546001600160a01b03163314610c6e5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b6044820152606401610afb565b6001805460ff191681179055600080546001600160a01b0319166001600160a01b038316908117825560405190917f57860cff71823f3deabfecdd98d8536e7358fdeff8b092fd59e9f71c5078f32291a2506001805460ff19169055565b6000610a63611ac7565b610a8d8282611ad2565b6000546001600160a01b03163314610d265760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b6044820152606401610afb565b6001805460ff191681178155610d3e90828585611b9e565b50506001805460ff1916905550565b610b78838383611d0c565b6000610d648383611e70565b9392505050565b610a8d8282611ed4565b610a5681611f95565b6000610a47610d8c8361107a565b611fb5565b6000610a4782611fc0565b610a8d610da88361107a565b82612054565b6000610a636114b5565b6000546001600160a01b03163314610dfe5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b6044820152606401610afb565b6001805460ff191681178155610e159082846120c0565b50506001805460ff19169055565b610a56816121f3565b610a8d8282612473565b6060610a478261255f565b610a5681612658565b6060610a6361275e565b6060610ebc6040518061016001604052806000815260200160008152602001606081526020016060815260200160006001600160a01b031681526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b610ecd610ec88461107a565b61276e565b9094909350915050565b6001600160a01b0380831660009081526204206c6020908152604080832093851683529290529081205460ff16610d64565b610a56816128a8565b610b78828285612b8a565b610b78838383612caa565b6000606080606080610f3986612da6565b939a9299509097509550909350915050565b640100042069805463ffffffff19164363ffffffff16179055565b33610f70826117d7565b6001600160a01b031614610fb15760405162461bcd60e51b815260206004820152600860248201526704c4f414e3a4c3a360c41b6044820152606401610afb565b610fba81612dc2565b6000610fc4611065565b90506000610fd0611ac7565b90506000610fe18233856000612f1f565b506001600160a01b03851660009081526204207460205260409020819055905061101433846001600160601b0316612f71565b604080516001600160a01b03861681526001600160601b03851660208201527fdf65fae456ee5bcd916efcb9b5ad07667d7fc396aff61536c465f280393fbd3e91015b60405180910390a150505050565b6000610a636110756204206e5490565b612fcc565b60006001600160a01b0382111561109057600080fd5b5090565b6001600160a01b0380821660009081526204206960205260408120549091166110e55760405162461bcd60e51b8152602060048201526003602482015262543a3960e81b6044820152606401610afb565b620420695b6001600160a01b0392831660009081526002919091016020526040902054909116919050565b600061111b826117d7565b9050806001600160a01b0316836001600160a01b031614156111655760405162461bcd60e51b8152602060048201526003602482015262543a3360e81b6044820152606401610afb565b336001600160a01b03821614806111a157506001600160a01b03811660009081526204206c6020908152604080832033845290915290205460ff165b6111d35760405162461bcd60e51b8152602060048201526003602482015262543a3160e81b6044820152606401610afb565b6001600160a01b0382811660008181526204206b602052604080822080546001600160a01b031916888616908117909155905192939092908516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600080611243833361301c565b91509150826001600160a01b0316816040015163ffffffff1614801561126857508051155b156112db57611277828261306a565b7fb05be3e18f19a4aac09f77432c65062f81615fefa61e76300a99fb2d08c0191383336112a3346130f5565b604080516001600160a01b0394851681529390921660208401526001600160601b0316908201526060015b60405180910390a1505050565b602081015160ff1c6001141561131e5760405162461bcd60e51b81526020600482015260086024820152670534c3a48534f3a360c41b6044820152606401610afb565b80516113555760405162461bcd60e51b815260206004820152600660248201526504e533a303a360d41b6044820152606401610afb565b602081015115801561136b5750805160ff1c6001145b156113ef57611378611065565b6001600160601b03163410156113b95760405162461bcd60e51b81526020600482015260066024820152650534c3a533a360d41b6044820152606401610afb565b6113c3828261310b565b7f8e9681d7ef6204b5eb1f7e898910b723018e455d09ba77c2c9e43346968c887f83336112a3346130f5565b6113f982826131c9565b7f695e0d4736a959eec71a66de118059220f6144b53eb2ed3e6ca8508ce8cd1f0a83336112a3346130f5565b600080600080600061143886600061301c565b8051909250151590506114775760405162461bcd60e51b815260206004820152600760248201526604e533a47533a360cc1b6044820152606401610afb565b8051611482906132c4565b945061149181600001516132d8565b93506114a081600001516132fa565b815190935060ff1c6001149150509193509193565b6000610a636114c56204206e5490565b60c01c90565b815460ff166115025760405162461bcd60e51b8152602060048201526003602482015262543a3160e81b6044820152606401610afb565b806204206d80546001600160a01b0319166001600160a01b0392831617905560405190821681527fc97e86a927b4a897832650767255fd568e377e7fbe9586c81d26b77a2c3ffc8b906020015b60405180910390a15050565b33611565826117d7565b6001600160a01b0316146115a65760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610afb565b6000806115b4858585613314565b6020810151919350915060ff1c600114156115fc5760405162461bcd60e51b81526020600482015260086024820152670534c3a48534f3a360c41b6044820152606401610afb565b60208101511580156116125750805160ff1c6001145b1561169357611621828261310b565b7fdcd75b8c1f9c84e8b7d26df979d7ddbc4139b72f6c8e0e7123bb63d63ba1c32585858561164e346130f5565b604080516001600160a01b03958616815261ffff94909416602085015291909316908201526001600160601b03909116606082015260800160405180910390a161170c565b61169d82826131c9565b7f3bbfe02e9ee64811b7404130d1c8a263edbb6ab73af1dc502dd56d43a3ddd1a38585856116ca346130f5565b604080516001600160a01b03958616815261ffff94909416602085015291909316908201526001600160601b0390911660608201526080015b60405180910390a15b5050505050565b6000610a636117236204206e5490565b60601c90565b805460ff166117605760405162461bcd60e51b81526020600482015260036024820152620543a360ec1b6044820152606401610afb565b600061176d6204206e5490565b905080611783336001600160601b038316612f71565b61179e6bffffffffffffffffffffffff1983165b6204206e55565b6040516001600160601b03821681527f8e4dbe2f73d3458c68bca94210eabefac52a4d20c038a8e50197ac9db654291b906020016112ce565b6001600160a01b03818116600090815262042069602052604090205416806118275760405162461bcd60e51b8152602060048201526003602482015262543a4160e81b6044820152606401610afb565b919050565b6000610a6361183c6204206e5490565b90565b600061184b823361301c565b6001600160a01b03841660009081526204207560209081526040808320338452600101909152812055915061187d9050565b61188681613372565b156118e5576118ab826001600160a01b03166000908152620420756020526040812055565b80516118b6906132fa565b63ffffffff16826001600160a01b031614156118db576118d63383613439565b611904565b6118d6338361350b565b611904336118f683602001516132d8565b6001600160601b0316612f71565b7f10c1106c1b3c266f6cf55047c56a839a002c11736bbf9c4acdec566e80677e9b823361193484600001516132fa565b604080516001600160a01b03948516815293909216602084015263ffffffff169082015260600161154f565b60006001600160a01b03821661199e5760405162461bcd60e51b81526020600482015260036024820152622a1d2160e91b6044820152606401610afb565b506001600160a01b031660009081526204206a602052604090205490565b6119ca6101f46109c4615952565b63ffffffff16816001600160a01b03161080156119f157506101f46001600160a01b038216115b611a235760405162461bcd60e51b8152602060048201526003602482015262543a3160e81b6044820152606401610afb565b6001600160a01b0380821660009081526204206960205260409020541615611a735760405162461bcd60e51b81526020600482015260036024820152622a1d1960e91b6044820152606401610afb565b611a7c81613604565b611a863382613439565b6040516001600160a01b038216815233907f6717cdc2f702204391319559ab130cf2bdd1a3f69aa0c4078efc85c629dc86af9060200160405180910390a250565b6000610a6343613740565b33611adc836117d7565b6001600160a01b031614611b1b5760405162461bcd60e51b8152600401610afb9060208082526004908201526328219d1960e11b604082015260600190565b6000611b2683613781565b9050611b3281836137d6565b9050611b3e81836138aa565b6001600160a01b03841660008181526204207260209081526040918290208490558151928352820183905260ff8516908201529091507fe0b01689336e903dba5ec8bc01d79a4ec6aa4f944cd16d45d32700fb594b74ae906060016112ce565b835460ff16611bd55760405162461bcd60e51b81526020600482015260036024820152620543a360ec1b6044820152606401610afb565b6000611be082613939565b905060008160ff1611611c1e5760405162461bcd60e51b8152600401610afb90602080825260049082015263056433a360e41b604082015260600190565b60405160ff60a01b60a083901b1690600090611c5890611c4490879087906020016159c9565b604051602081830303815290604052613949565b60ff8716600090815262042070602090815260408220805460018101825590835290822001805474ffffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384166001600160a81b038716171790556204206f54919250611cc0826139fd565b905084818960ff1681518110611cd857611cd8615a67565b60200260200101818151611cec9190615a7d565b60ff16905250611cfc8282613a0a565b6204206f55505050505050505050565b33611d16826117d7565b6001600160a01b031614611d575760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610afb565b6000611d64848484613314565b6001600160a01b038087166000908152620420756020908152604080832061ffff8a1684526002018252808320938816835260019093019052908120559150611daa9050565b611db381613372565b15611df4576001600160a01b0384166000908152620420756020908152604080832061ffff87168452600201909152812055611def8284613a18565b611e05565b611e05336118f683602001516132d8565b7f95e8db1d2cc4bd26402c98c45fdb7ff875bb955206591a210b51aa82b4ba5acb848484611e3685600001516132fa565b604080516001600160a01b03958616815261ffff949094166020850152919093169082015263ffffffff9091166060820152608001611057565b600080611e7d848461301c565b915050806020015160001415611ebf5760405162461bcd60e51b815260206004820152600760248201526604e533a47533a360cc1b6044820152606401610afb565b611ecc81602001516132d8565b949350505050565b336001600160a01b03831614801590611ef557506001600160a01b03821630145b611f275760405162461bcd60e51b81526020600482015260036024820152620543a360ec1b6044820152606401610afb565b3360008181526204206c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000611fa082613b4b565b9050610a8d33826001600160601b0316612f71565b60006204206f6110ea565b600080600080611fce613d08565b50925092509250846001600160a01b031682148015611fec57508215155b15611ff957949350505050565b6001600160a01b038516600090815262042072602052604090205493508361204c5760405162461bcd60e51b8152600401610afb90602080825260049082015263504f3a3160e01b604082015260600190565b505050919050565b61205e3383613d38565b6120905760405162461bcd60e51b81526020600482015260036024820152620543a360ec1b6044820152606401610afb565b6001600160a01b039182166000908152620420716020526040902080546001600160a01b03191691909216179055565b825460ff166120f75760405162461bcd60e51b81526020600482015260036024820152620543a360ec1b6044820152606401610afb565b6101f46001600160a01b03821610801561211957506001600160a01b03811615155b61214b5760405162461bcd60e51b8152602060048201526003602482015262543a3160e81b6044820152606401610afb565b6001600160a01b038082166000908152620420696020526040902054161561219b5760405162461bcd60e51b81526020600482015260036024820152622a1d1960e91b6044820152606401610afb565b6121a481613604565b6121ae8282613439565b6040516001600160a01b0382811682528316907ff720aad51e634650c6c404c3527f059ca40ad43d391f5ac5758f49bae2ff62609060200160405180910390a2505050565b6121fc816117d7565b6001600160a01b0316306001600160a01b0316146122475760405162461bcd60e51b815260206004820152600860248201526704c4f414e3a503a360c41b6044820152606401610afb565b6001600160a01b03811660009081526204207460205260409020548015801590612281575033612276826132c4565b6001600160a01b0316145b6122b85760405162461bcd60e51b81526020600482015260086024820152672627a0a71d281d1960c11b6044820152606401610afb565b60006122c3826132d8565b905060006127106122d5606484615aa2565b6122df9190615ae7565b905034816001600160601b031611156123265760405162461bcd60e51b815260206004820152600960248201526804c4f414e3a52453a360bc1b6044820152606401610afb565b6000612330611065565b905061233b82613db5565b6000612345611065565b905060008061236c6103e8612359896132fa565b6123639190615952565b33856000612f1f565b6001600160a01b038a1660009081526204207460205260408120839055919350915085612398346130f5565b6123a29190615b0d565b905060006123b08789615b35565b90506000866001600160601b0316826001600160601b031610156123dd576123d88288615b0d565b6123e0565b60005b90506000846123ef8584615b35565b6123f99190615b35565b905061240e33826001600160601b0316612f71565b604080516001600160a01b038e1681526001600160601b03808c1660208301528416918101919091527f55ab9f648a42ab2ae7eed81f0683a7bae5d54989d8125f397a88f72bec826917906060015b60405180910390a1505050505050505050505050565b61247b611065565b6001600160601b0316816001600160601b031610156124c55760405162461bcd60e51b81526020600482015260066024820152650534c3a533a360d41b6044820152606401610afb565b6124ce82612dc2565b6000806124db843361301c565b80519193509150156124ef576124ef615b57565b6000612507600033612500346130f5565b6001612f1f565b50808455604080516001600160a01b03881681523360208201526001600160601b038716918101919091529091507f3d175b4f67d380f8c4185f649f2cfeda5da34c1156302187ac843b620f9c9cd390606001611703565b6060600061256c8361107a565b6001600160a01b03808216600090815262042071602052604081205492935091166125a2576002546001600160a01b03166125ab565b6125ab82611fb5565b6002546040516303235b5f60e31b8152306004820152602481018790526001600160a01b03838116604483015260ff600160a01b840481166064840152600160a81b840416608483015292935091169063191adaf89060a40160006040518083038186803b15801561261c57600080fd5b505afa158015612630573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ecc9190810190615b6d565b6204206d546001600160a01b03168061267057600080fd5b600061267b83613781565b9050600061268884613b4b565b6040516380011aa760e01b81526001600160a01b03868116600483015260248201859052336044830152919250908416906380011aa7906001600160601b038416906064016000604051808303818588803b1580156126e657600080fd5b505af11580156126fa573d6000803e3d6000fd5b5050604080516001600160a01b038089168252891660208201529081018690523360608201526001600160601b03851660808201527f58ca548c1fd63f641dfb02f79df36d4f29bd995f0733d2ed3595b6cfde7db4e1935060a00191506110579050565b6060610a636204206f5b546139fd565b60606127d66040518061016001604052806000815260200160008152602001606081526020016060815260200160006001600160a01b031681526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b60008060008060006127e788612da6565b945094509450945094506127fa84613ea2565b965060405180610160016040528060018152602001428152602001604051806040016040528060098152602001684e756767465420563160b81b8152508152602001604051806060016040528060228152602001615f816022913981526020016128638a6117d7565b6001600160a01b03168152602001896001600160a01b031681526020018681526020018581526020018481526020018381526020018281525095505050505050915091565b6128b1816117d7565b6001600160a01b0316306001600160a01b0316146128fc5760405162461bcd60e51b815260206004820152600860248201526704c4f414e3a503a360c41b6044820152606401610afb565b6001600160a01b0381166000908152620420746020526040812080549190556000612925611ac7565b90508063ffffffff166103e861293a846132fa565b6129449190615952565b63ffffffff161061299a5733612959836132c4565b6001600160a01b03161461299a5760405162461bcd60e51b81526020600482015260086024820152674c4f414e3a503a3160c01b6044820152606401610afb565b816129d25760405162461bcd60e51b81526020600482015260086024820152672627a0a71d281d1960c11b6044820152606401610afb565b60006129dd836132d8565b905060006127106129ef606484615aa2565b6129f99190615ae7565b90506000612a078383615b35565b905034816001600160601b03161115612a4e5760405162461bcd60e51b815260206004820152600960248201526804c4f414e3a52453a360bc1b6044820152606401610afb565b6000612a59346130f5565b90506000612a678483615b0d565b90506000612a758587615b35565b90506000612a81611065565b90506000816001600160601b0316836001600160601b03161015612aae57612aa98383615b0d565b612ab1565b60005b90506000612abf8583615b35565b9050612aca88613db5565b612add33826001600160601b0316612f71565b612ae7338d61350b565b604080516001600160a01b038e1681526001600160601b038a8116602083015284168183015290517f55ab9f648a42ab2ae7eed81f0683a7bae5d54989d8125f397a88f72bec8269179181900360600190a1604080516001600160a01b038e1681523360208201526001600160601b038916918101919091527f563fb66b43e6ac55166c353532257057a2fe86a1566c988840baecf6bca1025a9060600161245d565b33612b94826117d7565b6001600160a01b031614612bd55760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610afb565b612bdf8184613fc0565b600080612bed838685613314565b8051919350915015612c2b5760405162461bcd60e51b8152602060048201526007602482015266053433a53493a360cc1b6044820152606401610afb565b6000612c3b600085876001612f1f565b5080845590507f77cfc3b2aafc5344a53b50b3c7938afac3d04e0f564e929aa8d1f398e67f1ccc8487612c6d846132d8565b604080516001600160a01b03909416845261ffff90921660208401526001600160601b0316908201526060015b60405180910390a1505050505050565b33612cb4846117d7565b6001600160a01b031614612cf35760405162461bcd60e51b8152600401610afb9060208082526004908201526328219d1960e11b604082015260600190565b81516008148015612d05575080516008145b612d3a5760405162461bcd60e51b8152600401610afb9060208082526004908201526350433a3360e01b604082015260600190565b6000612d4584613781565b9050612d528184846140b2565b6001600160a01b0385166000908152620420726020526040902081905590507f73904d03f919661d854e7b284dd6f818c038e7cce6237422aca32cc599a08267848285856040516110579493929190615bdb565b6000606080606080612db786611fc0565b9450610f39856140ce565b612dcb816117d7565b6001600160a01b0316336001600160a01b0316148015612dfb575030612df082611094565b6001600160a01b0316145b612e2d5760405162461bcd60e51b8152602060048201526003602482015262150e8d60ea1b6044820152606401610afb565b3360009081526204206a60205260408120805460019290612e4f908490615c20565b90915550503060009081526204206a60205260408120805460019290612e76908490615c37565b90915550506001600160a01b038116600081815262042069602090815260408083208054306001600160a01b031991821681179092556204206b9093528184208054909316909255517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a46040516001600160a01b03821690309033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a450565b600080612f2c8287614111565b9150612f388286614132565b91508215612f4e57612f4b82600161414f565b91505b612f588285614186565b9092509050612f66826141e0565b915094509492505050565b600080600080600085875af1905080610b785760405162461bcd60e51b815260206004820152601360248201527f4554485f5452414e534645525f4641494c4544000000000000000000000000006044820152606401610afb565b6000612fd88260c01c90565b67ffffffffffffffff161561301457612ff18260c01c90565b67ffffffffffffffff166130058360601c90565b61300f9190615ae7565b610a47565b600092915050565b6040805160808101825260008082526020808301829052828401829052606083018290526001600160a01b038616825262042075905291822091506130618284614210565b90509250929050565b805115801561307b57506020810151155b6130b05760405162461bcd60e51b81526020600482015260066024820152651394ce934e9160d21b6044820152606401610afb565b60006130cb8260400151336130c4346130f5565b6000612f1f565b5080845590506130e26130dd346130f5565b6142b0565b610b78826040015163ffffffff16613604565b60006001600160601b0382111561109057600080fd5b602081015115801561311d5750805115155b61312957613129615b57565b805160ff1c60011461313d5761313d615b57565b600080600061316e84600001518560400151600161315b9190615952565b8660600151613169346130f5565b6143d9565b82885586519295506001600160601b039182169450169150600186016000613195836132c4565b6001600160a01b0316815260208101919091526040016000205561170c6131c46131bf8385615c37565b6130f5565b613db5565b80516131d4906132fa565b63ffffffff16816040015163ffffffff16111561321e5760405162461bcd60e51b8152602060048201526008602482015267534c3a4f42503a3360c01b6044820152606401610afb565b80606001516001600160a01b031661323982600001516132c4565b6001600160a01b031614613273578051600183016000613258836132c4565b6001600160a01b031681526020810191909152604001600020555b60008060006132aa8460000151856060015161328e346130f5565b61329b88602001516132d8565b6132a59190615b35565b614439565b8288559194509250905061170c6131c46131bf8385615c37565b6000610a476001600160a01b03831661107a565b6000610a476131bf60a084901c66ffffffffffffff166509184e72a000615c4f565b6000610a4763ffffffff60d884901c1661446c565b61446c565b6040805160808101825260008082526020808301829052828401829052606083018290526001600160a01b038716825262042075815283822061ffff87168352600201905291822091506133688284614210565b9050935093915050565b60008160200151600014156133b35760405162461bcd60e51b8152602060048201526007602482015266534c3a43433a3160c81b6044820152606401610afb565b60006133c283600001516132fa565b63ffffffff16836040015163ffffffff1611905060006133e584600001516132c4565b6001600160a01b03166133fb85602001516132c4565b6001600160a01b0316149050600061341d8560000151600160ff9190911c1490565b9050808061343057508180156134305750825b95945050505050565b61344c82826001600160a01b031661447f565b61347e5760405162461bcd60e51b8152602060048201526003602482015262543a3560e81b6044820152606401610afb565b6001600160a01b03821660009081526204206a602052604081208054600192906134a9908490615c37565b90915550506001600160a01b03818116600081815262042069602052604080822080546001600160a01b0319169487169485179055519192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b61351e82826001600160a01b031661447f565b6135505760405162461bcd60e51b81526020600482015260036024820152622a1d1960e91b6044820152606401610afb565b3060009081526204206a60205260408120805460019290613572908490615c20565b90915550506001600160a01b03821660009081526204206a602052604081208054600192906135a2908490615c37565b90915550506001600160a01b03818116600081815262042069602052604080822080546001600160a01b03191694871694851790555191929130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a45050565b6001600160a01b0381166000908152620420726020526040902054156136525760405162461bcd60e51b81526020600482015260036024820152620503a360ec1b6044820152606401610afb565b600081613660600143615c20565b6040516204206960ec1b602082015260609290921b6bffffffffffffffffffffffff1916602383015240603782015260570160408051601f1981840301815291905280516020909101209050806136df5760405162461bcd60e51b8152602060048201526003602482015262503a3160e81b6044820152606401610afb565b6000806136eb836145ef565b6001600160a01b0386166000908152620420726020526040902082905590925090507f3c2693eb3bc9fd62db9b727df67972a7372cca5a21f9b4a5c05d48363273c24784838360405161105793929190615c6e565b6000610a47610bb860ff61375d6401000420695463ffffffff1690565b61376d9063ffffffff1686615c20565b6137779190615c96565b61330f9190615c37565b6001600160a01b0381166000908152620420726020526040902054806118275760405162461bcd60e51b815260206004820152600a602482015269050524f4f463a504f3a360b41b6044820152606401610afb565b6000806137e48460006149e7565b905060006137f38560406149e7565b90506000818560ff168151811061380c5761380c615a67565b60200260200101519050828560ff168151811061382b5761382b615a67565b6020026020010151828660ff168151811061384857613848615a67565b602002602001019060ff16908160ff168152505080838660ff168151811061387257613872615a67565b602002602001019060ff16908160ff168152505061389286600085614a67565b93506138a084604084614a67565b9695505050505050565b6000806138b88460806149e7565b905060006138c78560c06149e7565b90506000818560ff16815181106138e0576138e0615a67565b602002602001019060ff16908160ff16815250506000828560ff168151811061390b5761390b615a67565b602002602001019060ff16908160ff168152505061392b85608084614a67565b92506134308360c083614a67565b600060ff82111561109057600080fd5b6000808260405160200161395d9190615caa565b60405160208183030381529060405290506000815182604051602001613984929190615cd0565b60405160208183030381529060405290508051602082016000f092506001600160a01b0383166139f65760405162461bcd60e51b815260206004820152601160248201527f4445504c4f594d454e545f4641494c45440000000000000000000000000000006044820152606401610afb565b5050919050565b6060610a478260006149e7565b6000610d6483600084614a67565b33613a22836117d7565b6001600160a01b031614613a615760405162461bcd60e51b8152600401610afb90602080825260049082015263050433a360e41b604082015260600190565b6000613a6c83613781565b61ffff83166000908152620420736020526040902054909150613aba5760405162461bcd60e51b8152600401610afb9060208082526004908201526352433a3360e01b604082015260600190565b61ffff821660009081526204207360205260408120805491613adb83615d21565b9190505550613aea8183614ae3565b6001600160a01b03841660008181526204207260209081526040918290208490558151928352820183905261ffff8516908201529091507f1e3ac88633ac111203e2a7614365c5e3df507302c9fb545dd85d8fcef753afce906060016112ce565b600033613b57836117d7565b6001600160a01b031614613b965760405162461bcd60e51b8152600401610afb9060208082526004908201526353433a3960e01b604082015260600190565b6000613ba36204206e5490565b9050613bae83614b8f565b600080613bba83614d18565b5091509150613bc883612fcc565b935060018267ffffffffffffffff161015613c0d5760405162461bcd60e51b8152602060048201526005602482015264053433a31360dc1b6044820152606401610afb565b836001600160601b0316816001600160601b03161015613c575760405162461bcd60e51b815260206004820152600560248201526453433a313160d81b6044820152606401610afb565b613cc0611797613c678684615b0d565b613c93613c75600187615d38565b6001600160c01b03881660c09190911b6001600160c01b0319161790565b6bffffffffffffffffffffffff60601b191660609190911b6bffffffffffffffffffffffff60601b161790565b604080516001600160601b03861681523360208201527e96b8566d099a5618a665405b3df20d5a7f2293fce2fc9405d36a2ee3deab3f910160405180910390a1505050919050565b60008060006060613d17614d3d565b90945063ffffffff169250613d2b846145ef565b9495939490939092509050565b600080613d44836117d7565b9050806001600160a01b0316846001600160a01b03161480613d7f5750836001600160a01b0316613d7484611094565b6001600160a01b0316145b80611ecc57506001600160a01b0380821660009081526204206c602090815260408083209388168352929052205460ff16611ecc565b6000613dc26204206e5490565b90506000612710613dd56103e885615aa2565b613ddf9190615ae7565b9050613deb8184615b0d565b9250613e62611797613dfd8385615b35565b613e4386613e0b8760601c90565b613e159190615b35565b6bffffffffffffffffffffffff60601b19871660609190911b6bffffffffffffffffffffffff60601b161790565b6bffffffffffffffffffffffff19166001600160601b03919091161790565b604080516001600160601b038086168252831660208201527fcc7b20c8500e3dfc952e445cc296459e4e7148bead08f530844981e1c1236e4e91016112ce565b6060815167ffffffffffffffff811115613ebe57613ebe61544e565b604051908082528060200260200182016040528015613ef157816020015b6060815260200190600190039081613edc5790505b50905060005b82518160ff161015613fba57828160ff1681518110613f1857613f18615a67565b602002602001015160ff1660001415613f61576040805160008152602081019091528251839060ff8416908110613f5157613f51615a67565b6020026020010181905250613fa8565b613f8781848360ff1681518110613f7a57613f7a615a67565b6020026020010151614df4565b828260ff1681518110613f9c57613f9c615a67565b60200260200101819052505b80613fb281615d59565b915050613ef7565b50919050565b33613fca836117d7565b6001600160a01b0316146140095760405162461bcd60e51b8152600401610afb9060208082526004908201526350433a3160e01b604082015260600190565b600061401483613781565b90506140208183615040565b6001600160a01b03841660009081526204207260205260409020819055905061ffff82166000908152620420736020526040812080549161406083615d79565b9091555050604080516001600160a01b03851681526020810183905261ffff8416918101919091527f399c4ec95d9ea42a0f3dda50055e3a2901f9640121b0b29865e688c08188596b906060016112ce565b60006140c084608085614a67565b9050611ecc8160c084614a67565b8060608080806140df8560006149e7565b93506140ec8560406149e7565b92506140f98560806149e7565b91506141068560c06149e7565b905091939590929450565b600063ffffffff60d81b19831663ffffffff60d81b60d884901b1617610d64565b60006001600160a01b031983166001600160a01b03831617610d64565b6000610d6483600160ff85614165576000614168565b60015b60ff16811b600190921b6000190160ff919091161b19919091161790565b6000806141996509184e72a00084615d94565b90506141d784603860a06141b36509184e72a00088615ae7565b6001600160601b0316811b600190921b6000190160ff919091161b19919091161790565b91509250929050565b60007fbfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8216600160fe1b17610a47565b604080516080810182526000602082018190529181018290526060810191909152825480825261423e611ac7565b63ffffffff1660408301526001600160a01b0383166060830152614261816132c4565b6001600160a01b0316836001600160a01b0316141561428657602082018190526142a9565b6001600160a01b0383166000908152600185016020908152604090912054908301525b5092915050565b60006142bd6204206e5490565b905060008060006142cd84614d18565b9194509250905060006127106142e56103e888615aa2565b6142ef9190615ae7565b90506142fb8187615b0d565b955061430685612fcc565b6001600160601b0316866001600160601b031610156143505760405162461bcd60e51b81526020600482015260066024820152650534c3a4d3a360d41b6044820152606401610afb565b6143996117976143608385615b35565b613e4361436d8a88615b35565b613c9361437b8a6001615dba565b6001600160c01b038c1660c09190911b6001600160c01b0319161790565b604080516001600160601b038089168252831660208201527fcc7b20c8500e3dfc952e445cc296459e4e7148bead08f530844981e1c1236e4e9101612c9a565b6000806000806143e8886132d8565b9050846001600160601b0316614406826001600160601b03166150cd565b1061441057600080fd5b61441d8787876000612f1f565b909450915061442c8186615b0d565b9250509450945094915050565b60008060006144528661444b886132fa565b87876143d9565b91986001600160601b039182169850911695509350505050565b600063ffffffff82111561109057600080fd5b60006001600160a01b0383163b156145e757604051630a85bd0160e11b81523360048201523060248201526044810183905260806064820152600060848201526001600160a01b0384169063150b7a029060a401602060405180830381600087803b1580156144ed57600080fd5b505af192505050801561451d575060408051601f3d908101601f1916820190925261451a91810190615ddd565b60015b6145cd573d80801561454b576040519150601f19603f3d011682016040523d82523d6000602084013e614550565b606091505b5080516145c55760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610afb565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610a47565b506001610a47565b60006060826146265760405162461bcd60e51b8152602060048201526003602482015262281d1b60e91b6044820152606401610afb565b600061463061275e565b6040805160088082526101208201909252919250602082016101008036833701905050915060006146628560006149e7565b90508160008151811061467757614677615a67565b60200260200101518160008151811061469257614692615a67565b60200260200101516146a49190615dfa565b6146af906001615a7d565b836000815181106146c2576146c2615a67565b602002602001019060ff16908160ff1681525050816001815181106146e9576146e9615a67565b60200260200101518160018151811061470457614704615a67565b60200260200101516147169190615dfa565b614721906001615a7d565b8360018151811061473457614734615a67565b602002602001019060ff16908160ff16815250508160028151811061475b5761475b615a67565b60200260200101518160028151811061477657614776615a67565b60200260200101516147889190615dfa565b614793906001615a7d565b836002815181106147a6576147a6615a67565b602002602001019060ff16908160ff16815250506060816003815181106147cf576147cf615a67565b602002602001015160ff16101561485757816003815181106147f3576147f3615a67565b60200260200101518160048151811061480e5761480e615a67565b60200260200101516148209190615dfa565b61482b906001615a7d565b8360038151811061483e5761483e615a67565b602002602001019060ff16908160ff16815250506149d2565b60c08160038151811061486c5761486c615a67565b602002602001015160ff1610156148db578160048151811061489057614890615a67565b6020026020010151816004815181106148ab576148ab615a67565b60200260200101516148bd9190615dfa565b6148c8906001615a7d565b8360048151811061483e5761483e615a67565b60fa816003815181106148f0576148f0615a67565b602002602001015160ff16101561495f578160058151811061491457614914615a67565b60200260200101518160048151811061492f5761492f615a67565b60200260200101516149419190615dfa565b61494c906001615a7d565b8360058151811061483e5761483e615a67565b8160068151811061497257614972615a67565b60200260200101518160048151811061498d5761498d615a67565b602002602001015161499f9190615dfa565b6149aa906001615a7d565b836006815181106149bd576149bd615a67565b602002602001019060ff16908160ff16815250505b6149de84600085614a67565b93505050915091565b604080516008808252610120820190925292821c67ffffffffffffffff1692606091602082016101008036833701905050905060005b60088110156142a9578360ff16828281518110614a3c57614a3c615a67565b60ff9092166020928302919091019091015260089390931c9280614a5f81615d79565b915050614a1d565b600060085b8015614ac857614a7d600182615c20565b614a88906008615c4f565b83614a94600184615c20565b81518110614aa457614aa4615a67565b602002602001015160ff16901b821791508080614ac090615d21565b915050614a6c565b5067ffffffffffffffff60ff84161b19841681841b17611ecc565b600080614af18460406149e7565b805190915060ff600885901c81169190851690839083908110614b1657614b16615a67565b602002602001015160ff16600014614b595760405162461bcd60e51b8152600401610afb90602080825260049082015263050503a360e41b604082015260600190565b80838360ff1681518110614b6f57614b6f615a67565b602002602001019060ff16908160ff16815250506138a086604085614a67565b30614b9982611094565b6001600160a01b031614614bd55760405162461bcd60e51b81526020600482015260036024820152622a1d1b60e91b6044820152606401610afb565b33614bdf826117d7565b6001600160a01b031614614c1b5760405162461bcd60e51b8152602060048201526003602482015262543a3760e81b6044820152606401610afb565b6001600160a01b0381166000818152620420696020908152604080832080546001600160a01b03199081169091556204206b83528184208054821690556204207583528184208490556204207483528184208490556204207283528184208490556204207190925280832080549092169091555133907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a43360009081526204206a60205260408120805460019290614cd8908490615c20565b90915550506040516001600160a01b0382169060009033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a450565b6000806000614d278460c01c90565b9250614d338460601c90565b9294929392915050565b600080614d48611ac7565b90506000614d55826150e8565b90506000614d64600183615c20565b40905080614d9e5760405162461bcd60e51b8152602060048201526007602482015266115410ce94d09360ca1b6044820152606401610afb565b6040805160208082019390935260e085901b6001600160e01b031916818301523060601b6bffffffffffffffffffffffff1916604482015281516038818303018152605890910190915280519101209391925050565b606060ff8216614e2f5760405162461bcd60e51b8152600401610afb906020808252600490820152632b219d1960e11b604082015260600190565b81614e3981615e1c565b9250506000614e4b6127686204206f90565b8460ff1681518110614e5f57614e5f615a67565b602002602001015190508060ff168360ff1610614ea75760405162461bcd60e51b8152600401610afb9060208082526004908201526356433a3160e01b604082015260600190565b60ff84166000908152620420706020908152604080832080548251818502810185019093528083529192909190830182828015614f0d57602002820191906000526020600020905b81546001600160a81b03168152600190910190602001808311614eef575b50505050509050600080600080600090505b8451811015614fbb57600060a0868381518110614f3e57614f3e615a67565b60200260200101516001600160a81b0316901c90508860ff168184614f639190615a7d565b60ff161115614f9c57858281518110614f7e57614f7e615a67565b602002602001015194508289614f949190615e39565b935050614fbb565b614fa68184615a7d565b92505080614fb381615d79565b915050614f1f565b506001600160a01b038316614ffb5760405162461bcd60e51b8152600401610afb906020808252600490820152632b219d1960e11b604082015260600190565b6150048361512b565b8060200190518101906150179190615e5c565b8260ff168151811061502b5761502b615a67565b60200260200101519550505050505092915050565b60008061504e8460406149e7565b805190915060ff600885901c81169190851690819084908490811061507557615075615a67565b602002602001015160ff16146150b65760405162461bcd60e51b8152600401610afb9060208082526004908201526350503a3160e01b604082015260600190565b6000838360ff1681518110614b6f57614b6f615a67565b60006127106150de83612774615c4f565b610a479190615c96565b60006150fd6401000420695463ffffffff1690565b63ffffffff1660ff615111610bb885615f63565b63ffffffff166151219190615c4f565b610a479190615c37565b6060610a47826001615147816001600160a01b0384163b615c20565b60408051603f83850101601f19168101909152818152818360208301863c9392505050565b6001600160e01b031981168114610a5657600080fd5b60006020828403121561519457600080fd5b8135610d648161516c565b6001600160a01b0381168114610a5657600080fd5b6000602082840312156151c657600080fd5b8135610d648161519f565b60005b838110156151ec5781810151838201526020016151d4565b838111156151fb576000848401525b50505050565b600081518084526152198160208601602086016151d1565b601f01601f19169290920160200192915050565b602081526000610d646020830184615201565b60006020828403121561525257600080fd5b5035919050565b6000806040838503121561526c57600080fd5b82356152778161519f565b946020939093013593505050565b60008060006060848603121561529a57600080fd5b83356152a58161519f565b925060208401356152b58161519f565b929592945050506040919091013590565b803561ffff8116811461182757600080fd5b6000806000606084860312156152ed57600080fd5b83356152f88161519f565b9250615306602085016152c6565b915060408401356153168161519f565b809150509250925092565b803560ff8116811461182757600080fd5b6000806040838503121561534557600080fd5b82356153508161519f565b915061306160208401615321565b60008060006040848603121561537357600080fd5b833567ffffffffffffffff8082111561538b57600080fd5b818601915086601f83011261539f57600080fd5b8135818111156153ae57600080fd5b8760208260051b85010111156153c357600080fd5b6020928301955093506153d99186019050615321565b90509250925092565b600080604083850312156153f557600080fd5b82356154008161519f565b915060208301356154108161519f565b809150509250929050565b6000806040838503121561542e57600080fd5b82356154398161519f565b91506020830135801515811461541057600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561548d5761548d61544e565b604052919050565b600067ffffffffffffffff8211156154af576154af61544e565b50601f01601f191660200190565b600080600080608085870312156154d357600080fd5b84356154de8161519f565b935060208501356154ee8161519f565b925060408501359150606085013567ffffffffffffffff81111561551157600080fd5b8501601f8101871361552257600080fd5b803561553561553082615495565b615464565b81815288602083850101111561554a57600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b6000806040838503121561557f57600080fd5b8235915060208301356154108161519f565b80356001600160601b038116811461182757600080fd5b600080604083850312156155bb57600080fd5b82356155c68161519f565b915061306160208401615591565b600081518084526020808501945080840160005b8381101561560757815160ff16875295820195908201906001016155e8565b509495945050505050565b602081526000610d6460208301846155d4565b60006101608251845260208301516020850152604083015181604086015261564f82860182615201565b915050606083015184820360608601526156698282615201565b915050608083015161568660808601826001600160a01b03169052565b5060a083015160a085015260c083015160c085015260e083015184820360e08601526156b282826155d4565b91505061010080840151858303828701526156cd83826155d4565b9250505061012080840151858303828701526156e983826155d4565b9250505061014080840151858303828701526138a083826155d4565b6000604082016040835280855180835260608501915060608160051b860101925060208088016000805b8481101561578357888703605f19018652825180518089529085019085890190845b8181101561576d57835183529287019291870191600101615751565b509098505050948301949183019160010161572f565b505050858403818701525050506134308185615625565b6000806000606084860312156157af57600080fd5b83356157ba8161519f565b92506157c8602085016152c6565b91506153d960408501615591565b600067ffffffffffffffff8211156157f0576157f061544e565b5060051b60200190565b600082601f83011261580b57600080fd5b8135602061581b615530836157d6565b82815260059290921b8401810191818101908684111561583a57600080fd5b8286015b8481101561585c5761584f81615321565b835291830191830161583e565b509695505050505050565b60008060006060848603121561587c57600080fd5b83356158878161519f565b9250602084013567ffffffffffffffff808211156158a457600080fd5b6158b0878388016157fa565b935060408601359150808211156158c657600080fd5b506158d3868287016157fa565b9150509250925092565b85815260a0602082015260006158f660a08301876155d4565b828103604084015261590881876155d4565b9050828103606084015261591c81866155d4565b9050828103608084015261593081856155d4565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff8083168185168083038211156159715761597161593c565b01949350505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156159ac57600080fd5b8260051b8083602087013760009401602001938452509192915050565b6020808252818101839052600090600560408085019086831b86010187855b88811015615a5957878303603f190184528135368b9003601e19018112615a0e57600080fd5b8a01803567ffffffffffffffff811115615a2757600080fd5b80871b36038c1315615a3857600080fd5b615a4585828a850161597a565b9588019594505050908501906001016159e8565b509098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff84168060ff03821115615a9a57615a9a61593c565b019392505050565b60006001600160601b0380831681851681830481118215151615615ac857615ac861593c565b02949350505050565b634e487b7160e01b600052601260045260246000fd5b60006001600160601b0380841680615b0157615b01615ad1565b92169190910492915050565b60006001600160601b0383811690831681811015615b2d57615b2d61593c565b039392505050565b60006001600160601b038083168185168083038211156159715761597161593c565b634e487b7160e01b600052600160045260246000fd5b600060208284031215615b7f57600080fd5b815167ffffffffffffffff811115615b9657600080fd5b8201601f81018413615ba757600080fd5b8051615bb561553082615495565b818152856020838501011115615bca57600080fd5b6134308260208301602086016151d1565b6001600160a01b0385168152836020820152608060408201526000615c0360808301856155d4565b8281036060840152615c1581856155d4565b979650505050505050565b600082821015615c3257615c3261593c565b500390565b60008219821115615c4a57615c4a61593c565b500190565b6000816000190483118215151615615c6957615c6961593c565b500290565b6001600160a01b038416815282602082015260606040820152600061343060608301846155d4565b600082615ca557615ca5615ad1565b500490565b6000815260008251615cc38160018501602087016151d1565b9190910160010192915050565b606360f81b815260e083901b6001600160e01b03191660018201526880600e6000396000f360b81b60058201528151600090615d1381600e8501602087016151d1565b91909101600e019392505050565b600081615d3057615d3061593c565b506000190190565b600067ffffffffffffffff83811690831681811015615b2d57615b2d61593c565b600060ff821660ff811415615d7057615d7061593c565b60010192915050565b6000600019821415615d8d57615d8d61593c565b5060010190565b60006001600160601b0380841680615dae57615dae615ad1565b92169190910692915050565b600067ffffffffffffffff8083168185168083038211156159715761597161593c565b600060208284031215615def57600080fd5b8151610d648161516c565b600060ff831680615e0d57615e0d615ad1565b8060ff84160691505092915050565b600060ff821680615e2f57615e2f61593c565b6000190192915050565b600060ff821660ff841680821015615e5357615e5361593c565b90039392505050565b60006020808385031215615e6f57600080fd5b825167ffffffffffffffff80821115615e8757600080fd5b818501915085601f830112615e9b57600080fd5b8151615ea9615530826157d6565b818152600591821b8401850191858201919089841115615ec857600080fd5b8686015b84811015615f5457805186811115615ee45760008081fd5b8701603f81018c13615ef65760008081fd5b888101516040615f08615530836157d6565b82815291851b83018101918b8101908f841115615f255760008081fd5b938201935b83851015615f435784518252938c0193908c0190615f2a565b885250505093880193508701615ecc565b50909998505050505050505050565b600063ffffffff83811690831681811015615b2d57615b2d61593c56fe4e7567672046756e6769626c6520546f6b656e205631206279206e7567672e78797aa2646970667358221220843bbff8fdb351bb41555b408cb573ba868a4b34c0ce50844466d2060bb2c76764736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106103295760003560e01c806395d89b41116101a5578063c06c822f116100ec578063e63bedde11610095578063fa7329921161006f578063fa73299214610977578063fca840ae1461098a578063fe7e997e146109aa578063ffcf6d3a146109ca57600080fd5b8063e63bedde14610908578063e747738314610936578063e985e9c51461095757600080fd5b8063d276db98116100c6578063d276db98146108a6578063d7be245c146108c6578063e5cbd48e146108e857600080fd5b8063c06c822f14610853578063c5c8beeb14610866578063c87b56dd1461088657600080fd5b8063b3f9e4cb1161014e578063bc7b6d6211610128578063bc7b6d62146107e5578063be2cfdff14610805578063beace31f1461083357600080fd5b8063b3f9e4cb1461078a578063b88d4fde146107aa578063b88ea014146107c557600080fd5b8063a19ce9d61161017f578063a19ce9d61461072a578063a22cb4651461074a578063b3b9f3a71461076a57600080fd5b806395d89b41146106bb5780639a74cb64146106ea5780639caec8861461070a57600080fd5b806342842e0e11610274578063665557c81161021d5780637e2a6db8116101f75780637e2a6db81461063357806388fb73e614610651578063900cf0cf146106715780639066fdf81461069b57600080fd5b8063665557c8146105d357806370a08231146105f3578063750656f61461061357600080fd5b80635917c58f1161024e5780635917c58f1461056b5780636352211e1461059e5780636571595e146105be57600080fd5b806342842e0e146104ee578063504cdacf14610541578063570f67ad1461055657600080fd5b8063099afa17116102d657806323b872dd116102b057806323b872dd146104ee57806323cf31181461050e5780632e7a7f5e1461052e57600080fd5b8063099afa1714610459578063127913e21461046c57806318160ddd146104cb57600080fd5b806306fdde031161030757806306fdde03146103b2578063081812fc14610401578063095ea7b31461043957600080fd5b806301ffc9a71461032e5780630251f62c1461036357806303bfe17e14610385575b600080fd5b34801561033a57600080fd5b5061034e610349366004615182565b6109fb565b60405190151581526020015b60405180910390f35b34801561036f57600080fd5b5061038361037e3660046151b4565b610a4d565b005b34801561039157600080fd5b5061039a610a59565b6040516001600160601b03909116815260200161035a565b3480156103be57600080fd5b5060408051808201909152601681527f4e7567672046756e6769626c6520546f6b656e2056310000000000000000000060208201525b60405161035a919061522d565b34801561040d57600080fd5b5061042161041c366004615240565b610a68565b6040516001600160a01b03909116815260200161035a565b34801561044557600080fd5b50610383610454366004615259565b610a7b565b6103836104673660046151b4565b610a91565b34801561047857600080fd5b5061048c6104873660046151b4565b610a9a565b604080516001600160a01b0390951685526001600160601b03909316602085015263ffffffff909116918301919091521515606082015260800161035a565b3480156104d757600080fd5b506104e0610ab8565b60405190815260200161035a565b3480156104fa57600080fd5b50610383610509366004615285565b610ad1565b34801561051a57600080fd5b506103836105293660046151b4565b610b04565b61038361053c3660046152d8565b610b6d565b34801561054d57600080fd5b5061039a610b7d565b34801561056257600080fd5b50610383610b87565b34801561057757600080fd5b5060025461058c90600160a01b900460ff1681565b60405160ff909116815260200161035a565b3480156105aa57600080fd5b506104216105b9366004615240565b610bee565b3480156105ca57600080fd5b5061039a610c01565b3480156105df57600080fd5b506103836105ee3660046151b4565b610c0b565b3480156105ff57600080fd5b506104e061060e3660046151b4565b610c14565b34801561061f57600080fd5b5061038361062e3660046151b4565b610c1f565b34801561063f57600080fd5b506000546001600160a01b0316610421565b34801561065d57600080fd5b5061038361066c3660046151b4565b610c28565b34801561067d57600080fd5b50610686610ccc565b60405163ffffffff909116815260200161035a565b3480156106a757600080fd5b506103836106b6366004615332565b610cd6565b3480156106c757600080fd5b50604080518082019091526006815265139551d1d19560d21b60208201526103f4565b3480156106f657600080fd5b5061038361070536600461535e565b610ce0565b34801561071657600080fd5b506103836107253660046152d8565b610d4d565b34801561073657600080fd5b5061039a6107453660046153e2565b610d58565b34801561075657600080fd5b5061038361076536600461541b565b610d6b565b34801561077657600080fd5b506103836107853660046151b4565b610d75565b34801561079657600080fd5b506104216107a5366004615240565b610d7e565b3480156107b657600080fd5b506103836105093660046154bd565b3480156107d157600080fd5b506104e06107e03660046151b4565b610d91565b3480156107f157600080fd5b5061038361080036600461556c565b610d9c565b34801561081157600080fd5b5061081a610dae565b60405167ffffffffffffffff909116815260200161035a565b34801561083f57600080fd5b5061038361084e3660046153e2565b610db8565b6103836108613660046151b4565b610e23565b34801561087257600080fd5b506103836108813660046155a8565b610e2c565b34801561089257600080fd5b506103f46108a1366004615240565b610e36565b3480156108b257600080fd5b506103836108c13660046151b4565b610e41565b3480156108d257600080fd5b506108db610e4a565b60405161035a9190615612565b3480156108f457600080fd5b50600254610421906001600160a01b031681565b34801561091457600080fd5b50610928610923366004615240565b610e54565b60405161035a929190615705565b34801561094257600080fd5b5060025461058c90600160a81b900460ff1681565b34801561096357600080fd5b5061034e6109723660046153e2565b610ed7565b6103836109853660046151b4565b610f09565b34801561099657600080fd5b506103836109a536600461579a565b610f12565b3480156109b657600080fd5b506103836109c5366004615867565b610f1d565b3480156109d657600080fd5b506109ea6109e53660046151b4565b610f28565b60405161035a9594939291906158dd565b60006001600160e01b031982166380ac58cd60e01b1480610a2c57506001600160e01b03198216635b5e139f60e01b145b80610a4757506001600160e01b031982166301ffc9a760e01b145b92915050565b610a5681610f66565b50565b6000610a63611065565b905090565b6000610a47610a768361107a565b611094565b610a8d82610a888361107a565b611110565b5050565b610a5681611236565b600080600080610aa985611425565b93509350935093509193509193565b6000610ac26114b5565b67ffffffffffffffff16905090565b60405162461bcd60e51b81526020600482015260036024820152621ddd5d60ea1b60448201526064015b60405180910390fd5b6000546001600160a01b03163314610b4a5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b6044820152606401610afb565b6001805460ff191681178155610b6090826114cb565b506001805460ff19169055565b610b7883838361155b565b505050565b6000610a63611713565b6000546001600160a01b03163314610bcd5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b6044820152606401610afb565b6001805460ff191681178155610be290611729565b6001805460ff19169055565b6000610a47610bfc8361107a565b6117d7565b6000610a6361182c565b610a568161183f565b6000610a4782611960565b610a56816119bc565b6000546001600160a01b03163314610c6e5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b6044820152606401610afb565b6001805460ff191681179055600080546001600160a01b0319166001600160a01b038316908117825560405190917f57860cff71823f3deabfecdd98d8536e7358fdeff8b092fd59e9f71c5078f32291a2506001805460ff19169055565b6000610a63611ac7565b610a8d8282611ad2565b6000546001600160a01b03163314610d265760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b6044820152606401610afb565b6001805460ff191681178155610d3e90828585611b9e565b50506001805460ff1916905550565b610b78838383611d0c565b6000610d648383611e70565b9392505050565b610a8d8282611ed4565b610a5681611f95565b6000610a47610d8c8361107a565b611fb5565b6000610a4782611fc0565b610a8d610da88361107a565b82612054565b6000610a636114b5565b6000546001600160a01b03163314610dfe5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b6044820152606401610afb565b6001805460ff191681178155610e159082846120c0565b50506001805460ff19169055565b610a56816121f3565b610a8d8282612473565b6060610a478261255f565b610a5681612658565b6060610a6361275e565b6060610ebc6040518061016001604052806000815260200160008152602001606081526020016060815260200160006001600160a01b031681526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b610ecd610ec88461107a565b61276e565b9094909350915050565b6001600160a01b0380831660009081526204206c6020908152604080832093851683529290529081205460ff16610d64565b610a56816128a8565b610b78828285612b8a565b610b78838383612caa565b6000606080606080610f3986612da6565b939a9299509097509550909350915050565b640100042069805463ffffffff19164363ffffffff16179055565b33610f70826117d7565b6001600160a01b031614610fb15760405162461bcd60e51b815260206004820152600860248201526704c4f414e3a4c3a360c41b6044820152606401610afb565b610fba81612dc2565b6000610fc4611065565b90506000610fd0611ac7565b90506000610fe18233856000612f1f565b506001600160a01b03851660009081526204207460205260409020819055905061101433846001600160601b0316612f71565b604080516001600160a01b03861681526001600160601b03851660208201527fdf65fae456ee5bcd916efcb9b5ad07667d7fc396aff61536c465f280393fbd3e91015b60405180910390a150505050565b6000610a636110756204206e5490565b612fcc565b60006001600160a01b0382111561109057600080fd5b5090565b6001600160a01b0380821660009081526204206960205260408120549091166110e55760405162461bcd60e51b8152602060048201526003602482015262543a3960e81b6044820152606401610afb565b620420695b6001600160a01b0392831660009081526002919091016020526040902054909116919050565b600061111b826117d7565b9050806001600160a01b0316836001600160a01b031614156111655760405162461bcd60e51b8152602060048201526003602482015262543a3360e81b6044820152606401610afb565b336001600160a01b03821614806111a157506001600160a01b03811660009081526204206c6020908152604080832033845290915290205460ff165b6111d35760405162461bcd60e51b8152602060048201526003602482015262543a3160e81b6044820152606401610afb565b6001600160a01b0382811660008181526204206b602052604080822080546001600160a01b031916888616908117909155905192939092908516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600080611243833361301c565b91509150826001600160a01b0316816040015163ffffffff1614801561126857508051155b156112db57611277828261306a565b7fb05be3e18f19a4aac09f77432c65062f81615fefa61e76300a99fb2d08c0191383336112a3346130f5565b604080516001600160a01b0394851681529390921660208401526001600160601b0316908201526060015b60405180910390a1505050565b602081015160ff1c6001141561131e5760405162461bcd60e51b81526020600482015260086024820152670534c3a48534f3a360c41b6044820152606401610afb565b80516113555760405162461bcd60e51b815260206004820152600660248201526504e533a303a360d41b6044820152606401610afb565b602081015115801561136b5750805160ff1c6001145b156113ef57611378611065565b6001600160601b03163410156113b95760405162461bcd60e51b81526020600482015260066024820152650534c3a533a360d41b6044820152606401610afb565b6113c3828261310b565b7f8e9681d7ef6204b5eb1f7e898910b723018e455d09ba77c2c9e43346968c887f83336112a3346130f5565b6113f982826131c9565b7f695e0d4736a959eec71a66de118059220f6144b53eb2ed3e6ca8508ce8cd1f0a83336112a3346130f5565b600080600080600061143886600061301c565b8051909250151590506114775760405162461bcd60e51b815260206004820152600760248201526604e533a47533a360cc1b6044820152606401610afb565b8051611482906132c4565b945061149181600001516132d8565b93506114a081600001516132fa565b815190935060ff1c6001149150509193509193565b6000610a636114c56204206e5490565b60c01c90565b815460ff166115025760405162461bcd60e51b8152602060048201526003602482015262543a3160e81b6044820152606401610afb565b806204206d80546001600160a01b0319166001600160a01b0392831617905560405190821681527fc97e86a927b4a897832650767255fd568e377e7fbe9586c81d26b77a2c3ffc8b906020015b60405180910390a15050565b33611565826117d7565b6001600160a01b0316146115a65760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610afb565b6000806115b4858585613314565b6020810151919350915060ff1c600114156115fc5760405162461bcd60e51b81526020600482015260086024820152670534c3a48534f3a360c41b6044820152606401610afb565b60208101511580156116125750805160ff1c6001145b1561169357611621828261310b565b7fdcd75b8c1f9c84e8b7d26df979d7ddbc4139b72f6c8e0e7123bb63d63ba1c32585858561164e346130f5565b604080516001600160a01b03958616815261ffff94909416602085015291909316908201526001600160601b03909116606082015260800160405180910390a161170c565b61169d82826131c9565b7f3bbfe02e9ee64811b7404130d1c8a263edbb6ab73af1dc502dd56d43a3ddd1a38585856116ca346130f5565b604080516001600160a01b03958616815261ffff94909416602085015291909316908201526001600160601b0390911660608201526080015b60405180910390a15b5050505050565b6000610a636117236204206e5490565b60601c90565b805460ff166117605760405162461bcd60e51b81526020600482015260036024820152620543a360ec1b6044820152606401610afb565b600061176d6204206e5490565b905080611783336001600160601b038316612f71565b61179e6bffffffffffffffffffffffff1983165b6204206e55565b6040516001600160601b03821681527f8e4dbe2f73d3458c68bca94210eabefac52a4d20c038a8e50197ac9db654291b906020016112ce565b6001600160a01b03818116600090815262042069602052604090205416806118275760405162461bcd60e51b8152602060048201526003602482015262543a4160e81b6044820152606401610afb565b919050565b6000610a6361183c6204206e5490565b90565b600061184b823361301c565b6001600160a01b03841660009081526204207560209081526040808320338452600101909152812055915061187d9050565b61188681613372565b156118e5576118ab826001600160a01b03166000908152620420756020526040812055565b80516118b6906132fa565b63ffffffff16826001600160a01b031614156118db576118d63383613439565b611904565b6118d6338361350b565b611904336118f683602001516132d8565b6001600160601b0316612f71565b7f10c1106c1b3c266f6cf55047c56a839a002c11736bbf9c4acdec566e80677e9b823361193484600001516132fa565b604080516001600160a01b03948516815293909216602084015263ffffffff169082015260600161154f565b60006001600160a01b03821661199e5760405162461bcd60e51b81526020600482015260036024820152622a1d2160e91b6044820152606401610afb565b506001600160a01b031660009081526204206a602052604090205490565b6119ca6101f46109c4615952565b63ffffffff16816001600160a01b03161080156119f157506101f46001600160a01b038216115b611a235760405162461bcd60e51b8152602060048201526003602482015262543a3160e81b6044820152606401610afb565b6001600160a01b0380821660009081526204206960205260409020541615611a735760405162461bcd60e51b81526020600482015260036024820152622a1d1960e91b6044820152606401610afb565b611a7c81613604565b611a863382613439565b6040516001600160a01b038216815233907f6717cdc2f702204391319559ab130cf2bdd1a3f69aa0c4078efc85c629dc86af9060200160405180910390a250565b6000610a6343613740565b33611adc836117d7565b6001600160a01b031614611b1b5760405162461bcd60e51b8152600401610afb9060208082526004908201526328219d1960e11b604082015260600190565b6000611b2683613781565b9050611b3281836137d6565b9050611b3e81836138aa565b6001600160a01b03841660008181526204207260209081526040918290208490558151928352820183905260ff8516908201529091507fe0b01689336e903dba5ec8bc01d79a4ec6aa4f944cd16d45d32700fb594b74ae906060016112ce565b835460ff16611bd55760405162461bcd60e51b81526020600482015260036024820152620543a360ec1b6044820152606401610afb565b6000611be082613939565b905060008160ff1611611c1e5760405162461bcd60e51b8152600401610afb90602080825260049082015263056433a360e41b604082015260600190565b60405160ff60a01b60a083901b1690600090611c5890611c4490879087906020016159c9565b604051602081830303815290604052613949565b60ff8716600090815262042070602090815260408220805460018101825590835290822001805474ffffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384166001600160a81b038716171790556204206f54919250611cc0826139fd565b905084818960ff1681518110611cd857611cd8615a67565b60200260200101818151611cec9190615a7d565b60ff16905250611cfc8282613a0a565b6204206f55505050505050505050565b33611d16826117d7565b6001600160a01b031614611d575760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610afb565b6000611d64848484613314565b6001600160a01b038087166000908152620420756020908152604080832061ffff8a1684526002018252808320938816835260019093019052908120559150611daa9050565b611db381613372565b15611df4576001600160a01b0384166000908152620420756020908152604080832061ffff87168452600201909152812055611def8284613a18565b611e05565b611e05336118f683602001516132d8565b7f95e8db1d2cc4bd26402c98c45fdb7ff875bb955206591a210b51aa82b4ba5acb848484611e3685600001516132fa565b604080516001600160a01b03958616815261ffff949094166020850152919093169082015263ffffffff9091166060820152608001611057565b600080611e7d848461301c565b915050806020015160001415611ebf5760405162461bcd60e51b815260206004820152600760248201526604e533a47533a360cc1b6044820152606401610afb565b611ecc81602001516132d8565b949350505050565b336001600160a01b03831614801590611ef557506001600160a01b03821630145b611f275760405162461bcd60e51b81526020600482015260036024820152620543a360ec1b6044820152606401610afb565b3360008181526204206c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000611fa082613b4b565b9050610a8d33826001600160601b0316612f71565b60006204206f6110ea565b600080600080611fce613d08565b50925092509250846001600160a01b031682148015611fec57508215155b15611ff957949350505050565b6001600160a01b038516600090815262042072602052604090205493508361204c5760405162461bcd60e51b8152600401610afb90602080825260049082015263504f3a3160e01b604082015260600190565b505050919050565b61205e3383613d38565b6120905760405162461bcd60e51b81526020600482015260036024820152620543a360ec1b6044820152606401610afb565b6001600160a01b039182166000908152620420716020526040902080546001600160a01b03191691909216179055565b825460ff166120f75760405162461bcd60e51b81526020600482015260036024820152620543a360ec1b6044820152606401610afb565b6101f46001600160a01b03821610801561211957506001600160a01b03811615155b61214b5760405162461bcd60e51b8152602060048201526003602482015262543a3160e81b6044820152606401610afb565b6001600160a01b038082166000908152620420696020526040902054161561219b5760405162461bcd60e51b81526020600482015260036024820152622a1d1960e91b6044820152606401610afb565b6121a481613604565b6121ae8282613439565b6040516001600160a01b0382811682528316907ff720aad51e634650c6c404c3527f059ca40ad43d391f5ac5758f49bae2ff62609060200160405180910390a2505050565b6121fc816117d7565b6001600160a01b0316306001600160a01b0316146122475760405162461bcd60e51b815260206004820152600860248201526704c4f414e3a503a360c41b6044820152606401610afb565b6001600160a01b03811660009081526204207460205260409020548015801590612281575033612276826132c4565b6001600160a01b0316145b6122b85760405162461bcd60e51b81526020600482015260086024820152672627a0a71d281d1960c11b6044820152606401610afb565b60006122c3826132d8565b905060006127106122d5606484615aa2565b6122df9190615ae7565b905034816001600160601b031611156123265760405162461bcd60e51b815260206004820152600960248201526804c4f414e3a52453a360bc1b6044820152606401610afb565b6000612330611065565b905061233b82613db5565b6000612345611065565b905060008061236c6103e8612359896132fa565b6123639190615952565b33856000612f1f565b6001600160a01b038a1660009081526204207460205260408120839055919350915085612398346130f5565b6123a29190615b0d565b905060006123b08789615b35565b90506000866001600160601b0316826001600160601b031610156123dd576123d88288615b0d565b6123e0565b60005b90506000846123ef8584615b35565b6123f99190615b35565b905061240e33826001600160601b0316612f71565b604080516001600160a01b038e1681526001600160601b03808c1660208301528416918101919091527f55ab9f648a42ab2ae7eed81f0683a7bae5d54989d8125f397a88f72bec826917906060015b60405180910390a1505050505050505050505050565b61247b611065565b6001600160601b0316816001600160601b031610156124c55760405162461bcd60e51b81526020600482015260066024820152650534c3a533a360d41b6044820152606401610afb565b6124ce82612dc2565b6000806124db843361301c565b80519193509150156124ef576124ef615b57565b6000612507600033612500346130f5565b6001612f1f565b50808455604080516001600160a01b03881681523360208201526001600160601b038716918101919091529091507f3d175b4f67d380f8c4185f649f2cfeda5da34c1156302187ac843b620f9c9cd390606001611703565b6060600061256c8361107a565b6001600160a01b03808216600090815262042071602052604081205492935091166125a2576002546001600160a01b03166125ab565b6125ab82611fb5565b6002546040516303235b5f60e31b8152306004820152602481018790526001600160a01b03838116604483015260ff600160a01b840481166064840152600160a81b840416608483015292935091169063191adaf89060a40160006040518083038186803b15801561261c57600080fd5b505afa158015612630573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ecc9190810190615b6d565b6204206d546001600160a01b03168061267057600080fd5b600061267b83613781565b9050600061268884613b4b565b6040516380011aa760e01b81526001600160a01b03868116600483015260248201859052336044830152919250908416906380011aa7906001600160601b038416906064016000604051808303818588803b1580156126e657600080fd5b505af11580156126fa573d6000803e3d6000fd5b5050604080516001600160a01b038089168252891660208201529081018690523360608201526001600160601b03851660808201527f58ca548c1fd63f641dfb02f79df36d4f29bd995f0733d2ed3595b6cfde7db4e1935060a00191506110579050565b6060610a636204206f5b546139fd565b60606127d66040518061016001604052806000815260200160008152602001606081526020016060815260200160006001600160a01b031681526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b60008060008060006127e788612da6565b945094509450945094506127fa84613ea2565b965060405180610160016040528060018152602001428152602001604051806040016040528060098152602001684e756767465420563160b81b8152508152602001604051806060016040528060228152602001615f816022913981526020016128638a6117d7565b6001600160a01b03168152602001896001600160a01b031681526020018681526020018581526020018481526020018381526020018281525095505050505050915091565b6128b1816117d7565b6001600160a01b0316306001600160a01b0316146128fc5760405162461bcd60e51b815260206004820152600860248201526704c4f414e3a503a360c41b6044820152606401610afb565b6001600160a01b0381166000908152620420746020526040812080549190556000612925611ac7565b90508063ffffffff166103e861293a846132fa565b6129449190615952565b63ffffffff161061299a5733612959836132c4565b6001600160a01b03161461299a5760405162461bcd60e51b81526020600482015260086024820152674c4f414e3a503a3160c01b6044820152606401610afb565b816129d25760405162461bcd60e51b81526020600482015260086024820152672627a0a71d281d1960c11b6044820152606401610afb565b60006129dd836132d8565b905060006127106129ef606484615aa2565b6129f99190615ae7565b90506000612a078383615b35565b905034816001600160601b03161115612a4e5760405162461bcd60e51b815260206004820152600960248201526804c4f414e3a52453a360bc1b6044820152606401610afb565b6000612a59346130f5565b90506000612a678483615b0d565b90506000612a758587615b35565b90506000612a81611065565b90506000816001600160601b0316836001600160601b03161015612aae57612aa98383615b0d565b612ab1565b60005b90506000612abf8583615b35565b9050612aca88613db5565b612add33826001600160601b0316612f71565b612ae7338d61350b565b604080516001600160a01b038e1681526001600160601b038a8116602083015284168183015290517f55ab9f648a42ab2ae7eed81f0683a7bae5d54989d8125f397a88f72bec8269179181900360600190a1604080516001600160a01b038e1681523360208201526001600160601b038916918101919091527f563fb66b43e6ac55166c353532257057a2fe86a1566c988840baecf6bca1025a9060600161245d565b33612b94826117d7565b6001600160a01b031614612bd55760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610afb565b612bdf8184613fc0565b600080612bed838685613314565b8051919350915015612c2b5760405162461bcd60e51b8152602060048201526007602482015266053433a53493a360cc1b6044820152606401610afb565b6000612c3b600085876001612f1f565b5080845590507f77cfc3b2aafc5344a53b50b3c7938afac3d04e0f564e929aa8d1f398e67f1ccc8487612c6d846132d8565b604080516001600160a01b03909416845261ffff90921660208401526001600160601b0316908201526060015b60405180910390a1505050505050565b33612cb4846117d7565b6001600160a01b031614612cf35760405162461bcd60e51b8152600401610afb9060208082526004908201526328219d1960e11b604082015260600190565b81516008148015612d05575080516008145b612d3a5760405162461bcd60e51b8152600401610afb9060208082526004908201526350433a3360e01b604082015260600190565b6000612d4584613781565b9050612d528184846140b2565b6001600160a01b0385166000908152620420726020526040902081905590507f73904d03f919661d854e7b284dd6f818c038e7cce6237422aca32cc599a08267848285856040516110579493929190615bdb565b6000606080606080612db786611fc0565b9450610f39856140ce565b612dcb816117d7565b6001600160a01b0316336001600160a01b0316148015612dfb575030612df082611094565b6001600160a01b0316145b612e2d5760405162461bcd60e51b8152602060048201526003602482015262150e8d60ea1b6044820152606401610afb565b3360009081526204206a60205260408120805460019290612e4f908490615c20565b90915550503060009081526204206a60205260408120805460019290612e76908490615c37565b90915550506001600160a01b038116600081815262042069602090815260408083208054306001600160a01b031991821681179092556204206b9093528184208054909316909255517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a46040516001600160a01b03821690309033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a450565b600080612f2c8287614111565b9150612f388286614132565b91508215612f4e57612f4b82600161414f565b91505b612f588285614186565b9092509050612f66826141e0565b915094509492505050565b600080600080600085875af1905080610b785760405162461bcd60e51b815260206004820152601360248201527f4554485f5452414e534645525f4641494c4544000000000000000000000000006044820152606401610afb565b6000612fd88260c01c90565b67ffffffffffffffff161561301457612ff18260c01c90565b67ffffffffffffffff166130058360601c90565b61300f9190615ae7565b610a47565b600092915050565b6040805160808101825260008082526020808301829052828401829052606083018290526001600160a01b038616825262042075905291822091506130618284614210565b90509250929050565b805115801561307b57506020810151155b6130b05760405162461bcd60e51b81526020600482015260066024820152651394ce934e9160d21b6044820152606401610afb565b60006130cb8260400151336130c4346130f5565b6000612f1f565b5080845590506130e26130dd346130f5565b6142b0565b610b78826040015163ffffffff16613604565b60006001600160601b0382111561109057600080fd5b602081015115801561311d5750805115155b61312957613129615b57565b805160ff1c60011461313d5761313d615b57565b600080600061316e84600001518560400151600161315b9190615952565b8660600151613169346130f5565b6143d9565b82885586519295506001600160601b039182169450169150600186016000613195836132c4565b6001600160a01b0316815260208101919091526040016000205561170c6131c46131bf8385615c37565b6130f5565b613db5565b80516131d4906132fa565b63ffffffff16816040015163ffffffff16111561321e5760405162461bcd60e51b8152602060048201526008602482015267534c3a4f42503a3360c01b6044820152606401610afb565b80606001516001600160a01b031661323982600001516132c4565b6001600160a01b031614613273578051600183016000613258836132c4565b6001600160a01b031681526020810191909152604001600020555b60008060006132aa8460000151856060015161328e346130f5565b61329b88602001516132d8565b6132a59190615b35565b614439565b8288559194509250905061170c6131c46131bf8385615c37565b6000610a476001600160a01b03831661107a565b6000610a476131bf60a084901c66ffffffffffffff166509184e72a000615c4f565b6000610a4763ffffffff60d884901c1661446c565b61446c565b6040805160808101825260008082526020808301829052828401829052606083018290526001600160a01b038716825262042075815283822061ffff87168352600201905291822091506133688284614210565b9050935093915050565b60008160200151600014156133b35760405162461bcd60e51b8152602060048201526007602482015266534c3a43433a3160c81b6044820152606401610afb565b60006133c283600001516132fa565b63ffffffff16836040015163ffffffff1611905060006133e584600001516132c4565b6001600160a01b03166133fb85602001516132c4565b6001600160a01b0316149050600061341d8560000151600160ff9190911c1490565b9050808061343057508180156134305750825b95945050505050565b61344c82826001600160a01b031661447f565b61347e5760405162461bcd60e51b8152602060048201526003602482015262543a3560e81b6044820152606401610afb565b6001600160a01b03821660009081526204206a602052604081208054600192906134a9908490615c37565b90915550506001600160a01b03818116600081815262042069602052604080822080546001600160a01b0319169487169485179055519192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b61351e82826001600160a01b031661447f565b6135505760405162461bcd60e51b81526020600482015260036024820152622a1d1960e91b6044820152606401610afb565b3060009081526204206a60205260408120805460019290613572908490615c20565b90915550506001600160a01b03821660009081526204206a602052604081208054600192906135a2908490615c37565b90915550506001600160a01b03818116600081815262042069602052604080822080546001600160a01b03191694871694851790555191929130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a45050565b6001600160a01b0381166000908152620420726020526040902054156136525760405162461bcd60e51b81526020600482015260036024820152620503a360ec1b6044820152606401610afb565b600081613660600143615c20565b6040516204206960ec1b602082015260609290921b6bffffffffffffffffffffffff1916602383015240603782015260570160408051601f1981840301815291905280516020909101209050806136df5760405162461bcd60e51b8152602060048201526003602482015262503a3160e81b6044820152606401610afb565b6000806136eb836145ef565b6001600160a01b0386166000908152620420726020526040902082905590925090507f3c2693eb3bc9fd62db9b727df67972a7372cca5a21f9b4a5c05d48363273c24784838360405161105793929190615c6e565b6000610a47610bb860ff61375d6401000420695463ffffffff1690565b61376d9063ffffffff1686615c20565b6137779190615c96565b61330f9190615c37565b6001600160a01b0381166000908152620420726020526040902054806118275760405162461bcd60e51b815260206004820152600a602482015269050524f4f463a504f3a360b41b6044820152606401610afb565b6000806137e48460006149e7565b905060006137f38560406149e7565b90506000818560ff168151811061380c5761380c615a67565b60200260200101519050828560ff168151811061382b5761382b615a67565b6020026020010151828660ff168151811061384857613848615a67565b602002602001019060ff16908160ff168152505080838660ff168151811061387257613872615a67565b602002602001019060ff16908160ff168152505061389286600085614a67565b93506138a084604084614a67565b9695505050505050565b6000806138b88460806149e7565b905060006138c78560c06149e7565b90506000818560ff16815181106138e0576138e0615a67565b602002602001019060ff16908160ff16815250506000828560ff168151811061390b5761390b615a67565b602002602001019060ff16908160ff168152505061392b85608084614a67565b92506134308360c083614a67565b600060ff82111561109057600080fd5b6000808260405160200161395d9190615caa565b60405160208183030381529060405290506000815182604051602001613984929190615cd0565b60405160208183030381529060405290508051602082016000f092506001600160a01b0383166139f65760405162461bcd60e51b815260206004820152601160248201527f4445504c4f594d454e545f4641494c45440000000000000000000000000000006044820152606401610afb565b5050919050565b6060610a478260006149e7565b6000610d6483600084614a67565b33613a22836117d7565b6001600160a01b031614613a615760405162461bcd60e51b8152600401610afb90602080825260049082015263050433a360e41b604082015260600190565b6000613a6c83613781565b61ffff83166000908152620420736020526040902054909150613aba5760405162461bcd60e51b8152600401610afb9060208082526004908201526352433a3360e01b604082015260600190565b61ffff821660009081526204207360205260408120805491613adb83615d21565b9190505550613aea8183614ae3565b6001600160a01b03841660008181526204207260209081526040918290208490558151928352820183905261ffff8516908201529091507f1e3ac88633ac111203e2a7614365c5e3df507302c9fb545dd85d8fcef753afce906060016112ce565b600033613b57836117d7565b6001600160a01b031614613b965760405162461bcd60e51b8152600401610afb9060208082526004908201526353433a3960e01b604082015260600190565b6000613ba36204206e5490565b9050613bae83614b8f565b600080613bba83614d18565b5091509150613bc883612fcc565b935060018267ffffffffffffffff161015613c0d5760405162461bcd60e51b8152602060048201526005602482015264053433a31360dc1b6044820152606401610afb565b836001600160601b0316816001600160601b03161015613c575760405162461bcd60e51b815260206004820152600560248201526453433a313160d81b6044820152606401610afb565b613cc0611797613c678684615b0d565b613c93613c75600187615d38565b6001600160c01b03881660c09190911b6001600160c01b0319161790565b6bffffffffffffffffffffffff60601b191660609190911b6bffffffffffffffffffffffff60601b161790565b604080516001600160601b03861681523360208201527e96b8566d099a5618a665405b3df20d5a7f2293fce2fc9405d36a2ee3deab3f910160405180910390a1505050919050565b60008060006060613d17614d3d565b90945063ffffffff169250613d2b846145ef565b9495939490939092509050565b600080613d44836117d7565b9050806001600160a01b0316846001600160a01b03161480613d7f5750836001600160a01b0316613d7484611094565b6001600160a01b0316145b80611ecc57506001600160a01b0380821660009081526204206c602090815260408083209388168352929052205460ff16611ecc565b6000613dc26204206e5490565b90506000612710613dd56103e885615aa2565b613ddf9190615ae7565b9050613deb8184615b0d565b9250613e62611797613dfd8385615b35565b613e4386613e0b8760601c90565b613e159190615b35565b6bffffffffffffffffffffffff60601b19871660609190911b6bffffffffffffffffffffffff60601b161790565b6bffffffffffffffffffffffff19166001600160601b03919091161790565b604080516001600160601b038086168252831660208201527fcc7b20c8500e3dfc952e445cc296459e4e7148bead08f530844981e1c1236e4e91016112ce565b6060815167ffffffffffffffff811115613ebe57613ebe61544e565b604051908082528060200260200182016040528015613ef157816020015b6060815260200190600190039081613edc5790505b50905060005b82518160ff161015613fba57828160ff1681518110613f1857613f18615a67565b602002602001015160ff1660001415613f61576040805160008152602081019091528251839060ff8416908110613f5157613f51615a67565b6020026020010181905250613fa8565b613f8781848360ff1681518110613f7a57613f7a615a67565b6020026020010151614df4565b828260ff1681518110613f9c57613f9c615a67565b60200260200101819052505b80613fb281615d59565b915050613ef7565b50919050565b33613fca836117d7565b6001600160a01b0316146140095760405162461bcd60e51b8152600401610afb9060208082526004908201526350433a3160e01b604082015260600190565b600061401483613781565b90506140208183615040565b6001600160a01b03841660009081526204207260205260409020819055905061ffff82166000908152620420736020526040812080549161406083615d79565b9091555050604080516001600160a01b03851681526020810183905261ffff8416918101919091527f399c4ec95d9ea42a0f3dda50055e3a2901f9640121b0b29865e688c08188596b906060016112ce565b60006140c084608085614a67565b9050611ecc8160c084614a67565b8060608080806140df8560006149e7565b93506140ec8560406149e7565b92506140f98560806149e7565b91506141068560c06149e7565b905091939590929450565b600063ffffffff60d81b19831663ffffffff60d81b60d884901b1617610d64565b60006001600160a01b031983166001600160a01b03831617610d64565b6000610d6483600160ff85614165576000614168565b60015b60ff16811b600190921b6000190160ff919091161b19919091161790565b6000806141996509184e72a00084615d94565b90506141d784603860a06141b36509184e72a00088615ae7565b6001600160601b0316811b600190921b6000190160ff919091161b19919091161790565b91509250929050565b60007fbfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8216600160fe1b17610a47565b604080516080810182526000602082018190529181018290526060810191909152825480825261423e611ac7565b63ffffffff1660408301526001600160a01b0383166060830152614261816132c4565b6001600160a01b0316836001600160a01b0316141561428657602082018190526142a9565b6001600160a01b0383166000908152600185016020908152604090912054908301525b5092915050565b60006142bd6204206e5490565b905060008060006142cd84614d18565b9194509250905060006127106142e56103e888615aa2565b6142ef9190615ae7565b90506142fb8187615b0d565b955061430685612fcc565b6001600160601b0316866001600160601b031610156143505760405162461bcd60e51b81526020600482015260066024820152650534c3a4d3a360d41b6044820152606401610afb565b6143996117976143608385615b35565b613e4361436d8a88615b35565b613c9361437b8a6001615dba565b6001600160c01b038c1660c09190911b6001600160c01b0319161790565b604080516001600160601b038089168252831660208201527fcc7b20c8500e3dfc952e445cc296459e4e7148bead08f530844981e1c1236e4e9101612c9a565b6000806000806143e8886132d8565b9050846001600160601b0316614406826001600160601b03166150cd565b1061441057600080fd5b61441d8787876000612f1f565b909450915061442c8186615b0d565b9250509450945094915050565b60008060006144528661444b886132fa565b87876143d9565b91986001600160601b039182169850911695509350505050565b600063ffffffff82111561109057600080fd5b60006001600160a01b0383163b156145e757604051630a85bd0160e11b81523360048201523060248201526044810183905260806064820152600060848201526001600160a01b0384169063150b7a029060a401602060405180830381600087803b1580156144ed57600080fd5b505af192505050801561451d575060408051601f3d908101601f1916820190925261451a91810190615ddd565b60015b6145cd573d80801561454b576040519150601f19603f3d011682016040523d82523d6000602084013e614550565b606091505b5080516145c55760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610afb565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610a47565b506001610a47565b60006060826146265760405162461bcd60e51b8152602060048201526003602482015262281d1b60e91b6044820152606401610afb565b600061463061275e565b6040805160088082526101208201909252919250602082016101008036833701905050915060006146628560006149e7565b90508160008151811061467757614677615a67565b60200260200101518160008151811061469257614692615a67565b60200260200101516146a49190615dfa565b6146af906001615a7d565b836000815181106146c2576146c2615a67565b602002602001019060ff16908160ff1681525050816001815181106146e9576146e9615a67565b60200260200101518160018151811061470457614704615a67565b60200260200101516147169190615dfa565b614721906001615a7d565b8360018151811061473457614734615a67565b602002602001019060ff16908160ff16815250508160028151811061475b5761475b615a67565b60200260200101518160028151811061477657614776615a67565b60200260200101516147889190615dfa565b614793906001615a7d565b836002815181106147a6576147a6615a67565b602002602001019060ff16908160ff16815250506060816003815181106147cf576147cf615a67565b602002602001015160ff16101561485757816003815181106147f3576147f3615a67565b60200260200101518160048151811061480e5761480e615a67565b60200260200101516148209190615dfa565b61482b906001615a7d565b8360038151811061483e5761483e615a67565b602002602001019060ff16908160ff16815250506149d2565b60c08160038151811061486c5761486c615a67565b602002602001015160ff1610156148db578160048151811061489057614890615a67565b6020026020010151816004815181106148ab576148ab615a67565b60200260200101516148bd9190615dfa565b6148c8906001615a7d565b8360048151811061483e5761483e615a67565b60fa816003815181106148f0576148f0615a67565b602002602001015160ff16101561495f578160058151811061491457614914615a67565b60200260200101518160048151811061492f5761492f615a67565b60200260200101516149419190615dfa565b61494c906001615a7d565b8360058151811061483e5761483e615a67565b8160068151811061497257614972615a67565b60200260200101518160048151811061498d5761498d615a67565b602002602001015161499f9190615dfa565b6149aa906001615a7d565b836006815181106149bd576149bd615a67565b602002602001019060ff16908160ff16815250505b6149de84600085614a67565b93505050915091565b604080516008808252610120820190925292821c67ffffffffffffffff1692606091602082016101008036833701905050905060005b60088110156142a9578360ff16828281518110614a3c57614a3c615a67565b60ff9092166020928302919091019091015260089390931c9280614a5f81615d79565b915050614a1d565b600060085b8015614ac857614a7d600182615c20565b614a88906008615c4f565b83614a94600184615c20565b81518110614aa457614aa4615a67565b602002602001015160ff16901b821791508080614ac090615d21565b915050614a6c565b5067ffffffffffffffff60ff84161b19841681841b17611ecc565b600080614af18460406149e7565b805190915060ff600885901c81169190851690839083908110614b1657614b16615a67565b602002602001015160ff16600014614b595760405162461bcd60e51b8152600401610afb90602080825260049082015263050503a360e41b604082015260600190565b80838360ff1681518110614b6f57614b6f615a67565b602002602001019060ff16908160ff16815250506138a086604085614a67565b30614b9982611094565b6001600160a01b031614614bd55760405162461bcd60e51b81526020600482015260036024820152622a1d1b60e91b6044820152606401610afb565b33614bdf826117d7565b6001600160a01b031614614c1b5760405162461bcd60e51b8152602060048201526003602482015262543a3760e81b6044820152606401610afb565b6001600160a01b0381166000818152620420696020908152604080832080546001600160a01b03199081169091556204206b83528184208054821690556204207583528184208490556204207483528184208490556204207283528184208490556204207190925280832080549092169091555133907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a43360009081526204206a60205260408120805460019290614cd8908490615c20565b90915550506040516001600160a01b0382169060009033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a450565b6000806000614d278460c01c90565b9250614d338460601c90565b9294929392915050565b600080614d48611ac7565b90506000614d55826150e8565b90506000614d64600183615c20565b40905080614d9e5760405162461bcd60e51b8152602060048201526007602482015266115410ce94d09360ca1b6044820152606401610afb565b6040805160208082019390935260e085901b6001600160e01b031916818301523060601b6bffffffffffffffffffffffff1916604482015281516038818303018152605890910190915280519101209391925050565b606060ff8216614e2f5760405162461bcd60e51b8152600401610afb906020808252600490820152632b219d1960e11b604082015260600190565b81614e3981615e1c565b9250506000614e4b6127686204206f90565b8460ff1681518110614e5f57614e5f615a67565b602002602001015190508060ff168360ff1610614ea75760405162461bcd60e51b8152600401610afb9060208082526004908201526356433a3160e01b604082015260600190565b60ff84166000908152620420706020908152604080832080548251818502810185019093528083529192909190830182828015614f0d57602002820191906000526020600020905b81546001600160a81b03168152600190910190602001808311614eef575b50505050509050600080600080600090505b8451811015614fbb57600060a0868381518110614f3e57614f3e615a67565b60200260200101516001600160a81b0316901c90508860ff168184614f639190615a7d565b60ff161115614f9c57858281518110614f7e57614f7e615a67565b602002602001015194508289614f949190615e39565b935050614fbb565b614fa68184615a7d565b92505080614fb381615d79565b915050614f1f565b506001600160a01b038316614ffb5760405162461bcd60e51b8152600401610afb906020808252600490820152632b219d1960e11b604082015260600190565b6150048361512b565b8060200190518101906150179190615e5c565b8260ff168151811061502b5761502b615a67565b60200260200101519550505050505092915050565b60008061504e8460406149e7565b805190915060ff600885901c81169190851690819084908490811061507557615075615a67565b602002602001015160ff16146150b65760405162461bcd60e51b8152600401610afb9060208082526004908201526350503a3160e01b604082015260600190565b6000838360ff1681518110614b6f57614b6f615a67565b60006127106150de83612774615c4f565b610a479190615c96565b60006150fd6401000420695463ffffffff1690565b63ffffffff1660ff615111610bb885615f63565b63ffffffff166151219190615c4f565b610a479190615c37565b6060610a47826001615147816001600160a01b0384163b615c20565b60408051603f83850101601f19168101909152818152818360208301863c9392505050565b6001600160e01b031981168114610a5657600080fd5b60006020828403121561519457600080fd5b8135610d648161516c565b6001600160a01b0381168114610a5657600080fd5b6000602082840312156151c657600080fd5b8135610d648161519f565b60005b838110156151ec5781810151838201526020016151d4565b838111156151fb576000848401525b50505050565b600081518084526152198160208601602086016151d1565b601f01601f19169290920160200192915050565b602081526000610d646020830184615201565b60006020828403121561525257600080fd5b5035919050565b6000806040838503121561526c57600080fd5b82356152778161519f565b946020939093013593505050565b60008060006060848603121561529a57600080fd5b83356152a58161519f565b925060208401356152b58161519f565b929592945050506040919091013590565b803561ffff8116811461182757600080fd5b6000806000606084860312156152ed57600080fd5b83356152f88161519f565b9250615306602085016152c6565b915060408401356153168161519f565b809150509250925092565b803560ff8116811461182757600080fd5b6000806040838503121561534557600080fd5b82356153508161519f565b915061306160208401615321565b60008060006040848603121561537357600080fd5b833567ffffffffffffffff8082111561538b57600080fd5b818601915086601f83011261539f57600080fd5b8135818111156153ae57600080fd5b8760208260051b85010111156153c357600080fd5b6020928301955093506153d99186019050615321565b90509250925092565b600080604083850312156153f557600080fd5b82356154008161519f565b915060208301356154108161519f565b809150509250929050565b6000806040838503121561542e57600080fd5b82356154398161519f565b91506020830135801515811461541057600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561548d5761548d61544e565b604052919050565b600067ffffffffffffffff8211156154af576154af61544e565b50601f01601f191660200190565b600080600080608085870312156154d357600080fd5b84356154de8161519f565b935060208501356154ee8161519f565b925060408501359150606085013567ffffffffffffffff81111561551157600080fd5b8501601f8101871361552257600080fd5b803561553561553082615495565b615464565b81815288602083850101111561554a57600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b6000806040838503121561557f57600080fd5b8235915060208301356154108161519f565b80356001600160601b038116811461182757600080fd5b600080604083850312156155bb57600080fd5b82356155c68161519f565b915061306160208401615591565b600081518084526020808501945080840160005b8381101561560757815160ff16875295820195908201906001016155e8565b509495945050505050565b602081526000610d6460208301846155d4565b60006101608251845260208301516020850152604083015181604086015261564f82860182615201565b915050606083015184820360608601526156698282615201565b915050608083015161568660808601826001600160a01b03169052565b5060a083015160a085015260c083015160c085015260e083015184820360e08601526156b282826155d4565b91505061010080840151858303828701526156cd83826155d4565b9250505061012080840151858303828701526156e983826155d4565b9250505061014080840151858303828701526138a083826155d4565b6000604082016040835280855180835260608501915060608160051b860101925060208088016000805b8481101561578357888703605f19018652825180518089529085019085890190845b8181101561576d57835183529287019291870191600101615751565b509098505050948301949183019160010161572f565b505050858403818701525050506134308185615625565b6000806000606084860312156157af57600080fd5b83356157ba8161519f565b92506157c8602085016152c6565b91506153d960408501615591565b600067ffffffffffffffff8211156157f0576157f061544e565b5060051b60200190565b600082601f83011261580b57600080fd5b8135602061581b615530836157d6565b82815260059290921b8401810191818101908684111561583a57600080fd5b8286015b8481101561585c5761584f81615321565b835291830191830161583e565b509695505050505050565b60008060006060848603121561587c57600080fd5b83356158878161519f565b9250602084013567ffffffffffffffff808211156158a457600080fd5b6158b0878388016157fa565b935060408601359150808211156158c657600080fd5b506158d3868287016157fa565b9150509250925092565b85815260a0602082015260006158f660a08301876155d4565b828103604084015261590881876155d4565b9050828103606084015261591c81866155d4565b9050828103608084015261593081856155d4565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff8083168185168083038211156159715761597161593c565b01949350505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156159ac57600080fd5b8260051b8083602087013760009401602001938452509192915050565b6020808252818101839052600090600560408085019086831b86010187855b88811015615a5957878303603f190184528135368b9003601e19018112615a0e57600080fd5b8a01803567ffffffffffffffff811115615a2757600080fd5b80871b36038c1315615a3857600080fd5b615a4585828a850161597a565b9588019594505050908501906001016159e8565b509098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff84168060ff03821115615a9a57615a9a61593c565b019392505050565b60006001600160601b0380831681851681830481118215151615615ac857615ac861593c565b02949350505050565b634e487b7160e01b600052601260045260246000fd5b60006001600160601b0380841680615b0157615b01615ad1565b92169190910492915050565b60006001600160601b0383811690831681811015615b2d57615b2d61593c565b039392505050565b60006001600160601b038083168185168083038211156159715761597161593c565b634e487b7160e01b600052600160045260246000fd5b600060208284031215615b7f57600080fd5b815167ffffffffffffffff811115615b9657600080fd5b8201601f81018413615ba757600080fd5b8051615bb561553082615495565b818152856020838501011115615bca57600080fd5b6134308260208301602086016151d1565b6001600160a01b0385168152836020820152608060408201526000615c0360808301856155d4565b8281036060840152615c1581856155d4565b979650505050505050565b600082821015615c3257615c3261593c565b500390565b60008219821115615c4a57615c4a61593c565b500190565b6000816000190483118215151615615c6957615c6961593c565b500290565b6001600160a01b038416815282602082015260606040820152600061343060608301846155d4565b600082615ca557615ca5615ad1565b500490565b6000815260008251615cc38160018501602087016151d1565b9190910160010192915050565b606360f81b815260e083901b6001600160e01b03191660018201526880600e6000396000f360b81b60058201528151600090615d1381600e8501602087016151d1565b91909101600e019392505050565b600081615d3057615d3061593c565b506000190190565b600067ffffffffffffffff83811690831681811015615b2d57615b2d61593c565b600060ff821660ff811415615d7057615d7061593c565b60010192915050565b6000600019821415615d8d57615d8d61593c565b5060010190565b60006001600160601b0380841680615dae57615dae615ad1565b92169190910692915050565b600067ffffffffffffffff8083168185168083038211156159715761597161593c565b600060208284031215615def57600080fd5b8151610d648161516c565b600060ff831680615e0d57615e0d615ad1565b8060ff84160691505092915050565b600060ff821680615e2f57615e2f61593c565b6000190192915050565b600060ff821660ff841680821015615e5357615e5361593c565b90039392505050565b60006020808385031215615e6f57600080fd5b825167ffffffffffffffff80821115615e8757600080fd5b818501915085601f830112615e9b57600080fd5b8151615ea9615530826157d6565b818152600591821b8401850191858201919089841115615ec857600080fd5b8686015b84811015615f5457805186811115615ee45760008081fd5b8701603f81018c13615ef65760008081fd5b888101516040615f08615530836157d6565b82815291851b83018101918b8101908f841115615f255760008081fd5b938201935b83851015615f435784518252938c0193908c0190615f2a565b885250505093880193508701615ecc565b50909998505050505050505050565b600063ffffffff83811690831681811015615b2d57615b2d61593c56fe4e7567672046756e6769626c6520546f6b656e205631206279206e7567672e78797aa2646970667358221220843bbff8fdb351bb41555b408cb573ba868a4b34c0ce50844466d2060bb2c76764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in ``owner``'s account."
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11217,
        "contract": "src/NuggFT.sol:NuggFT",
        "label": "_trusted",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11220,
        "contract": "src/NuggFT.sol:NuggFT",
        "label": "_trust",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Storage)11358_storage"
      },
      {
        "astId": 3897,
        "contract": "src/NuggFT.sol:NuggFT",
        "label": "dotnuggV1Processor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3900,
        "contract": "src/NuggFT.sol:NuggFT",
        "label": "defaultWidth",
        "offset": 20,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 3903,
        "contract": "src/NuggFT.sol:NuggFT",
        "label": "defaultZoom",
        "offset": 21,
        "slot": "2",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_struct(Storage)11358_storage": {
        "encoding": "inplace",
        "label": "struct Trust.Storage",
        "members": [
          {
            "astId": 11357,
            "contract": "src/NuggFT.sol:NuggFT",
            "label": "_isTrusted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}