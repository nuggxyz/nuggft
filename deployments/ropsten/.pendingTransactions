{
  "0xc2088ba4c5979838f6100b22e3093d23b25dafae8f907d7b486321bcbd034ea8": {
    "name": "NuggFT",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "NuggFT",
      "sourceName": "contracts/src/NuggFT.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_xnugg",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "ApprovalForAll",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "tokenid",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "endingEpoch",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Claim",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "sellingTokenId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "buyingTokenId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "endingEpoch",
              "type": "uint256"
            }
          ],
          "name": "ClaimItem",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "tokenid",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "eth",
              "type": "uint256"
            }
          ],
          "name": "Commit",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "sellingTokenId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "buyingTokenId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "eth",
              "type": "uint256"
            }
          ],
          "name": "CommitItem",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [],
          "name": "Genesis",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "epoch",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "eth",
              "type": "uint256"
            }
          ],
          "name": "Mint",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "tokenid",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "eth",
              "type": "uint256"
            }
          ],
          "name": "Offer",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "sellingTokenId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "buyingTokenId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "eth",
              "type": "uint256"
            }
          ],
          "name": "OfferItem",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            }
          ],
          "name": "PopItem",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256[]",
              "name": "items",
              "type": "uint256[]"
            }
          ],
          "name": "PreMint",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            }
          ],
          "name": "PushItem",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "tokenid",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "eth",
              "type": "uint256"
            }
          ],
          "name": "Swap",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "sellingTokenId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "eth",
              "type": "uint256"
            }
          ],
          "name": "SwapItem",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "approve",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endingEpoch",
              "type": "uint256"
            }
          ],
          "name": "claim",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "sellingTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "itemid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyingTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endingEpoch",
              "type": "uint256"
            }
          ],
          "name": "claimItem",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenid",
              "type": "uint256"
            }
          ],
          "name": "commit",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "sellingTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "itemid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyingTokenId",
              "type": "uint256"
            }
          ],
          "name": "commitItem",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenid",
              "type": "uint256"
            }
          ],
          "name": "delegate",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "sellingTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "itemid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyingTokenId",
              "type": "uint256"
            }
          ],
          "name": "delegateItem",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "epoch",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "res",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "genesis",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenid",
              "type": "uint256"
            }
          ],
          "name": "getActiveSwap",
          "outputs": [
            {
              "internalType": "address",
              "name": "leader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_epoch",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isOwner",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "getOfferByAccount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "infoOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "size",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "items",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenid",
              "type": "uint256"
            }
          ],
          "name": "mint",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenid",
              "type": "uint256"
            }
          ],
          "name": "offer",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "sellingTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "itemid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyingTokenId",
              "type": "uint256"
            }
          ],
          "name": "offerItem",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "safeTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "name": "safeTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "setApprovalForAll",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "floor",
              "type": "uint256"
            }
          ],
          "name": "swap",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "sellingTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "itemid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "floor",
              "type": "uint256"
            }
          ],
          "name": "swapItem",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "res",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "transferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "xnugg",
          "outputs": [
            {
              "internalType": "address payable",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "bytecode": "0x60c06040523480156200001157600080fd5b5060405162003fa638038062003fa683398101604081905262000034916200019c565b6040805180820182526006815265139551d1d19560d21b60208083019182528351808501909452601384527f4e7567672046756e6769626c6520546f6b656e000000000000000000000000009084015281519192916200009791600091620000f6565b508051620000ad906001906020840190620000f6565b5050506001600160601b0319606082901b166080524360a0526040517f6bf6eaff5e9af8fbccb949f4c38cc016936f8775363ccf4224db160365785d5290600090a15062000209565b8280546200010490620001cc565b90600052602060002090601f01602090048101928262000128576000855562000173565b82601f106200014357805160ff191683800117855562000173565b8280016001018555821562000173579182015b828111156200017357825182559160200191906001019062000156565b506200018192915062000185565b5090565b5b8082111562000181576000815560010162000186565b600060208284031215620001ae578081fd5b81516001600160a01b0381168114620001c5578182fd5b9392505050565b600181811c90821680620001e157607f821691505b602082108114156200020357634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c60a051613cfd620002a9600039600081816104db0152818161085801528181610a2501528181610aa001528181610b6a01528181610bc401528181610c2201528181610c7e01528181610e1d01528181610e630152610f2c0152600081816104240152818161087c01528181610a7f01528181610be801528181610c4401528181610ca001528181610e860152610f0b0152613cfd6000f3fe6080604052600436106101cd5760003560e01c80638f4c1d4f116100f7578063a7f0b3de11610095578063d636feae11610064578063d636feae1461055e578063d96073cf14610571578063e985e9c514610591578063f4f98ad5146105b157600080fd5b8063a7f0b3de146104c9578063b88d4fde146104fd578063c34902631461051d578063c87b56dd1461053d57600080fd5b806396cfd827116100d157806396cfd827146104705780639fa6dd3514610483578063a0712d6814610496578063a22cb465146104a957600080fd5b80638f4c1d4f14610412578063900cf0cf1461044657806395d89b411461045b57600080fd5b806342842e0e1161016f57806370a082311161013e57806370a0823114610382578063761610fc146103b057806378b38f36146103c3578063884c66ae146103f257600080fd5b806342842e0e1461030257806349b44f98146103225780634dd1496b146103425780636352211e1461036257600080fd5b8063095ea7b3116101ab578063095ea7b3146102615780630cf27c2a146102835780631cd4ad3a1461029657806323b872dd146102e257600080fd5b806301ffc9a7146101d257806306fdde0314610207578063081812fc14610229575b600080fd5b3480156101de57600080fd5b506101f26101ed366004613930565b6105c4565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b5061021c610661565b6040516101fe9190613ae8565b34801561023557600080fd5b50610249610244366004613968565b6106f5565b6040516001600160a01b0390911681526020016101fe565b34801561026d57600080fd5b5061028161027c366004613907565b610701565b005b6102816102913660046139d5565b610839565b3480156102a257600080fd5b506102b66102b1366004613968565b6108a0565b604080516001600160a01b039095168552602085019390935291830152151560608201526080016101fe565b3480156102ee57600080fd5b506102816102fd3660046137bd565b610946565b34801561030e57600080fd5b5061028161031d3660046137bd565b6109c1565b34801561032e57600080fd5b5061028161033d3660046139d5565b6109dc565b34801561034e57600080fd5b5061028161035d366004613a00565b610a03565b34801561036e57600080fd5b5061024961037d366004613968565b610a52565b34801561038e57600080fd5b506103a261039d36600461377a565b610a5e565b6040519081526020016101fe565b6102816103be366004613968565b610a6a565b3480156103cf57600080fd5b506103e36103de366004613968565b610ac7565b6040516101fe93929190613b14565b3480156103fe57600080fd5b506103a261040d3660046139a1565b610ae4565b34801561041e57600080fd5b506102497f000000000000000000000000000000000000000000000000000000000000000081565b34801561045257600080fd5b506103a2610b63565b34801561046757600080fd5b5061021c610b93565b61028161047e3660046139d5565b610ba5565b610281610491366004613968565b610c0c565b6102816104a4366004613968565b610c68565b3480156104b557600080fd5b506102816104c43660046138cd565b610cc8565b3480156104d557600080fd5b506103a27f000000000000000000000000000000000000000000000000000000000000000081565b34801561050957600080fd5b506102816105183660046137f8565b610d8d565b34801561052957600080fd5b50610281610538366004613980565b610e09565b34801561054957600080fd5b5061021c610558366004613968565b50606090565b61028161056c3660046139d5565b610e43565b34801561057d57600080fd5b5061028161058c366004613980565b610eaa565b34801561059d57600080fd5b506101f26105ac366004613794565b610ec3565b6102816105bf366004613968565b610ef6565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061062757506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061065b57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b606060008001805461067290613bd7565b80601f016020809104026020016040519081016040528092919081815260200182805461069e90613bd7565b80156106eb5780601f106106c0576101008083540402835291602001916106eb565b820191906000526020600020905b8154815290600101906020018083116106ce57829003601f168201915b5050505050905090565b600061065b8183610f50565b600061070d8183610feb565b9050806001600160a01b0316836001600160a01b0316141561079c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806107b857506107b88133610ec3565b61082a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610793565b6108348383611078565b505050565b60008381526009602090815260408083208584529091528120610834917f00000000000000000000000000000000000000000000000000000000000000008686867f00000000000000000000000000000000000000000000000000000000000000006110e7565b600081815260086020526040812081908190819081906108c090826111df565b509050806108fa5760405162461bcd60e51b815260206004820152600760248201526604e533a47533a360cc1b6044820152606401610793565b80945060a881901c65ffffffffffff1660a082901c60ff166004021b64e8d4a510000293506109308160d81c640fffffffff1690565b925061093c8160ff1c90565b9150509193509193565b61095033826111f7565b6109b65760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b6108348383836112c2565b61083483838360405180602001604052806000815250610d8d565b60008381526009602090815260408083208584529091528120610834916006858588611491565b60008481526009602090815260408083208684529091528120610a4c916006877f0000000000000000000000000000000000000000000000000000000000000000888789611623565b50505050565b600061065b8183610feb565b600061065b81836117ae565b6000818152600860205260409020610ac490827f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061184c565b50565b6000806060610ad76006856118a1565b9250925092509193909250565b60008381526008602052604081208190610aff9084866118d4565b91505080610b395760405162461bcd60e51b815260206004820152600760248201526604e533a47533a360cc1b6044820152606401610793565b60a881901c65ffffffffffff1660a082901c60ff166004021b64e8d4a51000025b95945050505050565b6000610b8e7f00000000000000000000000000000000000000000000000000000000000000006118ee565b905090565b60606000600101805461067290613bd7565b60008381526009602090815260408083208584529091528120610834917f00000000000000000000000000000000000000000000000000000000000000008686867f00000000000000000000000000000000000000000000000000000000000000006118fa565b6000818152600860205260409020610ac49060067f0000000000000000000000000000000000000000000000000000000000000000847f00000000000000000000000000000000000000000000000000000000000000006119a8565b6000818152600860205260409020610cc49060067f0000000000000000000000000000000000000000000000000000000000000000847f0000000000000000000000000000000000000000000000000000000000000000611a2a565b5050565b6001600160a01b038216331415610d215760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610793565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610d9733836111f7565b610dfd5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b610a4c84848484611b9a565b6000828152600860205260408120610cc4917f00000000000000000000000000000000000000000000000000000000000000008585611c23565b6000838152600960209081526040808320858452909152812061083491857f000000000000000000000000000000000000000000000000000000000000000086867f0000000000000000000000000000000000000000000000000000000000000000611d1b565b6000828152600860205260408120610cc4918484611e1c565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081205460ff165b9392505050565b6000818152600860205260409020610ac490827f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611ed6565b60008181526002830160205260408120546001600160a01b0316610fcb5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610793565b50600090815260049190910160205260409020546001600160a01b031690565b60008181526002830160205260408120546001600160a01b031680610eef5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610793565b600081815260046020526040812080546001600160a01b0319166001600160a01b03851690811790915582916110ae9083610feb565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61010083106111225760405162461bcd60e51b815260206004820152600760248201526604d4c3a43493a360cc1b6044820152606401610793565b33611136876001600160a01b038516610feb565b6001600160a01b0316146111775760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b61118387838388611f21565b60408051858152602081018590526001600160a01b038416918101919091523460608201527ff562263f29883bf3519f3733bb30b47c831bfe9809884430857d8cf29571d554906080015b60405180910390a150505050505050565b6000806111ec848461217d565b915091509250929050565b6000611202826121fc565b6112635760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610793565b600061126f8184610feb565b9050806001600160a01b0316846001600160a01b031614806112aa5750836001600160a01b031661129f846106f5565b6001600160a01b0316145b806112ba57506112ba8185610ec3565b949350505050565b6001600160a01b0383166112d7600083610feb565b6001600160a01b0316146113535760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610793565b6001600160a01b0382166113ce5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610793565b6113d9600082611078565b6001600160a01b0383166000908152600360205260408120805460019290611402908490613ba3565b90915550506001600160a01b0382166000908152600360205260408120805460019290611430908490613b33565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b336114a5866001600160a01b038416610feb565b6001600160a01b0316146114e65760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b61010083106115375760405162461bcd60e51b815260206004820152600760248201527f4d4c3a53493a30000000000000000000000000000000000000000000000000006044820152606401610793565b6000611543878361217d565b509050801561157e5760405162461bcd60e51b815260206004820152600760248201526604e533a53533a360cc1b6044820152606401610793565b6115c2836115bc60016001600160a01b0319851686175b90507f80000000000000000000000000000000000000000000000000000000000000001790565b9061221b565b5080885590506115dc856001600160a01b0384168661229c565b604080516001600160a01b0384168152602081018690529081018490527fc8032e5c721106f3e30ad0f1a45e919c8d034cf788842ff336b0150f0fbcc60e906060016111ce565b33611637886001600160a01b038416610feb565b6001600160a01b0316146116785760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b61010083106116b35760405162461bcd60e51b815260206004820152600760248201526604d4c3a43493a360cc1b6044820152606401610793565b60006116be866118ee565b90506000806116ce8b8587612359565b600087815260018e01602090815260408083206001600160a01b038a1684529091528120559092509050611704848383866123d9565b156117265760008b55611721896001600160a01b03861688612477565b611751565b61175160a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a51000025b3390612593565b60408051888152602081018890529081018690526001600160a01b03851660608201527f38195a074a64067740045e77ca5873f34a0df243a8ac9ecc39452c47e7061e479060800160405180910390a15050505050505050505050565b60006001600160a01b03821661182c5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610793565b506001600160a01b03166000908152600391909101602052604090205490565b611858843384846126ac565b6040805184815233602082015234918101919091527f2d57124cfa4e385afd5cc9d6f24874bdd21303ac9131d7cb674be2a5855c7002906060015b60405180910390a150505050565b60008181526020839052604081205481906060906118be816129b0565b60ff600883901c81169892169650945092505050565b6000806118e2858585612359565b91509150935093915050565b600061065b8243612a6a565b3361190e876001600160a01b038516610feb565b6001600160a01b03161461194f5760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b60008061195c898561217d565b9150915080600014801561197557506119758260ff1c90565b1561198e57611989898989898989896110e7565b61199d565b61199d89898989898989611d1b565b505050505050505050565b60006119b3846118ee565b90506000806119c288336111df565b9150915084831480156119d3575081155b156119eb576119e58888888888611a2a565b50611a20565b801580156119fe57506119fe8260ff1c90565b15611a1457611a0f88868689611ed6565b611a20565b611a208886868961184c565b5050505050505050565b600080611a36856118ee565b9050600080611a4589336111df565b91509150858314611a985760405162461bcd60e51b815260206004820152600660248201527f4e533a4d3a3000000000000000000000000000000000000000000000000000006044820152606401610793565b8115611ae65760405162461bcd60e51b815260206004820152600660248201527f4e533a4d3a4400000000000000000000000000000000000000000000000000006044820152606401610793565b611b07346115bc33611af9600088612a82565b6001600160a01b0319161790565b50808a5593503415611b2657611b266001600160a01b03861634612593565b611b31888789612ad4565b6040805184815233602082015264e8d4a5100065ffffffffffff60a888901c16600460ff60a08a901c16021b028183015290517f4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f69181900360600190a150505095945050505050565b611ba58484846112c2565b611bb184848484612c6d565b610a4c5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610793565b6000611c2e846118ee565b9050600080611c3e8833866118d4565b600086815260018b01602090815260408083203380855292528220919091559193509150611c6e908383866123d9565b15611caa5760008855611c888260d81c640fffffffff1690565b841415611c9f57611c9a873387612dcd565b611cd2565b611c9a873387612eda565b611cd260a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a510000261174a565b6040805186815260208101869052338183015290517fd79254e5daba749baa8ba954e77bbbb18efef113a8070d00df9a188d819324269181900360600190a15050505050505050565b6101008310611d6c5760405162461bcd60e51b815260206004820152600760248201527f4d4c3a4f493a30000000000000000000000000000000000000000000000000006044820152606401610793565b33611d80876001600160a01b038516610feb565b6001600160a01b031614611dc15760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b611dcd878383886126ac565b60408051858152602081018590526001600160a01b038416918101919091523460608201527fe237f23f900f35d5f1a406ba97ccfdffe082ffcda87098765811817c2c14ac87906080016111ce565b6000611e2885336111df565b5090508015611e635760405162461bcd60e51b815260206004820152600760248201526604e533a53533a360cc1b6044820152606401610793565b611e7e826115bc60016001600160a01b031985163317611595565b508086559050611e8f84338561300e565b604080518481523360208201529081018390527f48b43f133ac721cb5f6e2a3d8ab7caee987bccfb4197537cf43c9f907f057f3a9060600160405180910390a15050505050565b611ee284338484611f21565b6040805184815233602082015234918101919091527f094925310677b39991f64178494fad708beb62f73f36bb0baa493476ecf5870990606001611893565b6000611f2c826118ee565b9050600080611f3b878761217d565b9092509050611f4982613180565b60003411611f995760405162461bcd60e51b815260206004820152600860248201527f534c3a434f4d3a320000000000000000000000000000000000000000000000006044820152606401610793565b8015611fd25760405162461bcd60e51b81526020600482015260086024820152670534c3a48534f3a360c41b6044820152606401610793565b611fdc8260ff1c90565b6120285760405162461bcd60e51b815260206004820152600860248201527f534c3a48534f3a310000000000000000000000000000000000000000000000006044820152606401610793565b6000612035846001613b33565b905060008061204c346115bc8b611af98588612a82565b909250905060a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a51000026120a1606461271060a889901c65ffffffffffff1660a08a901c60ff166004021b64e8d4a51000025b91906131f3565b106120d95760405162461bcd60e51b815260206004820152600860248201526714d30e93d0940e8d60c21b6044820152606401610793565b600083815260018b01602052604081208691826001600160a01b03168152602081019190915260400160002055818a556121718160a887901c65ffffffffffff1660a088901c60ff166004021b64e8d4a510000260a885901c65ffffffffffff1660a086901c60ff166004021b64e8d4a51000026121579190613ba3565b6121619190613b33565b6001600160a01b038a1690612593565b50505050505050505050565b8154600081158061219f5750816001600160a01b0316836001600160a01b0316145b6121f1578360010160006121ba8460d81c640fffffffff1690565b81526020019081526020016000206000846001600160a01b03166001600160a01b03168152602001908152602001600020546121f3565b815b90509250929050565b6000818152600260205260408120546001600160a01b0316151561065b565b6000808264e8d4a51000840493505b65ffffffffffff841115612249576001830192508360041c935061222a565b828460081b1793508360081c836004021b64e8d4a5100081028203925050507fffffffffff00000000000000ffffffffffffffffffffffffffffffffffffffff841693508260a01b841791509250929050565b600082815260208490526040902054806122e55760405162461bcd60e51b815260206004820152600a6024820152690313135353a5354463a360b41b6044820152606401610793565b6122ef81836132b1565b505060008481526020868152604080832084905585835260018801909152812080549293509061231e83613c12565b909155505060408051848152602081018490527f452c5f777db10bd58f64d8bc58668d14487d008ff527ca431853ea22e195f1769101611893565b825460008261236f8360d81c640fffffffff1690565b1461237b57600061237d565b815b9150811580159061239f5750816001600160a01b0316846001600160a01b0316145b6123cd57600083815260018601602090815260408083206001600160a01b03881684529091529020546123cf565b815b9050935093915050565b6000826124285760405162461bcd60e51b815260206004820152600760248201527f534c3a43433a31000000000000000000000000000000000000000000000000006044820152606401610793565b600061243b8560d81c640fffffffff1690565b831190506124498560ff1c90565b8061246d5750846001600160a01b0316866001600160a01b031614801561246d5750805b9695505050505050565b600082815260208490526040902054806124c05760405162461bcd60e51b815260206004820152600a6024820152690313135353a5354463a360b41b6044820152606401610793565b600082815260018501602052604090205461251d5760405162461bcd60e51b815260206004820152600b60248201527f313135353a534254463a310000000000000000000000000000000000000000006044820152606401610793565b6000828152600185016020526040812080549161253983613c12565b9091555061254990508183613408565b506000848152602086815260409182902083905581518681529081018590529192507f452c5f777db10bd58f64d8bc58668d14487d008ff527ca431853ea22e195f1769101611893565b804710156125e35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610793565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612630576040519150601f19603f3d011682016040523d82523d6000602084013e612635565b606091505b50509050806108345760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610793565b60006126b7826118ee565b90506000806126c6878761217d565b915091506000341161271a5760405162461bcd60e51b815260206004820152600860248201527f534c3a4f42503a320000000000000000000000000000000000000000000000006044820152606401610793565b816127675760405162461bcd60e51b815260206004820152600660248201527f4e533a303a3000000000000000000000000000000000000000000000000000006044820152606401610793565b6127718160ff1c90565b156127a95760405162461bcd60e51b81526020600482015260086024820152670534c3a48534f3a360c41b6044820152606401610793565b6127ba8260d81c640fffffffff1690565b8311156128095760405162461bcd60e51b815260206004820152600860248201527f534c3a4f42503a330000000000000000000000000000000000000000000000006044820152606401610793565b6001600160a01b038616826001600160a01b03161461286c578187600101600061283a8560d81c640fffffffff1690565b815260200190815260200160002060006128518590565b6001600160a01b031681526020810191909152604001600020555b6000806128bb61289b3464e8d4a5100065ffffffffffff60a888901c16600460ff60a08a901c16021b02613b33565b6115bc8a611af96128b38960d81c640fffffffff1690565b600090612a82565b909250905060a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a510000261290d606461271060a888901c65ffffffffffff1660a089901c60ff166004021b64e8d4a510000261209a565b106129455760405162461bcd60e51b815260206004820152600860248201526714d30e93d0940e8d60c21b6044820152606401610793565b81895561199d8160a886901c65ffffffffffff1660a087901c60ff166004021b64e8d4a510000260a885901c65ffffffffffff1660a086901c60ff166004021b64e8d4a51000026129969190613ba3565b6129a09190613b33565b6001600160a01b03891690612593565b606060ff82168067ffffffffffffffff8111156129dd57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612a06578160200160208202803683370190505b509150600883901c925060005b81811015612a6357600884901c93508360ff16838281518110612a4657634e487b7160e01b600052603260045260246000fd5b602090810291909101015280612a5b81613c12565b915050612a13565b5050919050565b60006019612a788484613ba3565b610eef9190613b70565b6000640fffffffff821115612aa757634e487b7160e01b600052600160045260246000fd5b5060d81b7ff000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff919091161790565b600080612ae0836134f2565b915091508160001415612b355760405162461bcd60e51b815260206004820152600a60248201527f3732313a4d494e543a30000000000000000000000000000000000000000000006044820152606401610793565b838114612b845760405162461bcd60e51b815260206004820152600a60248201527f3732313a4d494e543a31000000000000000000000000000000000000000000006044820152606401610793565b6000612b918686856135bb565b90507fe98dd458321045a46b57bd2d5251a739e0f01750a71e4d3e71cee6c17164dd328582604051612bc4929190613afb565b60405180910390a16000815167ffffffffffffffff811115612bf657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612c1f578160200160208202803683370190505b50905060005b8151811015611a20576001828281518110612c5057634e487b7160e01b600052603260045260246000fd5b602090810291909101015280612c6581613c12565b915050612c25565b60006001600160a01b0384163b15612dc557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612cb1903390899088908890600401613ab6565b602060405180830381600087803b158015612ccb57600080fd5b505af1925050508015612cfb575060408051601f3d908101601f19168201909252612cf89181019061394c565b60015b612dab573d808015612d29576040519150601f19603f3d011682016040523d82523d6000602084013e612d2e565b606091505b508051612da35760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610793565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506112ba565b5060016112ba565b612de830838360405180602001604052806000815250612c6d565b612e4e5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b6001600160a01b03821660009081526003840160205260408120805460019290612e79908490613b33565b9091555050600081815260028401602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b612ef530838360405180602001604052806000815250612c6d565b612f5b5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b3060009081526003840160205260408120805460019290612f7d908490613ba3565b90915550506001600160a01b03821660009081526003840160205260408120805460019290612fad908490613b33565b9091555050600081815260028401602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839230917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a4505050565b6130188382610feb565b6001600160a01b0316336001600160a01b031614801561304057506001600160a01b03821633145b801561305d5750306130528483610f50565b6001600160a01b0316145b6130c35760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b6130cd838261366c565b6001600160a01b038216600090815260038401602052604081208054600192906130f8908490613ba3565b9091555050306000908152600384016020526040812080546001929061311f908490613b33565b9091555050600081815260028401602052604080822080546001600160a01b03191630908117909155905183926001600160a01b038616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a4505050565b610ac48160405160240161319691815260200190565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f27b7cf8500000000000000000000000000000000000000000000000000000000179052613696565b60008080600019858709858702925082811083820303915050806000141561322d576000841161322257600080fd5b508290049050610eef565b80841161323957600080fd5b600084868809808403938111909203919050600061325986196001613b33565b8616958690049560026003880281188089028203028089028203028089028203028089028203028089028203028089029091030260008290038290046001019490940294049390931791909102925050509392505050565b6000806000806132c0866129b0565b905060005b81518160ff16101561332a578560ff16828260ff16815181106132f857634e487b7160e01b600052603260045260246000fd5b6020026020010151141561331857613311816001613b4b565b925061332a565b8061332281613c2d565b9150506132c5565b5061333486613180565b6133408560f81b6136b7565b60008260ff161161337e5760405162461bcd60e51b81526020600482015260086024820152670534c3a50464d3a360c41b6044820152606401610793565b8161338881613bba565b60ff6010600883020190811b198916965088901c945092506133ab905084613180565b8460ff168360ff16146134005760405162461bcd60e51b815260206004820152600860248201527f534c3a50464d3a310000000000000000000000000000000000000000000000006044820152606401610793565b509250925092565b6000806000613416856129b0565b905060005b81518160ff16101561347e57818160ff168151811061344a57634e487b7160e01b600052603260045260246000fd5b60200260200101516000141561346c57613465816001613b4b565b925061347e565b8061347681613c2d565b91505061341b565b5061348885613180565b60008260ff16116134c65760405162461bcd60e51b81526020600482015260086024820152670534c3a50464d3a360c41b6044820152606401610793565b816134d081613bba565b9250506008820260100184901b851792506134ea83613180565b509250929050565b6000806134ff8343612a6a565b9050600061350d8483613746565b9050600061351c600183613ba3565b4090508061356c5760405162461bcd60e51b815260206004820152600760248201527f4550433a53424c000000000000000000000000000000000000000000000000006044820152606401610793565b604080516020810183905290810184905230606090811b6bffffffffffffffffffffffff1916908201526074016040516020818303038152906040528051906020012060001c93505050915091565b6000828152602084905260409020546060901561361a5760405162461bcd60e51b815260206004820152600660248201527f494c3a4d3a3000000000000000000000000000000000000000000000000000006044820152606401610793565b613650600461364860146136318660081c60ff1690565b61363b9190613c4d565b60081b61ff001986161790565b60ff19161790565b600084815260208690526040902081905591506112ba826129b0565b6000818152600483016020526040812080546001600160a01b031916905581906110ae8483610feb565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6040517fff0000000000000000000000000000000000000000000000000000000000000082166024820152610ac49060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f6e18a12800000000000000000000000000000000000000000000000000000000179052613696565b600082613754601984613b84565b610eef9190613b33565b80356001600160a01b038116811461377557600080fd5b919050565b60006020828403121561378b578081fd5b610eef8261375e565b600080604083850312156137a6578081fd5b6137af8361375e565b91506121f36020840161375e565b6000806000606084860312156137d1578081fd5b6137da8461375e565b92506137e86020850161375e565b9150604084013590509250925092565b6000806000806080858703121561380d578081fd5b6138168561375e565b93506138246020860161375e565b925060408501359150606085013567ffffffffffffffff80821115613847578283fd5b818701915087601f83011261385a578283fd5b81358181111561386c5761386c613c9b565b604051601f8201601f19908116603f0116810190838211818310171561389457613894613c9b565b816040528281528a60208487010111156138ac578586fd5b82602086016020830137918201602001949094529598949750929550505050565b600080604083850312156138df578182fd5b6138e88361375e565b9150602083013580151581146138fc578182fd5b809150509250929050565b60008060408385031215613919578182fd5b6139228361375e565b946020939093013593505050565b600060208284031215613941578081fd5b8135610eef81613cb1565b60006020828403121561395d578081fd5b8151610eef81613cb1565b600060208284031215613979578081fd5b5035919050565b60008060408385031215613992578182fd5b50508035926020909101359150565b6000806000606084860312156139b5578283fd5b83359250602084013591506139cc6040850161375e565b90509250925092565b6000806000606084860312156139e9578283fd5b505081359360208301359350604090920135919050565b60008060008060808587031215613a15578384fd5b5050823594602084013594506040840135936060013592509050565b6000815180845260208085019450808401835b83811015613a6057815187529582019590820190600101613a44565b509495945050505050565b60008151808452815b81811015613a9057602081850181015186830182015201613a74565b81811115613aa15782602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261246d6080830184613a6b565b602081526000610eef6020830184613a6b565b8281526040602082015260006112ba6040830184613a31565b838152826020820152606060408201526000610b5a6060830184613a31565b60008219821115613b4657613b46613c6f565b500190565b600060ff821660ff84168060ff03821115613b6857613b68613c6f565b019392505050565b600082613b7f57613b7f613c85565b500490565b6000816000190483118215151615613b9e57613b9e613c6f565b500290565b600082821015613bb557613bb5613c6f565b500390565b600060ff821680613bcd57613bcd613c6f565b6000190192915050565b600181811c90821680613beb57607f821691505b60208210811415613c0c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613c2657613c26613c6f565b5060010190565b600060ff821660ff811415613c4457613c44613c6f565b60010192915050565b600060ff831680613c6057613c60613c85565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610ac457600080fdfea26469706673582212205169566c3a53102d2c7a1d44a4ebc1b265d9e8453682048cb21a5b3bd367327264736f6c63430008040033",
      "deployedBytecode": "0x6080604052600436106101cd5760003560e01c80638f4c1d4f116100f7578063a7f0b3de11610095578063d636feae11610064578063d636feae1461055e578063d96073cf14610571578063e985e9c514610591578063f4f98ad5146105b157600080fd5b8063a7f0b3de146104c9578063b88d4fde146104fd578063c34902631461051d578063c87b56dd1461053d57600080fd5b806396cfd827116100d157806396cfd827146104705780639fa6dd3514610483578063a0712d6814610496578063a22cb465146104a957600080fd5b80638f4c1d4f14610412578063900cf0cf1461044657806395d89b411461045b57600080fd5b806342842e0e1161016f57806370a082311161013e57806370a0823114610382578063761610fc146103b057806378b38f36146103c3578063884c66ae146103f257600080fd5b806342842e0e1461030257806349b44f98146103225780634dd1496b146103425780636352211e1461036257600080fd5b8063095ea7b3116101ab578063095ea7b3146102615780630cf27c2a146102835780631cd4ad3a1461029657806323b872dd146102e257600080fd5b806301ffc9a7146101d257806306fdde0314610207578063081812fc14610229575b600080fd5b3480156101de57600080fd5b506101f26101ed366004613930565b6105c4565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b5061021c610661565b6040516101fe9190613ae8565b34801561023557600080fd5b50610249610244366004613968565b6106f5565b6040516001600160a01b0390911681526020016101fe565b34801561026d57600080fd5b5061028161027c366004613907565b610701565b005b6102816102913660046139d5565b610839565b3480156102a257600080fd5b506102b66102b1366004613968565b6108a0565b604080516001600160a01b039095168552602085019390935291830152151560608201526080016101fe565b3480156102ee57600080fd5b506102816102fd3660046137bd565b610946565b34801561030e57600080fd5b5061028161031d3660046137bd565b6109c1565b34801561032e57600080fd5b5061028161033d3660046139d5565b6109dc565b34801561034e57600080fd5b5061028161035d366004613a00565b610a03565b34801561036e57600080fd5b5061024961037d366004613968565b610a52565b34801561038e57600080fd5b506103a261039d36600461377a565b610a5e565b6040519081526020016101fe565b6102816103be366004613968565b610a6a565b3480156103cf57600080fd5b506103e36103de366004613968565b610ac7565b6040516101fe93929190613b14565b3480156103fe57600080fd5b506103a261040d3660046139a1565b610ae4565b34801561041e57600080fd5b506102497f000000000000000000000000000000000000000000000000000000000000000081565b34801561045257600080fd5b506103a2610b63565b34801561046757600080fd5b5061021c610b93565b61028161047e3660046139d5565b610ba5565b610281610491366004613968565b610c0c565b6102816104a4366004613968565b610c68565b3480156104b557600080fd5b506102816104c43660046138cd565b610cc8565b3480156104d557600080fd5b506103a27f000000000000000000000000000000000000000000000000000000000000000081565b34801561050957600080fd5b506102816105183660046137f8565b610d8d565b34801561052957600080fd5b50610281610538366004613980565b610e09565b34801561054957600080fd5b5061021c610558366004613968565b50606090565b61028161056c3660046139d5565b610e43565b34801561057d57600080fd5b5061028161058c366004613980565b610eaa565b34801561059d57600080fd5b506101f26105ac366004613794565b610ec3565b6102816105bf366004613968565b610ef6565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061062757506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061065b57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b606060008001805461067290613bd7565b80601f016020809104026020016040519081016040528092919081815260200182805461069e90613bd7565b80156106eb5780601f106106c0576101008083540402835291602001916106eb565b820191906000526020600020905b8154815290600101906020018083116106ce57829003601f168201915b5050505050905090565b600061065b8183610f50565b600061070d8183610feb565b9050806001600160a01b0316836001600160a01b0316141561079c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806107b857506107b88133610ec3565b61082a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610793565b6108348383611078565b505050565b60008381526009602090815260408083208584529091528120610834917f00000000000000000000000000000000000000000000000000000000000000008686867f00000000000000000000000000000000000000000000000000000000000000006110e7565b600081815260086020526040812081908190819081906108c090826111df565b509050806108fa5760405162461bcd60e51b815260206004820152600760248201526604e533a47533a360cc1b6044820152606401610793565b80945060a881901c65ffffffffffff1660a082901c60ff166004021b64e8d4a510000293506109308160d81c640fffffffff1690565b925061093c8160ff1c90565b9150509193509193565b61095033826111f7565b6109b65760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b6108348383836112c2565b61083483838360405180602001604052806000815250610d8d565b60008381526009602090815260408083208584529091528120610834916006858588611491565b60008481526009602090815260408083208684529091528120610a4c916006877f0000000000000000000000000000000000000000000000000000000000000000888789611623565b50505050565b600061065b8183610feb565b600061065b81836117ae565b6000818152600860205260409020610ac490827f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061184c565b50565b6000806060610ad76006856118a1565b9250925092509193909250565b60008381526008602052604081208190610aff9084866118d4565b91505080610b395760405162461bcd60e51b815260206004820152600760248201526604e533a47533a360cc1b6044820152606401610793565b60a881901c65ffffffffffff1660a082901c60ff166004021b64e8d4a51000025b95945050505050565b6000610b8e7f00000000000000000000000000000000000000000000000000000000000000006118ee565b905090565b60606000600101805461067290613bd7565b60008381526009602090815260408083208584529091528120610834917f00000000000000000000000000000000000000000000000000000000000000008686867f00000000000000000000000000000000000000000000000000000000000000006118fa565b6000818152600860205260409020610ac49060067f0000000000000000000000000000000000000000000000000000000000000000847f00000000000000000000000000000000000000000000000000000000000000006119a8565b6000818152600860205260409020610cc49060067f0000000000000000000000000000000000000000000000000000000000000000847f0000000000000000000000000000000000000000000000000000000000000000611a2a565b5050565b6001600160a01b038216331415610d215760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610793565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610d9733836111f7565b610dfd5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b610a4c84848484611b9a565b6000828152600860205260408120610cc4917f00000000000000000000000000000000000000000000000000000000000000008585611c23565b6000838152600960209081526040808320858452909152812061083491857f000000000000000000000000000000000000000000000000000000000000000086867f0000000000000000000000000000000000000000000000000000000000000000611d1b565b6000828152600860205260408120610cc4918484611e1c565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081205460ff165b9392505050565b6000818152600860205260409020610ac490827f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611ed6565b60008181526002830160205260408120546001600160a01b0316610fcb5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610793565b50600090815260049190910160205260409020546001600160a01b031690565b60008181526002830160205260408120546001600160a01b031680610eef5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610793565b600081815260046020526040812080546001600160a01b0319166001600160a01b03851690811790915582916110ae9083610feb565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61010083106111225760405162461bcd60e51b815260206004820152600760248201526604d4c3a43493a360cc1b6044820152606401610793565b33611136876001600160a01b038516610feb565b6001600160a01b0316146111775760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b61118387838388611f21565b60408051858152602081018590526001600160a01b038416918101919091523460608201527ff562263f29883bf3519f3733bb30b47c831bfe9809884430857d8cf29571d554906080015b60405180910390a150505050505050565b6000806111ec848461217d565b915091509250929050565b6000611202826121fc565b6112635760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610793565b600061126f8184610feb565b9050806001600160a01b0316846001600160a01b031614806112aa5750836001600160a01b031661129f846106f5565b6001600160a01b0316145b806112ba57506112ba8185610ec3565b949350505050565b6001600160a01b0383166112d7600083610feb565b6001600160a01b0316146113535760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610793565b6001600160a01b0382166113ce5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610793565b6113d9600082611078565b6001600160a01b0383166000908152600360205260408120805460019290611402908490613ba3565b90915550506001600160a01b0382166000908152600360205260408120805460019290611430908490613b33565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b336114a5866001600160a01b038416610feb565b6001600160a01b0316146114e65760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b61010083106115375760405162461bcd60e51b815260206004820152600760248201527f4d4c3a53493a30000000000000000000000000000000000000000000000000006044820152606401610793565b6000611543878361217d565b509050801561157e5760405162461bcd60e51b815260206004820152600760248201526604e533a53533a360cc1b6044820152606401610793565b6115c2836115bc60016001600160a01b0319851686175b90507f80000000000000000000000000000000000000000000000000000000000000001790565b9061221b565b5080885590506115dc856001600160a01b0384168661229c565b604080516001600160a01b0384168152602081018690529081018490527fc8032e5c721106f3e30ad0f1a45e919c8d034cf788842ff336b0150f0fbcc60e906060016111ce565b33611637886001600160a01b038416610feb565b6001600160a01b0316146116785760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b61010083106116b35760405162461bcd60e51b815260206004820152600760248201526604d4c3a43493a360cc1b6044820152606401610793565b60006116be866118ee565b90506000806116ce8b8587612359565b600087815260018e01602090815260408083206001600160a01b038a1684529091528120559092509050611704848383866123d9565b156117265760008b55611721896001600160a01b03861688612477565b611751565b61175160a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a51000025b3390612593565b60408051888152602081018890529081018690526001600160a01b03851660608201527f38195a074a64067740045e77ca5873f34a0df243a8ac9ecc39452c47e7061e479060800160405180910390a15050505050505050505050565b60006001600160a01b03821661182c5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610793565b506001600160a01b03166000908152600391909101602052604090205490565b611858843384846126ac565b6040805184815233602082015234918101919091527f2d57124cfa4e385afd5cc9d6f24874bdd21303ac9131d7cb674be2a5855c7002906060015b60405180910390a150505050565b60008181526020839052604081205481906060906118be816129b0565b60ff600883901c81169892169650945092505050565b6000806118e2858585612359565b91509150935093915050565b600061065b8243612a6a565b3361190e876001600160a01b038516610feb565b6001600160a01b03161461194f5760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b60008061195c898561217d565b9150915080600014801561197557506119758260ff1c90565b1561198e57611989898989898989896110e7565b61199d565b61199d89898989898989611d1b565b505050505050505050565b60006119b3846118ee565b90506000806119c288336111df565b9150915084831480156119d3575081155b156119eb576119e58888888888611a2a565b50611a20565b801580156119fe57506119fe8260ff1c90565b15611a1457611a0f88868689611ed6565b611a20565b611a208886868961184c565b5050505050505050565b600080611a36856118ee565b9050600080611a4589336111df565b91509150858314611a985760405162461bcd60e51b815260206004820152600660248201527f4e533a4d3a3000000000000000000000000000000000000000000000000000006044820152606401610793565b8115611ae65760405162461bcd60e51b815260206004820152600660248201527f4e533a4d3a4400000000000000000000000000000000000000000000000000006044820152606401610793565b611b07346115bc33611af9600088612a82565b6001600160a01b0319161790565b50808a5593503415611b2657611b266001600160a01b03861634612593565b611b31888789612ad4565b6040805184815233602082015264e8d4a5100065ffffffffffff60a888901c16600460ff60a08a901c16021b028183015290517f4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f69181900360600190a150505095945050505050565b611ba58484846112c2565b611bb184848484612c6d565b610a4c5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610793565b6000611c2e846118ee565b9050600080611c3e8833866118d4565b600086815260018b01602090815260408083203380855292528220919091559193509150611c6e908383866123d9565b15611caa5760008855611c888260d81c640fffffffff1690565b841415611c9f57611c9a873387612dcd565b611cd2565b611c9a873387612eda565b611cd260a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a510000261174a565b6040805186815260208101869052338183015290517fd79254e5daba749baa8ba954e77bbbb18efef113a8070d00df9a188d819324269181900360600190a15050505050505050565b6101008310611d6c5760405162461bcd60e51b815260206004820152600760248201527f4d4c3a4f493a30000000000000000000000000000000000000000000000000006044820152606401610793565b33611d80876001600160a01b038516610feb565b6001600160a01b031614611dc15760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b611dcd878383886126ac565b60408051858152602081018590526001600160a01b038416918101919091523460608201527fe237f23f900f35d5f1a406ba97ccfdffe082ffcda87098765811817c2c14ac87906080016111ce565b6000611e2885336111df565b5090508015611e635760405162461bcd60e51b815260206004820152600760248201526604e533a53533a360cc1b6044820152606401610793565b611e7e826115bc60016001600160a01b031985163317611595565b508086559050611e8f84338561300e565b604080518481523360208201529081018390527f48b43f133ac721cb5f6e2a3d8ab7caee987bccfb4197537cf43c9f907f057f3a9060600160405180910390a15050505050565b611ee284338484611f21565b6040805184815233602082015234918101919091527f094925310677b39991f64178494fad708beb62f73f36bb0baa493476ecf5870990606001611893565b6000611f2c826118ee565b9050600080611f3b878761217d565b9092509050611f4982613180565b60003411611f995760405162461bcd60e51b815260206004820152600860248201527f534c3a434f4d3a320000000000000000000000000000000000000000000000006044820152606401610793565b8015611fd25760405162461bcd60e51b81526020600482015260086024820152670534c3a48534f3a360c41b6044820152606401610793565b611fdc8260ff1c90565b6120285760405162461bcd60e51b815260206004820152600860248201527f534c3a48534f3a310000000000000000000000000000000000000000000000006044820152606401610793565b6000612035846001613b33565b905060008061204c346115bc8b611af98588612a82565b909250905060a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a51000026120a1606461271060a889901c65ffffffffffff1660a08a901c60ff166004021b64e8d4a51000025b91906131f3565b106120d95760405162461bcd60e51b815260206004820152600860248201526714d30e93d0940e8d60c21b6044820152606401610793565b600083815260018b01602052604081208691826001600160a01b03168152602081019190915260400160002055818a556121718160a887901c65ffffffffffff1660a088901c60ff166004021b64e8d4a510000260a885901c65ffffffffffff1660a086901c60ff166004021b64e8d4a51000026121579190613ba3565b6121619190613b33565b6001600160a01b038a1690612593565b50505050505050505050565b8154600081158061219f5750816001600160a01b0316836001600160a01b0316145b6121f1578360010160006121ba8460d81c640fffffffff1690565b81526020019081526020016000206000846001600160a01b03166001600160a01b03168152602001908152602001600020546121f3565b815b90509250929050565b6000818152600260205260408120546001600160a01b0316151561065b565b6000808264e8d4a51000840493505b65ffffffffffff841115612249576001830192508360041c935061222a565b828460081b1793508360081c836004021b64e8d4a5100081028203925050507fffffffffff00000000000000ffffffffffffffffffffffffffffffffffffffff841693508260a01b841791509250929050565b600082815260208490526040902054806122e55760405162461bcd60e51b815260206004820152600a6024820152690313135353a5354463a360b41b6044820152606401610793565b6122ef81836132b1565b505060008481526020868152604080832084905585835260018801909152812080549293509061231e83613c12565b909155505060408051848152602081018490527f452c5f777db10bd58f64d8bc58668d14487d008ff527ca431853ea22e195f1769101611893565b825460008261236f8360d81c640fffffffff1690565b1461237b57600061237d565b815b9150811580159061239f5750816001600160a01b0316846001600160a01b0316145b6123cd57600083815260018601602090815260408083206001600160a01b03881684529091529020546123cf565b815b9050935093915050565b6000826124285760405162461bcd60e51b815260206004820152600760248201527f534c3a43433a31000000000000000000000000000000000000000000000000006044820152606401610793565b600061243b8560d81c640fffffffff1690565b831190506124498560ff1c90565b8061246d5750846001600160a01b0316866001600160a01b031614801561246d5750805b9695505050505050565b600082815260208490526040902054806124c05760405162461bcd60e51b815260206004820152600a6024820152690313135353a5354463a360b41b6044820152606401610793565b600082815260018501602052604090205461251d5760405162461bcd60e51b815260206004820152600b60248201527f313135353a534254463a310000000000000000000000000000000000000000006044820152606401610793565b6000828152600185016020526040812080549161253983613c12565b9091555061254990508183613408565b506000848152602086815260409182902083905581518681529081018590529192507f452c5f777db10bd58f64d8bc58668d14487d008ff527ca431853ea22e195f1769101611893565b804710156125e35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610793565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612630576040519150601f19603f3d011682016040523d82523d6000602084013e612635565b606091505b50509050806108345760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610793565b60006126b7826118ee565b90506000806126c6878761217d565b915091506000341161271a5760405162461bcd60e51b815260206004820152600860248201527f534c3a4f42503a320000000000000000000000000000000000000000000000006044820152606401610793565b816127675760405162461bcd60e51b815260206004820152600660248201527f4e533a303a3000000000000000000000000000000000000000000000000000006044820152606401610793565b6127718160ff1c90565b156127a95760405162461bcd60e51b81526020600482015260086024820152670534c3a48534f3a360c41b6044820152606401610793565b6127ba8260d81c640fffffffff1690565b8311156128095760405162461bcd60e51b815260206004820152600860248201527f534c3a4f42503a330000000000000000000000000000000000000000000000006044820152606401610793565b6001600160a01b038616826001600160a01b03161461286c578187600101600061283a8560d81c640fffffffff1690565b815260200190815260200160002060006128518590565b6001600160a01b031681526020810191909152604001600020555b6000806128bb61289b3464e8d4a5100065ffffffffffff60a888901c16600460ff60a08a901c16021b02613b33565b6115bc8a611af96128b38960d81c640fffffffff1690565b600090612a82565b909250905060a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a510000261290d606461271060a888901c65ffffffffffff1660a089901c60ff166004021b64e8d4a510000261209a565b106129455760405162461bcd60e51b815260206004820152600860248201526714d30e93d0940e8d60c21b6044820152606401610793565b81895561199d8160a886901c65ffffffffffff1660a087901c60ff166004021b64e8d4a510000260a885901c65ffffffffffff1660a086901c60ff166004021b64e8d4a51000026129969190613ba3565b6129a09190613b33565b6001600160a01b03891690612593565b606060ff82168067ffffffffffffffff8111156129dd57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612a06578160200160208202803683370190505b509150600883901c925060005b81811015612a6357600884901c93508360ff16838281518110612a4657634e487b7160e01b600052603260045260246000fd5b602090810291909101015280612a5b81613c12565b915050612a13565b5050919050565b60006019612a788484613ba3565b610eef9190613b70565b6000640fffffffff821115612aa757634e487b7160e01b600052600160045260246000fd5b5060d81b7ff000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff919091161790565b600080612ae0836134f2565b915091508160001415612b355760405162461bcd60e51b815260206004820152600a60248201527f3732313a4d494e543a30000000000000000000000000000000000000000000006044820152606401610793565b838114612b845760405162461bcd60e51b815260206004820152600a60248201527f3732313a4d494e543a31000000000000000000000000000000000000000000006044820152606401610793565b6000612b918686856135bb565b90507fe98dd458321045a46b57bd2d5251a739e0f01750a71e4d3e71cee6c17164dd328582604051612bc4929190613afb565b60405180910390a16000815167ffffffffffffffff811115612bf657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612c1f578160200160208202803683370190505b50905060005b8151811015611a20576001828281518110612c5057634e487b7160e01b600052603260045260246000fd5b602090810291909101015280612c6581613c12565b915050612c25565b60006001600160a01b0384163b15612dc557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612cb1903390899088908890600401613ab6565b602060405180830381600087803b158015612ccb57600080fd5b505af1925050508015612cfb575060408051601f3d908101601f19168201909252612cf89181019061394c565b60015b612dab573d808015612d29576040519150601f19603f3d011682016040523d82523d6000602084013e612d2e565b606091505b508051612da35760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610793565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506112ba565b5060016112ba565b612de830838360405180602001604052806000815250612c6d565b612e4e5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b6001600160a01b03821660009081526003840160205260408120805460019290612e79908490613b33565b9091555050600081815260028401602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b612ef530838360405180602001604052806000815250612c6d565b612f5b5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b3060009081526003840160205260408120805460019290612f7d908490613ba3565b90915550506001600160a01b03821660009081526003840160205260408120805460019290612fad908490613b33565b9091555050600081815260028401602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839230917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a4505050565b6130188382610feb565b6001600160a01b0316336001600160a01b031614801561304057506001600160a01b03821633145b801561305d5750306130528483610f50565b6001600160a01b0316145b6130c35760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b6130cd838261366c565b6001600160a01b038216600090815260038401602052604081208054600192906130f8908490613ba3565b9091555050306000908152600384016020526040812080546001929061311f908490613b33565b9091555050600081815260028401602052604080822080546001600160a01b03191630908117909155905183926001600160a01b038616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a4505050565b610ac48160405160240161319691815260200190565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f27b7cf8500000000000000000000000000000000000000000000000000000000179052613696565b60008080600019858709858702925082811083820303915050806000141561322d576000841161322257600080fd5b508290049050610eef565b80841161323957600080fd5b600084868809808403938111909203919050600061325986196001613b33565b8616958690049560026003880281188089028203028089028203028089028203028089028203028089028203028089029091030260008290038290046001019490940294049390931791909102925050509392505050565b6000806000806132c0866129b0565b905060005b81518160ff16101561332a578560ff16828260ff16815181106132f857634e487b7160e01b600052603260045260246000fd5b6020026020010151141561331857613311816001613b4b565b925061332a565b8061332281613c2d565b9150506132c5565b5061333486613180565b6133408560f81b6136b7565b60008260ff161161337e5760405162461bcd60e51b81526020600482015260086024820152670534c3a50464d3a360c41b6044820152606401610793565b8161338881613bba565b60ff6010600883020190811b198916965088901c945092506133ab905084613180565b8460ff168360ff16146134005760405162461bcd60e51b815260206004820152600860248201527f534c3a50464d3a310000000000000000000000000000000000000000000000006044820152606401610793565b509250925092565b6000806000613416856129b0565b905060005b81518160ff16101561347e57818160ff168151811061344a57634e487b7160e01b600052603260045260246000fd5b60200260200101516000141561346c57613465816001613b4b565b925061347e565b8061347681613c2d565b91505061341b565b5061348885613180565b60008260ff16116134c65760405162461bcd60e51b81526020600482015260086024820152670534c3a50464d3a360c41b6044820152606401610793565b816134d081613bba565b9250506008820260100184901b851792506134ea83613180565b509250929050565b6000806134ff8343612a6a565b9050600061350d8483613746565b9050600061351c600183613ba3565b4090508061356c5760405162461bcd60e51b815260206004820152600760248201527f4550433a53424c000000000000000000000000000000000000000000000000006044820152606401610793565b604080516020810183905290810184905230606090811b6bffffffffffffffffffffffff1916908201526074016040516020818303038152906040528051906020012060001c93505050915091565b6000828152602084905260409020546060901561361a5760405162461bcd60e51b815260206004820152600660248201527f494c3a4d3a3000000000000000000000000000000000000000000000000000006044820152606401610793565b613650600461364860146136318660081c60ff1690565b61363b9190613c4d565b60081b61ff001986161790565b60ff19161790565b600084815260208690526040902081905591506112ba826129b0565b6000818152600483016020526040812080546001600160a01b031916905581906110ae8483610feb565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6040517fff0000000000000000000000000000000000000000000000000000000000000082166024820152610ac49060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f6e18a12800000000000000000000000000000000000000000000000000000000179052613696565b600082613754601984613b84565b610eef9190613b33565b80356001600160a01b038116811461377557600080fd5b919050565b60006020828403121561378b578081fd5b610eef8261375e565b600080604083850312156137a6578081fd5b6137af8361375e565b91506121f36020840161375e565b6000806000606084860312156137d1578081fd5b6137da8461375e565b92506137e86020850161375e565b9150604084013590509250925092565b6000806000806080858703121561380d578081fd5b6138168561375e565b93506138246020860161375e565b925060408501359150606085013567ffffffffffffffff80821115613847578283fd5b818701915087601f83011261385a578283fd5b81358181111561386c5761386c613c9b565b604051601f8201601f19908116603f0116810190838211818310171561389457613894613c9b565b816040528281528a60208487010111156138ac578586fd5b82602086016020830137918201602001949094529598949750929550505050565b600080604083850312156138df578182fd5b6138e88361375e565b9150602083013580151581146138fc578182fd5b809150509250929050565b60008060408385031215613919578182fd5b6139228361375e565b946020939093013593505050565b600060208284031215613941578081fd5b8135610eef81613cb1565b60006020828403121561395d578081fd5b8151610eef81613cb1565b600060208284031215613979578081fd5b5035919050565b60008060408385031215613992578182fd5b50508035926020909101359150565b6000806000606084860312156139b5578283fd5b83359250602084013591506139cc6040850161375e565b90509250925092565b6000806000606084860312156139e9578283fd5b505081359360208301359350604090920135919050565b60008060008060808587031215613a15578384fd5b5050823594602084013594506040840135936060013592509050565b6000815180845260208085019450808401835b83811015613a6057815187529582019590820190600101613a44565b509495945050505050565b60008151808452815b81811015613a9057602081850181015186830182015201613a74565b81811115613aa15782602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261246d6080830184613a6b565b602081526000610eef6020830184613a6b565b8281526040602082015260006112ba6040830184613a31565b838152826020820152606060408201526000610b5a6060830184613a31565b60008219821115613b4657613b46613c6f565b500190565b600060ff821660ff84168060ff03821115613b6857613b68613c6f565b019392505050565b600082613b7f57613b7f613c85565b500490565b6000816000190483118215151615613b9e57613b9e613c6f565b500290565b600082821015613bb557613bb5613c6f565b500390565b600060ff821680613bcd57613bcd613c6f565b6000190192915050565b600181811c90821680613beb57607f821691505b60208210811415613c0c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613c2657613c26613c6f565b5060010190565b600060ff821660ff811415613c4457613c44613c6f565b60010192915050565b600060ff831680613c6057613c60613c85565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610ac457600080fdfea26469706673582212205169566c3a53102d2c7a1d44a4ebc1b265d9e8453682048cb21a5b3bd367327264736f6c63430008040033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "approve(address,uint256)": {
            "details": "See {IERC721-approve}."
          },
          "balanceOf(address)": {
            "details": "See {IERC721-balanceOf}."
          },
          "getApproved(uint256)": {
            "details": "See {IERC721-getApproved}."
          },
          "isApprovedForAll(address,address)": {
            "details": "See {IERC721-isApprovedForAll}."
          },
          "name()": {
            "details": "See {IERC721Metadata-name}."
          },
          "ownerOf(uint256)": {
            "details": "See {IERC721-ownerOf}."
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "setApprovalForAll(address,bool)": {
            "details": "See {IERC721-setApprovalForAll}."
          },
          "supportsInterface(bytes4)": {
            "details": "See {IERC165-supportsInterface}."
          },
          "symbol()": {
            "details": "See {IERC721Metadata-symbol}."
          },
          "tokenURI(uint256)": {
            "details": "See {IERC721Metadata-tokenURI}. MODIFICATION 0"
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC721-transferFrom}."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:711:34",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:34",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "95:229:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "141:26:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "150:6:34"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "158:6:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "143:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "143:22:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "143:22:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "116:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "125:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "112:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "112:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "137:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "108:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "108:32:34"
                          },
                          "nodeType": "YulIf",
                          "src": "105:2:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "176:29:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "195:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "189:5:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "189:16:34"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "180:5:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "268:26:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "277:6:34"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "285:6:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "270:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "270:22:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "270:22:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "227:5:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "238:5:34"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "253:3:34",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "258:1:34",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "249:3:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "249:11:34"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "262:1:34",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "245:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "245:19:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "234:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "234:31:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "224:2:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "224:42:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "217:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "217:50:34"
                          },
                          "nodeType": "YulIf",
                          "src": "214:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "303:15:34",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "313:5:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "303:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "61:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "72:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "84:6:34",
                        "type": ""
                      }
                    ],
                    "src": "14:310:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "384:325:34",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "394:22:34",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "408:1:34",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "411:4:34"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "404:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "404:12:34"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "394:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "425:38:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "455:4:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "461:1:34",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "451:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "451:12:34"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "429:18:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "502:31:34",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "504:27:34",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "518:6:34"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "526:4:34",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "514:3:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "514:17:34"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "504:6:34"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "482:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "475:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "475:26:34"
                          },
                          "nodeType": "YulIf",
                          "src": "472:2:34"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "592:111:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "613:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "620:3:34",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "625:10:34",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "616:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "616:20:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "606:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "606:31:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "606:31:34"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "657:1:34",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "660:4:34",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "650:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "650:15:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "650:15:34"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "685:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "688:4:34",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "678:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "678:15:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "678:15:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "548:18:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "571:6:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "579:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "568:2:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "568:14:34"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "545:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "545:38:34"
                          },
                          "nodeType": "YulIf",
                          "src": "542:2:34"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "364:4:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "373:6:34",
                        "type": ""
                      }
                    ],
                    "src": "329:380:34"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
              "id": 34,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "60c06040523480156200001157600080fd5b5060405162003fa638038062003fa683398101604081905262000034916200019c565b6040805180820182526006815265139551d1d19560d21b60208083019182528351808501909452601384527f4e7567672046756e6769626c6520546f6b656e000000000000000000000000009084015281519192916200009791600091620000f6565b508051620000ad906001906020840190620000f6565b5050506001600160601b0319606082901b166080524360a0526040517f6bf6eaff5e9af8fbccb949f4c38cc016936f8775363ccf4224db160365785d5290600090a15062000209565b8280546200010490620001cc565b90600052602060002090601f01602090048101928262000128576000855562000173565b82601f106200014357805160ff191683800117855562000173565b8280016001018555821562000173579182015b828111156200017357825182559160200191906001019062000156565b506200018192915062000185565b5090565b5b8082111562000181576000815560010162000186565b600060208284031215620001ae578081fd5b81516001600160a01b0381168114620001c5578182fd5b9392505050565b600181811c90821680620001e157607f821691505b602082108114156200020357634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c60a051613cfd620002a9600039600081816104db0152818161085801528181610a2501528181610aa001528181610b6a01528181610bc401528181610c2201528181610c7e01528181610e1d01528181610e630152610f2c0152600081816104240152818161087c01528181610a7f01528181610be801528181610c4401528181610ca001528181610e860152610f0b0152613cfd6000f3fe6080604052600436106101cd5760003560e01c80638f4c1d4f116100f7578063a7f0b3de11610095578063d636feae11610064578063d636feae1461055e578063d96073cf14610571578063e985e9c514610591578063f4f98ad5146105b157600080fd5b8063a7f0b3de146104c9578063b88d4fde146104fd578063c34902631461051d578063c87b56dd1461053d57600080fd5b806396cfd827116100d157806396cfd827146104705780639fa6dd3514610483578063a0712d6814610496578063a22cb465146104a957600080fd5b80638f4c1d4f14610412578063900cf0cf1461044657806395d89b411461045b57600080fd5b806342842e0e1161016f57806370a082311161013e57806370a0823114610382578063761610fc146103b057806378b38f36146103c3578063884c66ae146103f257600080fd5b806342842e0e1461030257806349b44f98146103225780634dd1496b146103425780636352211e1461036257600080fd5b8063095ea7b3116101ab578063095ea7b3146102615780630cf27c2a146102835780631cd4ad3a1461029657806323b872dd146102e257600080fd5b806301ffc9a7146101d257806306fdde0314610207578063081812fc14610229575b600080fd5b3480156101de57600080fd5b506101f26101ed366004613930565b6105c4565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b5061021c610661565b6040516101fe9190613ae8565b34801561023557600080fd5b50610249610244366004613968565b6106f5565b6040516001600160a01b0390911681526020016101fe565b34801561026d57600080fd5b5061028161027c366004613907565b610701565b005b6102816102913660046139d5565b610839565b3480156102a257600080fd5b506102b66102b1366004613968565b6108a0565b604080516001600160a01b039095168552602085019390935291830152151560608201526080016101fe565b3480156102ee57600080fd5b506102816102fd3660046137bd565b610946565b34801561030e57600080fd5b5061028161031d3660046137bd565b6109c1565b34801561032e57600080fd5b5061028161033d3660046139d5565b6109dc565b34801561034e57600080fd5b5061028161035d366004613a00565b610a03565b34801561036e57600080fd5b5061024961037d366004613968565b610a52565b34801561038e57600080fd5b506103a261039d36600461377a565b610a5e565b6040519081526020016101fe565b6102816103be366004613968565b610a6a565b3480156103cf57600080fd5b506103e36103de366004613968565b610ac7565b6040516101fe93929190613b14565b3480156103fe57600080fd5b506103a261040d3660046139a1565b610ae4565b34801561041e57600080fd5b506102497f000000000000000000000000000000000000000000000000000000000000000081565b34801561045257600080fd5b506103a2610b63565b34801561046757600080fd5b5061021c610b93565b61028161047e3660046139d5565b610ba5565b610281610491366004613968565b610c0c565b6102816104a4366004613968565b610c68565b3480156104b557600080fd5b506102816104c43660046138cd565b610cc8565b3480156104d557600080fd5b506103a27f000000000000000000000000000000000000000000000000000000000000000081565b34801561050957600080fd5b506102816105183660046137f8565b610d8d565b34801561052957600080fd5b50610281610538366004613980565b610e09565b34801561054957600080fd5b5061021c610558366004613968565b50606090565b61028161056c3660046139d5565b610e43565b34801561057d57600080fd5b5061028161058c366004613980565b610eaa565b34801561059d57600080fd5b506101f26105ac366004613794565b610ec3565b6102816105bf366004613968565b610ef6565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061062757506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061065b57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b606060008001805461067290613bd7565b80601f016020809104026020016040519081016040528092919081815260200182805461069e90613bd7565b80156106eb5780601f106106c0576101008083540402835291602001916106eb565b820191906000526020600020905b8154815290600101906020018083116106ce57829003601f168201915b5050505050905090565b600061065b8183610f50565b600061070d8183610feb565b9050806001600160a01b0316836001600160a01b0316141561079c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806107b857506107b88133610ec3565b61082a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610793565b6108348383611078565b505050565b60008381526009602090815260408083208584529091528120610834917f00000000000000000000000000000000000000000000000000000000000000008686867f00000000000000000000000000000000000000000000000000000000000000006110e7565b600081815260086020526040812081908190819081906108c090826111df565b509050806108fa5760405162461bcd60e51b815260206004820152600760248201526604e533a47533a360cc1b6044820152606401610793565b80945060a881901c65ffffffffffff1660a082901c60ff166004021b64e8d4a510000293506109308160d81c640fffffffff1690565b925061093c8160ff1c90565b9150509193509193565b61095033826111f7565b6109b65760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b6108348383836112c2565b61083483838360405180602001604052806000815250610d8d565b60008381526009602090815260408083208584529091528120610834916006858588611491565b60008481526009602090815260408083208684529091528120610a4c916006877f0000000000000000000000000000000000000000000000000000000000000000888789611623565b50505050565b600061065b8183610feb565b600061065b81836117ae565b6000818152600860205260409020610ac490827f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061184c565b50565b6000806060610ad76006856118a1565b9250925092509193909250565b60008381526008602052604081208190610aff9084866118d4565b91505080610b395760405162461bcd60e51b815260206004820152600760248201526604e533a47533a360cc1b6044820152606401610793565b60a881901c65ffffffffffff1660a082901c60ff166004021b64e8d4a51000025b95945050505050565b6000610b8e7f00000000000000000000000000000000000000000000000000000000000000006118ee565b905090565b60606000600101805461067290613bd7565b60008381526009602090815260408083208584529091528120610834917f00000000000000000000000000000000000000000000000000000000000000008686867f00000000000000000000000000000000000000000000000000000000000000006118fa565b6000818152600860205260409020610ac49060067f0000000000000000000000000000000000000000000000000000000000000000847f00000000000000000000000000000000000000000000000000000000000000006119a8565b6000818152600860205260409020610cc49060067f0000000000000000000000000000000000000000000000000000000000000000847f0000000000000000000000000000000000000000000000000000000000000000611a2a565b5050565b6001600160a01b038216331415610d215760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610793565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610d9733836111f7565b610dfd5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b610a4c84848484611b9a565b6000828152600860205260408120610cc4917f00000000000000000000000000000000000000000000000000000000000000008585611c23565b6000838152600960209081526040808320858452909152812061083491857f000000000000000000000000000000000000000000000000000000000000000086867f0000000000000000000000000000000000000000000000000000000000000000611d1b565b6000828152600860205260408120610cc4918484611e1c565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081205460ff165b9392505050565b6000818152600860205260409020610ac490827f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611ed6565b60008181526002830160205260408120546001600160a01b0316610fcb5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610793565b50600090815260049190910160205260409020546001600160a01b031690565b60008181526002830160205260408120546001600160a01b031680610eef5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610793565b600081815260046020526040812080546001600160a01b0319166001600160a01b03851690811790915582916110ae9083610feb565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61010083106111225760405162461bcd60e51b815260206004820152600760248201526604d4c3a43493a360cc1b6044820152606401610793565b33611136876001600160a01b038516610feb565b6001600160a01b0316146111775760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b61118387838388611f21565b60408051858152602081018590526001600160a01b038416918101919091523460608201527ff562263f29883bf3519f3733bb30b47c831bfe9809884430857d8cf29571d554906080015b60405180910390a150505050505050565b6000806111ec848461217d565b915091509250929050565b6000611202826121fc565b6112635760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610793565b600061126f8184610feb565b9050806001600160a01b0316846001600160a01b031614806112aa5750836001600160a01b031661129f846106f5565b6001600160a01b0316145b806112ba57506112ba8185610ec3565b949350505050565b6001600160a01b0383166112d7600083610feb565b6001600160a01b0316146113535760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610793565b6001600160a01b0382166113ce5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610793565b6113d9600082611078565b6001600160a01b0383166000908152600360205260408120805460019290611402908490613ba3565b90915550506001600160a01b0382166000908152600360205260408120805460019290611430908490613b33565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b336114a5866001600160a01b038416610feb565b6001600160a01b0316146114e65760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b61010083106115375760405162461bcd60e51b815260206004820152600760248201527f4d4c3a53493a30000000000000000000000000000000000000000000000000006044820152606401610793565b6000611543878361217d565b509050801561157e5760405162461bcd60e51b815260206004820152600760248201526604e533a53533a360cc1b6044820152606401610793565b6115c2836115bc60016001600160a01b0319851686175b90507f80000000000000000000000000000000000000000000000000000000000000001790565b9061221b565b5080885590506115dc856001600160a01b0384168661229c565b604080516001600160a01b0384168152602081018690529081018490527fc8032e5c721106f3e30ad0f1a45e919c8d034cf788842ff336b0150f0fbcc60e906060016111ce565b33611637886001600160a01b038416610feb565b6001600160a01b0316146116785760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b61010083106116b35760405162461bcd60e51b815260206004820152600760248201526604d4c3a43493a360cc1b6044820152606401610793565b60006116be866118ee565b90506000806116ce8b8587612359565b600087815260018e01602090815260408083206001600160a01b038a1684529091528120559092509050611704848383866123d9565b156117265760008b55611721896001600160a01b03861688612477565b611751565b61175160a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a51000025b3390612593565b60408051888152602081018890529081018690526001600160a01b03851660608201527f38195a074a64067740045e77ca5873f34a0df243a8ac9ecc39452c47e7061e479060800160405180910390a15050505050505050505050565b60006001600160a01b03821661182c5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610793565b506001600160a01b03166000908152600391909101602052604090205490565b611858843384846126ac565b6040805184815233602082015234918101919091527f2d57124cfa4e385afd5cc9d6f24874bdd21303ac9131d7cb674be2a5855c7002906060015b60405180910390a150505050565b60008181526020839052604081205481906060906118be816129b0565b60ff600883901c81169892169650945092505050565b6000806118e2858585612359565b91509150935093915050565b600061065b8243612a6a565b3361190e876001600160a01b038516610feb565b6001600160a01b03161461194f5760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b60008061195c898561217d565b9150915080600014801561197557506119758260ff1c90565b1561198e57611989898989898989896110e7565b61199d565b61199d89898989898989611d1b565b505050505050505050565b60006119b3846118ee565b90506000806119c288336111df565b9150915084831480156119d3575081155b156119eb576119e58888888888611a2a565b50611a20565b801580156119fe57506119fe8260ff1c90565b15611a1457611a0f88868689611ed6565b611a20565b611a208886868961184c565b5050505050505050565b600080611a36856118ee565b9050600080611a4589336111df565b91509150858314611a985760405162461bcd60e51b815260206004820152600660248201527f4e533a4d3a3000000000000000000000000000000000000000000000000000006044820152606401610793565b8115611ae65760405162461bcd60e51b815260206004820152600660248201527f4e533a4d3a4400000000000000000000000000000000000000000000000000006044820152606401610793565b611b07346115bc33611af9600088612a82565b6001600160a01b0319161790565b50808a5593503415611b2657611b266001600160a01b03861634612593565b611b31888789612ad4565b6040805184815233602082015264e8d4a5100065ffffffffffff60a888901c16600460ff60a08a901c16021b028183015290517f4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f69181900360600190a150505095945050505050565b611ba58484846112c2565b611bb184848484612c6d565b610a4c5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610793565b6000611c2e846118ee565b9050600080611c3e8833866118d4565b600086815260018b01602090815260408083203380855292528220919091559193509150611c6e908383866123d9565b15611caa5760008855611c888260d81c640fffffffff1690565b841415611c9f57611c9a873387612dcd565b611cd2565b611c9a873387612eda565b611cd260a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a510000261174a565b6040805186815260208101869052338183015290517fd79254e5daba749baa8ba954e77bbbb18efef113a8070d00df9a188d819324269181900360600190a15050505050505050565b6101008310611d6c5760405162461bcd60e51b815260206004820152600760248201527f4d4c3a4f493a30000000000000000000000000000000000000000000000000006044820152606401610793565b33611d80876001600160a01b038516610feb565b6001600160a01b031614611dc15760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b611dcd878383886126ac565b60408051858152602081018590526001600160a01b038416918101919091523460608201527fe237f23f900f35d5f1a406ba97ccfdffe082ffcda87098765811817c2c14ac87906080016111ce565b6000611e2885336111df565b5090508015611e635760405162461bcd60e51b815260206004820152600760248201526604e533a53533a360cc1b6044820152606401610793565b611e7e826115bc60016001600160a01b031985163317611595565b508086559050611e8f84338561300e565b604080518481523360208201529081018390527f48b43f133ac721cb5f6e2a3d8ab7caee987bccfb4197537cf43c9f907f057f3a9060600160405180910390a15050505050565b611ee284338484611f21565b6040805184815233602082015234918101919091527f094925310677b39991f64178494fad708beb62f73f36bb0baa493476ecf5870990606001611893565b6000611f2c826118ee565b9050600080611f3b878761217d565b9092509050611f4982613180565b60003411611f995760405162461bcd60e51b815260206004820152600860248201527f534c3a434f4d3a320000000000000000000000000000000000000000000000006044820152606401610793565b8015611fd25760405162461bcd60e51b81526020600482015260086024820152670534c3a48534f3a360c41b6044820152606401610793565b611fdc8260ff1c90565b6120285760405162461bcd60e51b815260206004820152600860248201527f534c3a48534f3a310000000000000000000000000000000000000000000000006044820152606401610793565b6000612035846001613b33565b905060008061204c346115bc8b611af98588612a82565b909250905060a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a51000026120a1606461271060a889901c65ffffffffffff1660a08a901c60ff166004021b64e8d4a51000025b91906131f3565b106120d95760405162461bcd60e51b815260206004820152600860248201526714d30e93d0940e8d60c21b6044820152606401610793565b600083815260018b01602052604081208691826001600160a01b03168152602081019190915260400160002055818a556121718160a887901c65ffffffffffff1660a088901c60ff166004021b64e8d4a510000260a885901c65ffffffffffff1660a086901c60ff166004021b64e8d4a51000026121579190613ba3565b6121619190613b33565b6001600160a01b038a1690612593565b50505050505050505050565b8154600081158061219f5750816001600160a01b0316836001600160a01b0316145b6121f1578360010160006121ba8460d81c640fffffffff1690565b81526020019081526020016000206000846001600160a01b03166001600160a01b03168152602001908152602001600020546121f3565b815b90509250929050565b6000818152600260205260408120546001600160a01b0316151561065b565b6000808264e8d4a51000840493505b65ffffffffffff841115612249576001830192508360041c935061222a565b828460081b1793508360081c836004021b64e8d4a5100081028203925050507fffffffffff00000000000000ffffffffffffffffffffffffffffffffffffffff841693508260a01b841791509250929050565b600082815260208490526040902054806122e55760405162461bcd60e51b815260206004820152600a6024820152690313135353a5354463a360b41b6044820152606401610793565b6122ef81836132b1565b505060008481526020868152604080832084905585835260018801909152812080549293509061231e83613c12565b909155505060408051848152602081018490527f452c5f777db10bd58f64d8bc58668d14487d008ff527ca431853ea22e195f1769101611893565b825460008261236f8360d81c640fffffffff1690565b1461237b57600061237d565b815b9150811580159061239f5750816001600160a01b0316846001600160a01b0316145b6123cd57600083815260018601602090815260408083206001600160a01b03881684529091529020546123cf565b815b9050935093915050565b6000826124285760405162461bcd60e51b815260206004820152600760248201527f534c3a43433a31000000000000000000000000000000000000000000000000006044820152606401610793565b600061243b8560d81c640fffffffff1690565b831190506124498560ff1c90565b8061246d5750846001600160a01b0316866001600160a01b031614801561246d5750805b9695505050505050565b600082815260208490526040902054806124c05760405162461bcd60e51b815260206004820152600a6024820152690313135353a5354463a360b41b6044820152606401610793565b600082815260018501602052604090205461251d5760405162461bcd60e51b815260206004820152600b60248201527f313135353a534254463a310000000000000000000000000000000000000000006044820152606401610793565b6000828152600185016020526040812080549161253983613c12565b9091555061254990508183613408565b506000848152602086815260409182902083905581518681529081018590529192507f452c5f777db10bd58f64d8bc58668d14487d008ff527ca431853ea22e195f1769101611893565b804710156125e35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610793565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612630576040519150601f19603f3d011682016040523d82523d6000602084013e612635565b606091505b50509050806108345760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610793565b60006126b7826118ee565b90506000806126c6878761217d565b915091506000341161271a5760405162461bcd60e51b815260206004820152600860248201527f534c3a4f42503a320000000000000000000000000000000000000000000000006044820152606401610793565b816127675760405162461bcd60e51b815260206004820152600660248201527f4e533a303a3000000000000000000000000000000000000000000000000000006044820152606401610793565b6127718160ff1c90565b156127a95760405162461bcd60e51b81526020600482015260086024820152670534c3a48534f3a360c41b6044820152606401610793565b6127ba8260d81c640fffffffff1690565b8311156128095760405162461bcd60e51b815260206004820152600860248201527f534c3a4f42503a330000000000000000000000000000000000000000000000006044820152606401610793565b6001600160a01b038616826001600160a01b03161461286c578187600101600061283a8560d81c640fffffffff1690565b815260200190815260200160002060006128518590565b6001600160a01b031681526020810191909152604001600020555b6000806128bb61289b3464e8d4a5100065ffffffffffff60a888901c16600460ff60a08a901c16021b02613b33565b6115bc8a611af96128b38960d81c640fffffffff1690565b600090612a82565b909250905060a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a510000261290d606461271060a888901c65ffffffffffff1660a089901c60ff166004021b64e8d4a510000261209a565b106129455760405162461bcd60e51b815260206004820152600860248201526714d30e93d0940e8d60c21b6044820152606401610793565b81895561199d8160a886901c65ffffffffffff1660a087901c60ff166004021b64e8d4a510000260a885901c65ffffffffffff1660a086901c60ff166004021b64e8d4a51000026129969190613ba3565b6129a09190613b33565b6001600160a01b03891690612593565b606060ff82168067ffffffffffffffff8111156129dd57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612a06578160200160208202803683370190505b509150600883901c925060005b81811015612a6357600884901c93508360ff16838281518110612a4657634e487b7160e01b600052603260045260246000fd5b602090810291909101015280612a5b81613c12565b915050612a13565b5050919050565b60006019612a788484613ba3565b610eef9190613b70565b6000640fffffffff821115612aa757634e487b7160e01b600052600160045260246000fd5b5060d81b7ff000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff919091161790565b600080612ae0836134f2565b915091508160001415612b355760405162461bcd60e51b815260206004820152600a60248201527f3732313a4d494e543a30000000000000000000000000000000000000000000006044820152606401610793565b838114612b845760405162461bcd60e51b815260206004820152600a60248201527f3732313a4d494e543a31000000000000000000000000000000000000000000006044820152606401610793565b6000612b918686856135bb565b90507fe98dd458321045a46b57bd2d5251a739e0f01750a71e4d3e71cee6c17164dd328582604051612bc4929190613afb565b60405180910390a16000815167ffffffffffffffff811115612bf657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612c1f578160200160208202803683370190505b50905060005b8151811015611a20576001828281518110612c5057634e487b7160e01b600052603260045260246000fd5b602090810291909101015280612c6581613c12565b915050612c25565b60006001600160a01b0384163b15612dc557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612cb1903390899088908890600401613ab6565b602060405180830381600087803b158015612ccb57600080fd5b505af1925050508015612cfb575060408051601f3d908101601f19168201909252612cf89181019061394c565b60015b612dab573d808015612d29576040519150601f19603f3d011682016040523d82523d6000602084013e612d2e565b606091505b508051612da35760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610793565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506112ba565b5060016112ba565b612de830838360405180602001604052806000815250612c6d565b612e4e5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b6001600160a01b03821660009081526003840160205260408120805460019290612e79908490613b33565b9091555050600081815260028401602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b612ef530838360405180602001604052806000815250612c6d565b612f5b5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b3060009081526003840160205260408120805460019290612f7d908490613ba3565b90915550506001600160a01b03821660009081526003840160205260408120805460019290612fad908490613b33565b9091555050600081815260028401602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839230917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a4505050565b6130188382610feb565b6001600160a01b0316336001600160a01b031614801561304057506001600160a01b03821633145b801561305d5750306130528483610f50565b6001600160a01b0316145b6130c35760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b6130cd838261366c565b6001600160a01b038216600090815260038401602052604081208054600192906130f8908490613ba3565b9091555050306000908152600384016020526040812080546001929061311f908490613b33565b9091555050600081815260028401602052604080822080546001600160a01b03191630908117909155905183926001600160a01b038616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a4505050565b610ac48160405160240161319691815260200190565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f27b7cf8500000000000000000000000000000000000000000000000000000000179052613696565b60008080600019858709858702925082811083820303915050806000141561322d576000841161322257600080fd5b508290049050610eef565b80841161323957600080fd5b600084868809808403938111909203919050600061325986196001613b33565b8616958690049560026003880281188089028203028089028203028089028203028089028203028089028203028089029091030260008290038290046001019490940294049390931791909102925050509392505050565b6000806000806132c0866129b0565b905060005b81518160ff16101561332a578560ff16828260ff16815181106132f857634e487b7160e01b600052603260045260246000fd5b6020026020010151141561331857613311816001613b4b565b925061332a565b8061332281613c2d565b9150506132c5565b5061333486613180565b6133408560f81b6136b7565b60008260ff161161337e5760405162461bcd60e51b81526020600482015260086024820152670534c3a50464d3a360c41b6044820152606401610793565b8161338881613bba565b60ff6010600883020190811b198916965088901c945092506133ab905084613180565b8460ff168360ff16146134005760405162461bcd60e51b815260206004820152600860248201527f534c3a50464d3a310000000000000000000000000000000000000000000000006044820152606401610793565b509250925092565b6000806000613416856129b0565b905060005b81518160ff16101561347e57818160ff168151811061344a57634e487b7160e01b600052603260045260246000fd5b60200260200101516000141561346c57613465816001613b4b565b925061347e565b8061347681613c2d565b91505061341b565b5061348885613180565b60008260ff16116134c65760405162461bcd60e51b81526020600482015260086024820152670534c3a50464d3a360c41b6044820152606401610793565b816134d081613bba565b9250506008820260100184901b851792506134ea83613180565b509250929050565b6000806134ff8343612a6a565b9050600061350d8483613746565b9050600061351c600183613ba3565b4090508061356c5760405162461bcd60e51b815260206004820152600760248201527f4550433a53424c000000000000000000000000000000000000000000000000006044820152606401610793565b604080516020810183905290810184905230606090811b6bffffffffffffffffffffffff1916908201526074016040516020818303038152906040528051906020012060001c93505050915091565b6000828152602084905260409020546060901561361a5760405162461bcd60e51b815260206004820152600660248201527f494c3a4d3a3000000000000000000000000000000000000000000000000000006044820152606401610793565b613650600461364860146136318660081c60ff1690565b61363b9190613c4d565b60081b61ff001986161790565b60ff19161790565b600084815260208690526040902081905591506112ba826129b0565b6000818152600483016020526040812080546001600160a01b031916905581906110ae8483610feb565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6040517fff0000000000000000000000000000000000000000000000000000000000000082166024820152610ac49060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f6e18a12800000000000000000000000000000000000000000000000000000000179052613696565b600082613754601984613b84565b610eef9190613b33565b80356001600160a01b038116811461377557600080fd5b919050565b60006020828403121561378b578081fd5b610eef8261375e565b600080604083850312156137a6578081fd5b6137af8361375e565b91506121f36020840161375e565b6000806000606084860312156137d1578081fd5b6137da8461375e565b92506137e86020850161375e565b9150604084013590509250925092565b6000806000806080858703121561380d578081fd5b6138168561375e565b93506138246020860161375e565b925060408501359150606085013567ffffffffffffffff80821115613847578283fd5b818701915087601f83011261385a578283fd5b81358181111561386c5761386c613c9b565b604051601f8201601f19908116603f0116810190838211818310171561389457613894613c9b565b816040528281528a60208487010111156138ac578586fd5b82602086016020830137918201602001949094529598949750929550505050565b600080604083850312156138df578182fd5b6138e88361375e565b9150602083013580151581146138fc578182fd5b809150509250929050565b60008060408385031215613919578182fd5b6139228361375e565b946020939093013593505050565b600060208284031215613941578081fd5b8135610eef81613cb1565b60006020828403121561395d578081fd5b8151610eef81613cb1565b600060208284031215613979578081fd5b5035919050565b60008060408385031215613992578182fd5b50508035926020909101359150565b6000806000606084860312156139b5578283fd5b83359250602084013591506139cc6040850161375e565b90509250925092565b6000806000606084860312156139e9578283fd5b505081359360208301359350604090920135919050565b60008060008060808587031215613a15578384fd5b5050823594602084013594506040840135936060013592509050565b6000815180845260208085019450808401835b83811015613a6057815187529582019590820190600101613a44565b509495945050505050565b60008151808452815b81811015613a9057602081850181015186830182015201613a74565b81811115613aa15782602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261246d6080830184613a6b565b602081526000610eef6020830184613a6b565b8281526040602082015260006112ba6040830184613a31565b838152826020820152606060408201526000610b5a6060830184613a31565b60008219821115613b4657613b46613c6f565b500190565b600060ff821660ff84168060ff03821115613b6857613b68613c6f565b019392505050565b600082613b7f57613b7f613c85565b500490565b6000816000190483118215151615613b9e57613b9e613c6f565b500290565b600082821015613bb557613bb5613c6f565b500390565b600060ff821680613bcd57613bcd613c6f565b6000190192915050565b600181811c90821680613beb57607f821691505b60208210811415613c0c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613c2657613c26613c6f565b5060010190565b600060ff821660ff811415613c4457613c44613c6f565b60010192915050565b600060ff831680613c6057613c60613c85565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610ac457600080fdfea26469706673582212205169566c3a53102d2c7a1d44a4ebc1b265d9e8453682048cb21a5b3bd367327264736f6c63430008040033",
          "opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3FA6 CODESIZE SUB DUP1 PUSH3 0x3FA6 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x19C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x6 DUP2 MSTORE PUSH6 0x139551D1D195 PUSH1 0xD2 SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x13 DUP5 MSTORE PUSH32 0x4E7567672046756E6769626C6520546F6B656E00000000000000000000000000 SWAP1 DUP5 ADD MSTORE DUP2 MLOAD SWAP2 SWAP3 SWAP2 PUSH3 0x97 SWAP2 PUSH1 0x0 SWAP2 PUSH3 0xF6 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0xAD SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0xF6 JUMP JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 DUP3 SWAP1 SHL AND PUSH1 0x80 MSTORE NUMBER PUSH1 0xA0 MSTORE PUSH1 0x40 MLOAD PUSH32 0x6BF6EAFF5E9AF8FBCCB949F4C38CC016936F8775363CCF4224DB160365785D52 SWAP1 PUSH1 0x0 SWAP1 LOG1 POP PUSH3 0x209 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x104 SWAP1 PUSH3 0x1CC JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x128 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x173 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x143 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x173 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x173 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x173 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x156 JUMP JUMPDEST POP PUSH3 0x181 SWAP3 SWAP2 POP PUSH3 0x185 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x181 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x186 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1AE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1C5 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x1E1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x203 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH2 0x3CFD PUSH3 0x2A9 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x4DB ADD MSTORE DUP2 DUP2 PUSH2 0x858 ADD MSTORE DUP2 DUP2 PUSH2 0xA25 ADD MSTORE DUP2 DUP2 PUSH2 0xAA0 ADD MSTORE DUP2 DUP2 PUSH2 0xB6A ADD MSTORE DUP2 DUP2 PUSH2 0xBC4 ADD MSTORE DUP2 DUP2 PUSH2 0xC22 ADD MSTORE DUP2 DUP2 PUSH2 0xC7E ADD MSTORE DUP2 DUP2 PUSH2 0xE1D ADD MSTORE DUP2 DUP2 PUSH2 0xE63 ADD MSTORE PUSH2 0xF2C ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x424 ADD MSTORE DUP2 DUP2 PUSH2 0x87C ADD MSTORE DUP2 DUP2 PUSH2 0xA7F ADD MSTORE DUP2 DUP2 PUSH2 0xBE8 ADD MSTORE DUP2 DUP2 PUSH2 0xC44 ADD MSTORE DUP2 DUP2 PUSH2 0xCA0 ADD MSTORE DUP2 DUP2 PUSH2 0xE86 ADD MSTORE PUSH2 0xF0B ADD MSTORE PUSH2 0x3CFD PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CD JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8F4C1D4F GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xA7F0B3DE GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xD636FEAE GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xD636FEAE EQ PUSH2 0x55E JUMPI DUP1 PUSH4 0xD96073CF EQ PUSH2 0x571 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x591 JUMPI DUP1 PUSH4 0xF4F98AD5 EQ PUSH2 0x5B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA7F0B3DE EQ PUSH2 0x4C9 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x4FD JUMPI DUP1 PUSH4 0xC3490263 EQ PUSH2 0x51D JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x53D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x96CFD827 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x96CFD827 EQ PUSH2 0x470 JUMPI DUP1 PUSH4 0x9FA6DD35 EQ PUSH2 0x483 JUMPI DUP1 PUSH4 0xA0712D68 EQ PUSH2 0x496 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x4A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8F4C1D4F EQ PUSH2 0x412 JUMPI DUP1 PUSH4 0x900CF0CF EQ PUSH2 0x446 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x45B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42842E0E GT PUSH2 0x16F JUMPI DUP1 PUSH4 0x70A08231 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x382 JUMPI DUP1 PUSH4 0x761610FC EQ PUSH2 0x3B0 JUMPI DUP1 PUSH4 0x78B38F36 EQ PUSH2 0x3C3 JUMPI DUP1 PUSH4 0x884C66AE EQ PUSH2 0x3F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42842E0E EQ PUSH2 0x302 JUMPI DUP1 PUSH4 0x49B44F98 EQ PUSH2 0x322 JUMPI DUP1 PUSH4 0x4DD1496B EQ PUSH2 0x342 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1AB JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x261 JUMPI DUP1 PUSH4 0xCF27C2A EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0x1CD4AD3A EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x207 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x229 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x1ED CALLDATASIZE PUSH1 0x4 PUSH2 0x3930 JUMP JUMPDEST PUSH2 0x5C4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21C PUSH2 0x661 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FE SWAP2 SWAP1 PUSH2 0x3AE8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x235 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x244 CALLDATASIZE PUSH1 0x4 PUSH2 0x3968 JUMP JUMPDEST PUSH2 0x6F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x27C CALLDATASIZE PUSH1 0x4 PUSH2 0x3907 JUMP JUMPDEST PUSH2 0x701 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x281 PUSH2 0x291 CALLDATASIZE PUSH1 0x4 PUSH2 0x39D5 JUMP JUMPDEST PUSH2 0x839 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B6 PUSH2 0x2B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3968 JUMP JUMPDEST PUSH2 0x8A0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP6 AND DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x1FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x2FD CALLDATASIZE PUSH1 0x4 PUSH2 0x37BD JUMP JUMPDEST PUSH2 0x946 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x31D CALLDATASIZE PUSH1 0x4 PUSH2 0x37BD JUMP JUMPDEST PUSH2 0x9C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x33D CALLDATASIZE PUSH1 0x4 PUSH2 0x39D5 JUMP JUMPDEST PUSH2 0x9DC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x35D CALLDATASIZE PUSH1 0x4 PUSH2 0x3A00 JUMP JUMPDEST PUSH2 0xA03 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x37D CALLDATASIZE PUSH1 0x4 PUSH2 0x3968 JUMP JUMPDEST PUSH2 0xA52 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A2 PUSH2 0x39D CALLDATASIZE PUSH1 0x4 PUSH2 0x377A JUMP JUMPDEST PUSH2 0xA5E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FE JUMP JUMPDEST PUSH2 0x281 PUSH2 0x3BE CALLDATASIZE PUSH1 0x4 PUSH2 0x3968 JUMP JUMPDEST PUSH2 0xA6A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E3 PUSH2 0x3DE CALLDATASIZE PUSH1 0x4 PUSH2 0x3968 JUMP JUMPDEST PUSH2 0xAC7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3B14 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A2 PUSH2 0x40D CALLDATASIZE PUSH1 0x4 PUSH2 0x39A1 JUMP JUMPDEST PUSH2 0xAE4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A2 PUSH2 0xB63 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x467 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21C PUSH2 0xB93 JUMP JUMPDEST PUSH2 0x281 PUSH2 0x47E CALLDATASIZE PUSH1 0x4 PUSH2 0x39D5 JUMP JUMPDEST PUSH2 0xBA5 JUMP JUMPDEST PUSH2 0x281 PUSH2 0x491 CALLDATASIZE PUSH1 0x4 PUSH2 0x3968 JUMP JUMPDEST PUSH2 0xC0C JUMP JUMPDEST PUSH2 0x281 PUSH2 0x4A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x3968 JUMP JUMPDEST PUSH2 0xC68 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x4C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x38CD JUMP JUMPDEST PUSH2 0xCC8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A2 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x509 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x518 CALLDATASIZE PUSH1 0x4 PUSH2 0x37F8 JUMP JUMPDEST PUSH2 0xD8D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x529 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x538 CALLDATASIZE PUSH1 0x4 PUSH2 0x3980 JUMP JUMPDEST PUSH2 0xE09 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x549 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21C PUSH2 0x558 CALLDATASIZE PUSH1 0x4 PUSH2 0x3968 JUMP JUMPDEST POP PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH2 0x281 PUSH2 0x56C CALLDATASIZE PUSH1 0x4 PUSH2 0x39D5 JUMP JUMPDEST PUSH2 0xE43 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x58C CALLDATASIZE PUSH1 0x4 PUSH2 0x3980 JUMP JUMPDEST PUSH2 0xEAA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x59D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x5AC CALLDATASIZE PUSH1 0x4 PUSH2 0x3794 JUMP JUMPDEST PUSH2 0xEC3 JUMP JUMPDEST PUSH2 0x281 PUSH2 0x5BF CALLDATASIZE PUSH1 0x4 PUSH2 0x3968 JUMP JUMPDEST PUSH2 0xEF6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x627 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x65B JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 ADD DUP1 SLOAD PUSH2 0x672 SWAP1 PUSH2 0x3BD7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x69E SWAP1 PUSH2 0x3BD7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x6EB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6C0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x6EB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x6CE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x65B DUP2 DUP4 PUSH2 0xF50 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x70D DUP2 DUP4 PUSH2 0xFEB JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x79C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x7B8 JUMPI POP PUSH2 0x7B8 DUP2 CALLER PUSH2 0xEC3 JUMP JUMPDEST PUSH2 0x82A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F74206F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E6572206E6F7220617070726F76656420666F7220616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x834 DUP4 DUP4 PUSH2 0x1078 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH2 0x834 SWAP2 PUSH32 0x0 DUP7 DUP7 DUP7 PUSH32 0x0 PUSH2 0x10E7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH2 0x8C0 SWAP1 DUP3 PUSH2 0x11DF JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x8FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH7 0x4E533A47533A3 PUSH1 0xCC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST DUP1 SWAP5 POP PUSH1 0xA8 DUP2 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP3 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL SWAP4 POP PUSH2 0x930 DUP2 PUSH1 0xD8 SHR PUSH5 0xFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP3 POP PUSH2 0x93C DUP2 PUSH1 0xFF SHR SWAP1 JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH2 0x950 CALLER DUP3 PUSH2 0x11F7 JUMP JUMPDEST PUSH2 0x9B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x834 DUP4 DUP4 DUP4 PUSH2 0x12C2 JUMP JUMPDEST PUSH2 0x834 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xD8D JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH2 0x834 SWAP2 PUSH1 0x6 DUP6 DUP6 DUP9 PUSH2 0x1491 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH2 0xA4C SWAP2 PUSH1 0x6 DUP8 PUSH32 0x0 DUP9 DUP8 DUP10 PUSH2 0x1623 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x65B DUP2 DUP4 PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x65B DUP2 DUP4 PUSH2 0x17AE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xAC4 SWAP1 DUP3 PUSH32 0x0 PUSH32 0x0 PUSH2 0x184C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0xAD7 PUSH1 0x6 DUP6 PUSH2 0x18A1 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 PUSH2 0xAFF SWAP1 DUP5 DUP7 PUSH2 0x18D4 JUMP JUMPDEST SWAP2 POP POP DUP1 PUSH2 0xB39 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH7 0x4E533A47533A3 PUSH1 0xCC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0xA8 DUP2 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP3 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB8E PUSH32 0x0 PUSH2 0x18EE JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x672 SWAP1 PUSH2 0x3BD7 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH2 0x834 SWAP2 PUSH32 0x0 DUP7 DUP7 DUP7 PUSH32 0x0 PUSH2 0x18FA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xAC4 SWAP1 PUSH1 0x6 PUSH32 0x0 DUP5 PUSH32 0x0 PUSH2 0x19A8 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xCC4 SWAP1 PUSH1 0x6 PUSH32 0x0 DUP5 PUSH32 0x0 PUSH2 0x1A2A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER EQ ISZERO PUSH2 0xD21 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xD97 CALLER DUP4 PUSH2 0x11F7 JUMP JUMPDEST PUSH2 0xDFD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0xA4C DUP5 DUP5 DUP5 DUP5 PUSH2 0x1B9A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0xCC4 SWAP2 PUSH32 0x0 DUP6 DUP6 PUSH2 0x1C23 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH2 0x834 SWAP2 DUP6 PUSH32 0x0 DUP7 DUP7 PUSH32 0x0 PUSH2 0x1D1B JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0xCC4 SWAP2 DUP5 DUP5 PUSH2 0x1E1C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xAC4 SWAP1 DUP3 PUSH32 0x0 PUSH32 0x0 PUSH2 0x1ED6 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xFCB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76656420717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0xEEF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F776E657220717565727920666F72206E6F6E6578697374 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x656E7420746F6B656E0000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 SWAP2 PUSH2 0x10AE SWAP1 DUP4 PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x100 DUP4 LT PUSH2 0x1122 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH7 0x4D4C3A43493A3 PUSH1 0xCC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST CALLER PUSH2 0x1136 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1177 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x4155433A54543A33 PUSH1 0xC0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x1183 DUP8 DUP4 DUP4 DUP9 PUSH2 0x1F21 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLVALUE PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0xF562263F29883BF3519F3733BB30B47C831BFE9809884430857D8CF29571D554 SWAP1 PUSH1 0x80 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x11EC DUP5 DUP5 PUSH2 0x217D JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1202 DUP3 PUSH2 0x21FC JUMP JUMPDEST PUSH2 0x1263 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F70657261746F7220717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x126F DUP2 DUP5 PUSH2 0xFEB JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x12AA JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x129F DUP5 PUSH2 0x6F5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x12BA JUMPI POP PUSH2 0x12BA DUP2 DUP6 PUSH2 0xEC3 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x12D7 PUSH1 0x0 DUP4 PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1353 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E73666572206F6620746F6B656E20746861742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x73206E6F74206F776E0000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x13CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x13D9 PUSH1 0x0 DUP3 PUSH2 0x1078 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x1402 SWAP1 DUP5 SWAP1 PUSH2 0x3BA3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x1430 SWAP1 DUP5 SWAP1 PUSH2 0x3B33 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP5 SWAP4 SWAP2 DUP8 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST CALLER PUSH2 0x14A5 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x14E6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x4155433A54543A33 PUSH1 0xC0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x100 DUP4 LT PUSH2 0x1537 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D4C3A53493A3000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1543 DUP8 DUP4 PUSH2 0x217D JUMP JUMPDEST POP SWAP1 POP DUP1 ISZERO PUSH2 0x157E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH7 0x4E533A53533A3 PUSH1 0xCC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x15C2 DUP4 PUSH2 0x15BC PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP6 AND DUP7 OR JUMPDEST SWAP1 POP PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x221B JUMP JUMPDEST POP DUP1 DUP9 SSTORE SWAP1 POP PUSH2 0x15DC DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP7 PUSH2 0x229C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0xC8032E5C721106F3E30AD0F1A45E919C8D034CF788842FF336B0150F0FBCC60E SWAP1 PUSH1 0x60 ADD PUSH2 0x11CE JUMP JUMPDEST CALLER PUSH2 0x1637 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1678 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x4155433A54543A33 PUSH1 0xC0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x100 DUP4 LT PUSH2 0x16B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH7 0x4D4C3A43493A3 PUSH1 0xCC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16BE DUP7 PUSH2 0x18EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x16CE DUP12 DUP6 DUP8 PUSH2 0x2359 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x1 DUP15 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SSTORE SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x1704 DUP5 DUP4 DUP4 DUP7 PUSH2 0x23D9 JUMP JUMPDEST ISZERO PUSH2 0x1726 JUMPI PUSH1 0x0 DUP12 SSTORE PUSH2 0x1721 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP9 PUSH2 0x2477 JUMP JUMPDEST PUSH2 0x1751 JUMP JUMPDEST PUSH2 0x1751 PUSH1 0xA8 DUP3 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP4 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL JUMPDEST CALLER SWAP1 PUSH2 0x2593 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x38195A074A64067740045E77CA5873F34A0DF243A8AC9ECC39452C47E7061E47 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x182C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2062616C616E636520717565727920666F7220746865207A65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x726F206164647265737300000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1858 DUP5 CALLER DUP5 DUP5 PUSH2 0x26AC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE CALLVALUE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2D57124CFA4E385AFD5CC9D6F24874BDD21303AC9131D7CB674BE2A5855C7002 SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 PUSH1 0x60 SWAP1 PUSH2 0x18BE DUP2 PUSH2 0x29B0 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 DUP4 SWAP1 SHR DUP2 AND SWAP9 SWAP3 AND SWAP7 POP SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x18E2 DUP6 DUP6 DUP6 PUSH2 0x2359 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x65B DUP3 NUMBER PUSH2 0x2A6A JUMP JUMPDEST CALLER PUSH2 0x190E DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x194F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x4155433A54543A33 PUSH1 0xC0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x195C DUP10 DUP6 PUSH2 0x217D JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH1 0x0 EQ DUP1 ISZERO PUSH2 0x1975 JUMPI POP PUSH2 0x1975 DUP3 PUSH1 0xFF SHR SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x198E JUMPI PUSH2 0x1989 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x10E7 JUMP JUMPDEST PUSH2 0x199D JUMP JUMPDEST PUSH2 0x199D DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x1D1B JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19B3 DUP5 PUSH2 0x18EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x19C2 DUP9 CALLER PUSH2 0x11DF JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP5 DUP4 EQ DUP1 ISZERO PUSH2 0x19D3 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x19EB JUMPI PUSH2 0x19E5 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1A2A JUMP JUMPDEST POP PUSH2 0x1A20 JUMP JUMPDEST DUP1 ISZERO DUP1 ISZERO PUSH2 0x19FE JUMPI POP PUSH2 0x19FE DUP3 PUSH1 0xFF SHR SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1A14 JUMPI PUSH2 0x1A0F DUP9 DUP7 DUP7 DUP10 PUSH2 0x1ED6 JUMP JUMPDEST PUSH2 0x1A20 JUMP JUMPDEST PUSH2 0x1A20 DUP9 DUP7 DUP7 DUP10 PUSH2 0x184C JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1A36 DUP6 PUSH2 0x18EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x1A45 DUP10 CALLER PUSH2 0x11DF JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP6 DUP4 EQ PUSH2 0x1A98 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E533A4D3A300000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x1AE6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E533A4D3A440000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x1B07 CALLVALUE PUSH2 0x15BC CALLER PUSH2 0x1AF9 PUSH1 0x0 DUP9 PUSH2 0x2A82 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND OR SWAP1 JUMP JUMPDEST POP DUP1 DUP11 SSTORE SWAP4 POP CALLVALUE ISZERO PUSH2 0x1B26 JUMPI PUSH2 0x1B26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND CALLVALUE PUSH2 0x2593 JUMP JUMPDEST PUSH2 0x1B31 DUP9 DUP8 DUP10 PUSH2 0x2AD4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE PUSH5 0xE8D4A51000 PUSH6 0xFFFFFFFFFFFF PUSH1 0xA8 DUP9 SWAP1 SHR AND PUSH1 0x4 PUSH1 0xFF PUSH1 0xA0 DUP11 SWAP1 SHR AND MUL SHL MUL DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH32 0x4E3883C75CC9C752BB1DB2E406A822E4A75067AE77AD9A0A4D179F2709B9E1F6 SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1BA5 DUP5 DUP5 DUP5 PUSH2 0x12C2 JUMP JUMPDEST PUSH2 0x1BB1 DUP5 DUP5 DUP5 DUP5 PUSH2 0x2C6D JUMP JUMPDEST PUSH2 0xA4C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C2E DUP5 PUSH2 0x18EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x1C3E DUP9 CALLER DUP7 PUSH2 0x18D4 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 DUP12 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP1 DUP6 MSTORE SWAP3 MSTORE DUP3 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE SWAP2 SWAP4 POP SWAP2 POP PUSH2 0x1C6E SWAP1 DUP4 DUP4 DUP7 PUSH2 0x23D9 JUMP JUMPDEST ISZERO PUSH2 0x1CAA JUMPI PUSH1 0x0 DUP9 SSTORE PUSH2 0x1C88 DUP3 PUSH1 0xD8 SHR PUSH5 0xFFFFFFFFF AND SWAP1 JUMP JUMPDEST DUP5 EQ ISZERO PUSH2 0x1C9F JUMPI PUSH2 0x1C9A DUP8 CALLER DUP8 PUSH2 0x2DCD JUMP JUMPDEST PUSH2 0x1CD2 JUMP JUMPDEST PUSH2 0x1C9A DUP8 CALLER DUP8 PUSH2 0x2EDA JUMP JUMPDEST PUSH2 0x1CD2 PUSH1 0xA8 DUP3 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP4 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL PUSH2 0x174A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE CALLER DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH32 0xD79254E5DABA749BAA8BA954E77BBBB18EFEF113A8070D00DF9A188D81932426 SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x100 DUP4 LT PUSH2 0x1D6C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D4C3A4F493A3000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST CALLER PUSH2 0x1D80 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1DC1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x4155433A54543A33 PUSH1 0xC0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x1DCD DUP8 DUP4 DUP4 DUP9 PUSH2 0x26AC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLVALUE PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0xE237F23F900F35D5F1A406BA97CCFDFFE082FFCDA87098765811817C2C14AC87 SWAP1 PUSH1 0x80 ADD PUSH2 0x11CE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E28 DUP6 CALLER PUSH2 0x11DF JUMP JUMPDEST POP SWAP1 POP DUP1 ISZERO PUSH2 0x1E63 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH7 0x4E533A53533A3 PUSH1 0xCC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x1E7E DUP3 PUSH2 0x15BC PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP6 AND CALLER OR PUSH2 0x1595 JUMP JUMPDEST POP DUP1 DUP7 SSTORE SWAP1 POP PUSH2 0x1E8F DUP5 CALLER DUP6 PUSH2 0x300E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x48B43F133AC721CB5F6E2A3D8AB7CAEE987BCCFB4197537CF43C9F907F057F3A SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1EE2 DUP5 CALLER DUP5 DUP5 PUSH2 0x1F21 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE CALLVALUE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x94925310677B39991F64178494FAD708BEB62F73F36BB0BAA493476ECF58709 SWAP1 PUSH1 0x60 ADD PUSH2 0x1893 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F2C DUP3 PUSH2 0x18EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x1F3B DUP8 DUP8 PUSH2 0x217D JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x1F49 DUP3 PUSH2 0x3180 JUMP JUMPDEST PUSH1 0x0 CALLVALUE GT PUSH2 0x1F99 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x534C3A434F4D3A32000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1FD2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x534C3A48534F3A3 PUSH1 0xC4 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x1FDC DUP3 PUSH1 0xFF SHR SWAP1 JUMP JUMPDEST PUSH2 0x2028 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x534C3A48534F3A31000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2035 DUP5 PUSH1 0x1 PUSH2 0x3B33 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x204C CALLVALUE PUSH2 0x15BC DUP12 PUSH2 0x1AF9 DUP6 DUP9 PUSH2 0x2A82 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0xA8 DUP3 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP4 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL PUSH2 0x20A1 PUSH1 0x64 PUSH2 0x2710 PUSH1 0xA8 DUP10 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP11 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL JUMPDEST SWAP2 SWAP1 PUSH2 0x31F3 JUMP JUMPDEST LT PUSH2 0x20D9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x14D30E93D0940E8D PUSH1 0xC2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 DUP12 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP7 SWAP2 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SSTORE DUP2 DUP11 SSTORE PUSH2 0x2171 DUP2 PUSH1 0xA8 DUP8 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP9 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL PUSH1 0xA8 DUP6 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP7 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL PUSH2 0x2157 SWAP2 SWAP1 PUSH2 0x3BA3 JUMP JUMPDEST PUSH2 0x2161 SWAP2 SWAP1 PUSH2 0x3B33 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 PUSH2 0x2593 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 DUP2 ISZERO DUP1 PUSH2 0x219F JUMPI POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x21F1 JUMPI DUP4 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x21BA DUP5 PUSH1 0xD8 SHR PUSH5 0xFFFFFFFFF AND SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x21F3 JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0x65B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH5 0xE8D4A51000 DUP5 DIV SWAP4 POP JUMPDEST PUSH6 0xFFFFFFFFFFFF DUP5 GT ISZERO PUSH2 0x2249 JUMPI PUSH1 0x1 DUP4 ADD SWAP3 POP DUP4 PUSH1 0x4 SHR SWAP4 POP PUSH2 0x222A JUMP JUMPDEST DUP3 DUP5 PUSH1 0x8 SHL OR SWAP4 POP DUP4 PUSH1 0x8 SHR DUP4 PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 DUP2 MUL DUP3 SUB SWAP3 POP POP POP PUSH32 0xFFFFFFFFFF00000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP4 POP DUP3 PUSH1 0xA0 SHL DUP5 OR SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x22E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x313135353A5354463A3 PUSH1 0xB4 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x22EF DUP2 DUP4 PUSH2 0x32B1 JUMP JUMPDEST POP POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 SWAP1 SSTORE DUP6 DUP4 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP SWAP1 PUSH2 0x231E DUP4 PUSH2 0x3C12 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x452C5F777DB10BD58F64D8BC58668D14487D008FF527CA431853EA22E195F176 SWAP2 ADD PUSH2 0x1893 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 DUP3 PUSH2 0x236F DUP4 PUSH1 0xD8 SHR PUSH5 0xFFFFFFFFF AND SWAP1 JUMP JUMPDEST EQ PUSH2 0x237B JUMPI PUSH1 0x0 PUSH2 0x237D JUMP JUMPDEST DUP2 JUMPDEST SWAP2 POP DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x239F JUMPI POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x23CD JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 DUP7 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x23CF JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2428 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x534C3A43433A3100000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x243B DUP6 PUSH1 0xD8 SHR PUSH5 0xFFFFFFFFF AND SWAP1 JUMP JUMPDEST DUP4 GT SWAP1 POP PUSH2 0x2449 DUP6 PUSH1 0xFF SHR SWAP1 JUMP JUMPDEST DUP1 PUSH2 0x246D JUMPI POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x246D JUMPI POP DUP1 JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x24C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x313135353A5354463A3 PUSH1 0xB4 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x251D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x313135353A534254463A31000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP2 PUSH2 0x2539 DUP4 PUSH2 0x3C12 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x2549 SWAP1 POP DUP2 DUP4 PUSH2 0x3408 JUMP JUMPDEST POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH32 0x452C5F777DB10BD58F64D8BC58668D14487D008FF527CA431853EA22E195F176 SWAP2 ADD PUSH2 0x1893 JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x25E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2630 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2635 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x834 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26B7 DUP3 PUSH2 0x18EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x26C6 DUP8 DUP8 PUSH2 0x217D JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 CALLVALUE GT PUSH2 0x271A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x534C3A4F42503A32000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST DUP2 PUSH2 0x2767 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E533A303A300000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x2771 DUP2 PUSH1 0xFF SHR SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x27A9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x534C3A48534F3A3 PUSH1 0xC4 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x27BA DUP3 PUSH1 0xD8 SHR PUSH5 0xFFFFFFFFF AND SWAP1 JUMP JUMPDEST DUP4 GT ISZERO PUSH2 0x2809 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x534C3A4F42503A33000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x286C JUMPI DUP2 DUP8 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x283A DUP6 PUSH1 0xD8 SHR PUSH5 0xFFFFFFFFF AND SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x2851 DUP6 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SSTORE JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x28BB PUSH2 0x289B CALLVALUE PUSH5 0xE8D4A51000 PUSH6 0xFFFFFFFFFFFF PUSH1 0xA8 DUP9 SWAP1 SHR AND PUSH1 0x4 PUSH1 0xFF PUSH1 0xA0 DUP11 SWAP1 SHR AND MUL SHL MUL PUSH2 0x3B33 JUMP JUMPDEST PUSH2 0x15BC DUP11 PUSH2 0x1AF9 PUSH2 0x28B3 DUP10 PUSH1 0xD8 SHR PUSH5 0xFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH2 0x2A82 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0xA8 DUP3 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP4 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL PUSH2 0x290D PUSH1 0x64 PUSH2 0x2710 PUSH1 0xA8 DUP9 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP10 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL PUSH2 0x209A JUMP JUMPDEST LT PUSH2 0x2945 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x14D30E93D0940E8D PUSH1 0xC2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST DUP2 DUP10 SSTORE PUSH2 0x199D DUP2 PUSH1 0xA8 DUP7 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP8 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL PUSH1 0xA8 DUP6 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP7 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL PUSH2 0x2996 SWAP2 SWAP1 PUSH2 0x3BA3 JUMP JUMPDEST PUSH2 0x29A0 SWAP2 SWAP1 PUSH2 0x3B33 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH2 0x2593 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP3 AND DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x29DD JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2A06 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x8 DUP4 SWAP1 SHR SWAP3 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2A63 JUMPI PUSH1 0x8 DUP5 SWAP1 SHR SWAP4 POP DUP4 PUSH1 0xFF AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2A46 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0x2A5B DUP2 PUSH2 0x3C12 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2A13 JUMP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x19 PUSH2 0x2A78 DUP5 DUP5 PUSH2 0x3BA3 JUMP JUMPDEST PUSH2 0xEEF SWAP2 SWAP1 PUSH2 0x3B70 JUMP JUMPDEST PUSH1 0x0 PUSH5 0xFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2AA7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0xD8 SHL PUSH32 0xF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2AE0 DUP4 PUSH2 0x34F2 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 EQ ISZERO PUSH2 0x2B35 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x3732313A4D494E543A3000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST DUP4 DUP2 EQ PUSH2 0x2B84 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x3732313A4D494E543A3100000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B91 DUP7 DUP7 DUP6 PUSH2 0x35BB JUMP JUMPDEST SWAP1 POP PUSH32 0xE98DD458321045A46B57BD2D5251A739E0F01750A71E4D3E71CEE6C17164DD32 DUP6 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2BC4 SWAP3 SWAP2 SWAP1 PUSH2 0x3AFB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BF6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2C1F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x1A20 JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2C50 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0x2C65 DUP2 PUSH2 0x3C12 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2C25 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x2DC5 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x2CB1 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x3AB6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2CCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2CFB JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2CF8 SWAP2 DUP2 ADD SWAP1 PUSH2 0x394C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2DAB JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2D29 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2D2E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH2 0x2DA3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x12BA JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x12BA JUMP JUMPDEST PUSH2 0x2DE8 ADDRESS DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2C6D JUMP JUMPDEST PUSH2 0x2E4E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x2E79 SWAP1 DUP5 SWAP1 PUSH2 0x3B33 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x2EF5 ADDRESS DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2C6D JUMP JUMPDEST PUSH2 0x2F5B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST ADDRESS PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x2F7D SWAP1 DUP5 SWAP1 PUSH2 0x3BA3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x2FAD SWAP1 DUP5 SWAP1 PUSH2 0x3B33 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 SWAP3 ADDRESS SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x3018 DUP4 DUP3 PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x3040 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER EQ JUMPDEST DUP1 ISZERO PUSH2 0x305D JUMPI POP ADDRESS PUSH2 0x3052 DUP5 DUP4 PUSH2 0xF50 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x30C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x30CD DUP4 DUP3 PUSH2 0x366C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x30F8 SWAP1 DUP5 SWAP1 PUSH2 0x3BA3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP ADDRESS PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x311F SWAP1 DUP5 SWAP1 PUSH2 0x3B33 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND ADDRESS SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0xAC4 DUP2 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3196 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x27B7CF8500000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x3696 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 NOT DUP6 DUP8 MULMOD DUP6 DUP8 MUL SWAP3 POP DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP DUP1 PUSH1 0x0 EQ ISZERO PUSH2 0x322D JUMPI PUSH1 0x0 DUP5 GT PUSH2 0x3222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 SWAP1 DIV SWAP1 POP PUSH2 0xEEF JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x3239 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD DUP1 DUP5 SUB SWAP4 DUP2 GT SWAP1 SWAP3 SUB SWAP2 SWAP1 POP PUSH1 0x0 PUSH2 0x3259 DUP7 NOT PUSH1 0x1 PUSH2 0x3B33 JUMP JUMPDEST DUP7 AND SWAP6 DUP7 SWAP1 DIV SWAP6 PUSH1 0x2 PUSH1 0x3 DUP9 MUL DUP2 XOR DUP1 DUP10 MUL DUP3 SUB MUL DUP1 DUP10 MUL DUP3 SUB MUL DUP1 DUP10 MUL DUP3 SUB MUL DUP1 DUP10 MUL DUP3 SUB MUL DUP1 DUP10 MUL DUP3 SUB MUL DUP1 DUP10 MUL SWAP1 SWAP2 SUB MUL PUSH1 0x0 DUP3 SWAP1 SUB DUP3 SWAP1 DIV PUSH1 0x1 ADD SWAP5 SWAP1 SWAP5 MUL SWAP5 DIV SWAP4 SWAP1 SWAP4 OR SWAP2 SWAP1 SWAP2 MUL SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x32C0 DUP7 PUSH2 0x29B0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x332A JUMPI DUP6 PUSH1 0xFF AND DUP3 DUP3 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x32F8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ ISZERO PUSH2 0x3318 JUMPI PUSH2 0x3311 DUP2 PUSH1 0x1 PUSH2 0x3B4B JUMP JUMPDEST SWAP3 POP PUSH2 0x332A JUMP JUMPDEST DUP1 PUSH2 0x3322 DUP2 PUSH2 0x3C2D JUMP JUMPDEST SWAP2 POP POP PUSH2 0x32C5 JUMP JUMPDEST POP PUSH2 0x3334 DUP7 PUSH2 0x3180 JUMP JUMPDEST PUSH2 0x3340 DUP6 PUSH1 0xF8 SHL PUSH2 0x36B7 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0xFF AND GT PUSH2 0x337E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x534C3A50464D3A3 PUSH1 0xC4 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST DUP2 PUSH2 0x3388 DUP2 PUSH2 0x3BBA JUMP JUMPDEST PUSH1 0xFF PUSH1 0x10 PUSH1 0x8 DUP4 MUL ADD SWAP1 DUP2 SHL NOT DUP10 AND SWAP7 POP DUP9 SWAP1 SHR SWAP5 POP SWAP3 POP PUSH2 0x33AB SWAP1 POP DUP5 PUSH2 0x3180 JUMP JUMPDEST DUP5 PUSH1 0xFF AND DUP4 PUSH1 0xFF AND EQ PUSH2 0x3400 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x534C3A50464D3A31000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3416 DUP6 PUSH2 0x29B0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x347E JUMPI DUP2 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x344A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x346C JUMPI PUSH2 0x3465 DUP2 PUSH1 0x1 PUSH2 0x3B4B JUMP JUMPDEST SWAP3 POP PUSH2 0x347E JUMP JUMPDEST DUP1 PUSH2 0x3476 DUP2 PUSH2 0x3C2D JUMP JUMPDEST SWAP2 POP POP PUSH2 0x341B JUMP JUMPDEST POP PUSH2 0x3488 DUP6 PUSH2 0x3180 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0xFF AND GT PUSH2 0x34C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x534C3A50464D3A3 PUSH1 0xC4 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST DUP2 PUSH2 0x34D0 DUP2 PUSH2 0x3BBA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x8 DUP3 MUL PUSH1 0x10 ADD DUP5 SWAP1 SHL DUP6 OR SWAP3 POP PUSH2 0x34EA DUP4 PUSH2 0x3180 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x34FF DUP4 NUMBER PUSH2 0x2A6A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x350D DUP5 DUP4 PUSH2 0x3746 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x351C PUSH1 0x1 DUP4 PUSH2 0x3BA3 JUMP JUMPDEST BLOCKHASH SWAP1 POP DUP1 PUSH2 0x356C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4550433A53424C00000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE ADDRESS PUSH1 0x60 SWAP1 DUP2 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP3 ADD MSTORE PUSH1 0x74 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP4 POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x60 SWAP1 ISZERO PUSH2 0x361A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494C3A4D3A300000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x3650 PUSH1 0x4 PUSH2 0x3648 PUSH1 0x14 PUSH2 0x3631 DUP7 PUSH1 0x8 SHR PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x363B SWAP2 SWAP1 PUSH2 0x3C4D JUMP JUMPDEST PUSH1 0x8 SHL PUSH2 0xFF00 NOT DUP7 AND OR SWAP1 JUMP JUMPDEST PUSH1 0xFF NOT AND OR SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP7 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE SWAP2 POP PUSH2 0x12BA DUP3 PUSH2 0x29B0 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE DUP2 SWAP1 PUSH2 0x10AE DUP5 DUP4 PUSH2 0xFEB JUMP JUMPDEST DUP1 MLOAD PUSH11 0x636F6E736F6C652E6C6F67 PUSH1 0x20 DUP4 ADD PUSH1 0x0 DUP1 DUP5 DUP4 DUP6 GAS STATICCALL POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0xAC4 SWAP1 PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6E18A12800000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x3696 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3754 PUSH1 0x19 DUP5 PUSH2 0x3B84 JUMP JUMPDEST PUSH2 0xEEF SWAP2 SWAP1 PUSH2 0x3B33 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x3775 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x378B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xEEF DUP3 PUSH2 0x375E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x37A6 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x37AF DUP4 PUSH2 0x375E JUMP JUMPDEST SWAP2 POP PUSH2 0x21F3 PUSH1 0x20 DUP5 ADD PUSH2 0x375E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x37D1 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x37DA DUP5 PUSH2 0x375E JUMP JUMPDEST SWAP3 POP PUSH2 0x37E8 PUSH1 0x20 DUP6 ADD PUSH2 0x375E JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x380D JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x3816 DUP6 PUSH2 0x375E JUMP JUMPDEST SWAP4 POP PUSH2 0x3824 PUSH1 0x20 DUP7 ADD PUSH2 0x375E JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3847 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x385A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x386C JUMPI PUSH2 0x386C PUSH2 0x3C9B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x3894 JUMPI PUSH2 0x3894 PUSH2 0x3C9B JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x38AC JUMPI DUP6 DUP7 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP2 DUP3 ADD PUSH1 0x20 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x38DF JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x38E8 DUP4 PUSH2 0x375E JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x38FC JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3919 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3922 DUP4 PUSH2 0x375E JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3941 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xEEF DUP2 PUSH2 0x3CB1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x395D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xEEF DUP2 PUSH2 0x3CB1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3979 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3992 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x39B5 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH2 0x39CC PUSH1 0x40 DUP6 ADD PUSH2 0x375E JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x39E9 JUMPI DUP3 DUP4 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3A15 JUMPI DUP4 DUP5 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3A60 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3A44 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3A90 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x3A74 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x3AA1 JUMPI DUP3 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x246D PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x3A6B JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xEEF PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3A6B JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x12BA PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3A31 JUMP JUMPDEST DUP4 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xB5A PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x3A31 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x3B46 JUMPI PUSH2 0x3B46 PUSH2 0x3C6F JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP5 AND DUP1 PUSH1 0xFF SUB DUP3 GT ISZERO PUSH2 0x3B68 JUMPI PUSH2 0x3B68 PUSH2 0x3C6F JUMP JUMPDEST ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3B7F JUMPI PUSH2 0x3B7F PUSH2 0x3C85 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3B9E JUMPI PUSH2 0x3B9E PUSH2 0x3C6F JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x3BB5 JUMPI PUSH2 0x3BB5 PUSH2 0x3C6F JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND DUP1 PUSH2 0x3BCD JUMPI PUSH2 0x3BCD PUSH2 0x3C6F JUMP JUMPDEST PUSH1 0x0 NOT ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x3BEB JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x3C0C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x3C26 JUMPI PUSH2 0x3C26 PUSH2 0x3C6F JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 EQ ISZERO PUSH2 0x3C44 JUMPI PUSH2 0x3C44 PUSH2 0x3C6F JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP4 AND DUP1 PUSH2 0x3C60 JUMPI PUSH2 0x3C60 PUSH2 0x3C85 JUMP JUMPDEST DUP1 PUSH1 0xFF DUP5 AND MOD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xAC4 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MLOAD PUSH10 0x566C3A53102D2C7A1D44 LOG4 0xEB 0xC1 0xB2 PUSH6 0xD9E845368204 DUP13 0xB2 BYTE JUMPDEST EXTCODESIZE 0xD3 PUSH8 0x327264736F6C6343 STOP ADDMOD DIV STOP CALLER ",
          "sourceMap": "333:4749:20:-:0;;;807:169;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;973:131:21;;;;;;;;;;;-1:-1:-1;;;973:131:21;;;;;;;;;;;;;;;;;;;;;;;1039:22;;973:131;;;1039:22;;-1:-1:-1;;1039:22:21;:::i;:::-;-1:-1:-1;1071:26:21;;;;:16;;:26;;;;;:::i;:::-;-1:-1:-1;;;;;;;;;889:23:20::1;::::0;;;;::::1;::::0;932:12:::1;922:22;::::0;960:9:::1;::::0;::::1;::::0;;;::::1;807:169:::0;333:4749;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;333:4749:20;;;-1:-1:-1;333:4749:20;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:310:34;84:6;137:2;125:9;116:7;112:23;108:32;105:2;;;158:6;150;143:22;105:2;189:16;;-1:-1:-1;;;;;234:31:34;;224:42;;214:2;;285:6;277;270:22;214:2;313:5;95:229;-1:-1:-1;;;95:229:34:o;329:380::-;408:1;404:12;;;;451;;;472:2;;526:4;518:6;514:17;504:27;;472:2;579;571:6;568:14;548:18;545:38;542:2;;;625:10;620:3;616:20;613:1;606:31;660:4;657:1;650:15;688:4;685:1;678:15;542:2;;384:325;;;:::o;:::-;333:4749:20;;;;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:27848:34",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:34",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "63:147:34",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "73:29:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "95:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "82:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "82:20:34"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "73:5:34"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "188:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "197:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "200:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "190:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "190:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "190:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "124:5:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "135:5:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "142:42:34",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "131:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "131:54:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "121:2:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "121:65:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "114:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "114:73:34"
                          },
                          "nodeType": "YulIf",
                          "src": "111:2:34"
                        }
                      ]
                    },
                    "name": "abi_decode_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "42:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "53:5:34",
                        "type": ""
                      }
                    ],
                    "src": "14:196:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "285:126:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "331:26:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "340:6:34"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "348:6:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "333:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "333:22:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "333:22:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "306:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "315:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "302:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "302:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "327:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "298:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "298:32:34"
                          },
                          "nodeType": "YulIf",
                          "src": "295:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "366:39:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "395:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "376:18:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "376:29:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "366:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "251:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "262:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "274:6:34",
                        "type": ""
                      }
                    ],
                    "src": "215:196:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "503:183:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "549:26:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "558:6:34"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "566:6:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "551:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "551:22:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "551:22:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "524:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "533:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "520:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "520:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "545:2:34",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "516:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "516:32:34"
                          },
                          "nodeType": "YulIf",
                          "src": "513:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "584:39:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "613:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "594:18:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "594:29:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "584:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "632:48:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "665:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "676:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "661:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "661:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "642:18:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "642:38:34"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "632:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "461:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "472:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "484:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "492:6:34",
                        "type": ""
                      }
                    ],
                    "src": "416:270:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "795:234:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "841:26:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "850:6:34"
                                    },
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "858:6:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "843:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "843:22:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "843:22:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "816:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "825:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "812:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "812:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "837:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "808:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "808:32:34"
                          },
                          "nodeType": "YulIf",
                          "src": "805:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "876:39:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "905:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "886:18:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "886:29:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "876:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "924:48:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "957:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "968:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "953:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "953:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "934:18:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "934:38:34"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "924:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "981:42:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1008:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1019:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1004:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1004:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "991:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "991:32:34"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "981:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "745:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "756:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "768:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "776:6:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "784:6:34",
                        "type": ""
                      }
                    ],
                    "src": "691:338:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1164:1053:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1211:26:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value3",
                                      "nodeType": "YulIdentifier",
                                      "src": "1220:6:34"
                                    },
                                    {
                                      "name": "value3",
                                      "nodeType": "YulIdentifier",
                                      "src": "1228:6:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1213:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1213:22:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1213:22:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1185:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1194:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1181:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1181:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1206:3:34",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1177:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1177:33:34"
                          },
                          "nodeType": "YulIf",
                          "src": "1174:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1246:39:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1275:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1256:18:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1256:29:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1246:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1294:48:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1327:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1338:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1323:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1323:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1304:18:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1304:38:34"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1294:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1351:42:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1378:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1389:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1374:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1374:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1361:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1361:32:34"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "1351:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1402:46:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1433:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1444:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1429:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1429:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1416:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1416:32:34"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "1406:6:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1457:28:34",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1467:18:34",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1461:2:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1512:26:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value3",
                                      "nodeType": "YulIdentifier",
                                      "src": "1521:6:34"
                                    },
                                    {
                                      "name": "value3",
                                      "nodeType": "YulIdentifier",
                                      "src": "1529:6:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1514:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1514:22:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1514:22:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1500:6:34"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1508:2:34"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1497:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1497:14:34"
                          },
                          "nodeType": "YulIf",
                          "src": "1494:2:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1547:32:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1561:9:34"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1572:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1557:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1557:22:34"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "1551:2:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1627:26:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value3",
                                      "nodeType": "YulIdentifier",
                                      "src": "1636:6:34"
                                    },
                                    {
                                      "name": "value3",
                                      "nodeType": "YulIdentifier",
                                      "src": "1644:6:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1629:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1629:22:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1629:22:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "1606:2:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1610:4:34",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1602:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1602:13:34"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1617:7:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1598:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1598:27:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1591:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1591:35:34"
                          },
                          "nodeType": "YulIf",
                          "src": "1588:2:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1662:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1685:2:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1672:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1672:16:34"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "1666:2:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1711:22:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1713:16:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1713:18:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1713:18:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "1703:2:34"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1707:2:34"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1700:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1700:10:34"
                          },
                          "nodeType": "YulIf",
                          "src": "1697:2:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1742:17:34",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1756:2:34",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "1752:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1752:7:34"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "1746:2:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1768:23:34",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1788:2:34",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1782:5:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1782:9:34"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "1772:6:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1800:71:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1822:6:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "_3",
                                                "nodeType": "YulIdentifier",
                                                "src": "1846:2:34"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1850:4:34",
                                                "type": "",
                                                "value": "0x1f"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "1842:3:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1842:13:34"
                                          },
                                          {
                                            "name": "_4",
                                            "nodeType": "YulIdentifier",
                                            "src": "1857:2:34"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "1838:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1838:22:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1862:2:34",
                                        "type": "",
                                        "value": "63"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1834:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1834:31:34"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "1867:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1830:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1830:40:34"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1818:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1818:53:34"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "1804:10:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1930:22:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1932:16:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1932:18:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1932:18:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1889:10:34"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1901:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1886:2:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1886:18:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1909:10:34"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1921:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1906:2:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1906:22:34"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "1883:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1883:46:34"
                          },
                          "nodeType": "YulIf",
                          "src": "1880:2:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1968:2:34",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "1972:10:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1961:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1961:22:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1961:22:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1999:6:34"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "2007:2:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1992:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1992:18:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1992:18:34"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2056:26:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value3",
                                      "nodeType": "YulIdentifier",
                                      "src": "2065:6:34"
                                    },
                                    {
                                      "name": "value3",
                                      "nodeType": "YulIdentifier",
                                      "src": "2073:6:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2058:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2058:22:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2058:22:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "2033:2:34"
                                      },
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "2037:2:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2029:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2029:11:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2042:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2025:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2025:20:34"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2047:7:34"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2022:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2022:33:34"
                          },
                          "nodeType": "YulIf",
                          "src": "2019:2:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2108:6:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2116:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2104:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2104:15:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "2125:2:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2129:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2121:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2121:11:34"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "2134:2:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "2091:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2091:46:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2091:46:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "memPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "2161:6:34"
                                      },
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "2169:2:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2157:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2157:15:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2174:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2153:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2153:24:34"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "2179:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2146:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2146:40:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2146:40:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2195:16:34",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "2205:6:34"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "2195:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1106:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1117:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1129:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1137:6:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "1145:6:34",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "1153:6:34",
                        "type": ""
                      }
                    ],
                    "src": "1034:1183:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2306:283:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2352:26:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2361:6:34"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2369:6:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2354:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2354:22:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2354:22:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2327:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2336:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2323:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2323:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2348:2:34",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2319:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2319:32:34"
                          },
                          "nodeType": "YulIf",
                          "src": "2316:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2387:39:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2416:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "2397:18:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2397:29:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2387:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2435:45:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2465:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2476:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2461:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2461:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2448:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2448:32:34"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2439:5:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2533:26:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2542:6:34"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2550:6:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2535:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2535:22:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2535:22:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2502:5:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "2523:5:34"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "2516:6:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2516:13:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "2509:6:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2509:21:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "2499:2:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2499:32:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2492:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2492:40:34"
                          },
                          "nodeType": "YulIf",
                          "src": "2489:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2568:15:34",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2578:5:34"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2568:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2264:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2275:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2287:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2295:6:34",
                        "type": ""
                      }
                    ],
                    "src": "2222:367:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2681:177:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2727:26:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2736:6:34"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2744:6:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2729:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2729:22:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2729:22:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2702:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2711:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2698:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2698:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2723:2:34",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2694:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2694:32:34"
                          },
                          "nodeType": "YulIf",
                          "src": "2691:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2762:39:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2791:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "2772:18:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2772:29:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2762:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2810:42:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2837:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2848:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2833:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2833:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2820:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2820:32:34"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2810:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2639:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2650:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2662:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2670:6:34",
                        "type": ""
                      }
                    ],
                    "src": "2594:264:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2932:186:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2978:26:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2987:6:34"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2995:6:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2980:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2980:22:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2980:22:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2953:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2962:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2949:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2949:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2974:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2945:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2945:32:34"
                          },
                          "nodeType": "YulIf",
                          "src": "2942:2:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3013:36:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3039:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3026:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3026:23:34"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "3017:5:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3082:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "3058:23:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3058:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3058:30:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3097:15:34",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3107:5:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3097:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2898:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2909:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2921:6:34",
                        "type": ""
                      }
                    ],
                    "src": "2863:255:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3203:179:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3249:26:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3258:6:34"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3266:6:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3251:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3251:22:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3251:22:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3224:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3233:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3220:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3220:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3245:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3216:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3216:32:34"
                          },
                          "nodeType": "YulIf",
                          "src": "3213:2:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3284:29:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3303:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3297:5:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3297:16:34"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "3288:5:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3346:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "3322:23:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3322:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3322:30:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3361:15:34",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3371:5:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3361:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3169:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3180:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3192:6:34",
                        "type": ""
                      }
                    ],
                    "src": "3123:259:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3457:120:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3503:26:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3512:6:34"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3520:6:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3505:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3505:22:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3505:22:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3478:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3487:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3474:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3474:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3499:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3470:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3470:32:34"
                          },
                          "nodeType": "YulIf",
                          "src": "3467:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3538:33:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3561:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3548:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3548:23:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3538:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3423:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3434:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3446:6:34",
                        "type": ""
                      }
                    ],
                    "src": "3387:190:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3669:171:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3715:26:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3724:6:34"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3732:6:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3717:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3717:22:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3717:22:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3690:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3699:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3686:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3686:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3711:2:34",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3682:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3682:32:34"
                          },
                          "nodeType": "YulIf",
                          "src": "3679:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3750:33:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3773:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3760:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3760:23:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3750:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3792:42:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3819:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3830:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3815:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3815:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3802:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3802:32:34"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "3792:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3627:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3638:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3650:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3658:6:34",
                        "type": ""
                      }
                    ],
                    "src": "3582:258:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3949:228:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3995:26:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "4004:6:34"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "4012:6:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3997:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3997:22:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3997:22:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3970:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3979:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3966:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3966:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3991:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3962:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3962:32:34"
                          },
                          "nodeType": "YulIf",
                          "src": "3959:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4030:33:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4053:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4040:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4040:23:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4030:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4072:42:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4099:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4110:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4095:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4095:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4082:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4082:32:34"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "4072:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4123:48:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4156:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4167:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4152:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4152:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "4133:18:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4133:38:34"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "4123:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint256t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3899:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3910:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3922:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3930:6:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "3938:6:34",
                        "type": ""
                      }
                    ],
                    "src": "3845:332:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4286:222:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4332:26:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "4341:6:34"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "4349:6:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4334:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4334:22:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4334:22:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4307:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4316:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4303:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4303:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4328:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4299:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4299:32:34"
                          },
                          "nodeType": "YulIf",
                          "src": "4296:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4367:33:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4390:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4377:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4377:23:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4367:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4409:42:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4436:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4447:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4432:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4432:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4419:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4419:32:34"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "4409:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4460:42:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4487:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4498:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4483:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4483:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4470:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4470:32:34"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "4460:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint256t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4236:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4247:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4259:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4267:6:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "4275:6:34",
                        "type": ""
                      }
                    ],
                    "src": "4182:326:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4634:274:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4681:26:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "4690:6:34"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "4698:6:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4683:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4683:22:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4683:22:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4655:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4664:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4651:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4651:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4676:3:34",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4647:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4647:33:34"
                          },
                          "nodeType": "YulIf",
                          "src": "4644:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4716:33:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4739:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4726:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4726:23:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4716:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4758:42:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4785:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4796:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4781:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4781:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4768:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4768:32:34"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "4758:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4809:42:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4836:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4847:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4832:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4832:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4819:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4819:32:34"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "4809:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4860:42:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4887:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4898:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4883:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4883:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4870:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4870:32:34"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "4860:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4576:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4587:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4599:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4607:6:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "4615:6:34",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "4623:6:34",
                        "type": ""
                      }
                    ],
                    "src": "4513:395:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4974:376:34",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4984:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "5004:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4998:5:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4998:12:34"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "4988:6:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "5026:3:34"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5031:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5019:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5019:19:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5019:19:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5047:14:34",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5057:4:34",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "5051:2:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5070:19:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "5081:3:34"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5086:2:34"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5077:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5077:12:34"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "5070:3:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5098:28:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "5116:5:34"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5123:2:34"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5112:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5112:14:34"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "5102:6:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5135:12:34",
                          "value": {
                            "name": "end",
                            "nodeType": "YulIdentifier",
                            "src": "5144:3:34"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "5139:1:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5205:120:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "5226:3:34"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "5237:6:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "5231:5:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5231:13:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "5219:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5219:26:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5219:26:34"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "5258:19:34",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "5269:3:34"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "5274:2:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5265:3:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5265:12:34"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "5258:3:34"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "5290:25:34",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "5304:6:34"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "5312:2:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5300:3:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5300:15:34"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "5290:6:34"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "5167:1:34"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5170:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "5164:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5164:13:34"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "5178:18:34",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "5180:14:34",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "5189:1:34"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5192:1:34",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5185:3:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5185:9:34"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "5180:1:34"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "5160:3:34",
                            "statements": []
                          },
                          "src": "5156:169:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5334:10:34",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "5341:3:34"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "5334:3:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_array_uint256_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "4951:5:34",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "4958:3:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "4966:3:34",
                        "type": ""
                      }
                    ],
                    "src": "4913:437:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5404:426:34",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5414:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "5434:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "5428:5:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5428:12:34"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "5418:6:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "5456:3:34"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5461:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5449:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5449:19:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5449:19:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5477:12:34",
                          "value": {
                            "name": "end",
                            "nodeType": "YulIdentifier",
                            "src": "5486:3:34"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "5481:1:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5550:110:34",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "5564:14:34",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5574:4:34",
                                  "type": "",
                                  "value": "0x20"
                                },
                                "variables": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulTypedName",
                                    "src": "5568:2:34",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "pos",
                                              "nodeType": "YulIdentifier",
                                              "src": "5606:3:34"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "5611:1:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "5602:3:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "5602:11:34"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "5615:2:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "5598:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5598:20:34"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "value",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "5634:5:34"
                                                },
                                                {
                                                  "name": "i",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "5641:1:34"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "5630:3:34"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "5630:13:34"
                                            },
                                            {
                                              "name": "_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "5645:2:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "5626:3:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "5626:22:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "5620:5:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5620:29:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "5591:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5591:59:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5591:59:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "5509:1:34"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5512:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "5506:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5506:13:34"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "5520:21:34",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "5522:17:34",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "5531:1:34"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5534:4:34",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5527:3:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5527:12:34"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "5522:1:34"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "5502:3:34",
                            "statements": []
                          },
                          "src": "5498:162:34"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5694:64:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "pos",
                                              "nodeType": "YulIdentifier",
                                              "src": "5723:3:34"
                                            },
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "5728:6:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "5719:3:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "5719:16:34"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5737:4:34",
                                          "type": "",
                                          "value": "0x20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "5715:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5715:27:34"
                                    },
                                    {
                                      "name": "end",
                                      "nodeType": "YulIdentifier",
                                      "src": "5744:3:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "5708:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5708:40:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5708:40:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "5675:1:34"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5678:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5672:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5672:13:34"
                          },
                          "nodeType": "YulIf",
                          "src": "5669:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5767:57:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "5782:3:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "5795:6:34"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5803:2:34",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "5791:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5791:15:34"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5812:2:34",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "5808:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5808:7:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "5787:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5787:29:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5778:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5778:39:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5819:4:34",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5774:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5774:50:34"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "5767:3:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_bytes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "5381:5:34",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "5388:3:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "5396:3:34",
                        "type": ""
                      }
                    ],
                    "src": "5355:475:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6010:184:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6027:3:34"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6032:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6020:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6020:19:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6020:19:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "6059:3:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6064:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6055:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6055:12:34"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "6069:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6048:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6048:28:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6048:28:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "6096:3:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6101:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6092:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6092:12:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6114:2:34",
                                        "type": "",
                                        "value": "96"
                                      },
                                      {
                                        "name": "value2",
                                        "nodeType": "YulIdentifier",
                                        "src": "6118:6:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "6110:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6110:15:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6131:26:34",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "6127:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6127:31:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6106:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6106:53:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6085:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6085:75:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6085:75:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6169:19:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6180:3:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6185:2:34",
                                "type": "",
                                "value": "84"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6176:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6176:12:34"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "6169:3:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes32_t_uint256_t_address__to_t_bytes32_t_uint256_t_address__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "5970:3:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "5975:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5983:6:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5991:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "6002:3:34",
                        "type": ""
                      }
                    ],
                    "src": "5835:359:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6390:14:34",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6392:10:34",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "6399:3:34"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "6392:3:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "6374:3:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "6382:3:34",
                        "type": ""
                      }
                    ],
                    "src": "6199:205:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6510:125:34",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6520:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6532:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6543:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6528:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6528:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6520:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6562:9:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6577:6:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6585:42:34",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6573:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6573:55:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6555:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6555:74:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6555:74:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6479:9:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6490:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6501:4:34",
                        "type": ""
                      }
                    ],
                    "src": "6409:226:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6757:125:34",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6767:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6779:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6790:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6775:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6775:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6767:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6809:9:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6824:6:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6832:42:34",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6820:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6820:55:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6802:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6802:74:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6802:74:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6726:9:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6737:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6748:4:34",
                        "type": ""
                      }
                    ],
                    "src": "6640:242:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7090:308:34",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7100:52:34",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7110:42:34",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "7104:2:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7168:9:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7183:6:34"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7191:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7179:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7179:15:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7161:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7161:34:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7161:34:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7215:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7226:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7211:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7211:18:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7235:6:34"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7243:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7231:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7231:15:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7204:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7204:43:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7204:43:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7267:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7278:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7263:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7263:18:34"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "7283:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7256:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7256:34:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7256:34:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7310:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7321:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7306:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7306:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7326:3:34",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7299:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7299:31:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7299:31:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7339:53:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "7364:6:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7376:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7387:3:34",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7372:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7372:19:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "7347:16:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7347:45:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7339:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7035:9:34",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "7046:6:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "7054:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7062:6:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7070:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7081:4:34",
                        "type": ""
                      }
                    ],
                    "src": "6887:511:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7582:271:34",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7592:27:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7604:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7615:3:34",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7600:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7600:19:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7592:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7635:9:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7650:6:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7658:42:34",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7646:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7646:55:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7628:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7628:74:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7628:74:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7722:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7733:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7718:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7718:18:34"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "7738:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7711:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7711:34:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7711:34:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7765:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7776:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7761:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7761:18:34"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "7781:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7754:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7754:34:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7754:34:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7808:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7819:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7804:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7804:18:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value3",
                                        "nodeType": "YulIdentifier",
                                        "src": "7838:6:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "7831:6:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7831:14:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "7824:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7824:22:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7797:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7797:50:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7797:50:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256_t_uint256_t_bool__to_t_address_t_uint256_t_uint256_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7527:9:34",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "7538:6:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "7546:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7554:6:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7562:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7573:4:34",
                        "type": ""
                      }
                    ],
                    "src": "7403:450:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7953:92:34",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7963:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7975:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7986:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7971:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7971:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7963:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8005:9:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "8030:6:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "8023:6:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8023:14:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "8016:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8016:22:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7998:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7998:41:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7998:41:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7922:9:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7933:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7944:4:34",
                        "type": ""
                      }
                    ],
                    "src": "7858:187:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8149:149:34",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8159:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8171:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8182:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8167:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8167:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8159:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8201:9:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "8216:6:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8224:66:34",
                                    "type": "",
                                    "value": "0xff00000000000000000000000000000000000000000000000000000000000000"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8212:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8212:79:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8194:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8194:98:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8194:98:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes1__to_t_bytes1__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8118:9:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8129:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8140:4:34",
                        "type": ""
                      }
                    ],
                    "src": "8050:248:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8404:76:34",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8414:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8426:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8437:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8422:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8422:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8414:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8456:9:34"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8467:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8449:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8449:25:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8449:25:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8373:9:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8384:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8395:4:34",
                        "type": ""
                      }
                    ],
                    "src": "8303:177:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8606:98:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8623:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8634:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8616:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8616:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8616:21:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8646:52:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8671:6:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8683:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8694:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8679:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8679:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "8654:16:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8654:44:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8646:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8575:9:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8586:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8597:4:34",
                        "type": ""
                      }
                    ],
                    "src": "8485:219:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8883:240:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8900:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8911:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8893:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8893:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8893:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8934:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8945:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8930:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8930:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8950:2:34",
                                "type": "",
                                "value": "50"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8923:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8923:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8923:30:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8973:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8984:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8969:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8969:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8989:34:34",
                                "type": "",
                                "value": "ERC721: transfer to non ERC721Re"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8962:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8962:62:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8962:62:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9044:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9055:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9040:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9040:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9060:20:34",
                                "type": "",
                                "value": "ceiver implementer"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9033:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9033:48:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9033:48:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9090:27:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9102:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9113:3:34",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9098:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9098:19:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9090:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8860:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8874:4:34",
                        "type": ""
                      }
                    ],
                    "src": "8709:414:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9302:157:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9319:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9330:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9312:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9312:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9312:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9353:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9364:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9349:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9349:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9369:1:34",
                                "type": "",
                                "value": "8"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9342:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9342:29:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9342:29:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9391:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9402:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9387:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9387:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9407:10:34",
                                "type": "",
                                "value": "SL:HSO:0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9380:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9380:38:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9380:38:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9427:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9439:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9450:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9435:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9435:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9427:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_23d42c2b0f86ea0ac89f12b0d2207f3003e69f4eb76b2994873579c9e39728ab__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9279:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9293:4:34",
                        "type": ""
                      }
                    ],
                    "src": "9128:331:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9638:156:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9655:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9666:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9648:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9648:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9648:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9689:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9700:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9685:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9685:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9705:1:34",
                                "type": "",
                                "value": "7"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9678:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9678:29:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9678:29:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9727:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9738:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9723:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9723:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9743:9:34",
                                "type": "",
                                "value": "EPC:SBL"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9716:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9716:37:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9716:37:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9762:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9774:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9785:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9770:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9770:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9762:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_24f1d24b7dcbcafba5203e0be59125103f43122715e4c58e753de654472bf12c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9615:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9629:4:34",
                        "type": ""
                      }
                    ],
                    "src": "9464:330:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9973:156:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9990:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10001:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9983:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9983:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9983:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10024:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10035:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10020:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10020:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10040:1:34",
                                "type": "",
                                "value": "7"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10013:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10013:29:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10013:29:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10062:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10073:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10058:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10058:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10078:9:34",
                                "type": "",
                                "value": "ML:SI:0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10051:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10051:37:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10051:37:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10097:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10109:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10120:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10105:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10105:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10097:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2565dbf2ddad0b403d5f907825d0b6b4931cd4dd7941d4164e161b54453c48aa__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9950:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9964:4:34",
                        "type": ""
                      }
                    ],
                    "src": "9799:330:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10308:155:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10325:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10336:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10318:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10318:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10318:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10359:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10370:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10355:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10355:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10375:1:34",
                                "type": "",
                                "value": "6"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10348:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10348:29:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10348:29:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10397:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10408:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10393:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10393:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10413:8:34",
                                "type": "",
                                "value": "IL:M:0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10386:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10386:36:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10386:36:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10431:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10443:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10454:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10439:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10439:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10431:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2bf80e8a41f2eebc6413ce4198abf20fe9b61ccbf080e2d92589504aa6bfa915__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10285:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10299:4:34",
                        "type": ""
                      }
                    ],
                    "src": "10134:329:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10642:157:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10659:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10670:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10652:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10652:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10652:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10693:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10704:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10689:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10689:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10709:1:34",
                                "type": "",
                                "value": "8"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10682:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10682:29:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10682:29:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10731:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10742:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10727:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10727:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10747:10:34",
                                "type": "",
                                "value": "SL:PFM:0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10720:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10720:38:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10720:38:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10767:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10779:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10790:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10775:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10775:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10767:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_35a41a0528c0e076e67a4d151b5aa7b3349d2c9c4a0f2d3b371679fa6bf41582__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10619:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10633:4:34",
                        "type": ""
                      }
                    ],
                    "src": "10468:331:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10978:157:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10995:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11006:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10988:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10988:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10988:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11029:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11040:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11025:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11025:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11045:1:34",
                                "type": "",
                                "value": "8"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11018:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11018:29:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11018:29:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11067:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11078:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11063:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11063:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11083:10:34",
                                "type": "",
                                "value": "SL:OBP:2"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11056:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11056:38:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11056:38:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11103:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11115:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11126:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11111:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11111:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11103:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_427b78294d71712f55d74f14c6ccc5d55010d344a9ce174c9a7336a4ecf668b2__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10955:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10969:4:34",
                        "type": ""
                      }
                    ],
                    "src": "10804:331:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11314:156:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11331:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11342:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11324:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11324:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11324:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11365:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11376:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11361:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11361:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11381:1:34",
                                "type": "",
                                "value": "7"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11354:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11354:29:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11354:29:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11403:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11414:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11399:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11399:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11419:9:34",
                                "type": "",
                                "value": "NS:GS:0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11392:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11392:37:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11392:37:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11438:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11450:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11461:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11446:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11446:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11438:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_441c5cd05b1495dbf3dd5f179717bcab80711f383aa69f0c3ed639fc05e98573__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11291:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11305:4:34",
                        "type": ""
                      }
                    ],
                    "src": "11140:330:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11649:226:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11666:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11677:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11659:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11659:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11659:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11700:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11711:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11696:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11696:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11716:2:34",
                                "type": "",
                                "value": "36"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11689:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11689:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11689:30:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11739:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11750:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11735:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11735:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11755:34:34",
                                "type": "",
                                "value": "ERC721: transfer to the zero add"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11728:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11728:62:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11728:62:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11810:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11821:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11806:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11806:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11826:6:34",
                                "type": "",
                                "value": "ress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11799:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11799:34:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11799:34:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11842:27:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11854:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11865:3:34",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11850:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11850:19:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11842:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11626:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11640:4:34",
                        "type": ""
                      }
                    ],
                    "src": "11475:400:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12054:175:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12071:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12082:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12064:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12064:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12064:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12105:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12116:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12101:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12101:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12121:2:34",
                                "type": "",
                                "value": "25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12094:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12094:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12094:30:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12144:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12155:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12140:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12140:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12160:27:34",
                                "type": "",
                                "value": "ERC721: approve to caller"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12133:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12133:55:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12133:55:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12197:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12209:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12220:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12205:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12205:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12197:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12031:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12045:4:34",
                        "type": ""
                      }
                    ],
                    "src": "11880:349:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12408:248:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12425:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12436:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12418:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12418:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12418:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12459:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12470:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12455:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12455:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12475:2:34",
                                "type": "",
                                "value": "58"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12448:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12448:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12448:30:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12498:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12509:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12494:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12494:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12514:34:34",
                                "type": "",
                                "value": "Address: unable to send value, r"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12487:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12487:62:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12487:62:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12569:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12580:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12565:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12565:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12585:28:34",
                                "type": "",
                                "value": "ecipient may have reverted"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12558:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12558:56:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12558:56:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12623:27:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12635:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12646:3:34",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12631:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12631:19:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12623:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12385:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12399:4:34",
                        "type": ""
                      }
                    ],
                    "src": "12234:422:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12835:179:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12852:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12863:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12845:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12845:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12845:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12886:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12897:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12882:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12882:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12902:2:34",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12875:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12875:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12875:30:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12925:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12936:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12921:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12921:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12941:31:34",
                                "type": "",
                                "value": "Address: insufficient balance"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12914:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12914:59:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12914:59:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12982:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12994:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13005:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12990:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12990:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12982:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12812:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12826:4:34",
                        "type": ""
                      }
                    ],
                    "src": "12661:353:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13193:234:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13210:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13221:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13203:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13203:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13203:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13244:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13255:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13240:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13240:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13260:2:34",
                                "type": "",
                                "value": "44"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13233:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13233:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13233:30:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13283:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13294:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13279:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13279:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13299:34:34",
                                "type": "",
                                "value": "ERC721: operator query for nonex"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13272:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13272:62:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13272:62:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13354:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13365:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13350:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13350:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13370:14:34",
                                "type": "",
                                "value": "istent token"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13343:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13343:42:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13343:42:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13394:27:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13406:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13417:3:34",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13402:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13402:19:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13394:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13170:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13184:4:34",
                        "type": ""
                      }
                    ],
                    "src": "13019:408:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13606:155:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13623:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13634:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13616:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13616:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13616:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13657:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13668:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13653:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13653:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13673:1:34",
                                "type": "",
                                "value": "6"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13646:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13646:29:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13646:29:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13695:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13706:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13691:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13691:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13711:8:34",
                                "type": "",
                                "value": "NS:M:D"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13684:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13684:36:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13684:36:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13729:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13741:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13752:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13737:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13737:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13729:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_5f198b1eb59a47877e3a01bd3ac9924e9d97396b07b4790db6a836e8a1dc5d27__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13583:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13597:4:34",
                        "type": ""
                      }
                    ],
                    "src": "13432:329:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13940:246:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13957:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13968:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13950:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13950:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13950:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13991:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14002:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13987:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13987:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14007:2:34",
                                "type": "",
                                "value": "56"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13980:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13980:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13980:30:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14030:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14041:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14026:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14026:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14046:34:34",
                                "type": "",
                                "value": "ERC721: approve caller is not ow"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14019:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14019:62:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14019:62:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14101:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14112:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14097:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14097:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14117:26:34",
                                "type": "",
                                "value": "ner nor approved for all"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14090:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14090:54:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14090:54:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14153:27:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14165:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14176:3:34",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14161:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14161:19:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14153:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13917:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13931:4:34",
                        "type": ""
                      }
                    ],
                    "src": "13766:420:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14365:232:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14382:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14393:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14375:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14375:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14375:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14416:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14427:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14412:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14412:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14432:2:34",
                                "type": "",
                                "value": "42"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14405:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14405:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14405:30:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14455:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14466:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14451:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14451:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14471:34:34",
                                "type": "",
                                "value": "ERC721: balance query for the ze"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14444:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14444:62:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14444:62:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14526:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14537:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14522:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14522:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14542:12:34",
                                "type": "",
                                "value": "ro address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14515:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14515:40:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14515:40:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14564:27:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14576:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14587:3:34",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14572:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14572:19:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14564:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14342:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14356:4:34",
                        "type": ""
                      }
                    ],
                    "src": "14191:406:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14776:231:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14793:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14804:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14786:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14786:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14786:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14827:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14838:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14823:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14823:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14843:2:34",
                                "type": "",
                                "value": "41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14816:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14816:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14816:30:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14866:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14877:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14862:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14862:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14882:34:34",
                                "type": "",
                                "value": "ERC721: owner query for nonexist"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14855:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14855:62:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14855:62:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14937:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14948:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14933:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14933:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14953:11:34",
                                "type": "",
                                "value": "ent token"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14926:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14926:39:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14926:39:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14974:27:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14986:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14997:3:34",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14982:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14982:19:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14974:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14753:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14767:4:34",
                        "type": ""
                      }
                    ],
                    "src": "14602:405:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15186:155:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15203:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15214:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15196:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15196:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15196:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15237:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15248:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15233:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15233:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15253:1:34",
                                "type": "",
                                "value": "6"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15226:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15226:29:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15226:29:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15275:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15286:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15271:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15271:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15291:8:34",
                                "type": "",
                                "value": "NS:0:0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15264:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15264:36:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15264:36:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15309:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15321:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15332:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15317:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15317:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15309:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7c5a57547e6a2a1f6df9348d1a65d44f860fb71bb27debd910f7a18d9716252e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15163:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15177:4:34",
                        "type": ""
                      }
                    ],
                    "src": "15012:329:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15520:157:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15537:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15548:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15530:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15530:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15530:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15571:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15582:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15567:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15567:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15587:1:34",
                                "type": "",
                                "value": "8"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15560:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15560:29:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15560:29:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15609:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15620:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15605:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15605:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15625:10:34",
                                "type": "",
                                "value": "SL:PFM:1"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15598:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15598:38:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15598:38:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15645:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15657:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15668:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15653:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15653:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15645:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7dd92b5ad5bbf8001f1c16195afd8f1f813a6d2b8c38f3a035b5013afed18c36__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15497:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15511:4:34",
                        "type": ""
                      }
                    ],
                    "src": "15346:331:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15856:156:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15873:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15884:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15866:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15866:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15866:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15907:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15918:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15903:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15903:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15923:1:34",
                                "type": "",
                                "value": "7"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15896:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15896:29:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15896:29:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15945:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15956:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15941:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15941:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15961:9:34",
                                "type": "",
                                "value": "NS:SS:0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15934:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15934:37:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15934:37:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15980:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15992:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16003:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15988:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15988:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15980:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8217bc08e779fb81827f6778c1b2fea37b292ab936643f7c8357de8d9b561e35__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15833:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15847:4:34",
                        "type": ""
                      }
                    ],
                    "src": "15682:330:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16191:156:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16208:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16219:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16201:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16201:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16201:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16242:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16253:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16238:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16238:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16258:1:34",
                                "type": "",
                                "value": "7"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16231:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16231:29:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16231:29:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16280:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16291:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16276:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16276:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16296:9:34",
                                "type": "",
                                "value": "SL:CC:1"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16269:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16269:37:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16269:37:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16315:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16327:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16338:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16323:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16323:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16315:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8361a380db3d4dd570f2cafc320876047e9a8c5dd1f5572ddd1e6301ec33a8a2__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16168:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16182:4:34",
                        "type": ""
                      }
                    ],
                    "src": "16017:330:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16526:160:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16543:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16554:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16536:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16536:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16536:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16577:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16588:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16573:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16573:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16593:2:34",
                                "type": "",
                                "value": "10"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16566:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16566:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16566:30:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16616:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16627:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16612:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16612:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16632:12:34",
                                "type": "",
                                "value": "721:MINT:1"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16605:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16605:40:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16605:40:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16654:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16666:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16677:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16662:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16662:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16654:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_855f80560fc2a25c428cd352860cb9c8b5ad69a904c9af47e7eedbb84eabe391__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16503:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16517:4:34",
                        "type": ""
                      }
                    ],
                    "src": "16352:334:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16865:234:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16882:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16893:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16875:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16875:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16875:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16916:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16927:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16912:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16912:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16932:2:34",
                                "type": "",
                                "value": "44"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16905:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16905:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16905:30:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16955:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16966:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16951:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16951:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16971:34:34",
                                "type": "",
                                "value": "ERC721: approved query for nonex"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16944:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16944:62:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16944:62:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17026:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17037:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17022:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17022:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17042:14:34",
                                "type": "",
                                "value": "istent token"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17015:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17015:42:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17015:42:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17066:27:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17078:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17089:3:34",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17074:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17074:19:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17066:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16842:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16856:4:34",
                        "type": ""
                      }
                    ],
                    "src": "16691:408:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17278:161:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17295:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17306:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17288:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17288:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17288:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17329:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17340:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17325:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17325:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17345:2:34",
                                "type": "",
                                "value": "11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17318:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17318:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17318:30:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17368:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17379:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17364:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17364:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17384:13:34",
                                "type": "",
                                "value": "1155:SBTF:1"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17357:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17357:41:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17357:41:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17407:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17419:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17430:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17415:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17415:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17407:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9331496243ba38811084eacf7467acd904887520ab5c499748935a16031b1992__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17255:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17269:4:34",
                        "type": ""
                      }
                    ],
                    "src": "17104:335:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17618:157:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17635:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17646:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17628:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17628:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17628:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17669:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17680:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17665:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17665:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17685:1:34",
                                "type": "",
                                "value": "8"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17658:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17658:29:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17658:29:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17707:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17718:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17703:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17703:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17723:10:34",
                                "type": "",
                                "value": "SL:HSO:1"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17696:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17696:38:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17696:38:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17743:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17755:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17766:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17751:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17751:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17743:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9a0734679295cfdb6a7a5de99a03ebec34846d71de2503dfa0ab29146d546618__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17595:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17609:4:34",
                        "type": ""
                      }
                    ],
                    "src": "17444:331:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17954:157:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17971:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17982:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17964:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17964:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17964:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18005:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18016:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18001:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18001:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18021:1:34",
                                "type": "",
                                "value": "8"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17994:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17994:29:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17994:29:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18043:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18054:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18039:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18039:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18059:10:34",
                                "type": "",
                                "value": "AUC:TT:3"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18032:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18032:38:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18032:38:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18079:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18091:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18102:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18087:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18087:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18079:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9ff9f5e4c9a4b4e337de73a03b02a974459bdb9ff5d50cf5409368f7a0fe3271__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17931:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17945:4:34",
                        "type": ""
                      }
                    ],
                    "src": "17780:331:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18290:231:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18307:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18318:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18300:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18300:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18300:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18341:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18352:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18337:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18337:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18357:2:34",
                                "type": "",
                                "value": "41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18330:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18330:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18330:30:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18380:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18391:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18376:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18376:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18396:34:34",
                                "type": "",
                                "value": "ERC721: transfer of token that i"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18369:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18369:62:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18369:62:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18451:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18462:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18447:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18447:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18467:11:34",
                                "type": "",
                                "value": "s not own"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18440:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18440:39:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18440:39:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18488:27:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18500:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18511:3:34",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18496:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18496:19:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18488:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18267:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18281:4:34",
                        "type": ""
                      }
                    ],
                    "src": "18116:405:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18700:157:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18717:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18728:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18710:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18710:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18710:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18751:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18762:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18747:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18747:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18767:1:34",
                                "type": "",
                                "value": "8"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18740:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18740:29:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18740:29:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18789:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18800:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18785:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18785:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18805:10:34",
                                "type": "",
                                "value": "SL:OBP:4"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18778:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18778:38:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18778:38:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18825:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18837:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18848:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18833:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18833:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18825:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_a9d0f7825f133376d6fd788054e7028141c523cbd16047344b53ce9a6a4a20f0__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18677:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18691:4:34",
                        "type": ""
                      }
                    ],
                    "src": "18526:331:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19036:160:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19053:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19064:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19046:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19046:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19046:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19087:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19098:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19083:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19083:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19103:2:34",
                                "type": "",
                                "value": "10"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19076:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19076:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19076:30:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19126:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19137:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19122:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19122:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19142:12:34",
                                "type": "",
                                "value": "721:MINT:0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19115:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19115:40:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19115:40:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19164:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19176:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19187:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19172:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19172:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19164:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_afd89edd765b530102d060e2bc0fa03c71612e6e490008a33194508272964ff8__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19013:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19027:4:34",
                        "type": ""
                      }
                    ],
                    "src": "18862:334:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19375:223:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19392:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19403:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19385:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19385:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19385:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19426:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19437:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19422:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19422:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19442:2:34",
                                "type": "",
                                "value": "33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19415:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19415:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19415:30:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19465:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19476:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19461:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19461:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19481:34:34",
                                "type": "",
                                "value": "ERC721: approval to current owne"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19454:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19454:62:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19454:62:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19536:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19547:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19532:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19532:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19552:3:34",
                                "type": "",
                                "value": "r"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19525:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19525:31:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19525:31:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19565:27:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19577:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19588:3:34",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19573:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19573:19:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19565:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19352:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19366:4:34",
                        "type": ""
                      }
                    ],
                    "src": "19201:397:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19777:156:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19794:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19805:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19787:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19787:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19787:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19828:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19839:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19824:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19824:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19844:1:34",
                                "type": "",
                                "value": "7"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19817:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19817:29:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19817:29:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19866:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19877:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19862:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19862:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19882:9:34",
                                "type": "",
                                "value": "ML:OI:0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19855:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19855:37:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19855:37:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19901:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19913:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19924:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19909:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19909:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19901:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b6cda6b979c3d0498b8c2116636ff162965dce1e1f55c25a49a215fc3b4e9e11__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19754:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19768:4:34",
                        "type": ""
                      }
                    ],
                    "src": "19603:330:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20112:157:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20129:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20140:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20122:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20122:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20122:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20163:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20174:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20159:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20159:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20179:1:34",
                                "type": "",
                                "value": "8"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20152:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20152:29:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20152:29:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20201:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20212:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20197:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20197:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20217:10:34",
                                "type": "",
                                "value": "SL:COM:2"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20190:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20190:38:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20190:38:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20237:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20249:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20260:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20245:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20245:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20237:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_bed796f448ee617ad426cc34fd5d00b384155800d6457340d4cfb4444b78c5b9__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20089:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20103:4:34",
                        "type": ""
                      }
                    ],
                    "src": "19938:331:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20448:239:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20465:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20476:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20458:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20458:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20458:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20499:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20510:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20495:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20495:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20515:2:34",
                                "type": "",
                                "value": "49"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20488:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20488:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20488:30:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20538:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20549:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20534:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20534:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20554:34:34",
                                "type": "",
                                "value": "ERC721: transfer caller is not o"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20527:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20527:62:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20527:62:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20609:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20620:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20605:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20605:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20625:19:34",
                                "type": "",
                                "value": "wner nor approved"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20598:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20598:47:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20598:47:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20654:27:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20666:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20677:3:34",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20662:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20662:19:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20654:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20425:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20439:4:34",
                        "type": ""
                      }
                    ],
                    "src": "20274:413:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20866:155:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20883:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20894:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20876:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20876:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20876:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20917:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20928:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20913:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20913:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20933:1:34",
                                "type": "",
                                "value": "6"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20906:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20906:29:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20906:29:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20955:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20966:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20951:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20951:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20971:8:34",
                                "type": "",
                                "value": "NS:M:0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20944:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20944:36:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20944:36:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20989:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21001:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21012:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20997:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20997:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20989:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_cd15bc5ab2b8e8b651ca7e9b130c7d4e199c13289f0f060e7e7ec9f6914c2a1f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20843:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20857:4:34",
                        "type": ""
                      }
                    ],
                    "src": "20692:329:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21200:160:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21217:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21228:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21210:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21210:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21210:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21251:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21262:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21247:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21247:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21267:2:34",
                                "type": "",
                                "value": "10"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21240:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21240:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21240:30:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21290:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21301:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21286:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21286:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21306:12:34",
                                "type": "",
                                "value": "1155:STF:0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21279:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21279:40:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21279:40:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21328:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21340:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21351:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21336:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21336:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21328:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_d4059c221d70597754719849878bd2fc81c98a67572f354ac770b4a759bf5d79__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21177:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21191:4:34",
                        "type": ""
                      }
                    ],
                    "src": "21026:334:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21539:157:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21556:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21567:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21549:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21549:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21549:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21590:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21601:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21586:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21586:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21606:1:34",
                                "type": "",
                                "value": "8"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21579:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21579:29:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21579:29:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21628:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21639:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21624:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21624:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21644:10:34",
                                "type": "",
                                "value": "SL:OBP:3"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21617:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21617:38:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21617:38:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21664:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21676:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21687:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21672:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21672:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21664:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f4a12ce7cdd3ff403cdfecfdd167aa97d1b6db01e8f58badb61826a5ea5402d0__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21516:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21530:4:34",
                        "type": ""
                      }
                    ],
                    "src": "21365:331:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21875:156:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21892:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21903:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21885:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21885:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21885:21:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21926:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21937:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21922:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21922:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21942:1:34",
                                "type": "",
                                "value": "7"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21915:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21915:29:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21915:29:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21964:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21975:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21960:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21960:18:34"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21980:9:34",
                                "type": "",
                                "value": "ML:CI:0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21953:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21953:37:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21953:37:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21999:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22011:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22022:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22007:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22007:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21999:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f6fee39363925c23794a8c0eae826119dd999a411b919b2a55fff8c82349e017__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21852:9:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21866:4:34",
                        "type": ""
                      }
                    ],
                    "src": "21701:330:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22193:211:34",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "22203:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22215:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22226:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22211:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22211:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22203:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22245:9:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "22260:6:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22268:42:34",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "22256:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22256:55:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22238:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22238:74:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22238:74:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22332:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22343:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22328:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22328:18:34"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "22348:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22321:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22321:34:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22321:34:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22375:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22386:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22371:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22371:18:34"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "22391:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22364:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22364:34:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22364:34:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint160_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22146:9:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "22157:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "22165:6:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22173:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22184:4:34",
                        "type": ""
                      }
                    ],
                    "src": "22036:368:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22510:76:34",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "22520:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22532:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22543:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22528:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22528:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22520:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22562:9:34"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "22573:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22555:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22555:25:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22555:25:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22479:9:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22490:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22501:4:34",
                        "type": ""
                      }
                    ],
                    "src": "22409:177:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22748:211:34",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "22758:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22770:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22781:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22766:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22766:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22758:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22800:9:34"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "22811:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22793:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22793:25:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22793:25:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22838:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22849:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22834:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22834:18:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22858:6:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22866:42:34",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "22854:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22854:55:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22827:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22827:83:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22827:83:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22930:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22941:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22926:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22926:18:34"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "22946:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22919:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22919:34:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22919:34:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22701:9:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "22712:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "22720:6:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22728:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22739:4:34",
                        "type": ""
                      }
                    ],
                    "src": "22591:368:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23143:153:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23160:9:34"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "23171:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23153:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23153:25:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23153:25:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23198:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23209:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23194:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23194:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23214:2:34",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23187:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23187:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23187:30:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23226:64:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "23263:6:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23275:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23286:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23271:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23271:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "23234:28:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23234:56:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "23226:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23104:9:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "23115:6:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "23123:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "23134:4:34",
                        "type": ""
                      }
                    ],
                    "src": "22964:332:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23430:119:34",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "23440:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23452:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23463:2:34",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23448:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23448:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "23440:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23482:9:34"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "23493:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23475:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23475:25:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23475:25:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23520:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23531:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23516:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23516:18:34"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "23536:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23509:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23509:34:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23509:34:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23391:9:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "23402:6:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "23410:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "23421:4:34",
                        "type": ""
                      }
                    ],
                    "src": "23301:248:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23711:211:34",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "23721:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23733:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23744:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23729:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23729:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "23721:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23763:9:34"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "23774:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23756:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23756:25:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23756:25:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23801:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23812:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23797:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23797:18:34"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "23817:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23790:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23790:34:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23790:34:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23844:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23855:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23840:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23840:18:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "23864:6:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23872:42:34",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "23860:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23860:55:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23833:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23833:83:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23833:83:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_address__to_t_uint256_t_uint256_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23664:9:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "23675:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "23683:6:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "23691:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "23702:4:34",
                        "type": ""
                      }
                    ],
                    "src": "23554:368:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24134:196:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24151:9:34"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "24162:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24144:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24144:25:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24144:25:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24189:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24200:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24185:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24185:18:34"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "24205:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24178:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24178:34:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24178:34:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24232:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24243:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24228:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24228:18:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24248:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24221:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24221:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24221:30:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24260:64:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "24297:6:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24309:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24320:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24305:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24305:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "24268:28:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24268:56:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24260:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__to_t_uint256_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24087:9:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "24098:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "24106:6:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "24114:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24125:4:34",
                        "type": ""
                      }
                    ],
                    "src": "23927:403:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24520:255:34",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "24530:27:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24542:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24553:3:34",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24538:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24538:19:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24530:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24573:9:34"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "24584:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24566:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24566:25:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24566:25:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24611:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24622:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24607:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24607:18:34"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "24627:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24600:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24600:34:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24600:34:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24654:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24665:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24650:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24650:18:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "24674:6:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24682:42:34",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "24670:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24670:55:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24643:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24643:83:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24643:83:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24746:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24757:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24742:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24742:18:34"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "24762:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24735:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24735:34:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24735:34:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint160_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24465:9:34",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "24476:6:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "24484:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "24492:6:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "24500:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24511:4:34",
                        "type": ""
                      }
                    ],
                    "src": "24335:440:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24965:255:34",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "24975:27:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24987:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24998:3:34",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24983:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24983:19:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24975:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25018:9:34"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "25029:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25011:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25011:25:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25011:25:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25056:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25067:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25052:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25052:18:34"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "25072:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25045:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25045:34:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25045:34:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25099:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25110:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25095:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25095:18:34"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "25115:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25088:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25088:34:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25088:34:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25142:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25153:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25138:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25138:18:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "25162:6:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25170:42:34",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "25158:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25158:55:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25131:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25131:83:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25131:83:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint160__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24910:9:34",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "24921:6:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "24929:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "24937:6:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "24945:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24956:4:34",
                        "type": ""
                      }
                    ],
                    "src": "24780:440:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25273:80:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "25300:22:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "25302:16:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "25302:18:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "25302:18:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "25289:1:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "25296:1:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "25292:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25292:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "25286:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25286:13:34"
                          },
                          "nodeType": "YulIf",
                          "src": "25283:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25331:16:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "25342:1:34"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "25345:1:34"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25338:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25338:9:34"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "25331:3:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "25256:1:34",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "25259:1:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "25265:3:34",
                        "type": ""
                      }
                    ],
                    "src": "25225:128:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25404:158:34",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "25414:23:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "25429:1:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25432:4:34",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "25425:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25425:12:34"
                          },
                          "variables": [
                            {
                              "name": "x_1",
                              "nodeType": "YulTypedName",
                              "src": "25418:3:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "25446:23:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "25461:1:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25464:4:34",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "25457:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25457:12:34"
                          },
                          "variables": [
                            {
                              "name": "y_1",
                              "nodeType": "YulTypedName",
                              "src": "25450:3:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "25505:22:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "25507:16:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "25507:18:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "25507:18:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "25484:3:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25493:4:34",
                                    "type": "",
                                    "value": "0xff"
                                  },
                                  {
                                    "name": "y_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "25499:3:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "25489:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25489:14:34"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "25481:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25481:23:34"
                          },
                          "nodeType": "YulIf",
                          "src": "25478:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25536:20:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "25547:3:34"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "25552:3:34"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25543:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25543:13:34"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "25536:3:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "25387:1:34",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "25390:1:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "25396:3:34",
                        "type": ""
                      }
                    ],
                    "src": "25358:204:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25613:74:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "25636:22:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "25638:16:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "25638:18:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "25638:18:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "25633:1:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "25626:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25626:9:34"
                          },
                          "nodeType": "YulIf",
                          "src": "25623:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25667:14:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "25676:1:34"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "25679:1:34"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "25672:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25672:9:34"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "25667:1:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "25598:1:34",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "25601:1:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "25607:1:34",
                        "type": ""
                      }
                    ],
                    "src": "25567:120:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25744:116:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "25803:22:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "25805:16:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "25805:18:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "25805:18:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "25775:1:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "25768:6:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "25768:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "25761:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25761:17:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "25783:1:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "25794:1:34",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "25790:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "25790:6:34"
                                      },
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "25798:1:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "25786:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "25786:14:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "25780:2:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25780:21:34"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "25757:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25757:45:34"
                          },
                          "nodeType": "YulIf",
                          "src": "25754:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25834:20:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "25849:1:34"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "25852:1:34"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "25845:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25845:9:34"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "25834:7:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "25723:1:34",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "25726:1:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "25732:7:34",
                        "type": ""
                      }
                    ],
                    "src": "25692:168:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25914:76:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "25936:22:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "25938:16:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "25938:18:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "25938:18:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "25930:1:34"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "25933:1:34"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "25927:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25927:8:34"
                          },
                          "nodeType": "YulIf",
                          "src": "25924:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25967:17:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "25979:1:34"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "25982:1:34"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "25975:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25975:9:34"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "25967:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "25896:1:34",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "25899:1:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "25905:4:34",
                        "type": ""
                      }
                    ],
                    "src": "25865:125:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26040:133:34",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "26050:31:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "26069:5:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26076:4:34",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "26065:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26065:16:34"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "26054:7:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "26109:22:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "26111:16:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26111:18:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "26111:18:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "26100:7:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "26093:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26093:15:34"
                          },
                          "nodeType": "YulIf",
                          "src": "26090:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26140:27:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "26151:7:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26164:1:34",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "26160:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26160:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26147:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26147:20:34"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "26140:3:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "decrement_t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "26022:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "26032:3:34",
                        "type": ""
                      }
                    ],
                    "src": "25995:178:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26233:382:34",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "26243:22:34",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26257:1:34",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "26260:4:34"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "26253:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26253:12:34"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "26243:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "26274:38:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "26304:4:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26310:1:34",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "26300:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26300:12:34"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "26278:18:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "26351:31:34",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "26353:27:34",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "26367:6:34"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "26375:4:34",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "26363:3:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26363:17:34"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "26353:6:34"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "26331:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "26324:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26324:26:34"
                          },
                          "nodeType": "YulIf",
                          "src": "26321:2:34"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "26441:168:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "26462:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "26465:77:34",
                                      "type": "",
                                      "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "26455:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26455:88:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "26455:88:34"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "26563:1:34",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "26566:4:34",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "26556:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26556:15:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "26556:15:34"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "26591:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "26594:4:34",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "26584:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26584:15:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "26584:15:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "26397:18:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "26420:6:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26428:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "26417:2:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26417:14:34"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "26394:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26394:38:34"
                          },
                          "nodeType": "YulIf",
                          "src": "26391:2:34"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "26213:4:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "26222:6:34",
                        "type": ""
                      }
                    ],
                    "src": "26178:437:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26667:88:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "26698:22:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "26700:16:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26700:18:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "26700:18:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "26683:5:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26694:1:34",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "26690:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26690:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "26680:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26680:17:34"
                          },
                          "nodeType": "YulIf",
                          "src": "26677:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26729:20:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "26740:5:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26747:1:34",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26736:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26736:13:34"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "26729:3:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "26649:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "26659:3:34",
                        "type": ""
                      }
                    ],
                    "src": "26620:135:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26805:130:34",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "26815:31:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "26834:5:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26841:4:34",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "26830:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26830:16:34"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "26819:7:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "26876:22:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "26878:16:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26878:18:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "26878:18:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "26861:7:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26870:4:34",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "26858:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26858:17:34"
                          },
                          "nodeType": "YulIf",
                          "src": "26855:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26907:22:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "26918:7:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26927:1:34",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26914:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26914:15:34"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "26907:3:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "26787:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "26797:3:34",
                        "type": ""
                      }
                    ],
                    "src": "26760:175:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26976:121:34",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "26986:23:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "27001:1:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27004:4:34",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "26997:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26997:12:34"
                          },
                          "variables": [
                            {
                              "name": "y_1",
                              "nodeType": "YulTypedName",
                              "src": "26990:3:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "27033:22:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "27035:16:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "27035:18:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "27035:18:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "27028:3:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "27021:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27021:11:34"
                          },
                          "nodeType": "YulIf",
                          "src": "27018:2:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27064:27:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "27077:1:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27080:4:34",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "27073:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27073:12:34"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "27087:3:34"
                              }
                            ],
                            "functionName": {
                              "name": "mod",
                              "nodeType": "YulIdentifier",
                              "src": "27069:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27069:22:34"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "27064:1:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "mod_t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "26961:1:34",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "26964:1:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "26970:1:34",
                        "type": ""
                      }
                    ],
                    "src": "26940:157:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27134:152:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27151:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27154:77:34",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27144:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27144:88:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27144:88:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27248:1:34",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27251:4:34",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27241:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27241:15:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27241:15:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27272:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27275:4:34",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "27265:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27265:15:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27265:15:34"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "27102:184:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27323:152:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27340:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27343:77:34",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27333:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27333:88:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27333:88:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27437:1:34",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27440:4:34",
                                "type": "",
                                "value": "0x12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27430:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27430:15:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27430:15:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27461:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27464:4:34",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "27454:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27454:15:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27454:15:34"
                        }
                      ]
                    },
                    "name": "panic_error_0x12",
                    "nodeType": "YulFunctionDefinition",
                    "src": "27291:184:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27512:152:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27529:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27532:77:34",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27522:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27522:88:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27522:88:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27626:1:34",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27629:4:34",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27619:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27619:15:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27619:15:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27650:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27653:4:34",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "27643:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27643:15:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27643:15:34"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "27480:184:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27713:133:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "27824:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "27833:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "27836:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "27826:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "27826:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "27826:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "27736:5:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "27747:5:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "27754:66:34",
                                        "type": "",
                                        "value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "27743:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "27743:78:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "27733:2:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27733:89:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "27726:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27726:97:34"
                          },
                          "nodeType": "YulIf",
                          "src": "27723:2:34"
                        }
                      ]
                    },
                    "name": "validator_revert_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "27702:5:34",
                        "type": ""
                      }
                    ],
                    "src": "27669:177:34"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value3, value3) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value3, value3) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value3, value3) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(value3, value3) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), value3)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value1, value1) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := abi_decode_address(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := end\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := end\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(pos, length), 0x20), end)\n        }\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_packed_t_bytes32_t_uint256_t_address__to_t_bytes32_t_uint256_t_address__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), value1)\n        mstore(add(pos, 64), and(shl(96, value2), not(0xffffffffffffffffffffffff)))\n        end := add(pos, 84)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_bytes(value3, add(headStart, 128))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_bool__to_t_address_t_uint256_t_uint256_t_bool__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), iszero(iszero(value3)))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bytes1__to_t_bytes1__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff00000000000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_23d42c2b0f86ea0ac89f12b0d2207f3003e69f4eb76b2994873579c9e39728ab__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 8)\n        mstore(add(headStart, 64), \"SL:HSO:0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_24f1d24b7dcbcafba5203e0be59125103f43122715e4c58e753de654472bf12c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 7)\n        mstore(add(headStart, 64), \"EPC:SBL\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2565dbf2ddad0b403d5f907825d0b6b4931cd4dd7941d4164e161b54453c48aa__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 7)\n        mstore(add(headStart, 64), \"ML:SI:0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2bf80e8a41f2eebc6413ce4198abf20fe9b61ccbf080e2d92589504aa6bfa915__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 6)\n        mstore(add(headStart, 64), \"IL:M:0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_35a41a0528c0e076e67a4d151b5aa7b3349d2c9c4a0f2d3b371679fa6bf41582__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 8)\n        mstore(add(headStart, 64), \"SL:PFM:0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_427b78294d71712f55d74f14c6ccc5d55010d344a9ce174c9a7336a4ecf668b2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 8)\n        mstore(add(headStart, 64), \"SL:OBP:2\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_441c5cd05b1495dbf3dd5f179717bcab80711f383aa69f0c3ed639fc05e98573__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 7)\n        mstore(add(headStart, 64), \"NS:GS:0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"Address: unable to send value, r\")\n        mstore(add(headStart, 96), \"ecipient may have reverted\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"ERC721: operator query for nonex\")\n        mstore(add(headStart, 96), \"istent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_5f198b1eb59a47877e3a01bd3ac9924e9d97396b07b4790db6a836e8a1dc5d27__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 6)\n        mstore(add(headStart, 64), \"NS:M:D\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not ow\")\n        mstore(add(headStart, 96), \"ner nor approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC721: balance query for the ze\")\n        mstore(add(headStart, 96), \"ro address\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: owner query for nonexist\")\n        mstore(add(headStart, 96), \"ent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7c5a57547e6a2a1f6df9348d1a65d44f860fb71bb27debd910f7a18d9716252e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 6)\n        mstore(add(headStart, 64), \"NS:0:0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7dd92b5ad5bbf8001f1c16195afd8f1f813a6d2b8c38f3a035b5013afed18c36__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 8)\n        mstore(add(headStart, 64), \"SL:PFM:1\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8217bc08e779fb81827f6778c1b2fea37b292ab936643f7c8357de8d9b561e35__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 7)\n        mstore(add(headStart, 64), \"NS:SS:0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8361a380db3d4dd570f2cafc320876047e9a8c5dd1f5572ddd1e6301ec33a8a2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 7)\n        mstore(add(headStart, 64), \"SL:CC:1\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_855f80560fc2a25c428cd352860cb9c8b5ad69a904c9af47e7eedbb84eabe391__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 10)\n        mstore(add(headStart, 64), \"721:MINT:1\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"ERC721: approved query for nonex\")\n        mstore(add(headStart, 96), \"istent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9331496243ba38811084eacf7467acd904887520ab5c499748935a16031b1992__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"1155:SBTF:1\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9a0734679295cfdb6a7a5de99a03ebec34846d71de2503dfa0ab29146d546618__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 8)\n        mstore(add(headStart, 64), \"SL:HSO:1\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9ff9f5e4c9a4b4e337de73a03b02a974459bdb9ff5d50cf5409368f7a0fe3271__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 8)\n        mstore(add(headStart, 64), \"AUC:TT:3\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: transfer of token that i\")\n        mstore(add(headStart, 96), \"s not own\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_a9d0f7825f133376d6fd788054e7028141c523cbd16047344b53ce9a6a4a20f0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 8)\n        mstore(add(headStart, 64), \"SL:OBP:4\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_afd89edd765b530102d060e2bc0fa03c71612e6e490008a33194508272964ff8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 10)\n        mstore(add(headStart, 64), \"721:MINT:0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b6cda6b979c3d0498b8c2116636ff162965dce1e1f55c25a49a215fc3b4e9e11__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 7)\n        mstore(add(headStart, 64), \"ML:OI:0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_bed796f448ee617ad426cc34fd5d00b384155800d6457340d4cfb4444b78c5b9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 8)\n        mstore(add(headStart, 64), \"SL:COM:2\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 49)\n        mstore(add(headStart, 64), \"ERC721: transfer caller is not o\")\n        mstore(add(headStart, 96), \"wner nor approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cd15bc5ab2b8e8b651ca7e9b130c7d4e199c13289f0f060e7e7ec9f6914c2a1f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 6)\n        mstore(add(headStart, 64), \"NS:M:0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d4059c221d70597754719849878bd2fc81c98a67572f354ac770b4a759bf5d79__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 10)\n        mstore(add(headStart, 64), \"1155:STF:0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f4a12ce7cdd3ff403cdfecfdd167aa97d1b6db01e8f58badb61826a5ea5402d0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 8)\n        mstore(add(headStart, 64), \"SL:OBP:3\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f6fee39363925c23794a8c0eae826119dd999a411b919b2a55fff8c82349e017__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 7)\n        mstore(add(headStart, 64), \"ML:CI:0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint160_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_array_uint256_dyn(value1, add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_address__to_t_uint256_t_uint256_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__to_t_uint256_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), 96)\n        tail := abi_encode_array_uint256_dyn(value2, add(headStart, 96))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint160_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint160__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_add_t_uint8(x, y) -> sum\n    {\n        let x_1 := and(x, 0xff)\n        let y_1 := and(y, 0xff)\n        if gt(x_1, sub(0xff, y_1)) { panic_error_0x11() }\n        sum := add(x_1, y_1)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function decrement_t_uint8(value) -> ret\n    {\n        let value_1 := and(value, 0xff)\n        if iszero(value_1) { panic_error_0x11() }\n        ret := add(value_1, not(0))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function increment_t_uint8(value) -> ret\n    {\n        let value_1 := and(value, 0xff)\n        if eq(value_1, 0xff) { panic_error_0x11() }\n        ret := add(value_1, 1)\n    }\n    function mod_t_uint8(x, y) -> r\n    {\n        let y_1 := and(y, 0xff)\n        if iszero(y_1) { panic_error_0x12() }\n        r := mod(and(x, 0xff), y_1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n    }\n}",
              "id": 34,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {
            "4458": [
              {
                "length": 32,
                "start": 1060
              },
              {
                "length": 32,
                "start": 2172
              },
              {
                "length": 32,
                "start": 2687
              },
              {
                "length": 32,
                "start": 3048
              },
              {
                "length": 32,
                "start": 3140
              },
              {
                "length": 32,
                "start": 3232
              },
              {
                "length": 32,
                "start": 3718
              },
              {
                "length": 32,
                "start": 3851
              }
            ],
            "4461": [
              {
                "length": 32,
                "start": 1243
              },
              {
                "length": 32,
                "start": 2136
              },
              {
                "length": 32,
                "start": 2597
              },
              {
                "length": 32,
                "start": 2720
              },
              {
                "length": 32,
                "start": 2922
              },
              {
                "length": 32,
                "start": 3012
              },
              {
                "length": 32,
                "start": 3106
              },
              {
                "length": 32,
                "start": 3198
              },
              {
                "length": 32,
                "start": 3613
              },
              {
                "length": 32,
                "start": 3683
              },
              {
                "length": 32,
                "start": 3884
              }
            ]
          },
          "linkReferences": {},
          "object": "6080604052600436106101cd5760003560e01c80638f4c1d4f116100f7578063a7f0b3de11610095578063d636feae11610064578063d636feae1461055e578063d96073cf14610571578063e985e9c514610591578063f4f98ad5146105b157600080fd5b8063a7f0b3de146104c9578063b88d4fde146104fd578063c34902631461051d578063c87b56dd1461053d57600080fd5b806396cfd827116100d157806396cfd827146104705780639fa6dd3514610483578063a0712d6814610496578063a22cb465146104a957600080fd5b80638f4c1d4f14610412578063900cf0cf1461044657806395d89b411461045b57600080fd5b806342842e0e1161016f57806370a082311161013e57806370a0823114610382578063761610fc146103b057806378b38f36146103c3578063884c66ae146103f257600080fd5b806342842e0e1461030257806349b44f98146103225780634dd1496b146103425780636352211e1461036257600080fd5b8063095ea7b3116101ab578063095ea7b3146102615780630cf27c2a146102835780631cd4ad3a1461029657806323b872dd146102e257600080fd5b806301ffc9a7146101d257806306fdde0314610207578063081812fc14610229575b600080fd5b3480156101de57600080fd5b506101f26101ed366004613930565b6105c4565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b5061021c610661565b6040516101fe9190613ae8565b34801561023557600080fd5b50610249610244366004613968565b6106f5565b6040516001600160a01b0390911681526020016101fe565b34801561026d57600080fd5b5061028161027c366004613907565b610701565b005b6102816102913660046139d5565b610839565b3480156102a257600080fd5b506102b66102b1366004613968565b6108a0565b604080516001600160a01b039095168552602085019390935291830152151560608201526080016101fe565b3480156102ee57600080fd5b506102816102fd3660046137bd565b610946565b34801561030e57600080fd5b5061028161031d3660046137bd565b6109c1565b34801561032e57600080fd5b5061028161033d3660046139d5565b6109dc565b34801561034e57600080fd5b5061028161035d366004613a00565b610a03565b34801561036e57600080fd5b5061024961037d366004613968565b610a52565b34801561038e57600080fd5b506103a261039d36600461377a565b610a5e565b6040519081526020016101fe565b6102816103be366004613968565b610a6a565b3480156103cf57600080fd5b506103e36103de366004613968565b610ac7565b6040516101fe93929190613b14565b3480156103fe57600080fd5b506103a261040d3660046139a1565b610ae4565b34801561041e57600080fd5b506102497f000000000000000000000000000000000000000000000000000000000000000081565b34801561045257600080fd5b506103a2610b63565b34801561046757600080fd5b5061021c610b93565b61028161047e3660046139d5565b610ba5565b610281610491366004613968565b610c0c565b6102816104a4366004613968565b610c68565b3480156104b557600080fd5b506102816104c43660046138cd565b610cc8565b3480156104d557600080fd5b506103a27f000000000000000000000000000000000000000000000000000000000000000081565b34801561050957600080fd5b506102816105183660046137f8565b610d8d565b34801561052957600080fd5b50610281610538366004613980565b610e09565b34801561054957600080fd5b5061021c610558366004613968565b50606090565b61028161056c3660046139d5565b610e43565b34801561057d57600080fd5b5061028161058c366004613980565b610eaa565b34801561059d57600080fd5b506101f26105ac366004613794565b610ec3565b6102816105bf366004613968565b610ef6565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061062757506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061065b57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b606060008001805461067290613bd7565b80601f016020809104026020016040519081016040528092919081815260200182805461069e90613bd7565b80156106eb5780601f106106c0576101008083540402835291602001916106eb565b820191906000526020600020905b8154815290600101906020018083116106ce57829003601f168201915b5050505050905090565b600061065b8183610f50565b600061070d8183610feb565b9050806001600160a01b0316836001600160a01b0316141561079c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806107b857506107b88133610ec3565b61082a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610793565b6108348383611078565b505050565b60008381526009602090815260408083208584529091528120610834917f00000000000000000000000000000000000000000000000000000000000000008686867f00000000000000000000000000000000000000000000000000000000000000006110e7565b600081815260086020526040812081908190819081906108c090826111df565b509050806108fa5760405162461bcd60e51b815260206004820152600760248201526604e533a47533a360cc1b6044820152606401610793565b80945060a881901c65ffffffffffff1660a082901c60ff166004021b64e8d4a510000293506109308160d81c640fffffffff1690565b925061093c8160ff1c90565b9150509193509193565b61095033826111f7565b6109b65760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b6108348383836112c2565b61083483838360405180602001604052806000815250610d8d565b60008381526009602090815260408083208584529091528120610834916006858588611491565b60008481526009602090815260408083208684529091528120610a4c916006877f0000000000000000000000000000000000000000000000000000000000000000888789611623565b50505050565b600061065b8183610feb565b600061065b81836117ae565b6000818152600860205260409020610ac490827f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061184c565b50565b6000806060610ad76006856118a1565b9250925092509193909250565b60008381526008602052604081208190610aff9084866118d4565b91505080610b395760405162461bcd60e51b815260206004820152600760248201526604e533a47533a360cc1b6044820152606401610793565b60a881901c65ffffffffffff1660a082901c60ff166004021b64e8d4a51000025b95945050505050565b6000610b8e7f00000000000000000000000000000000000000000000000000000000000000006118ee565b905090565b60606000600101805461067290613bd7565b60008381526009602090815260408083208584529091528120610834917f00000000000000000000000000000000000000000000000000000000000000008686867f00000000000000000000000000000000000000000000000000000000000000006118fa565b6000818152600860205260409020610ac49060067f0000000000000000000000000000000000000000000000000000000000000000847f00000000000000000000000000000000000000000000000000000000000000006119a8565b6000818152600860205260409020610cc49060067f0000000000000000000000000000000000000000000000000000000000000000847f0000000000000000000000000000000000000000000000000000000000000000611a2a565b5050565b6001600160a01b038216331415610d215760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610793565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610d9733836111f7565b610dfd5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b610a4c84848484611b9a565b6000828152600860205260408120610cc4917f00000000000000000000000000000000000000000000000000000000000000008585611c23565b6000838152600960209081526040808320858452909152812061083491857f000000000000000000000000000000000000000000000000000000000000000086867f0000000000000000000000000000000000000000000000000000000000000000611d1b565b6000828152600860205260408120610cc4918484611e1c565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081205460ff165b9392505050565b6000818152600860205260409020610ac490827f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611ed6565b60008181526002830160205260408120546001600160a01b0316610fcb5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610793565b50600090815260049190910160205260409020546001600160a01b031690565b60008181526002830160205260408120546001600160a01b031680610eef5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610793565b600081815260046020526040812080546001600160a01b0319166001600160a01b03851690811790915582916110ae9083610feb565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61010083106111225760405162461bcd60e51b815260206004820152600760248201526604d4c3a43493a360cc1b6044820152606401610793565b33611136876001600160a01b038516610feb565b6001600160a01b0316146111775760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b61118387838388611f21565b60408051858152602081018590526001600160a01b038416918101919091523460608201527ff562263f29883bf3519f3733bb30b47c831bfe9809884430857d8cf29571d554906080015b60405180910390a150505050505050565b6000806111ec848461217d565b915091509250929050565b6000611202826121fc565b6112635760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610793565b600061126f8184610feb565b9050806001600160a01b0316846001600160a01b031614806112aa5750836001600160a01b031661129f846106f5565b6001600160a01b0316145b806112ba57506112ba8185610ec3565b949350505050565b6001600160a01b0383166112d7600083610feb565b6001600160a01b0316146113535760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610793565b6001600160a01b0382166113ce5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610793565b6113d9600082611078565b6001600160a01b0383166000908152600360205260408120805460019290611402908490613ba3565b90915550506001600160a01b0382166000908152600360205260408120805460019290611430908490613b33565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b336114a5866001600160a01b038416610feb565b6001600160a01b0316146114e65760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b61010083106115375760405162461bcd60e51b815260206004820152600760248201527f4d4c3a53493a30000000000000000000000000000000000000000000000000006044820152606401610793565b6000611543878361217d565b509050801561157e5760405162461bcd60e51b815260206004820152600760248201526604e533a53533a360cc1b6044820152606401610793565b6115c2836115bc60016001600160a01b0319851686175b90507f80000000000000000000000000000000000000000000000000000000000000001790565b9061221b565b5080885590506115dc856001600160a01b0384168661229c565b604080516001600160a01b0384168152602081018690529081018490527fc8032e5c721106f3e30ad0f1a45e919c8d034cf788842ff336b0150f0fbcc60e906060016111ce565b33611637886001600160a01b038416610feb565b6001600160a01b0316146116785760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b61010083106116b35760405162461bcd60e51b815260206004820152600760248201526604d4c3a43493a360cc1b6044820152606401610793565b60006116be866118ee565b90506000806116ce8b8587612359565b600087815260018e01602090815260408083206001600160a01b038a1684529091528120559092509050611704848383866123d9565b156117265760008b55611721896001600160a01b03861688612477565b611751565b61175160a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a51000025b3390612593565b60408051888152602081018890529081018690526001600160a01b03851660608201527f38195a074a64067740045e77ca5873f34a0df243a8ac9ecc39452c47e7061e479060800160405180910390a15050505050505050505050565b60006001600160a01b03821661182c5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610793565b506001600160a01b03166000908152600391909101602052604090205490565b611858843384846126ac565b6040805184815233602082015234918101919091527f2d57124cfa4e385afd5cc9d6f24874bdd21303ac9131d7cb674be2a5855c7002906060015b60405180910390a150505050565b60008181526020839052604081205481906060906118be816129b0565b60ff600883901c81169892169650945092505050565b6000806118e2858585612359565b91509150935093915050565b600061065b8243612a6a565b3361190e876001600160a01b038516610feb565b6001600160a01b03161461194f5760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b60008061195c898561217d565b9150915080600014801561197557506119758260ff1c90565b1561198e57611989898989898989896110e7565b61199d565b61199d89898989898989611d1b565b505050505050505050565b60006119b3846118ee565b90506000806119c288336111df565b9150915084831480156119d3575081155b156119eb576119e58888888888611a2a565b50611a20565b801580156119fe57506119fe8260ff1c90565b15611a1457611a0f88868689611ed6565b611a20565b611a208886868961184c565b5050505050505050565b600080611a36856118ee565b9050600080611a4589336111df565b91509150858314611a985760405162461bcd60e51b815260206004820152600660248201527f4e533a4d3a3000000000000000000000000000000000000000000000000000006044820152606401610793565b8115611ae65760405162461bcd60e51b815260206004820152600660248201527f4e533a4d3a4400000000000000000000000000000000000000000000000000006044820152606401610793565b611b07346115bc33611af9600088612a82565b6001600160a01b0319161790565b50808a5593503415611b2657611b266001600160a01b03861634612593565b611b31888789612ad4565b6040805184815233602082015264e8d4a5100065ffffffffffff60a888901c16600460ff60a08a901c16021b028183015290517f4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f69181900360600190a150505095945050505050565b611ba58484846112c2565b611bb184848484612c6d565b610a4c5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610793565b6000611c2e846118ee565b9050600080611c3e8833866118d4565b600086815260018b01602090815260408083203380855292528220919091559193509150611c6e908383866123d9565b15611caa5760008855611c888260d81c640fffffffff1690565b841415611c9f57611c9a873387612dcd565b611cd2565b611c9a873387612eda565b611cd260a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a510000261174a565b6040805186815260208101869052338183015290517fd79254e5daba749baa8ba954e77bbbb18efef113a8070d00df9a188d819324269181900360600190a15050505050505050565b6101008310611d6c5760405162461bcd60e51b815260206004820152600760248201527f4d4c3a4f493a30000000000000000000000000000000000000000000000000006044820152606401610793565b33611d80876001600160a01b038516610feb565b6001600160a01b031614611dc15760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b611dcd878383886126ac565b60408051858152602081018590526001600160a01b038416918101919091523460608201527fe237f23f900f35d5f1a406ba97ccfdffe082ffcda87098765811817c2c14ac87906080016111ce565b6000611e2885336111df565b5090508015611e635760405162461bcd60e51b815260206004820152600760248201526604e533a53533a360cc1b6044820152606401610793565b611e7e826115bc60016001600160a01b031985163317611595565b508086559050611e8f84338561300e565b604080518481523360208201529081018390527f48b43f133ac721cb5f6e2a3d8ab7caee987bccfb4197537cf43c9f907f057f3a9060600160405180910390a15050505050565b611ee284338484611f21565b6040805184815233602082015234918101919091527f094925310677b39991f64178494fad708beb62f73f36bb0baa493476ecf5870990606001611893565b6000611f2c826118ee565b9050600080611f3b878761217d565b9092509050611f4982613180565b60003411611f995760405162461bcd60e51b815260206004820152600860248201527f534c3a434f4d3a320000000000000000000000000000000000000000000000006044820152606401610793565b8015611fd25760405162461bcd60e51b81526020600482015260086024820152670534c3a48534f3a360c41b6044820152606401610793565b611fdc8260ff1c90565b6120285760405162461bcd60e51b815260206004820152600860248201527f534c3a48534f3a310000000000000000000000000000000000000000000000006044820152606401610793565b6000612035846001613b33565b905060008061204c346115bc8b611af98588612a82565b909250905060a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a51000026120a1606461271060a889901c65ffffffffffff1660a08a901c60ff166004021b64e8d4a51000025b91906131f3565b106120d95760405162461bcd60e51b815260206004820152600860248201526714d30e93d0940e8d60c21b6044820152606401610793565b600083815260018b01602052604081208691826001600160a01b03168152602081019190915260400160002055818a556121718160a887901c65ffffffffffff1660a088901c60ff166004021b64e8d4a510000260a885901c65ffffffffffff1660a086901c60ff166004021b64e8d4a51000026121579190613ba3565b6121619190613b33565b6001600160a01b038a1690612593565b50505050505050505050565b8154600081158061219f5750816001600160a01b0316836001600160a01b0316145b6121f1578360010160006121ba8460d81c640fffffffff1690565b81526020019081526020016000206000846001600160a01b03166001600160a01b03168152602001908152602001600020546121f3565b815b90509250929050565b6000818152600260205260408120546001600160a01b0316151561065b565b6000808264e8d4a51000840493505b65ffffffffffff841115612249576001830192508360041c935061222a565b828460081b1793508360081c836004021b64e8d4a5100081028203925050507fffffffffff00000000000000ffffffffffffffffffffffffffffffffffffffff841693508260a01b841791509250929050565b600082815260208490526040902054806122e55760405162461bcd60e51b815260206004820152600a6024820152690313135353a5354463a360b41b6044820152606401610793565b6122ef81836132b1565b505060008481526020868152604080832084905585835260018801909152812080549293509061231e83613c12565b909155505060408051848152602081018490527f452c5f777db10bd58f64d8bc58668d14487d008ff527ca431853ea22e195f1769101611893565b825460008261236f8360d81c640fffffffff1690565b1461237b57600061237d565b815b9150811580159061239f5750816001600160a01b0316846001600160a01b0316145b6123cd57600083815260018601602090815260408083206001600160a01b03881684529091529020546123cf565b815b9050935093915050565b6000826124285760405162461bcd60e51b815260206004820152600760248201527f534c3a43433a31000000000000000000000000000000000000000000000000006044820152606401610793565b600061243b8560d81c640fffffffff1690565b831190506124498560ff1c90565b8061246d5750846001600160a01b0316866001600160a01b031614801561246d5750805b9695505050505050565b600082815260208490526040902054806124c05760405162461bcd60e51b815260206004820152600a6024820152690313135353a5354463a360b41b6044820152606401610793565b600082815260018501602052604090205461251d5760405162461bcd60e51b815260206004820152600b60248201527f313135353a534254463a310000000000000000000000000000000000000000006044820152606401610793565b6000828152600185016020526040812080549161253983613c12565b9091555061254990508183613408565b506000848152602086815260409182902083905581518681529081018590529192507f452c5f777db10bd58f64d8bc58668d14487d008ff527ca431853ea22e195f1769101611893565b804710156125e35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610793565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612630576040519150601f19603f3d011682016040523d82523d6000602084013e612635565b606091505b50509050806108345760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610793565b60006126b7826118ee565b90506000806126c6878761217d565b915091506000341161271a5760405162461bcd60e51b815260206004820152600860248201527f534c3a4f42503a320000000000000000000000000000000000000000000000006044820152606401610793565b816127675760405162461bcd60e51b815260206004820152600660248201527f4e533a303a3000000000000000000000000000000000000000000000000000006044820152606401610793565b6127718160ff1c90565b156127a95760405162461bcd60e51b81526020600482015260086024820152670534c3a48534f3a360c41b6044820152606401610793565b6127ba8260d81c640fffffffff1690565b8311156128095760405162461bcd60e51b815260206004820152600860248201527f534c3a4f42503a330000000000000000000000000000000000000000000000006044820152606401610793565b6001600160a01b038616826001600160a01b03161461286c578187600101600061283a8560d81c640fffffffff1690565b815260200190815260200160002060006128518590565b6001600160a01b031681526020810191909152604001600020555b6000806128bb61289b3464e8d4a5100065ffffffffffff60a888901c16600460ff60a08a901c16021b02613b33565b6115bc8a611af96128b38960d81c640fffffffff1690565b600090612a82565b909250905060a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a510000261290d606461271060a888901c65ffffffffffff1660a089901c60ff166004021b64e8d4a510000261209a565b106129455760405162461bcd60e51b815260206004820152600860248201526714d30e93d0940e8d60c21b6044820152606401610793565b81895561199d8160a886901c65ffffffffffff1660a087901c60ff166004021b64e8d4a510000260a885901c65ffffffffffff1660a086901c60ff166004021b64e8d4a51000026129969190613ba3565b6129a09190613b33565b6001600160a01b03891690612593565b606060ff82168067ffffffffffffffff8111156129dd57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612a06578160200160208202803683370190505b509150600883901c925060005b81811015612a6357600884901c93508360ff16838281518110612a4657634e487b7160e01b600052603260045260246000fd5b602090810291909101015280612a5b81613c12565b915050612a13565b5050919050565b60006019612a788484613ba3565b610eef9190613b70565b6000640fffffffff821115612aa757634e487b7160e01b600052600160045260246000fd5b5060d81b7ff000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff919091161790565b600080612ae0836134f2565b915091508160001415612b355760405162461bcd60e51b815260206004820152600a60248201527f3732313a4d494e543a30000000000000000000000000000000000000000000006044820152606401610793565b838114612b845760405162461bcd60e51b815260206004820152600a60248201527f3732313a4d494e543a31000000000000000000000000000000000000000000006044820152606401610793565b6000612b918686856135bb565b90507fe98dd458321045a46b57bd2d5251a739e0f01750a71e4d3e71cee6c17164dd328582604051612bc4929190613afb565b60405180910390a16000815167ffffffffffffffff811115612bf657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612c1f578160200160208202803683370190505b50905060005b8151811015611a20576001828281518110612c5057634e487b7160e01b600052603260045260246000fd5b602090810291909101015280612c6581613c12565b915050612c25565b60006001600160a01b0384163b15612dc557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612cb1903390899088908890600401613ab6565b602060405180830381600087803b158015612ccb57600080fd5b505af1925050508015612cfb575060408051601f3d908101601f19168201909252612cf89181019061394c565b60015b612dab573d808015612d29576040519150601f19603f3d011682016040523d82523d6000602084013e612d2e565b606091505b508051612da35760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610793565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506112ba565b5060016112ba565b612de830838360405180602001604052806000815250612c6d565b612e4e5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b6001600160a01b03821660009081526003840160205260408120805460019290612e79908490613b33565b9091555050600081815260028401602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b612ef530838360405180602001604052806000815250612c6d565b612f5b5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b3060009081526003840160205260408120805460019290612f7d908490613ba3565b90915550506001600160a01b03821660009081526003840160205260408120805460019290612fad908490613b33565b9091555050600081815260028401602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839230917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a4505050565b6130188382610feb565b6001600160a01b0316336001600160a01b031614801561304057506001600160a01b03821633145b801561305d5750306130528483610f50565b6001600160a01b0316145b6130c35760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b6130cd838261366c565b6001600160a01b038216600090815260038401602052604081208054600192906130f8908490613ba3565b9091555050306000908152600384016020526040812080546001929061311f908490613b33565b9091555050600081815260028401602052604080822080546001600160a01b03191630908117909155905183926001600160a01b038616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a4505050565b610ac48160405160240161319691815260200190565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f27b7cf8500000000000000000000000000000000000000000000000000000000179052613696565b60008080600019858709858702925082811083820303915050806000141561322d576000841161322257600080fd5b508290049050610eef565b80841161323957600080fd5b600084868809808403938111909203919050600061325986196001613b33565b8616958690049560026003880281188089028203028089028203028089028203028089028203028089028203028089029091030260008290038290046001019490940294049390931791909102925050509392505050565b6000806000806132c0866129b0565b905060005b81518160ff16101561332a578560ff16828260ff16815181106132f857634e487b7160e01b600052603260045260246000fd5b6020026020010151141561331857613311816001613b4b565b925061332a565b8061332281613c2d565b9150506132c5565b5061333486613180565b6133408560f81b6136b7565b60008260ff161161337e5760405162461bcd60e51b81526020600482015260086024820152670534c3a50464d3a360c41b6044820152606401610793565b8161338881613bba565b60ff6010600883020190811b198916965088901c945092506133ab905084613180565b8460ff168360ff16146134005760405162461bcd60e51b815260206004820152600860248201527f534c3a50464d3a310000000000000000000000000000000000000000000000006044820152606401610793565b509250925092565b6000806000613416856129b0565b905060005b81518160ff16101561347e57818160ff168151811061344a57634e487b7160e01b600052603260045260246000fd5b60200260200101516000141561346c57613465816001613b4b565b925061347e565b8061347681613c2d565b91505061341b565b5061348885613180565b60008260ff16116134c65760405162461bcd60e51b81526020600482015260086024820152670534c3a50464d3a360c41b6044820152606401610793565b816134d081613bba565b9250506008820260100184901b851792506134ea83613180565b509250929050565b6000806134ff8343612a6a565b9050600061350d8483613746565b9050600061351c600183613ba3565b4090508061356c5760405162461bcd60e51b815260206004820152600760248201527f4550433a53424c000000000000000000000000000000000000000000000000006044820152606401610793565b604080516020810183905290810184905230606090811b6bffffffffffffffffffffffff1916908201526074016040516020818303038152906040528051906020012060001c93505050915091565b6000828152602084905260409020546060901561361a5760405162461bcd60e51b815260206004820152600660248201527f494c3a4d3a3000000000000000000000000000000000000000000000000000006044820152606401610793565b613650600461364860146136318660081c60ff1690565b61363b9190613c4d565b60081b61ff001986161790565b60ff19161790565b600084815260208690526040902081905591506112ba826129b0565b6000818152600483016020526040812080546001600160a01b031916905581906110ae8483610feb565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6040517fff0000000000000000000000000000000000000000000000000000000000000082166024820152610ac49060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f6e18a12800000000000000000000000000000000000000000000000000000000179052613696565b600082613754601984613b84565b610eef9190613b33565b80356001600160a01b038116811461377557600080fd5b919050565b60006020828403121561378b578081fd5b610eef8261375e565b600080604083850312156137a6578081fd5b6137af8361375e565b91506121f36020840161375e565b6000806000606084860312156137d1578081fd5b6137da8461375e565b92506137e86020850161375e565b9150604084013590509250925092565b6000806000806080858703121561380d578081fd5b6138168561375e565b93506138246020860161375e565b925060408501359150606085013567ffffffffffffffff80821115613847578283fd5b818701915087601f83011261385a578283fd5b81358181111561386c5761386c613c9b565b604051601f8201601f19908116603f0116810190838211818310171561389457613894613c9b565b816040528281528a60208487010111156138ac578586fd5b82602086016020830137918201602001949094529598949750929550505050565b600080604083850312156138df578182fd5b6138e88361375e565b9150602083013580151581146138fc578182fd5b809150509250929050565b60008060408385031215613919578182fd5b6139228361375e565b946020939093013593505050565b600060208284031215613941578081fd5b8135610eef81613cb1565b60006020828403121561395d578081fd5b8151610eef81613cb1565b600060208284031215613979578081fd5b5035919050565b60008060408385031215613992578182fd5b50508035926020909101359150565b6000806000606084860312156139b5578283fd5b83359250602084013591506139cc6040850161375e565b90509250925092565b6000806000606084860312156139e9578283fd5b505081359360208301359350604090920135919050565b60008060008060808587031215613a15578384fd5b5050823594602084013594506040840135936060013592509050565b6000815180845260208085019450808401835b83811015613a6057815187529582019590820190600101613a44565b509495945050505050565b60008151808452815b81811015613a9057602081850181015186830182015201613a74565b81811115613aa15782602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261246d6080830184613a6b565b602081526000610eef6020830184613a6b565b8281526040602082015260006112ba6040830184613a31565b838152826020820152606060408201526000610b5a6060830184613a31565b60008219821115613b4657613b46613c6f565b500190565b600060ff821660ff84168060ff03821115613b6857613b68613c6f565b019392505050565b600082613b7f57613b7f613c85565b500490565b6000816000190483118215151615613b9e57613b9e613c6f565b500290565b600082821015613bb557613bb5613c6f565b500390565b600060ff821680613bcd57613bcd613c6f565b6000190192915050565b600181811c90821680613beb57607f821691505b60208210811415613c0c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613c2657613c26613c6f565b5060010190565b600060ff821660ff811415613c4457613c44613c6f565b60010192915050565b600060ff831680613c6057613c60613c85565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610ac457600080fdfea26469706673582212205169566c3a53102d2c7a1d44a4ebc1b265d9e8453682048cb21a5b3bd367327264736f6c63430008040033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CD JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8F4C1D4F GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xA7F0B3DE GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xD636FEAE GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xD636FEAE EQ PUSH2 0x55E JUMPI DUP1 PUSH4 0xD96073CF EQ PUSH2 0x571 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x591 JUMPI DUP1 PUSH4 0xF4F98AD5 EQ PUSH2 0x5B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA7F0B3DE EQ PUSH2 0x4C9 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x4FD JUMPI DUP1 PUSH4 0xC3490263 EQ PUSH2 0x51D JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x53D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x96CFD827 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x96CFD827 EQ PUSH2 0x470 JUMPI DUP1 PUSH4 0x9FA6DD35 EQ PUSH2 0x483 JUMPI DUP1 PUSH4 0xA0712D68 EQ PUSH2 0x496 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x4A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8F4C1D4F EQ PUSH2 0x412 JUMPI DUP1 PUSH4 0x900CF0CF EQ PUSH2 0x446 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x45B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42842E0E GT PUSH2 0x16F JUMPI DUP1 PUSH4 0x70A08231 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x382 JUMPI DUP1 PUSH4 0x761610FC EQ PUSH2 0x3B0 JUMPI DUP1 PUSH4 0x78B38F36 EQ PUSH2 0x3C3 JUMPI DUP1 PUSH4 0x884C66AE EQ PUSH2 0x3F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42842E0E EQ PUSH2 0x302 JUMPI DUP1 PUSH4 0x49B44F98 EQ PUSH2 0x322 JUMPI DUP1 PUSH4 0x4DD1496B EQ PUSH2 0x342 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1AB JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x261 JUMPI DUP1 PUSH4 0xCF27C2A EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0x1CD4AD3A EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x207 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x229 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x1ED CALLDATASIZE PUSH1 0x4 PUSH2 0x3930 JUMP JUMPDEST PUSH2 0x5C4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21C PUSH2 0x661 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FE SWAP2 SWAP1 PUSH2 0x3AE8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x235 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x244 CALLDATASIZE PUSH1 0x4 PUSH2 0x3968 JUMP JUMPDEST PUSH2 0x6F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x27C CALLDATASIZE PUSH1 0x4 PUSH2 0x3907 JUMP JUMPDEST PUSH2 0x701 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x281 PUSH2 0x291 CALLDATASIZE PUSH1 0x4 PUSH2 0x39D5 JUMP JUMPDEST PUSH2 0x839 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B6 PUSH2 0x2B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3968 JUMP JUMPDEST PUSH2 0x8A0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP6 AND DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x1FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x2FD CALLDATASIZE PUSH1 0x4 PUSH2 0x37BD JUMP JUMPDEST PUSH2 0x946 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x31D CALLDATASIZE PUSH1 0x4 PUSH2 0x37BD JUMP JUMPDEST PUSH2 0x9C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x33D CALLDATASIZE PUSH1 0x4 PUSH2 0x39D5 JUMP JUMPDEST PUSH2 0x9DC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x35D CALLDATASIZE PUSH1 0x4 PUSH2 0x3A00 JUMP JUMPDEST PUSH2 0xA03 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x37D CALLDATASIZE PUSH1 0x4 PUSH2 0x3968 JUMP JUMPDEST PUSH2 0xA52 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A2 PUSH2 0x39D CALLDATASIZE PUSH1 0x4 PUSH2 0x377A JUMP JUMPDEST PUSH2 0xA5E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FE JUMP JUMPDEST PUSH2 0x281 PUSH2 0x3BE CALLDATASIZE PUSH1 0x4 PUSH2 0x3968 JUMP JUMPDEST PUSH2 0xA6A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E3 PUSH2 0x3DE CALLDATASIZE PUSH1 0x4 PUSH2 0x3968 JUMP JUMPDEST PUSH2 0xAC7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3B14 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A2 PUSH2 0x40D CALLDATASIZE PUSH1 0x4 PUSH2 0x39A1 JUMP JUMPDEST PUSH2 0xAE4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A2 PUSH2 0xB63 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x467 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21C PUSH2 0xB93 JUMP JUMPDEST PUSH2 0x281 PUSH2 0x47E CALLDATASIZE PUSH1 0x4 PUSH2 0x39D5 JUMP JUMPDEST PUSH2 0xBA5 JUMP JUMPDEST PUSH2 0x281 PUSH2 0x491 CALLDATASIZE PUSH1 0x4 PUSH2 0x3968 JUMP JUMPDEST PUSH2 0xC0C JUMP JUMPDEST PUSH2 0x281 PUSH2 0x4A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x3968 JUMP JUMPDEST PUSH2 0xC68 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x4C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x38CD JUMP JUMPDEST PUSH2 0xCC8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A2 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x509 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x518 CALLDATASIZE PUSH1 0x4 PUSH2 0x37F8 JUMP JUMPDEST PUSH2 0xD8D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x529 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x538 CALLDATASIZE PUSH1 0x4 PUSH2 0x3980 JUMP JUMPDEST PUSH2 0xE09 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x549 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21C PUSH2 0x558 CALLDATASIZE PUSH1 0x4 PUSH2 0x3968 JUMP JUMPDEST POP PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH2 0x281 PUSH2 0x56C CALLDATASIZE PUSH1 0x4 PUSH2 0x39D5 JUMP JUMPDEST PUSH2 0xE43 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x58C CALLDATASIZE PUSH1 0x4 PUSH2 0x3980 JUMP JUMPDEST PUSH2 0xEAA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x59D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x5AC CALLDATASIZE PUSH1 0x4 PUSH2 0x3794 JUMP JUMPDEST PUSH2 0xEC3 JUMP JUMPDEST PUSH2 0x281 PUSH2 0x5BF CALLDATASIZE PUSH1 0x4 PUSH2 0x3968 JUMP JUMPDEST PUSH2 0xEF6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x627 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x65B JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 ADD DUP1 SLOAD PUSH2 0x672 SWAP1 PUSH2 0x3BD7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x69E SWAP1 PUSH2 0x3BD7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x6EB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6C0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x6EB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x6CE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x65B DUP2 DUP4 PUSH2 0xF50 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x70D DUP2 DUP4 PUSH2 0xFEB JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x79C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x7B8 JUMPI POP PUSH2 0x7B8 DUP2 CALLER PUSH2 0xEC3 JUMP JUMPDEST PUSH2 0x82A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F74206F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E6572206E6F7220617070726F76656420666F7220616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x834 DUP4 DUP4 PUSH2 0x1078 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH2 0x834 SWAP2 PUSH32 0x0 DUP7 DUP7 DUP7 PUSH32 0x0 PUSH2 0x10E7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH2 0x8C0 SWAP1 DUP3 PUSH2 0x11DF JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x8FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH7 0x4E533A47533A3 PUSH1 0xCC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST DUP1 SWAP5 POP PUSH1 0xA8 DUP2 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP3 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL SWAP4 POP PUSH2 0x930 DUP2 PUSH1 0xD8 SHR PUSH5 0xFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP3 POP PUSH2 0x93C DUP2 PUSH1 0xFF SHR SWAP1 JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH2 0x950 CALLER DUP3 PUSH2 0x11F7 JUMP JUMPDEST PUSH2 0x9B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x834 DUP4 DUP4 DUP4 PUSH2 0x12C2 JUMP JUMPDEST PUSH2 0x834 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xD8D JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH2 0x834 SWAP2 PUSH1 0x6 DUP6 DUP6 DUP9 PUSH2 0x1491 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH2 0xA4C SWAP2 PUSH1 0x6 DUP8 PUSH32 0x0 DUP9 DUP8 DUP10 PUSH2 0x1623 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x65B DUP2 DUP4 PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x65B DUP2 DUP4 PUSH2 0x17AE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xAC4 SWAP1 DUP3 PUSH32 0x0 PUSH32 0x0 PUSH2 0x184C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0xAD7 PUSH1 0x6 DUP6 PUSH2 0x18A1 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 PUSH2 0xAFF SWAP1 DUP5 DUP7 PUSH2 0x18D4 JUMP JUMPDEST SWAP2 POP POP DUP1 PUSH2 0xB39 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH7 0x4E533A47533A3 PUSH1 0xCC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0xA8 DUP2 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP3 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB8E PUSH32 0x0 PUSH2 0x18EE JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x672 SWAP1 PUSH2 0x3BD7 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH2 0x834 SWAP2 PUSH32 0x0 DUP7 DUP7 DUP7 PUSH32 0x0 PUSH2 0x18FA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xAC4 SWAP1 PUSH1 0x6 PUSH32 0x0 DUP5 PUSH32 0x0 PUSH2 0x19A8 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xCC4 SWAP1 PUSH1 0x6 PUSH32 0x0 DUP5 PUSH32 0x0 PUSH2 0x1A2A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER EQ ISZERO PUSH2 0xD21 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xD97 CALLER DUP4 PUSH2 0x11F7 JUMP JUMPDEST PUSH2 0xDFD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0xA4C DUP5 DUP5 DUP5 DUP5 PUSH2 0x1B9A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0xCC4 SWAP2 PUSH32 0x0 DUP6 DUP6 PUSH2 0x1C23 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH2 0x834 SWAP2 DUP6 PUSH32 0x0 DUP7 DUP7 PUSH32 0x0 PUSH2 0x1D1B JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0xCC4 SWAP2 DUP5 DUP5 PUSH2 0x1E1C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xAC4 SWAP1 DUP3 PUSH32 0x0 PUSH32 0x0 PUSH2 0x1ED6 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xFCB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76656420717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0xEEF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F776E657220717565727920666F72206E6F6E6578697374 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x656E7420746F6B656E0000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 SWAP2 PUSH2 0x10AE SWAP1 DUP4 PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x100 DUP4 LT PUSH2 0x1122 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH7 0x4D4C3A43493A3 PUSH1 0xCC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST CALLER PUSH2 0x1136 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1177 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x4155433A54543A33 PUSH1 0xC0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x1183 DUP8 DUP4 DUP4 DUP9 PUSH2 0x1F21 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLVALUE PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0xF562263F29883BF3519F3733BB30B47C831BFE9809884430857D8CF29571D554 SWAP1 PUSH1 0x80 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x11EC DUP5 DUP5 PUSH2 0x217D JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1202 DUP3 PUSH2 0x21FC JUMP JUMPDEST PUSH2 0x1263 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F70657261746F7220717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x126F DUP2 DUP5 PUSH2 0xFEB JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x12AA JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x129F DUP5 PUSH2 0x6F5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x12BA JUMPI POP PUSH2 0x12BA DUP2 DUP6 PUSH2 0xEC3 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x12D7 PUSH1 0x0 DUP4 PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1353 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E73666572206F6620746F6B656E20746861742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x73206E6F74206F776E0000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x13CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x13D9 PUSH1 0x0 DUP3 PUSH2 0x1078 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x1402 SWAP1 DUP5 SWAP1 PUSH2 0x3BA3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x1430 SWAP1 DUP5 SWAP1 PUSH2 0x3B33 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP5 SWAP4 SWAP2 DUP8 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST CALLER PUSH2 0x14A5 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x14E6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x4155433A54543A33 PUSH1 0xC0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x100 DUP4 LT PUSH2 0x1537 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D4C3A53493A3000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1543 DUP8 DUP4 PUSH2 0x217D JUMP JUMPDEST POP SWAP1 POP DUP1 ISZERO PUSH2 0x157E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH7 0x4E533A53533A3 PUSH1 0xCC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x15C2 DUP4 PUSH2 0x15BC PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP6 AND DUP7 OR JUMPDEST SWAP1 POP PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x221B JUMP JUMPDEST POP DUP1 DUP9 SSTORE SWAP1 POP PUSH2 0x15DC DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP7 PUSH2 0x229C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0xC8032E5C721106F3E30AD0F1A45E919C8D034CF788842FF336B0150F0FBCC60E SWAP1 PUSH1 0x60 ADD PUSH2 0x11CE JUMP JUMPDEST CALLER PUSH2 0x1637 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1678 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x4155433A54543A33 PUSH1 0xC0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x100 DUP4 LT PUSH2 0x16B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH7 0x4D4C3A43493A3 PUSH1 0xCC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16BE DUP7 PUSH2 0x18EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x16CE DUP12 DUP6 DUP8 PUSH2 0x2359 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x1 DUP15 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SSTORE SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x1704 DUP5 DUP4 DUP4 DUP7 PUSH2 0x23D9 JUMP JUMPDEST ISZERO PUSH2 0x1726 JUMPI PUSH1 0x0 DUP12 SSTORE PUSH2 0x1721 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP9 PUSH2 0x2477 JUMP JUMPDEST PUSH2 0x1751 JUMP JUMPDEST PUSH2 0x1751 PUSH1 0xA8 DUP3 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP4 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL JUMPDEST CALLER SWAP1 PUSH2 0x2593 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x38195A074A64067740045E77CA5873F34A0DF243A8AC9ECC39452C47E7061E47 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x182C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2062616C616E636520717565727920666F7220746865207A65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x726F206164647265737300000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1858 DUP5 CALLER DUP5 DUP5 PUSH2 0x26AC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE CALLVALUE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2D57124CFA4E385AFD5CC9D6F24874BDD21303AC9131D7CB674BE2A5855C7002 SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 PUSH1 0x60 SWAP1 PUSH2 0x18BE DUP2 PUSH2 0x29B0 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 DUP4 SWAP1 SHR DUP2 AND SWAP9 SWAP3 AND SWAP7 POP SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x18E2 DUP6 DUP6 DUP6 PUSH2 0x2359 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x65B DUP3 NUMBER PUSH2 0x2A6A JUMP JUMPDEST CALLER PUSH2 0x190E DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x194F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x4155433A54543A33 PUSH1 0xC0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x195C DUP10 DUP6 PUSH2 0x217D JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH1 0x0 EQ DUP1 ISZERO PUSH2 0x1975 JUMPI POP PUSH2 0x1975 DUP3 PUSH1 0xFF SHR SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x198E JUMPI PUSH2 0x1989 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x10E7 JUMP JUMPDEST PUSH2 0x199D JUMP JUMPDEST PUSH2 0x199D DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x1D1B JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19B3 DUP5 PUSH2 0x18EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x19C2 DUP9 CALLER PUSH2 0x11DF JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP5 DUP4 EQ DUP1 ISZERO PUSH2 0x19D3 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x19EB JUMPI PUSH2 0x19E5 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1A2A JUMP JUMPDEST POP PUSH2 0x1A20 JUMP JUMPDEST DUP1 ISZERO DUP1 ISZERO PUSH2 0x19FE JUMPI POP PUSH2 0x19FE DUP3 PUSH1 0xFF SHR SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1A14 JUMPI PUSH2 0x1A0F DUP9 DUP7 DUP7 DUP10 PUSH2 0x1ED6 JUMP JUMPDEST PUSH2 0x1A20 JUMP JUMPDEST PUSH2 0x1A20 DUP9 DUP7 DUP7 DUP10 PUSH2 0x184C JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1A36 DUP6 PUSH2 0x18EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x1A45 DUP10 CALLER PUSH2 0x11DF JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP6 DUP4 EQ PUSH2 0x1A98 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E533A4D3A300000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x1AE6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E533A4D3A440000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x1B07 CALLVALUE PUSH2 0x15BC CALLER PUSH2 0x1AF9 PUSH1 0x0 DUP9 PUSH2 0x2A82 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND OR SWAP1 JUMP JUMPDEST POP DUP1 DUP11 SSTORE SWAP4 POP CALLVALUE ISZERO PUSH2 0x1B26 JUMPI PUSH2 0x1B26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND CALLVALUE PUSH2 0x2593 JUMP JUMPDEST PUSH2 0x1B31 DUP9 DUP8 DUP10 PUSH2 0x2AD4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE PUSH5 0xE8D4A51000 PUSH6 0xFFFFFFFFFFFF PUSH1 0xA8 DUP9 SWAP1 SHR AND PUSH1 0x4 PUSH1 0xFF PUSH1 0xA0 DUP11 SWAP1 SHR AND MUL SHL MUL DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH32 0x4E3883C75CC9C752BB1DB2E406A822E4A75067AE77AD9A0A4D179F2709B9E1F6 SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1BA5 DUP5 DUP5 DUP5 PUSH2 0x12C2 JUMP JUMPDEST PUSH2 0x1BB1 DUP5 DUP5 DUP5 DUP5 PUSH2 0x2C6D JUMP JUMPDEST PUSH2 0xA4C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C2E DUP5 PUSH2 0x18EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x1C3E DUP9 CALLER DUP7 PUSH2 0x18D4 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 DUP12 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP1 DUP6 MSTORE SWAP3 MSTORE DUP3 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE SWAP2 SWAP4 POP SWAP2 POP PUSH2 0x1C6E SWAP1 DUP4 DUP4 DUP7 PUSH2 0x23D9 JUMP JUMPDEST ISZERO PUSH2 0x1CAA JUMPI PUSH1 0x0 DUP9 SSTORE PUSH2 0x1C88 DUP3 PUSH1 0xD8 SHR PUSH5 0xFFFFFFFFF AND SWAP1 JUMP JUMPDEST DUP5 EQ ISZERO PUSH2 0x1C9F JUMPI PUSH2 0x1C9A DUP8 CALLER DUP8 PUSH2 0x2DCD JUMP JUMPDEST PUSH2 0x1CD2 JUMP JUMPDEST PUSH2 0x1C9A DUP8 CALLER DUP8 PUSH2 0x2EDA JUMP JUMPDEST PUSH2 0x1CD2 PUSH1 0xA8 DUP3 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP4 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL PUSH2 0x174A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE CALLER DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH32 0xD79254E5DABA749BAA8BA954E77BBBB18EFEF113A8070D00DF9A188D81932426 SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x100 DUP4 LT PUSH2 0x1D6C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D4C3A4F493A3000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST CALLER PUSH2 0x1D80 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1DC1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x4155433A54543A33 PUSH1 0xC0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x1DCD DUP8 DUP4 DUP4 DUP9 PUSH2 0x26AC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLVALUE PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0xE237F23F900F35D5F1A406BA97CCFDFFE082FFCDA87098765811817C2C14AC87 SWAP1 PUSH1 0x80 ADD PUSH2 0x11CE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E28 DUP6 CALLER PUSH2 0x11DF JUMP JUMPDEST POP SWAP1 POP DUP1 ISZERO PUSH2 0x1E63 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH7 0x4E533A53533A3 PUSH1 0xCC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x1E7E DUP3 PUSH2 0x15BC PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP6 AND CALLER OR PUSH2 0x1595 JUMP JUMPDEST POP DUP1 DUP7 SSTORE SWAP1 POP PUSH2 0x1E8F DUP5 CALLER DUP6 PUSH2 0x300E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x48B43F133AC721CB5F6E2A3D8AB7CAEE987BCCFB4197537CF43C9F907F057F3A SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1EE2 DUP5 CALLER DUP5 DUP5 PUSH2 0x1F21 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE CALLVALUE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x94925310677B39991F64178494FAD708BEB62F73F36BB0BAA493476ECF58709 SWAP1 PUSH1 0x60 ADD PUSH2 0x1893 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F2C DUP3 PUSH2 0x18EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x1F3B DUP8 DUP8 PUSH2 0x217D JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x1F49 DUP3 PUSH2 0x3180 JUMP JUMPDEST PUSH1 0x0 CALLVALUE GT PUSH2 0x1F99 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x534C3A434F4D3A32000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1FD2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x534C3A48534F3A3 PUSH1 0xC4 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x1FDC DUP3 PUSH1 0xFF SHR SWAP1 JUMP JUMPDEST PUSH2 0x2028 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x534C3A48534F3A31000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2035 DUP5 PUSH1 0x1 PUSH2 0x3B33 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x204C CALLVALUE PUSH2 0x15BC DUP12 PUSH2 0x1AF9 DUP6 DUP9 PUSH2 0x2A82 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0xA8 DUP3 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP4 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL PUSH2 0x20A1 PUSH1 0x64 PUSH2 0x2710 PUSH1 0xA8 DUP10 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP11 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL JUMPDEST SWAP2 SWAP1 PUSH2 0x31F3 JUMP JUMPDEST LT PUSH2 0x20D9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x14D30E93D0940E8D PUSH1 0xC2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 DUP12 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP7 SWAP2 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SSTORE DUP2 DUP11 SSTORE PUSH2 0x2171 DUP2 PUSH1 0xA8 DUP8 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP9 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL PUSH1 0xA8 DUP6 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP7 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL PUSH2 0x2157 SWAP2 SWAP1 PUSH2 0x3BA3 JUMP JUMPDEST PUSH2 0x2161 SWAP2 SWAP1 PUSH2 0x3B33 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 PUSH2 0x2593 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 DUP2 ISZERO DUP1 PUSH2 0x219F JUMPI POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x21F1 JUMPI DUP4 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x21BA DUP5 PUSH1 0xD8 SHR PUSH5 0xFFFFFFFFF AND SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x21F3 JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0x65B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH5 0xE8D4A51000 DUP5 DIV SWAP4 POP JUMPDEST PUSH6 0xFFFFFFFFFFFF DUP5 GT ISZERO PUSH2 0x2249 JUMPI PUSH1 0x1 DUP4 ADD SWAP3 POP DUP4 PUSH1 0x4 SHR SWAP4 POP PUSH2 0x222A JUMP JUMPDEST DUP3 DUP5 PUSH1 0x8 SHL OR SWAP4 POP DUP4 PUSH1 0x8 SHR DUP4 PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 DUP2 MUL DUP3 SUB SWAP3 POP POP POP PUSH32 0xFFFFFFFFFF00000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP4 POP DUP3 PUSH1 0xA0 SHL DUP5 OR SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x22E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x313135353A5354463A3 PUSH1 0xB4 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x22EF DUP2 DUP4 PUSH2 0x32B1 JUMP JUMPDEST POP POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 SWAP1 SSTORE DUP6 DUP4 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP SWAP1 PUSH2 0x231E DUP4 PUSH2 0x3C12 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x452C5F777DB10BD58F64D8BC58668D14487D008FF527CA431853EA22E195F176 SWAP2 ADD PUSH2 0x1893 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 DUP3 PUSH2 0x236F DUP4 PUSH1 0xD8 SHR PUSH5 0xFFFFFFFFF AND SWAP1 JUMP JUMPDEST EQ PUSH2 0x237B JUMPI PUSH1 0x0 PUSH2 0x237D JUMP JUMPDEST DUP2 JUMPDEST SWAP2 POP DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x239F JUMPI POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x23CD JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 DUP7 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x23CF JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2428 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x534C3A43433A3100000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x243B DUP6 PUSH1 0xD8 SHR PUSH5 0xFFFFFFFFF AND SWAP1 JUMP JUMPDEST DUP4 GT SWAP1 POP PUSH2 0x2449 DUP6 PUSH1 0xFF SHR SWAP1 JUMP JUMPDEST DUP1 PUSH2 0x246D JUMPI POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x246D JUMPI POP DUP1 JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x24C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x313135353A5354463A3 PUSH1 0xB4 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x251D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x313135353A534254463A31000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP2 PUSH2 0x2539 DUP4 PUSH2 0x3C12 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x2549 SWAP1 POP DUP2 DUP4 PUSH2 0x3408 JUMP JUMPDEST POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH32 0x452C5F777DB10BD58F64D8BC58668D14487D008FF527CA431853EA22E195F176 SWAP2 ADD PUSH2 0x1893 JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x25E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2630 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2635 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x834 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26B7 DUP3 PUSH2 0x18EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x26C6 DUP8 DUP8 PUSH2 0x217D JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 CALLVALUE GT PUSH2 0x271A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x534C3A4F42503A32000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST DUP2 PUSH2 0x2767 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E533A303A300000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x2771 DUP2 PUSH1 0xFF SHR SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x27A9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x534C3A48534F3A3 PUSH1 0xC4 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x27BA DUP3 PUSH1 0xD8 SHR PUSH5 0xFFFFFFFFF AND SWAP1 JUMP JUMPDEST DUP4 GT ISZERO PUSH2 0x2809 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x534C3A4F42503A33000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x286C JUMPI DUP2 DUP8 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x283A DUP6 PUSH1 0xD8 SHR PUSH5 0xFFFFFFFFF AND SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x2851 DUP6 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SSTORE JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x28BB PUSH2 0x289B CALLVALUE PUSH5 0xE8D4A51000 PUSH6 0xFFFFFFFFFFFF PUSH1 0xA8 DUP9 SWAP1 SHR AND PUSH1 0x4 PUSH1 0xFF PUSH1 0xA0 DUP11 SWAP1 SHR AND MUL SHL MUL PUSH2 0x3B33 JUMP JUMPDEST PUSH2 0x15BC DUP11 PUSH2 0x1AF9 PUSH2 0x28B3 DUP10 PUSH1 0xD8 SHR PUSH5 0xFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH2 0x2A82 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0xA8 DUP3 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP4 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL PUSH2 0x290D PUSH1 0x64 PUSH2 0x2710 PUSH1 0xA8 DUP9 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP10 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL PUSH2 0x209A JUMP JUMPDEST LT PUSH2 0x2945 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x14D30E93D0940E8D PUSH1 0xC2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST DUP2 DUP10 SSTORE PUSH2 0x199D DUP2 PUSH1 0xA8 DUP7 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP8 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL PUSH1 0xA8 DUP6 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND PUSH1 0xA0 DUP7 SWAP1 SHR PUSH1 0xFF AND PUSH1 0x4 MUL SHL PUSH5 0xE8D4A51000 MUL PUSH2 0x2996 SWAP2 SWAP1 PUSH2 0x3BA3 JUMP JUMPDEST PUSH2 0x29A0 SWAP2 SWAP1 PUSH2 0x3B33 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH2 0x2593 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP3 AND DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x29DD JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2A06 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x8 DUP4 SWAP1 SHR SWAP3 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2A63 JUMPI PUSH1 0x8 DUP5 SWAP1 SHR SWAP4 POP DUP4 PUSH1 0xFF AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2A46 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0x2A5B DUP2 PUSH2 0x3C12 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2A13 JUMP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x19 PUSH2 0x2A78 DUP5 DUP5 PUSH2 0x3BA3 JUMP JUMPDEST PUSH2 0xEEF SWAP2 SWAP1 PUSH2 0x3B70 JUMP JUMPDEST PUSH1 0x0 PUSH5 0xFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2AA7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0xD8 SHL PUSH32 0xF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2AE0 DUP4 PUSH2 0x34F2 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 EQ ISZERO PUSH2 0x2B35 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x3732313A4D494E543A3000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST DUP4 DUP2 EQ PUSH2 0x2B84 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x3732313A4D494E543A3100000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B91 DUP7 DUP7 DUP6 PUSH2 0x35BB JUMP JUMPDEST SWAP1 POP PUSH32 0xE98DD458321045A46B57BD2D5251A739E0F01750A71E4D3E71CEE6C17164DD32 DUP6 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2BC4 SWAP3 SWAP2 SWAP1 PUSH2 0x3AFB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BF6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2C1F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x1A20 JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2C50 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0x2C65 DUP2 PUSH2 0x3C12 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2C25 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x2DC5 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x2CB1 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x3AB6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2CCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2CFB JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2CF8 SWAP2 DUP2 ADD SWAP1 PUSH2 0x394C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2DAB JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2D29 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2D2E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH2 0x2DA3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x12BA JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x12BA JUMP JUMPDEST PUSH2 0x2DE8 ADDRESS DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2C6D JUMP JUMPDEST PUSH2 0x2E4E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x2E79 SWAP1 DUP5 SWAP1 PUSH2 0x3B33 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x2EF5 ADDRESS DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2C6D JUMP JUMPDEST PUSH2 0x2F5B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST ADDRESS PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x2F7D SWAP1 DUP5 SWAP1 PUSH2 0x3BA3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x2FAD SWAP1 DUP5 SWAP1 PUSH2 0x3B33 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 SWAP3 ADDRESS SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x3018 DUP4 DUP3 PUSH2 0xFEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x3040 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER EQ JUMPDEST DUP1 ISZERO PUSH2 0x305D JUMPI POP ADDRESS PUSH2 0x3052 DUP5 DUP4 PUSH2 0xF50 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x30C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x30CD DUP4 DUP3 PUSH2 0x366C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x30F8 SWAP1 DUP5 SWAP1 PUSH2 0x3BA3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP ADDRESS PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x311F SWAP1 DUP5 SWAP1 PUSH2 0x3B33 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND ADDRESS SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0xAC4 DUP2 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3196 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x27B7CF8500000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x3696 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 NOT DUP6 DUP8 MULMOD DUP6 DUP8 MUL SWAP3 POP DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP DUP1 PUSH1 0x0 EQ ISZERO PUSH2 0x322D JUMPI PUSH1 0x0 DUP5 GT PUSH2 0x3222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 SWAP1 DIV SWAP1 POP PUSH2 0xEEF JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x3239 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD DUP1 DUP5 SUB SWAP4 DUP2 GT SWAP1 SWAP3 SUB SWAP2 SWAP1 POP PUSH1 0x0 PUSH2 0x3259 DUP7 NOT PUSH1 0x1 PUSH2 0x3B33 JUMP JUMPDEST DUP7 AND SWAP6 DUP7 SWAP1 DIV SWAP6 PUSH1 0x2 PUSH1 0x3 DUP9 MUL DUP2 XOR DUP1 DUP10 MUL DUP3 SUB MUL DUP1 DUP10 MUL DUP3 SUB MUL DUP1 DUP10 MUL DUP3 SUB MUL DUP1 DUP10 MUL DUP3 SUB MUL DUP1 DUP10 MUL DUP3 SUB MUL DUP1 DUP10 MUL SWAP1 SWAP2 SUB MUL PUSH1 0x0 DUP3 SWAP1 SUB DUP3 SWAP1 DIV PUSH1 0x1 ADD SWAP5 SWAP1 SWAP5 MUL SWAP5 DIV SWAP4 SWAP1 SWAP4 OR SWAP2 SWAP1 SWAP2 MUL SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x32C0 DUP7 PUSH2 0x29B0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x332A JUMPI DUP6 PUSH1 0xFF AND DUP3 DUP3 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x32F8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ ISZERO PUSH2 0x3318 JUMPI PUSH2 0x3311 DUP2 PUSH1 0x1 PUSH2 0x3B4B JUMP JUMPDEST SWAP3 POP PUSH2 0x332A JUMP JUMPDEST DUP1 PUSH2 0x3322 DUP2 PUSH2 0x3C2D JUMP JUMPDEST SWAP2 POP POP PUSH2 0x32C5 JUMP JUMPDEST POP PUSH2 0x3334 DUP7 PUSH2 0x3180 JUMP JUMPDEST PUSH2 0x3340 DUP6 PUSH1 0xF8 SHL PUSH2 0x36B7 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0xFF AND GT PUSH2 0x337E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x534C3A50464D3A3 PUSH1 0xC4 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST DUP2 PUSH2 0x3388 DUP2 PUSH2 0x3BBA JUMP JUMPDEST PUSH1 0xFF PUSH1 0x10 PUSH1 0x8 DUP4 MUL ADD SWAP1 DUP2 SHL NOT DUP10 AND SWAP7 POP DUP9 SWAP1 SHR SWAP5 POP SWAP3 POP PUSH2 0x33AB SWAP1 POP DUP5 PUSH2 0x3180 JUMP JUMPDEST DUP5 PUSH1 0xFF AND DUP4 PUSH1 0xFF AND EQ PUSH2 0x3400 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x534C3A50464D3A31000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3416 DUP6 PUSH2 0x29B0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x347E JUMPI DUP2 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x344A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x346C JUMPI PUSH2 0x3465 DUP2 PUSH1 0x1 PUSH2 0x3B4B JUMP JUMPDEST SWAP3 POP PUSH2 0x347E JUMP JUMPDEST DUP1 PUSH2 0x3476 DUP2 PUSH2 0x3C2D JUMP JUMPDEST SWAP2 POP POP PUSH2 0x341B JUMP JUMPDEST POP PUSH2 0x3488 DUP6 PUSH2 0x3180 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0xFF AND GT PUSH2 0x34C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x534C3A50464D3A3 PUSH1 0xC4 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST DUP2 PUSH2 0x34D0 DUP2 PUSH2 0x3BBA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x8 DUP3 MUL PUSH1 0x10 ADD DUP5 SWAP1 SHL DUP6 OR SWAP3 POP PUSH2 0x34EA DUP4 PUSH2 0x3180 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x34FF DUP4 NUMBER PUSH2 0x2A6A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x350D DUP5 DUP4 PUSH2 0x3746 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x351C PUSH1 0x1 DUP4 PUSH2 0x3BA3 JUMP JUMPDEST BLOCKHASH SWAP1 POP DUP1 PUSH2 0x356C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4550433A53424C00000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE ADDRESS PUSH1 0x60 SWAP1 DUP2 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP3 ADD MSTORE PUSH1 0x74 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP4 POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x60 SWAP1 ISZERO PUSH2 0x361A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494C3A4D3A300000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x3650 PUSH1 0x4 PUSH2 0x3648 PUSH1 0x14 PUSH2 0x3631 DUP7 PUSH1 0x8 SHR PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x363B SWAP2 SWAP1 PUSH2 0x3C4D JUMP JUMPDEST PUSH1 0x8 SHL PUSH2 0xFF00 NOT DUP7 AND OR SWAP1 JUMP JUMPDEST PUSH1 0xFF NOT AND OR SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP7 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE SWAP2 POP PUSH2 0x12BA DUP3 PUSH2 0x29B0 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE DUP2 SWAP1 PUSH2 0x10AE DUP5 DUP4 PUSH2 0xFEB JUMP JUMPDEST DUP1 MLOAD PUSH11 0x636F6E736F6C652E6C6F67 PUSH1 0x20 DUP4 ADD PUSH1 0x0 DUP1 DUP5 DUP4 DUP6 GAS STATICCALL POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0xAC4 SWAP1 PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6E18A12800000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x3696 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3754 PUSH1 0x19 DUP5 PUSH2 0x3B84 JUMP JUMPDEST PUSH2 0xEEF SWAP2 SWAP1 PUSH2 0x3B33 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x3775 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x378B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xEEF DUP3 PUSH2 0x375E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x37A6 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x37AF DUP4 PUSH2 0x375E JUMP JUMPDEST SWAP2 POP PUSH2 0x21F3 PUSH1 0x20 DUP5 ADD PUSH2 0x375E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x37D1 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x37DA DUP5 PUSH2 0x375E JUMP JUMPDEST SWAP3 POP PUSH2 0x37E8 PUSH1 0x20 DUP6 ADD PUSH2 0x375E JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x380D JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x3816 DUP6 PUSH2 0x375E JUMP JUMPDEST SWAP4 POP PUSH2 0x3824 PUSH1 0x20 DUP7 ADD PUSH2 0x375E JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3847 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x385A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x386C JUMPI PUSH2 0x386C PUSH2 0x3C9B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x3894 JUMPI PUSH2 0x3894 PUSH2 0x3C9B JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x38AC JUMPI DUP6 DUP7 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP2 DUP3 ADD PUSH1 0x20 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x38DF JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x38E8 DUP4 PUSH2 0x375E JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x38FC JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3919 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3922 DUP4 PUSH2 0x375E JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3941 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xEEF DUP2 PUSH2 0x3CB1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x395D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xEEF DUP2 PUSH2 0x3CB1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3979 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3992 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x39B5 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH2 0x39CC PUSH1 0x40 DUP6 ADD PUSH2 0x375E JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x39E9 JUMPI DUP3 DUP4 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3A15 JUMPI DUP4 DUP5 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3A60 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3A44 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3A90 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x3A74 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x3AA1 JUMPI DUP3 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x246D PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x3A6B JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xEEF PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3A6B JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x12BA PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3A31 JUMP JUMPDEST DUP4 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xB5A PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x3A31 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x3B46 JUMPI PUSH2 0x3B46 PUSH2 0x3C6F JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP5 AND DUP1 PUSH1 0xFF SUB DUP3 GT ISZERO PUSH2 0x3B68 JUMPI PUSH2 0x3B68 PUSH2 0x3C6F JUMP JUMPDEST ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3B7F JUMPI PUSH2 0x3B7F PUSH2 0x3C85 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3B9E JUMPI PUSH2 0x3B9E PUSH2 0x3C6F JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x3BB5 JUMPI PUSH2 0x3BB5 PUSH2 0x3C6F JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND DUP1 PUSH2 0x3BCD JUMPI PUSH2 0x3BCD PUSH2 0x3C6F JUMP JUMPDEST PUSH1 0x0 NOT ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x3BEB JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x3C0C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x3C26 JUMPI PUSH2 0x3C26 PUSH2 0x3C6F JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 EQ ISZERO PUSH2 0x3C44 JUMPI PUSH2 0x3C44 PUSH2 0x3C6F JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP4 AND DUP1 PUSH2 0x3C60 JUMPI PUSH2 0x3C60 PUSH2 0x3C85 JUMP JUMPDEST DUP1 PUSH1 0xFF DUP5 AND MOD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xAC4 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MLOAD PUSH10 0x566C3A53102D2C7A1D44 LOG4 0xEB 0xC1 0xB2 PUSH6 0xD9E845368204 DUP13 0xB2 BYTE JUMPDEST EXTCODESIZE 0xD3 PUSH8 0x327264736F6C6343 STOP ADDMOD DIV STOP CALLER ",
          "sourceMap": "333:4749:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1171:300:21;;;;;;;;;;-1:-1:-1;1171:300:21;;;;;:::i;:::-;;:::i;:::-;;;8023:14:34;;8016:22;7998:41;;7986:2;7971:18;1171:300:21;;;;;;;;1909:107;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;2877:138::-;;;;;;;;;;-1:-1:-1;2877:138:21;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;6573:55:34;;;6555:74;;6543:2;6528:18;2877:138:21;6510:125:34;2417:399:21;;;;;;;;;;-1:-1:-1;2417:399:21;;;;;:::i;:::-;;:::i;:::-;;2760:382:20;;;;;;:::i;:::-;;:::i;982:504::-;;;;;;;;;;-1:-1:-1;982:504:20;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;7646:55:34;;;7628:74;;7733:2;7718:18;;7711:34;;;;7761:18;;;7754:34;7831:14;7824:22;7819:2;7804:18;;7797:50;7615:3;7600:19;982:504:20;7582:271:34;3672:328:21;;;;;;;;;;-1:-1:-1;3672:328:21;;;;;:::i;:::-;;:::i;4066:179::-;;;;;;;;;;-1:-1:-1;4066:179:21;;;;;:::i;:::-;;:::i;4418:336:20:-;;;;;;;;;;-1:-1:-1;4418:336:20;;;;;:::i;:::-;;:::i;3839:429::-;;;;;;;;;;-1:-1:-1;3839:429:20;;;;;:::i;:::-;;:::i;1717:130:21:-;;;;;;;;;;-1:-1:-1;1717:130:21;;;;;:::i;:::-;;:::i;1530:::-;;;;;;;;;;-1:-1:-1;1530:130:21;;;;;:::i;:::-;;:::i;:::-;;;8449:25:34;;;8437:2;8422:18;1530:130:21;8404:76:34;3148:132:20;;;;;;:::i;:::-;;:::i;4760:228::-;;;;;;;;;;-1:-1:-1;4760:228:20;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;1492:318::-;;;;;;;;;;-1:-1:-1;1492:318:20;;;;;:::i;:::-;;:::i;521:47::-;;;;;;;;;;;;;;;1816:106;;;;;;;;;;;;;:::i;2080:111:21:-;;;;;;;;;;;;;:::i;2228:386:20:-;;;;;;:::i;:::-;;:::i;1928:148::-;;;;;;:::i;:::-;;:::i;2082:140::-;;;;;;:::i;:::-;;:::i;3082:293:21:-;;;;;;;;;;-1:-1:-1;3082:293:21;;;;;:::i;:::-;;:::i;575:41:20:-;;;;;;;;;;;;;;;4311:318:21;;;;;;;;;;-1:-1:-1;4311:318:21;;;;;:::i;:::-;;:::i;3672:161:20:-;;;;;;;;;;-1:-1:-1;3672:161:20;;;;;:::i;:::-;;:::i;4994:86::-;;;;;;;;;;-1:-1:-1;4994:86:20;;;;;:::i;:::-;-1:-1:-1;5059:17:20;;4994:86;3286:380;;;;;;:::i;:::-;;:::i;4274:138::-;;;;;;;;;;-1:-1:-1;4274:138:20;;;;;:::i;:::-;;:::i;3441:169:21:-;;;;;;;;;;-1:-1:-1;3441:169:21;;;;;:::i;:::-;;:::i;2620:134:20:-;;;;;;:::i;:::-;;:::i;1171:300:21:-;1273:4;-1:-1:-1;;;;;;1308:40:21;;1323:25;1308:40;;:104;;-1:-1:-1;;;;;;;1364:48:21;;1379:33;1364:48;1308:104;:156;;;-1:-1:-1;886:25:12;-1:-1:-1;;;;;;871:40:12;;;1428:36:21;1289:175;1171:300;-1:-1:-1;;1171:300:21:o;1909:107::-;1963:13;1995:8;:14;;1988:21;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1909:107;:::o;2877:138::-;2953:7;2979:29;2953:7;3000;2979:20;:29::i;2417:399::-;2497:13;2513:25;2497:13;2530:7;2513:16;:25::i;:::-;2497:41;;2562:5;-1:-1:-1;;;;;2556:11:21;:2;-1:-1:-1;;;;;2556:11:21;;;2548:57;;;;-1:-1:-1;;;2548:57:21;;19403:2:34;2548:57:21;;;19385:21:34;19442:2;19422:18;;;19415:30;19481:34;19461:18;;;19454:62;19552:3;19532:18;;;19525:31;19573:19;;2548:57:21;;;;;;;;;2637:10;-1:-1:-1;;;;;2637:19:21;;;;:58;;;2660:35;2677:5;2684:10;2660:16;:35::i;:::-;2616:161;;;;-1:-1:-1;;;2616:161:21;;13968:2:34;2616:161:21;;;13950:21:34;14007:2;13987:18;;;13980:30;14046:34;14026:18;;;14019:62;14117:26;14097:18;;;14090:54;14161:19;;2616:161:21;13940:246:34;2616:161:21;2788:21;2797:2;2801:7;2788:8;:21::i;:::-;2417:399;;;:::o;2760:382:20:-;2941:30;;;;:14;:30;;;;;;;;:38;;;;;;;;2909:226;;3015:7;2956:14;2972:6;3092:13;3120:5;2909:18;:226::i;982:504::-;1099:14;1243:17;;;:8;:17;;;;;1099:14;;;;;;;;1243:41;;1099:14;1243:29;:41::i;:::-;-1:-1:-1;1220:64:20;-1:-1:-1;1302:13:20;1294:33;;;;-1:-1:-1;;;1294:33:20;;11342:2:34;1294:33:20;;;11324:21:34;11381:1;11361:18;;;11354:29;-1:-1:-1;;;11399:18:34;;;11392:37;11446:18;;1294:33:20;11314:156:34;1294:33:20;1354:8;1337:36;-1:-1:-1;2415:11:29;;;;;;2314:3;2310:15;;;2375:4;2366:14;2408:1;2404:9;2400:27;2456:12;2447:22;1383:23:20;;1425:16;:8;3740:3:29;3736:15;3753:11;3732:33;;3711:64;1425:16:20;1416:25;;1461:18;:8;2163:3:29;2159:15;;2134:56;1461:18:20;1451:28;;982:504;;;;;;:::o;3672:328:21:-;3861:39;3880:10;3892:7;3861:18;:39::i;:::-;3853:101;;;;-1:-1:-1;;;3853:101:21;;20476:2:34;3853:101:21;;;20458:21:34;20515:2;20495:18;;;20488:30;20554:34;20534:18;;;20527:62;-1:-1:-1;;;20605:18:34;;;20598:47;20662:19;;3853:101:21;20448:239:34;3853:101:21;3965:28;3975:4;3981:2;3985:7;3965:9;:28::i;4066:179::-;4199:39;4216:4;4222:2;4226:7;4199:39;;;;;;;;;;;;:16;:39::i;4418:336:20:-;4579:30;;;;:14;:30;;;;;;;;:38;;;;;;;;4549:198;;4653:8;4610:6;4695:5;4594:14;4549:16;:198::i;3839:429::-;4039:30;;;;:14;:30;;;;;;;;:38;;;;;;;;4008:253;;4113:8;4054:14;4163:7;4070:6;4204:11;4237:13;4008:17;:253::i;:::-;3839:429;;;;:::o;1717:130:21:-;1789:7;1815:25;1789:7;1832;1815:16;:25::i;1530:130::-;1602:7;1628:25;1602:7;1647:5;1628:18;:25::i;3148:132:20:-;3230:17;;;;:8;:17;;;;;3216:57;;3239:7;3258:5;3265:7;3216:13;:57::i;:::-;3148:132;:::o;4760:228::-;4851:12;;4903:22;4957:24;:8;4973:7;4957:15;:24::i;:::-;4950:31;;;;;;4760:228;;;;;:::o;1492:318::-;1630:14;1680:17;;;:8;:17;;;;;1630:14;;1680:45;;1710:7;1719:5;1680:29;:45::i;:::-;1656:69;-1:-1:-1;;1743:14:20;1735:34;;;;-1:-1:-1;;;1735:34:20;;11342:2:34;1735:34:20;;;11324:21:34;11381:1;11361:18;;;11354:29;-1:-1:-1;;;11399:18:34;;;11392:37;11446:18;;1735:34:20;11314:156:34;1735:34:20;2415:11:29;;;;;;2314:3;2310:15;;;2375:4;2366:14;2408:1;2404:9;2400:27;2456:12;2447:22;1788:15:20;1779:24;1492:318;-1:-1:-1;;;;;1492:318:20:o;1816:106::-;1865:11;1894:21;:7;:19;:21::i;:::-;1888:27;;1816:106;:::o;2080:111:21:-;2136:13;2168:8;:16;;2161:23;;;;;:::i;2228:386:20:-;2413:30;;;;:14;:30;;;;;;;;:38;;;;;;;;2379:228;;2487:7;2428:14;2444:6;2564:13;2592:5;2379:20;:228::i;1928:148::-;2016:17;;;;:8;:17;;;;;1999:70;;2035:8;2045:7;2025;2063:5;1999:16;:70::i;2082:140::-;2162:17;;;;:8;:17;;;;;2149:66;;2181:8;2191:7;2171;2209:5;2149:12;:66::i;:::-;;2082:140;:::o;3082:293:21:-;-1:-1:-1;;;;;3184:22:21;;3196:10;3184:22;;3176:60;;;;-1:-1:-1;;;3176:60:21;;12082:2:34;3176:60:21;;;12064:21:34;12121:2;12101:18;;;12094:30;12160:27;12140:18;;;12133:55;12205:18;;3176:60:21;12054:175:34;3176:60:21;3275:10;3247:8;:39;;;:27;:39;;;;;;;;-1:-1:-1;;;;;3247:49:21;;;;;;;;;;;;:60;;-1:-1:-1;;3247:60:21;;;;;;;;;;3322:46;;7998:41:34;;;3247:49:21;;3275:10;3322:46;;7971:18:34;3322:46:21;;;;;;;3082:293;;:::o;4311:318::-;4480:39;4499:10;4511:7;4480:18;:39::i;:::-;4472:101;;;;-1:-1:-1;;;4472:101:21;;20476:2:34;4472:101:21;;;20458:21:34;20515:2;20495:18;;;20488:30;20554:34;20534:18;;;20527:62;-1:-1:-1;;;20605:18:34;;;20598:47;20662:19;;4472:101:21;20448:239:34;4472:101:21;4583:39;4597:4;4603:2;4607:7;4616:5;4583:13;:39::i;3672:161:20:-;3767:17;;;;:8;:17;;;;;3753:73;;3796:7;3776;3814:11;3753:13;:73::i;3286:380::-;3465:30;;;;:14;:30;;;;;;;;:38;;;;;;;;3434:225;;3480:14;3567:7;3496:6;3616:13;3644:5;3434:17;:225::i;4274:138::-;4361:17;;;;:8;:17;;;;;4348:57;;4370:7;4399:5;4348:12;:57::i;3441:169:21:-;-1:-1:-1;;;;;1772:27:24;;;3538:4:21;1772:27:24;;;:20;:27;;;;;;;;:37;;;;;;;;;;;;;;3561:42:21;3554:49;3441:169;-1:-1:-1;;;3441:169:21:o;2620:134:20:-;2704:17;;;;:8;:17;;;;;2689:58;;2713:7;2732:5;2739:7;2689:14;:58::i;1877:226:24:-;1957:7;1573:18;;;:9;;;:18;;;;;;-1:-1:-1;;;;;1573:18:24;1976:76;;;;-1:-1:-1;;;1976:76:24;;16893:2:34;1976:76:24;;;16875:21:34;16932:2;16912:18;;;16905:30;16971:34;16951:18;;;16944:62;-1:-1:-1;;;17022:18:34;;;17015:42;17074:19;;1976:76:24;16865:234:34;1976:76:24;-1:-1:-1;2070:26:24;;;;:17;;;;;:26;;;;;;-1:-1:-1;;;;;2070:26:24;;1877:226::o;2160:241::-;2236:7;2271:18;;;:9;;;:18;;;;;;-1:-1:-1;;;;;2271:18:24;2307:19;2299:73;;;;-1:-1:-1;;;2299:73:24;;14804:2:34;2299:73:24;;;14786:21:34;14843:2;14823:18;;;14816:30;14882:34;14862:18;;;14855:62;14953:11;14933:18;;;14926:39;14982:19;;2299:73:24;14776:231:34;10070:182:21;10144:8;:33;;;:24;:33;;;;;:38;;-1:-1:-1;;;;;;10144:38:21;-1:-1:-1;;;;;10144:38:21;;;;;;;;:33;;10206:25;;10144:33;10206:16;:25::i;:::-;-1:-1:-1;;;;;10197:48:21;;;;;;;;;;;10070:182;;:::o;3925:543:27:-;4241:3;4232:6;:12;4224:32;;;;-1:-1:-1;;;4224:32:27;;21903:2:34;4224:32:27;;;21885:21:34;21942:1;21922:18;;;21915:29;-1:-1:-1;;;21960:18:34;;;21953:37;22007:18;;4224:32:27;21875:156:34;4224:32:27;4304:10;4275:25;:1;-1:-1:-1;;;;;4275:25:27;;:9;:25::i;:::-;-1:-1:-1;;;;;4275:39:27;;4267:60;;;;-1:-1:-1;;;4267:60:27;;17982:2:34;4267:60:27;;;17964:21:34;18021:1;18001:18;;;17994:29;-1:-1:-1;;;18039:18:34;;;18032:38;18087:18;;4267:60:27;17954:157:34;4267:60:27;4338:46;4350:1;4353:14;4369:5;4376:7;4338:11;:46::i;:::-;4400:61;;;24566:25:34;;;24622:2;24607:18;;24600:34;;;-1:-1:-1;;;;;24670:55:34;;24650:18;;;24643:83;;;;4451:9:27;24757:2:34;24742:18;;24735:34;4400:61:27;;24553:3:34;24538:19;4400:61:27;;;;;;;;3925:543;;;;;;;:::o;477:201:31:-;581:16;599:17;639:32;651:1;662:7;639:11;:32::i;:::-;632:39;;;;477:201;;;;;:::o;6423:346:21:-;6516:4;6540:16;6548:7;6540;:16::i;:::-;6532:73;;;;-1:-1:-1;;;6532:73:21;;13221:2:34;6532:73:21;;;13203:21:34;13260:2;13240:18;;;13233:30;13299:34;13279:18;;;13272:62;-1:-1:-1;;;13350:18:34;;;13343:42;13402:19;;6532:73:21;13193:234:34;6532:73:21;6615:13;6631:25;6615:13;6648:7;6631:16;:25::i;:::-;6615:41;;6685:5;-1:-1:-1;;;;;6674:16:21;:7;-1:-1:-1;;;;;6674:16:21;;:51;;;;6718:7;-1:-1:-1;;;;;6694:31:21;:20;6706:7;6694:11;:20::i;:::-;-1:-1:-1;;;;;6694:31:21;;6674:51;:87;;;;6729:32;6746:5;6753:7;6729:16;:32::i;:::-;6666:96;6423:346;-1:-1:-1;;;;6423:346:21:o;9370:589::-;-1:-1:-1;;;;;9497:33:21;;:25;:8;9514:7;9497:16;:25::i;:::-;-1:-1:-1;;;;;9497:33:21;;9489:87;;;;-1:-1:-1;;;9489:87:21;;18318:2:34;9489:87:21;;;18300:21:34;18357:2;18337:18;;;18330:30;18396:34;18376:18;;;18369:62;18467:11;18447:18;;;18440:39;18496:19;;9489:87:21;18290:231:34;9489:87:21;-1:-1:-1;;;;;9594:16:21;;9586:65;;;;-1:-1:-1;;;9586:65:21;;11677:2:34;9586:65:21;;;11659:21:34;11716:2;11696:18;;;11689:30;11755:34;11735:18;;;11728:62;11826:6;11806:18;;;11799:34;11850:19;;9586:65:21;11649:226:34;9586:65:21;9763:29;9780:1;9784:7;9763:8;:29::i;:::-;-1:-1:-1;;;;;9803:24:21;;:8;:24;;;:18;:24;;;;;:29;;9831:1;;9803:8;:29;;9831:1;;9803:29;:::i;:::-;;;;-1:-1:-1;;;;;;;9842:22:21;;:8;:22;;;:18;:22;;;;;:27;;9868:1;;9842:8;:27;;9868:1;;9842:27;:::i;:::-;;;;-1:-1:-1;;9879:8:21;:25;;;:16;:25;;;;;;:30;;-1:-1:-1;;;;;;9879:30:21;-1:-1:-1;;;;;9879:30:21;;;;;;;;;9925:27;;9879:25;;9925:27;;;;;;;9370:589;;;:::o;9941:729:27:-;10207:10;10178:25;:1;-1:-1:-1;;;;;10178:25:27;;:9;:25::i;:::-;-1:-1:-1;;;;;10178:39:27;;10170:60;;;;-1:-1:-1;;;10170:60:27;;17982:2:34;10170:60:27;;;17964:21:34;18021:1;18001:18;;;17994:29;-1:-1:-1;;;18039:18:34;;;18032:38;18087:18;;10170:60:27;17954:157:34;10170:60:27;10258:3;10249:6;:12;10241:32;;;;-1:-1:-1;;;10241:32:27;;10001:2:34;10241:32:27;;;9983:21:34;10040:1;10020:18;;;10013:29;10078:9;10058:18;;;10051:37;10105:18;;10241:32:27;9973:156:34;10241:32:27;10285:16;10307:29;:1;10321:14;10307:13;:29::i;:::-;-1:-1:-1;10284:52:27;-1:-1:-1;10396:13:27;;10388:33;;;;-1:-1:-1;;;10388:33:27;;15884:2:34;10388:33:27;;;15866:21:34;15923:1;15903:18;;;15896:29;-1:-1:-1;;;15941:18:34;;;15934:37;15988:18;;10388:33:27;15856:156:34;10388:33:27;10483:57;10534:5;10483:46;10524:4;-1:-1:-1;;;;;;1753:78:29;;1851:17;;10483:32:27;:40;-1:-1:-1;2014:13:29;2004:24;;1983:55;10483:46:27;:50;;:57::i;:::-;-1:-1:-1;10551:17:27;;;10468:72;-1:-1:-1;10579:29:27;:1;-1:-1:-1;;;;;10579:29:27;;10601:6;10579:5;:29::i;:::-;10624:39;;;-1:-1:-1;;;;;22256:55:34;;22238:74;;22343:2;22328:18;;22321:34;;;22371:18;;;22364:34;;;10624:39:27;;22226:2:34;22211:18;10624:39:27;22193:211:34;8446:928:27;8776:10;8747:25;:1;-1:-1:-1;;;;;8747:25:27;;:9;:25::i;:::-;-1:-1:-1;;;;;8747:39:27;;8739:60;;;;-1:-1:-1;;;8739:60:27;;17982:2:34;8739:60:27;;;17964:21:34;18021:1;18001:18;;;17994:29;-1:-1:-1;;;18039:18:34;;;18032:38;18087:18;;8739:60:27;17954:157:34;8739:60:27;8826:3;8817:6;:12;8809:32;;;;-1:-1:-1;;;8809:32:27;;21903:2:34;8809:32:27;;;21885:21:34;21942:1;21922:18;;;21915:29;-1:-1:-1;;;21960:18:34;;;21953:37;22007:18;;8809:32:27;21875:156:34;8809:32:27;8852:19;8874:21;:7;:19;:21::i;:::-;8852:43;-1:-1:-1;8907:16:27;;8946:42;:1;8960:14;8976:11;8946:13;:42::i;:::-;9006:21;;;;:8;;;:21;;;;;;;;-1:-1:-1;;;;;9006:37:27;;;;;;;;;8999:44;8906:82;;-1:-1:-1;8906:82:27;-1:-1:-1;9058:70:27;9028:14;8906:82;;9116:11;9058:20;:70::i;:::-;9054:236;;;9151:6;9144:13;;9172:30;:1;-1:-1:-1;;;;;9172:30:27;;9195:6;9172;:30::i;:::-;9054:236;;;9233:46;2415:11:29;;;;;;2314:3;2310:15;;;2375:4;2366:14;2408:1;2404:9;2400:27;2456:12;2447:22;9263:15:27;9241:10;;9233:29;:46::i;:::-;9305:62;;;25011:25:34;;;25067:2;25052:18;;25045:34;;;25095:18;;;25088:34;;;-1:-1:-1;;;;;25158:55:34;;25153:2;25138:18;;25131:83;9305:62:27;;24998:3:34;24983:19;9305:62:27;;;;;;;8446:928;;;;;;;;;;;:::o;2460:211:24:-;2536:7;-1:-1:-1;;;;;2563:19:24;;2555:74;;;;-1:-1:-1;;;2555:74:24;;14393:2:34;2555:74:24;;;14375:21:34;14432:2;14412:18;;;14405:30;14471:34;14451:18;;;14444:62;14542:12;14522:18;;;14515:40;14572:19;;2555:74:24;14365:232:34;2555:74:24;-1:-1:-1;;;;;;2646:18:24;;;;;:11;;;;;:18;;;;;;;2460:211::o;5463:266:27:-;5619:50;5630:1;5641:10;5654:5;5661:7;5619:10;:50::i;:::-;5685:37;;;22793:25:34;;;5700:10:27;22849:2:34;22834:18;;22827:83;5712:9:27;22926:18:34;;;22919:34;;;;5685:37:27;;22781:2:34;22766:18;5685:37:27;;;;;;;;5463:266;;;;:::o;1074:339:26:-;1186:12;1300:20;;;;;;;;;;;1186:12;;1238:22;;1338:12;1300:20;1338:10;:12::i;:::-;6624:4:29;6762:3;6758:15;;;6754:26;;;6613:16;;;-1:-1:-1;1330:20:26;-1:-1:-1;6754:26:29;-1:-1:-1;;;1074:339:26:o;684:225:31:-;809:16;827:17;863:39;875:1;886:7;896:5;863:11;:39::i;:::-;856:46;;;;684:225;;;;;;:::o;135:127:25:-;196:11;225:30;233:7;242:12;225:7;:30::i;2015:699:27:-;2353:10;2324:25;:1;-1:-1:-1;;;;;2324:25:27;;:9;:25::i;:::-;-1:-1:-1;;;;;2324:39:27;;2316:60;;;;-1:-1:-1;;;2316:60:27;;17982:2:34;2316:60:27;;;17964:21:34;18021:1;18001:18;;;17994:29;-1:-1:-1;;;18039:18:34;;;18032:38;18087:18;;2316:60:27;17954:157:34;2316:60:27;2388:16;;2427:29;:1;2441:14;2427:13;:29::i;:::-;2387:69;;;;2471:9;2484:1;2471:14;:36;;;;;2489:18;:8;2163:3:29;2159:15;;2134:56;2489:18:27;2467:241;;;2523:72;2534:1;2537;2540:7;2549:14;2565:6;2573:14;2589:5;2523:10;:72::i;:::-;2467:241;;;2626:71;2636:1;2639;2642:7;2651:14;2667:6;2675:14;2691:5;2626:9;:71::i;:::-;2015:699;;;;;;;;;:::o;1363:646::-;1597:19;1619:21;:7;:19;:21::i;:::-;1597:43;-1:-1:-1;1652:16:27;;1691:25;:1;1705:10;1691:13;:25::i;:::-;1651:65;;;;1746:7;1731:11;:22;:39;;;;-1:-1:-1;1757:13:27;;1731:39;1727:276;;;1786:35;1791:1;1794;1797:7;1806;1815:5;1786:4;:35::i;:::-;;1727:276;;;1842:14;;:36;;;;;1860:18;:8;2163:3:29;2159:15;;2134:56;1860:18:27;1838:165;;;1894:34;1901:1;1904:7;1913:5;1920:7;1894:6;:34::i;:::-;1838:165;;;1959:33;1965:1;1968:7;1977:5;1984:7;1959:5;:33::i;:::-;1363:646;;;;;;;;:::o;2720:924::-;2909:19;2940;2962:21;:7;:19;:21::i;:::-;2940:43;-1:-1:-1;2995:16:27;;3034:25;:1;3048:10;3034:13;:25::i;:::-;2994:65;;;;3285:7;3270:11;:22;3262:41;;;;-1:-1:-1;;;3262:41:27;;20894:2:34;3262:41:27;;;20876:21:34;20933:1;20913:18;;;20906:29;20971:8;20951:18;;;20944:36;20997:18;;3262:41:27;20866:155:34;3262:41:27;3322:13;;3314:32;;;;-1:-1:-1;;;3314:32:27;;13634:2:34;3314:32:27;;;13616:21:34;13673:1;13653:18;;;13646:29;13711:8;13691:18;;;13684:36;13737:18;;3314:32:27;13606:155:34;3314:32:27;3375:73;3438:9;3375:58;3421:10;3375:29;3383:1;3392:11;3375:16;:29::i;:::-;-1:-1:-1;;;;;;1753:78:29;1851:17;;1730:148;3375:73:27;-1:-1:-1;3459:20:27;;;3357:91;-1:-1:-1;3494:9:27;:13;3490:45;;3509:26;-1:-1:-1;;;;;3509:15:27;;3525:9;3509:15;:26::i;:::-;3546:27;:1;3556:7;3565;3546:9;:27::i;:::-;3589:48;;;22793:25:34;;;3607:10:27;22849:2:34;22834:18;;22827:83;2456:12:29;2415:11;;;;;;2408:1;2375:4;2314:3;2310:15;;;2366:14;2404:9;2400:27;2447:22;22926:18:34;;;22919:34;3589:48:27;;;;;;;22781:2:34;3589:48:27;;;2720:924;;;;;;;;;;:::o;5491:351:21:-;5642:28;5652:4;5658:2;5662:7;5642:9;:28::i;:::-;5701:58;5734:4;5740:2;5744:7;5753:5;5701:32;:58::i;:::-;5680:155;;;;-1:-1:-1;;;5680:155:21;;8911:2:34;5680:155:21;;;8893:21:34;8950:2;8930:18;;;8923:30;8989:34;8969:18;;;8962:62;9060:20;9040:18;;;9033:48;9098:19;;5680:155:21;8883:240:34;7585:855:27;7776:19;7798:21;:7;:19;:21::i;:::-;7776:43;-1:-1:-1;7831:16:27;;7870:38;:1;7884:10;7896:11;7870:13;:38::i;:::-;7926:21;;;;:8;;;:21;;;;;;;;7956:10;7926:42;;;;;;;7919:49;;;;7830:78;;-1:-1:-1;7830:78:27;-1:-1:-1;7983:75:27;;7830:78;;8046:11;7983:20;:75::i;:::-;7979:400;;;8081:6;8074:13;;8120:16;:8;3740:3:29;3736:15;3753:11;3732:33;;3711:64;8120:16:27;8105:11;:31;8101:191;;;8156:36;:1;8172:10;8184:7;8156:15;:36::i;:::-;7979:400;;8101:191;8231:46;:1;8257:10;8269:7;8231:25;:46::i;7979:400::-;8322:46;2415:11:29;;;;;;2314:3;2310:15;;;2375:4;2366:14;2408:1;2404:9;2400:27;2456:12;2447:22;8352:15:27;2285:194:29;8322:46:27;8394:39;;;23756:25:34;;;23812:2;23797:18;;23790:34;;;8422:10:27;23840:18:34;;;23833:83;8394:39:27;;;;;;;23744:2:34;8394:39:27;;;7585:855;;;;;;;;:::o;5735:540::-;6050:3;6041:6;:12;6033:32;;;;-1:-1:-1;;;6033:32:27;;19805:2:34;6033:32:27;;;19787:21:34;19844:1;19824:18;;;19817:29;19882:9;19862:18;;;19855:37;19909:18;;6033:32:27;19777:156:34;6033:32:27;6113:10;6084:25;:1;-1:-1:-1;;;;;6084:25:27;;:9;:25::i;:::-;-1:-1:-1;;;;;6084:39:27;;6076:60;;;;-1:-1:-1;;;6076:60:27;;17982:2:34;6076:60:27;;;17964:21:34;18021:1;18001:18;;;17994:29;-1:-1:-1;;;18039:18:34;;;18032:38;18087:18;;6076:60:27;17954:157:34;6076:60:27;6147:45;6158:1;6161:14;6177:5;6184:7;6147:10;:45::i;:::-;6208:60;;;24566:25:34;;;24622:2;24607:18;;24600:34;;;-1:-1:-1;;;;;24670:55:34;;24650:18;;;24643:83;;;;6258:9:27;24757:2:34;24742:18;;24735:34;6208:60:27;;24553:3:34;24538:19;6208:60:27;24520:255:34;9380:555:27;9540:16;9562:25;:1;9576:10;9562:13;:25::i;:::-;-1:-1:-1;9539:48:27;-1:-1:-1;9647:13:27;;9639:33;;;;-1:-1:-1;;;9639:33:27;;15884:2:34;9639:33:27;;;15866:21:34;15923:1;15903:18;;;15896:29;-1:-1:-1;;;15941:18:34;;;15934:37;15988:18;;9639:33:27;15856:156:34;9639:33:27;9734:62;9790:5;9734:51;9780:4;-1:-1:-1;;;;;;1753:78:29;;9759:10:27;1851:17:29;9734:37:27;1730:148:29;9734:62:27;-1:-1:-1;9807:17:27;;;9719:77;-1:-1:-1;9835:45:27;:1;9860:10;9872:7;9835:24;:45::i;:::-;9896:32;;;22793:25:34;;;9910:10:27;22849:2:34;22834:18;;22827:83;22926:18;;;22919:34;;;9896:32:27;;22781:2:34;22766:18;9896:32:27;;;;;;;9380:555;;;;;:::o;3650:269::-;3807:51;3819:1;3830:10;3843:5;3850:7;3807:11;:51::i;:::-;3874:38;;;22793:25:34;;;3890:10:27;22849:2:34;22834:18;;22827:83;3902:9:27;22926:18:34;;;22919:34;;;;3874:38:27;;22781:2:34;22766:18;3874:38:27;22748:211:34;4474:983:27;4635:19;4657:21;:7;:19;:21::i;:::-;4635:43;-1:-1:-1;4690:16:27;;4729:21;:1;4743:6;4729:13;:21::i;:::-;4689:61;;-1:-1:-1;4689:61:27;-1:-1:-1;4761:37:27;4689:61;4761:18;:37::i;:::-;4829:1;4817:9;:13;4809:34;;;;-1:-1:-1;;;4809:34:27;;20140:2:34;4809:34:27;;;20122:21:34;20179:1;20159:18;;;20152:29;20217:10;20197:18;;;20190:38;20245:18;;4809:34:27;20112:157:34;4809:34:27;4862:14;;4854:35;;;;-1:-1:-1;;;4854:35:27;;9330:2:34;4854:35:27;;;9312:21:34;9369:1;9349:18;;;9342:29;-1:-1:-1;;;9387:18:34;;;9380:38;9435:18;;4854:35:27;9302:157:34;4854:35:27;4908:18;:8;2163:3:29;2159:15;;2134:56;4908:18:27;4900:39;;;;-1:-1:-1;;;4900:39:27;;17646:2:34;4900:39:27;;;17628:21:34;17685:1;17665:18;;;17658:29;17723:10;17703:18;;;17696:38;17751:18;;4900:39:27;17618:157:34;4900:39:27;4950:14;4967:15;:11;4981:1;4967:15;:::i;:::-;4950:32;-1:-1:-1;5054:19:27;;5091:55;5136:9;5091:40;5124:6;5091:24;5054:19;4950:32;5091:16;:24::i;:55::-;5053:93;;-1:-1:-1;5053:93:27;-1:-1:-1;2415:11:29;;;;;;2314:3;2310:15;;;2375:4;2366:14;2408:1;2404:9;2400:27;2456:12;2447:22;5165:33:27;5187:3;5192:5;2415:11:29;;;;;;2314:3;2310:15;;;2375:4;2366:14;2408:1;2404:9;2400:27;2456:12;2447:22;5165:14:27;:21;:33;:21;:33::i;:::-;:53;5157:74;;;;-1:-1:-1;;;5157:74:27;;18728:2:34;5157:74:27;;;18710:21:34;18767:1;18747:18;;;18740:29;-1:-1:-1;;;18785:18:34;;;18778:38;18833:18;;5157:74:27;18700:157:34;5157:74:27;5242:16;;;;:8;;;:16;;;;;5281:8;;;-1:-1:-1;;;;;5242:36:27;;;;;;;;;;;;-1:-1:-1;5242:36:27;:47;5300:20;;;5331:58;5384:4;2415:11:29;;;;;;2314:3;2310:15;;;2375:4;2366:14;2408:1;2404:9;2400:27;2456:12;2447:22;2415:11;;;;;;2314:3;2310:15;;;2375:4;2366:14;2408:1;2404:9;2400:27;2456:12;2447:22;5347:34:27;;;;:::i;:::-;:41;;;;:::i;:::-;-1:-1:-1;;;;;5331:15:27;;;;:58::i;:::-;4474:983;;;;;;;;;;:::o;915:297:31:-;1081:6;;1019:16;1110:13;;;:46;;-1:-1:-1;1138:8:31;-1:-1:-1;;;;;1127:29:31;:7;-1:-1:-1;;;;;1127:29:31;;1110:46;:95;;1170:1;:8;;:26;1179:16;:8;3740:3:29;3736:15;3753:11;3732:33;;3711:64;1179:16:31;1170:26;;;;;;;;;;;:35;1197:7;-1:-1:-1;;;;;1170:35:31;-1:-1:-1;;;;;1170:35:31;;;;;;;;;;;;;1110:95;;;1159:8;1110:95;1098:107;;915:297;;;;;:::o;6145:120:21:-;6210:4;1573:18:24;;;:9;:18;;;;;;-1:-1:-1;;;;;1573:18:24;:32;;6233:25:21;1474:138:24;2505:698:29;2572:11;2585;2641:6;2682:12;2674:6;2670:25;2660:35;;2708:179;2739:14;2731:6;2728:26;2708:179;;;2827:4;2822:3;2818:14;2811:21;;2866:6;2863:1;2859:14;2849:24;;2708:179;;;2929:3;2920:6;2917:1;2913:14;2910:23;2900:33;;2981:6;2978:1;2974:14;2968:3;2965:1;2961:11;2957:32;3026:12;3021:3;3017:22;3013:2;3009:31;3002:38;;;;3073:66;3066:5;3062:78;3053:87;;3179:6;3174:3;3170:16;3163:5;3160:27;3153:34;;2617:580;;;;;:::o;2416:456:26:-;2530:12;2545:20;;;;;;;;;;;2584:9;2576:32;;;;-1:-1:-1;;;2576:32:26;;21228:2:34;2576:32:26;;;21210:21:34;21267:2;21247:18;;;21240:30;-1:-1:-1;;;21286:18:34;;;21279:40;21336:18;;2576:32:26;21200:160:34;2576:32:26;2632:33;:4;2657:6;2632:18;:33::i;:::-;-1:-1:-1;;2676:11:26;:20;;;;;;;;;;;:27;;;2714:23;;;:15;;;:23;;;;;:25;;2619:46;;-1:-1:-1;2714:23:26;:25;;;:::i;:::-;;;;-1:-1:-1;;2755:25:26;;;23475::34;;;23531:2;23516:18;;23509:34;;;2755:25:26;;23448:18:34;2755:25:26;23430:119:34;1218:365:31;1401:6;;1343:16;1449:5;1429:16;1401:6;3740:3:29;3736:15;3753:11;3732:33;;3711:64;1429:16:31;:25;:40;;1468:1;1429:40;;;1457:8;1429:40;1418:51;-1:-1:-1;1492:13:31;;;;;:46;;-1:-1:-1;1520:8:31;-1:-1:-1;;;;;1509:29:31;:7;-1:-1:-1;;;;;1509:29:31;;1492:46;:84;;1552:15;;;;:8;;;:15;;;;;;;;-1:-1:-1;;;;;1552:24:31;;;;;;;;;;1492:84;;;1541:8;1492:84;1480:96;;1218:365;;;;;;:::o;1589:354::-;1747:11;1778:14;1770:34;;;;-1:-1:-1;;;1770:34:31;;16219:2:34;1770:34:31;;;16201:21:34;16258:1;16238:18;;;16231:29;16296:9;16276:18;;;16269:37;16323:18;;1770:34:31;16191:156:34;1770:34:31;1815:9;1841:16;:8;3740:3:29;3736:15;3753:11;3732:33;;3711:64;1841:16:31;1827:11;:30;1815:42;;1875:18;:8;2163:3:29;2159:15;;2134:56;1875:18:31;:61;;;-1:-1:-1;1909:8:31;-1:-1:-1;;;;;1898:29:31;:7;-1:-1:-1;;;;;1898:29:31;;:37;;;;;1931:4;1898:37;1868:68;1589:354;-1:-1:-1;;;;;;1589:354:31:o;2878:517:26:-;2993:12;3008:20;;;;;;;;;;;3046:9;3038:32;;;;-1:-1:-1;;;3038:32:26;;21228:2:34;3038:32:26;;;21210:21:34;21267:2;21247:18;;;21240:30;-1:-1:-1;;;21286:18:34;;;21279:40;21336:18;;3038:32:26;21200:160:34;3038:32:26;3115:1;3089:23;;;:15;;;:23;;;;;;3081:51;;;;-1:-1:-1;;;3081:51:26;;17306:2:34;3081:51:26;;;17288:21:34;17345:2;17325:18;;;17318:30;17384:13;17364:18;;;17357:41;17415:18;;3081:51:26;17278:161:34;3081:51:26;3143:23;;;;:15;;;:23;;;;;:25;;;;;;:::i;:::-;;;;-1:-1:-1;3190:34:26;;-1:-1:-1;3190:4:26;3216:6;3190:19;:34::i;:::-;-1:-1:-1;3235:11:26;:20;;;;;;;;;;;;:27;;;3278:25;;23475::34;;;23516:18;;;23509:34;;;3235:27:26;;-1:-1:-1;3278:25:26;;23448:18:34;3278:25:26;23430:119:34;2012:312:10;2126:6;2101:21;:31;;2093:73;;;;-1:-1:-1;;;2093:73:10;;12863:2:34;2093:73:10;;;12845:21:34;12902:2;12882:18;;;12875:30;12941:31;12921:18;;;12914:59;12990:18;;2093:73:10;12835:179:34;2093:73:10;2178:12;2196:9;-1:-1:-1;;;;;2196:14:10;2218:6;2196:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2177:52;;;2247:7;2239:78;;;;-1:-1:-1;;;2239:78:10;;12436:2:34;2239:78:10;;;12418:21:34;12475:2;12455:18;;;12448:30;12514:34;12494:18;;;12487:62;12585:28;12565:18;;;12558:56;12631:19;;2239:78:10;12408:248:34;6281:1298:27;6441:19;6463:21;:7;:19;:21::i;:::-;6441:43;-1:-1:-1;6496:16:27;;6535:21;:1;6549:6;6535:13;:21::i;:::-;6495:61;;;;6587:1;6575:9;:13;6567:34;;;;-1:-1:-1;;;6567:34:27;;11006:2:34;6567:34:27;;;10988:21:34;11045:1;11025:18;;;11018:29;11083:10;11063:18;;;11056:38;11111:18;;6567:34:27;10978:157:34;6567:34:27;6620:13;6612:32;;;;-1:-1:-1;;;6612:32:27;;15214:2:34;6612:32:27;;;15196:21:34;15253:1;15233:18;;;15226:29;15291:8;15271:18;;;15264:36;15317:18;;6612:32:27;15186:155:34;6612:32:27;6796:19;:9;2163:3:29;2159:15;;2134:56;6796:19:27;6795:20;6787:41;;;;-1:-1:-1;;;6787:41:27;;9330:2:34;6787:41:27;;;9312:21:34;9369:1;9349:18;;;9342:29;-1:-1:-1;;;9387:18:34;;;9380:38;9435:18;;6787:41:27;9302:157:34;6787:41:27;7009:16;:8;3740:3:29;3736:15;3753:11;3732:33;;3711:64;7009:16:27;6994:11;:31;;6986:52;;;;-1:-1:-1;;;6986:52:27;;21567:2:34;6986:52:27;;;21549:21:34;21606:1;21586:18;;;21579:29;21644:10;21624:18;;;21617:38;21672:18;;6986:52:27;21539:157:34;6986:52:27;-1:-1:-1;;;;;7086:28:27;;:8;-1:-1:-1;;;;;7086:28:27;;7082:91;;7165:8;7116:1;:8;;:26;7125:16;:8;3740:3:29;3736:15;3753:11;3732:33;;3711:64;7125:16:27;7116:26;;;;;;;;;;;:46;7143:18;:8;1599:5:29;1578:36;7143:18:27;-1:-1:-1;;;;;7116:46:27;;;;;;;;;;;;-1:-1:-1;7116:46:27;:57;7082:91;7245:19;;7282:105;7350:27;7368:9;2456:12:29;2415:11;;;;;;2408:1;2375:4;2314:3;2310:15;;;2366:14;2404:9;2400:27;2447:22;7350:27:27;:::i;:::-;7282:50;7325:6;7282:34;7299:16;:8;3740:3:29;3736:15;3753:11;3732:33;;3711:64;7299:16:27;7290:1;;7282:16;:34::i;:105::-;7244:143;;-1:-1:-1;7244:143:27;-1:-1:-1;2415:11:29;;;;;;2314:3;2310:15;;;2375:4;2366:14;2408:1;2404:9;2400:27;2456:12;2447:22;7406:33:27;7428:3;7433:5;2415:11:29;;;;;;2314:3;2310:15;;;2375:4;2366:14;2408:1;2404:9;2400:27;2456:12;2447:22;7406:14:27;2285:194:29;7406:33:27;:53;7398:74;;;;-1:-1:-1;;;7398:74:27;;18728:2:34;7398:74:27;;;18710:21:34;18767:1;18747:18;;;18740:29;-1:-1:-1;;;18785:18:34;;;18778:38;18833:18;;7398:74:27;18700:157:34;7398:74:27;7483:20;;;7514:58;7567:4;2415:11:29;;;;;;2314:3;2310:15;;;2375:4;2366:14;2408:1;2404:9;2400:27;2456:12;2447:22;2415:11;;;;;;2314:3;2310:15;;;2375:4;2366:14;2408:1;2404:9;2400:27;2456:12;2447:22;7530:34:27;;;;:::i;:::-;:41;;;;:::i;:::-;-1:-1:-1;;;;;7514:15:27;;;;:58::i;5031:280:29:-;5084:20;6624:4;6613:16;;;5155;;;;;;-1:-1:-1;;;5155:16:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5155:16:29;;5149:22;;5191:1;5181:11;;;;;5207:9;5202:103;5226:1;5222;:5;5202:103;;;5258:1;5248:11;;;;;5282:5;5290:4;5282:12;5273:3;5277:1;5273:6;;;;;;-1:-1:-1;;;5273:6:29;;;;;;;;;;;;;;;;;;:21;5229:3;;;;:::i;:::-;;;;5202:103;;;;5031:280;;;;:::o;1552:144:25:-;1627:11;1129:2;1657:18;1668:7;1657:8;:18;:::i;:::-;1656:33;;;;:::i;3222:398:29:-;3291:11;3331;3321:6;:21;;3314:29;;-1:-1:-1;;;3314:29:29;;;;;;;;;-1:-1:-1;3591:3:29;3587:16;3492:66;3481:78;;;;3579:25;;3362:252::o;1419:665:26:-;1539:16;1557:13;1574:31;1597:7;1574:22;:31::i;:::-;1538:67;;;;1624:8;1636:1;1624:13;;1616:36;;;;-1:-1:-1;;;1616:36:26;;19064:2:34;1616:36:26;;;19046:21:34;19103:2;19083:18;;;19076:30;19142:12;19122:18;;;19115:40;19172:18;;1616:36:26;19036:160:34;1616:36:26;1679:7;1670:5;:16;1662:39;;;;-1:-1:-1;;;1662:39:26;;16554:2:34;1662:39:26;;;16536:21:34;16593:2;16573:18;;;16566:30;16632:12;16612:18;;;16605:40;16662:18;;1662:39:26;16526:160:34;1662:39:26;1742:22;1767:26;1772:1;1775:7;1784:8;1767:4;:26::i;:::-;1742:51;;1809:23;1817:7;1826:5;1809:23;;;;;;;:::i;:::-;;;;;;;;1843:24;1884:5;:12;1870:27;;;;;;-1:-1:-1;;;1870:27:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1870:27:26;;1843:54;;1912:9;1907:84;1931:7;:14;1927:1;:18;1907:84;;;1979:1;1966:7;1974:1;1966:10;;;;;;-1:-1:-1;;;1966:10:26;;;;;;;;;;;;;;;;;;:14;1947:3;;;;:::i;:::-;;;;1907:84;;4865:777:24;5016:4;-1:-1:-1;;;;;5036:13:24;;1034:20:10;1080:8;5032:604:24;;5071:70;;-1:-1:-1;;;5071:70:24;;-1:-1:-1;;;;;5071:36:24;;;;;:70;;5108:10;;5120:4;;5126:7;;5135:5;;5071:70;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5071:70:24;;;;;;;;-1:-1:-1;;5071:70:24;;;;;;;;;;;;:::i;:::-;;;5067:517;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5308:13:24;;5304:266;;5350:60;;-1:-1:-1;;;5350:60:24;;8911:2:34;5350:60:24;;;8893:21:34;8950:2;8930:18;;;8923:30;8989:34;8969:18;;;8962:62;9060:20;9040:18;;;9033:48;9098:19;;5350:60:24;8883:240:34;5304:266:24;5522:6;5516:13;5507:6;5503:2;5499:15;5492:38;5067:517;-1:-1:-1;;;;;;5191:51:24;-1:-1:-1;;;5191:51:24;;-1:-1:-1;5184:58:24;;5032:604;-1:-1:-1;5621:4:24;5614:11;;3922:390;4063:54;4094:4;4101:2;4105:7;4063:54;;;;;;;;;;;;:22;:54::i;:::-;4042:150;;;;-1:-1:-1;;;4042:150:24;;20476:2:34;4042:150:24;;;20458:21:34;20515:2;20495:18;;;20488:30;20554:34;20534:18;;;20527:62;-1:-1:-1;;;20605:18:34;;;20598:47;20662:19;;4042:150:24;20448:239:34;4042:150:24;-1:-1:-1;;;;;4203:15:24;;;;;;:11;;;:15;;;;;:20;;4222:1;;4203:15;:20;;4222:1;;4203:20;:::i;:::-;;;;-1:-1:-1;;4233:18:24;;;;:9;;;:18;;;;;;:23;;-1:-1:-1;;;;;;4233:23:24;-1:-1:-1;;;;;4233:23:24;;;;;;;;4272:33;;4233:18;;;4272:33;;4233:18;;4272:33;3922:390;;;:::o;3472:444::-;3623:54;3654:4;3661:2;3665:7;3623:54;;;;;;;;;;;;:22;:54::i;:::-;3602:150;;;;-1:-1:-1;;;3602:150:24;;20476:2:34;3602:150:24;;;20458:21:34;20515:2;20495:18;;;20488:30;20554:34;20534:18;;;20527:62;-1:-1:-1;;;20605:18:34;;;20598:47;20662:19;;3602:150:24;20448:239:34;3602:150:24;3783:4;3763:26;;;;:11;;;:26;;;;;:31;;3793:1;;3763:26;:31;;3793:1;;3763:31;:::i;:::-;;;;-1:-1:-1;;;;;;;3804:15:24;;;;;;:11;;;:15;;;;;:20;;3823:1;;3804:15;:20;;3823:1;;3804:20;:::i;:::-;;;;-1:-1:-1;;3834:18:24;;;;:9;;;:18;;;;;;:23;;-1:-1:-1;;;;;;3834:23:24;-1:-1:-1;;;;;3834:23:24;;;;;;;;3873:36;;3834:18;;3890:4;;3873:36;;3834:18;3873:36;3472:444;;;:::o;2873:593::-;3039:19;3047:1;3050:7;3039;:19::i;:::-;-1:-1:-1;;;;;3025:33:24;:10;-1:-1:-1;;;;;3025:33:24;;:55;;;;-1:-1:-1;;;;;;3062:18:24;;3070:10;3062:18;3025:55;:99;;;;-1:-1:-1;3119:4:24;3084:23;3096:1;3099:7;3084:11;:23::i;:::-;-1:-1:-1;;;;;3084:40:24;;3025:99;3004:195;;;;-1:-1:-1;;;3004:195:24;;20476:2:34;3004:195:24;;;20458:21:34;20515:2;20495:18;;;20488:30;20554:34;20534:18;;;20527:62;-1:-1:-1;;;20605:18:34;;;20598:47;20662:19;;3004:195:24;20448:239:34;3004:195:24;3261:26;3276:1;3279:7;3261:14;:26::i;:::-;-1:-1:-1;;;;;3298:17:24;;;;;;:11;;;:17;;;;;:22;;3319:1;;3298:17;:22;;3319:1;;3298:22;:::i;:::-;;;;-1:-1:-1;;3350:4:24;3330:26;;;;:11;;;:26;;;;;:31;;3360:1;;3330:26;:31;;3360:1;;3330:31;:::i;:::-;;;;-1:-1:-1;;3371:18:24;;;;:9;;;:18;;;;;;:34;;-1:-1:-1;;;;;;3371:34:24;3400:4;3371:34;;;;;;3421:38;;3381:7;;-1:-1:-1;;;;;3421:38:24;;;;;3371:18;3421:38;2873:593;;;:::o;4833:114:33:-;4883:60;4939:2;4899:43;;;;;;8449:25:34;;8437:2;8422:18;;8404:76;4899:43:33;;;;-1:-1:-1;;4899:43:33;;;;;;;;;;;;;;;;;;;;4883:15;:60::i;1330:4087:28:-;1442:14;;;-1:-1:-1;;1949:1:28;1946;1939:20;1988:1;1985;1981:9;1972:18;;2039:5;2035:2;2032:13;2024:5;2020:2;2016:14;2012:34;2003:43;;;2128:5;2137:1;2128:10;2124:179;;;2176:1;2162:11;:15;2154:24;;;;;;-1:-1:-1;2229:23:28;;;;-1:-1:-1;2279:13:28;;2124:179;2430:5;2416:11;:19;2408:28;;;;;;2713:17;2789:11;2786:1;2783;2776:25;2961:21;;;;2918:20;;2907:32;;;;2763:38;-1:-1:-1;3244:12:28;3274:16;:12;;3289:1;3274:16;:::i;:::-;3259:32;;3385:22;;;;;4316:1;4297;:15;;4296:21;;4559:17;;;4555:21;;4548:28;4621:17;;;4617:21;;4610:28;4684:17;;;4680:21;;4673:28;4747:17;;;4743:21;;4736:28;4810:17;;;4806:21;;4799:28;4874:17;;;4870:21;;;4863:28;3761:1;3757:12;;;3753:23;;;3778:1;3749:31;3911:12;;;;3513:16;;3902:21;;;;5366:11;;;;;-1:-1:-1;;;1330:4087:28;;;;;:::o;4310:715:29:-;4422:11;4447:12;4473:11;4509:23;4535:12;4541:5;4535;:12::i;:::-;4509:38;;4562:7;4557:160;4579:6;:13;4575:1;:17;;;4557:160;;;4630:6;4617:19;;:6;4624:1;4617:9;;;;;;;;-1:-1:-1;;;4617:9:29;;;;;;;;;;;;;;;:19;4613:94;;;4664:5;:1;4668;4664:5;:::i;:::-;4656:13;;4687:5;;4613:94;4594:3;;;;:::i;:::-;;;;4557:160;;;-1:-1:-1;4734:34:29;4761:5;4734:18;:34::i;:::-;4786:33;4811:6;4804:14;;4786:17;:33::i;:::-;4846:1;4838:5;:9;;;4830:30;;;;-1:-1:-1;;;4830:30:29;;10670:2:34;4830:30:29;;;10652:21:34;10709:1;10689:18;;;10682:29;-1:-1:-1;;;10727:18:34;;;10720:38;10775:18;;4830:30:29;10642:157:34;4830:30:29;4871:7;;;;:::i;:::-;6184:4;6122:2;6130:1;6126:10;;6118:19;6172:17;;;6168:22;6157:34;;;-1:-1:-1;6212:18:29;;;;-1:-1:-1;4871:7:29;-1:-1:-1;4938:32:29;;-1:-1:-1;6157:34:29;4938:18;:32::i;:::-;4999:6;4989:16;;:6;:16;;;4981:37;;;;-1:-1:-1;;;4981:37:29;;15548:2:34;4981:37:29;;;15530:21:34;15587:1;15567:18;;;15560:29;15625:10;15605:18;;;15598:38;15653:18;;4981:37:29;15520:157:34;4981:37:29;4310:715;;;;;;:::o;3789:515::-;3865:11;3878;3901:23;3927:12;3933:5;3927;:12::i;:::-;3901:38;;3954:7;3949:155;3971:6;:13;3967:1;:17;;;3949:155;;;4009:6;4016:1;4009:9;;;;;;;;-1:-1:-1;;;4009:9:29;;;;;;;;;;;;;;;4022:1;4009:14;4005:89;;;4051:5;:1;4055;4051:5;:::i;:::-;4043:13;;4074:5;;4005:89;3986:3;;;;:::i;:::-;;;;3949:155;;;-1:-1:-1;4113:34:29;4140:5;4113:18;:34::i;:::-;4174:1;4166:5;:9;;;4158:30;;;;-1:-1:-1;;;4158:30:29;;10670:2:34;4158:30:29;;;10652:21:34;10709:1;10689:18;;;10682:29;-1:-1:-1;;;10727:18:34;;;10720:38;10775:18;;4158:30:29;10642:157:34;4158:30:29;4199:7;;;;:::i;:::-;;-1:-1:-1;;5850:1:29;5846:10;;5842:2;5838:19;5941:17;;;5931:28;;4217:36;-1:-1:-1;4264:32:29;4217:36;4264:18;:32::i;:::-;3789:515;;;;;;:::o;674:377:25:-;737:11;750:13;783:30;791:7;800:12;783:7;:30::i;:::-;775:38;;823:18;844:28;857:7;866:5;844:12;:28::i;:::-;823:49;-1:-1:-1;882:13:25;908:14;921:1;823:49;908:14;:::i;:::-;898:25;;-1:-1:-1;941:10:25;933:30;;;;-1:-1:-1;;;933:30:25;;9666:2:34;933:30:25;;;9648:21:34;9705:1;9685:18;;;9678:29;9743:9;9723:18;;;9716:37;9770:18;;933:30:25;9638:156:34;933:30:25;997:45;;;;;;6020:19:34;;;6055:12;;;6048:28;;;1036:4:25;6114:2:34;6110:15;;;-1:-1:-1;;6106:53:34;6092:12;;;6085:75;6176:12;;997:45:25;;;;;;;;;;;;987:56;;;;;;979:65;;973:71;;674:377;;;;;:::o;2090:320:26:-;2244:11;:20;;;;;;;;;;;2202:22;;2244:25;2236:44;;;;-1:-1:-1;;;2236:44:26;;10336:2:34;2236:44:26;;;10318:21:34;10375:1;10355:18;;;10348:29;10413:8;10393:18;;;10386:36;10439:18;;2236:44:26;10308:155:34;2236:44:26;2298:37;2331:3;2298:27;2322:2;2308:11;:4;6762:3:29;6758:15;6775:4;6754:26;;6733:57;2308:11:26;:16;;;;:::i;:::-;7028:3:29;7024:16;-1:-1:-1;;6923:78:29;;7021:27;;6900:158;2298:27:26;-1:-1:-1;;6373:78:29;6471:17;;6350:148;2298:37:26;2346:11;:20;;;;;;;;;;:27;;;2291:44;-1:-1:-1;2391:12:26;2291:44;2391:10;:12::i;2677:190:24:-;2793:1;2756:26;;;:17;;;:26;;;;;:39;;-1:-1:-1;;;;;;2756:39:24;;;2774:7;;2819:19;2756:1;2774:7;2819;:19::i;176:288:33:-;264:14;;129:42;373:2;360:16;;240:21;;264:14;360:16;129:42;400:5;389:68;380:77;;335:126;;;:::o;1233:111::-;1297:42;;8224:66:34;8212:79;;1297:42:33;;;8194:98:34;1281:59:33;;8167:18:34;;1297:42:33;;;-1:-1:-1;;1297:42:33;;;;;;;;;;;;;;;;;;;;1281:15;:59::i;1197:143:25:-;1274:11;1326:7;1304:18;1129:2;1304:5;:18;:::i;:::-;1303:30;;;;:::i;14:196:34:-;82:20;;-1:-1:-1;;;;;131:54:34;;121:65;;111:2;;200:1;197;190:12;111:2;63:147;;;:::o;215:196::-;274:6;327:2;315:9;306:7;302:23;298:32;295:2;;;348:6;340;333:22;295:2;376:29;395:9;376:29;:::i;416:270::-;484:6;492;545:2;533:9;524:7;520:23;516:32;513:2;;;566:6;558;551:22;513:2;594:29;613:9;594:29;:::i;:::-;584:39;;642:38;676:2;665:9;661:18;642:38;:::i;691:338::-;768:6;776;784;837:2;825:9;816:7;812:23;808:32;805:2;;;858:6;850;843:22;805:2;886:29;905:9;886:29;:::i;:::-;876:39;;934:38;968:2;957:9;953:18;934:38;:::i;:::-;924:48;;1019:2;1008:9;1004:18;991:32;981:42;;795:234;;;;;:::o;1034:1183::-;1129:6;1137;1145;1153;1206:3;1194:9;1185:7;1181:23;1177:33;1174:2;;;1228:6;1220;1213:22;1174:2;1256:29;1275:9;1256:29;:::i;:::-;1246:39;;1304:38;1338:2;1327:9;1323:18;1304:38;:::i;:::-;1294:48;;1389:2;1378:9;1374:18;1361:32;1351:42;;1444:2;1433:9;1429:18;1416:32;1467:18;1508:2;1500:6;1497:14;1494:2;;;1529:6;1521;1514:22;1494:2;1572:6;1561:9;1557:22;1547:32;;1617:7;1610:4;1606:2;1602:13;1598:27;1588:2;;1644:6;1636;1629:22;1588:2;1685;1672:16;1707:2;1703;1700:10;1697:2;;;1713:18;;:::i;:::-;1788:2;1782:9;1756:2;1842:13;;-1:-1:-1;;1838:22:34;;;1862:2;1834:31;1830:40;1818:53;;;1886:18;;;1906:22;;;1883:46;1880:2;;;1932:18;;:::i;:::-;1972:10;1968:2;1961:22;2007:2;1999:6;1992:18;2047:7;2042:2;2037;2033;2029:11;2025:20;2022:33;2019:2;;;2073:6;2065;2058:22;2019:2;2134;2129;2125;2121:11;2116:2;2108:6;2104:15;2091:46;2157:15;;;2174:2;2153:24;2146:40;;;;1164:1053;;;;-1:-1:-1;1164:1053:34;;-1:-1:-1;;;;1164:1053:34:o;2222:367::-;2287:6;2295;2348:2;2336:9;2327:7;2323:23;2319:32;2316:2;;;2369:6;2361;2354:22;2316:2;2397:29;2416:9;2397:29;:::i;:::-;2387:39;;2476:2;2465:9;2461:18;2448:32;2523:5;2516:13;2509:21;2502:5;2499:32;2489:2;;2550:6;2542;2535:22;2489:2;2578:5;2568:15;;;2306:283;;;;;:::o;2594:264::-;2662:6;2670;2723:2;2711:9;2702:7;2698:23;2694:32;2691:2;;;2744:6;2736;2729:22;2691:2;2772:29;2791:9;2772:29;:::i;:::-;2762:39;2848:2;2833:18;;;;2820:32;;-1:-1:-1;;;2681:177:34:o;2863:255::-;2921:6;2974:2;2962:9;2953:7;2949:23;2945:32;2942:2;;;2995:6;2987;2980:22;2942:2;3039:9;3026:23;3058:30;3082:5;3058:30;:::i;3123:259::-;3192:6;3245:2;3233:9;3224:7;3220:23;3216:32;3213:2;;;3266:6;3258;3251:22;3213:2;3303:9;3297:16;3322:30;3346:5;3322:30;:::i;3387:190::-;3446:6;3499:2;3487:9;3478:7;3474:23;3470:32;3467:2;;;3520:6;3512;3505:22;3467:2;-1:-1:-1;3548:23:34;;3457:120;-1:-1:-1;3457:120:34:o;3582:258::-;3650:6;3658;3711:2;3699:9;3690:7;3686:23;3682:32;3679:2;;;3732:6;3724;3717:22;3679:2;-1:-1:-1;;3760:23:34;;;3830:2;3815:18;;;3802:32;;-1:-1:-1;3669:171:34:o;3845:332::-;3922:6;3930;3938;3991:2;3979:9;3970:7;3966:23;3962:32;3959:2;;;4012:6;4004;3997:22;3959:2;4053:9;4040:23;4030:33;;4110:2;4099:9;4095:18;4082:32;4072:42;;4133:38;4167:2;4156:9;4152:18;4133:38;:::i;:::-;4123:48;;3949:228;;;;;:::o;4182:326::-;4259:6;4267;4275;4328:2;4316:9;4307:7;4303:23;4299:32;4296:2;;;4349:6;4341;4334:22;4296:2;-1:-1:-1;;4377:23:34;;;4447:2;4432:18;;4419:32;;-1:-1:-1;4498:2:34;4483:18;;;4470:32;;4286:222;-1:-1:-1;4286:222:34:o;4513:395::-;4599:6;4607;4615;4623;4676:3;4664:9;4655:7;4651:23;4647:33;4644:2;;;4698:6;4690;4683:22;4644:2;-1:-1:-1;;4726:23:34;;;4796:2;4781:18;;4768:32;;-1:-1:-1;4847:2:34;4832:18;;4819:32;;4898:2;4883:18;4870:32;;-1:-1:-1;4634:274:34;-1:-1:-1;4634:274:34:o;4913:437::-;4966:3;5004:5;4998:12;5031:6;5026:3;5019:19;5057:4;5086:2;5081:3;5077:12;5070:19;;5123:2;5116:5;5112:14;5144:3;5156:169;5170:6;5167:1;5164:13;5156:169;;;5231:13;;5219:26;;5265:12;;;;5300:15;;;;5192:1;5185:9;5156:169;;;-1:-1:-1;5341:3:34;;4974:376;-1:-1:-1;;;;;4974:376:34:o;5355:475::-;5396:3;5434:5;5428:12;5461:6;5456:3;5449:19;5486:3;5498:162;5512:6;5509:1;5506:13;5498:162;;;5574:4;5630:13;;;5626:22;;5620:29;5602:11;;;5598:20;;5591:59;5527:12;5498:162;;;5678:6;5675:1;5672:13;5669:2;;;5744:3;5737:4;5728:6;5723:3;5719:16;5715:27;5708:40;5669:2;-1:-1:-1;5812:2:34;5791:15;-1:-1:-1;;5787:29:34;5778:39;;;;5819:4;5774:50;;5404:426;-1:-1:-1;;5404:426:34:o;6887:511::-;7081:4;-1:-1:-1;;;;;7191:2:34;7183:6;7179:15;7168:9;7161:34;7243:2;7235:6;7231:15;7226:2;7215:9;7211:18;7204:43;;7283:6;7278:2;7267:9;7263:18;7256:34;7326:3;7321:2;7310:9;7306:18;7299:31;7347:45;7387:3;7376:9;7372:19;7364:6;7347:45;:::i;8485:219::-;8634:2;8623:9;8616:21;8597:4;8654:44;8694:2;8683:9;8679:18;8671:6;8654:44;:::i;22964:332::-;23171:6;23160:9;23153:25;23214:2;23209;23198:9;23194:18;23187:30;23134:4;23234:56;23286:2;23275:9;23271:18;23263:6;23234:56;:::i;23927:403::-;24162:6;24151:9;24144:25;24205:6;24200:2;24189:9;24185:18;24178:34;24248:2;24243;24232:9;24228:18;24221:30;24125:4;24268:56;24320:2;24309:9;24305:18;24297:6;24268:56;:::i;25225:128::-;25265:3;25296:1;25292:6;25289:1;25286:13;25283:2;;;25302:18;;:::i;:::-;-1:-1:-1;25338:9:34;;25273:80::o;25358:204::-;25396:3;25432:4;25429:1;25425:12;25464:4;25461:1;25457:12;25499:3;25493:4;25489:14;25484:3;25481:23;25478:2;;;25507:18;;:::i;:::-;25543:13;;25404:158;-1:-1:-1;;;25404:158:34:o;25567:120::-;25607:1;25633;25623:2;;25638:18;;:::i;:::-;-1:-1:-1;25672:9:34;;25613:74::o;25692:168::-;25732:7;25798:1;25794;25790:6;25786:14;25783:1;25780:21;25775:1;25768:9;25761:17;25757:45;25754:2;;;25805:18;;:::i;:::-;-1:-1:-1;25845:9:34;;25744:116::o;25865:125::-;25905:4;25933:1;25930;25927:8;25924:2;;;25938:18;;:::i;:::-;-1:-1:-1;25975:9:34;;25914:76::o;25995:178::-;26032:3;26076:4;26069:5;26065:16;26100:7;26090:2;;26111:18;;:::i;:::-;-1:-1:-1;;26147:20:34;;26040:133;-1:-1:-1;;26040:133:34:o;26178:437::-;26257:1;26253:12;;;;26300;;;26321:2;;26375:4;26367:6;26363:17;26353:27;;26321:2;26428;26420:6;26417:14;26397:18;26394:38;26391:2;;;-1:-1:-1;;;26462:1:34;26455:88;26566:4;26563:1;26556:15;26594:4;26591:1;26584:15;26391:2;;26233:382;;;:::o;26620:135::-;26659:3;-1:-1:-1;;26680:17:34;;26677:2;;;26700:18;;:::i;:::-;-1:-1:-1;26747:1:34;26736:13;;26667:88::o;26760:175::-;26797:3;26841:4;26834:5;26830:16;26870:4;26861:7;26858:17;26855:2;;;26878:18;;:::i;:::-;26927:1;26914:15;;26805:130;-1:-1:-1;;26805:130:34:o;26940:157::-;26970:1;27004:4;27001:1;26997:12;27028:3;27018:2;;27035:18;;:::i;:::-;27087:3;27080:4;27077:1;27073:12;27069:22;27064:27;;;26976:121;;;;:::o;27102:184::-;-1:-1:-1;;;27151:1:34;27144:88;27251:4;27248:1;27241:15;27275:4;27272:1;27265:15;27291:184;-1:-1:-1;;;27340:1:34;27333:88;27440:4;27437:1;27430:15;27464:4;27461:1;27454:15;27480:184;-1:-1:-1;;;27529:1:34;27522:88;27629:4;27626:1;27619:15;27653:4;27650:1;27643:15;27669:177;-1:-1:-1;;;;;;27747:5:34;27743:78;27736:5;27733:89;27723:2;;27836:1;27833;27826:12"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "3122600",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "approve(address,uint256)": "infinite",
            "balanceOf(address)": "1389",
            "claim(uint256,uint256)": "infinite",
            "claimItem(uint256,uint256,uint256,uint256)": "infinite",
            "commit(uint256)": "infinite",
            "commitItem(uint256,uint256,uint256)": "infinite",
            "delegate(uint256)": "infinite",
            "delegateItem(uint256,uint256,uint256)": "infinite",
            "epoch()": "infinite",
            "genesis()": "infinite",
            "getActiveSwap(uint256)": "2753",
            "getApproved(uint256)": "2244",
            "getOfferByAccount(uint256,uint256,address)": "2735",
            "infoOf(uint256)": "infinite",
            "isApprovedForAll(address,address)": "infinite",
            "mint(uint256)": "infinite",
            "name()": "infinite",
            "offer(uint256)": "infinite",
            "offerItem(uint256,uint256,uint256)": "infinite",
            "ownerOf(uint256)": "1392",
            "safeTransferFrom(address,address,uint256)": "infinite",
            "safeTransferFrom(address,address,uint256,bytes)": "infinite",
            "setApprovalForAll(address,bool)": "23339",
            "supportsInterface(bytes4)": "539",
            "swap(uint256,uint256)": "infinite",
            "swapItem(uint256,uint256,uint256)": "infinite",
            "symbol()": "infinite",
            "tokenURI(uint256)": "infinite",
            "transferFrom(address,address,uint256)": "infinite",
            "xnugg()": "infinite"
          }
        },
        "methodIdentifiers": {
          "approve(address,uint256)": "095ea7b3",
          "balanceOf(address)": "70a08231",
          "claim(uint256,uint256)": "c3490263",
          "claimItem(uint256,uint256,uint256,uint256)": "4dd1496b",
          "commit(uint256)": "f4f98ad5",
          "commitItem(uint256,uint256,uint256)": "0cf27c2a",
          "delegate(uint256)": "9fa6dd35",
          "delegateItem(uint256,uint256,uint256)": "96cfd827",
          "epoch()": "900cf0cf",
          "genesis()": "a7f0b3de",
          "getActiveSwap(uint256)": "1cd4ad3a",
          "getApproved(uint256)": "081812fc",
          "getOfferByAccount(uint256,uint256,address)": "884c66ae",
          "infoOf(uint256)": "78b38f36",
          "isApprovedForAll(address,address)": "e985e9c5",
          "mint(uint256)": "a0712d68",
          "name()": "06fdde03",
          "offer(uint256)": "761610fc",
          "offerItem(uint256,uint256,uint256)": "d636feae",
          "ownerOf(uint256)": "6352211e",
          "safeTransferFrom(address,address,uint256)": "42842e0e",
          "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
          "setApprovalForAll(address,bool)": "a22cb465",
          "supportsInterface(bytes4)": "01ffc9a7",
          "swap(uint256,uint256)": "d96073cf",
          "swapItem(uint256,uint256,uint256)": "49b44f98",
          "symbol()": "95d89b41",
          "tokenURI(uint256)": "c87b56dd",
          "transferFrom(address,address,uint256)": "23b872dd",
          "xnugg()": "8f4c1d4f"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xnugg\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endingEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endingEpoch\",\"type\":\"uint256\"}],\"name\":\"ClaimItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Commit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"CommitItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Genesis\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Offer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"OfferItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"PopItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"items\",\"type\":\"uint256[]\"}],\"name\":\"PreMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"PushItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"SwapItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingEpoch\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingEpoch\",\"type\":\"uint256\"}],\"name\":\"claimItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyingTokenId\",\"type\":\"uint256\"}],\"name\":\"commitItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyingTokenId\",\"type\":\"uint256\"}],\"name\":\"delegateItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getActiveSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"leader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOwner\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOfferByAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"infoOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"items\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"offer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyingTokenId\",\"type\":\"uint256\"}],\"name\":\"offerItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floor\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floor\",\"type\":\"uint256\"}],\"name\":\"swapItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xnugg\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}. MODIFICATION 0\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/NuggFT.sol\":\"NuggFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/src/NuggFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './interfaces/INuggFT.sol';\\n\\nimport './libraries/EpochLib.sol';\\nimport './libraries/ItemLib.sol';\\nimport './libraries/SwapLib.sol';\\nimport './libraries/ERC721Lib.sol';\\nimport './libraries/ItemLib.sol';\\nimport './libraries/MoveLib.sol';\\nimport './base/NuggERC721.sol';\\n\\ncontract NuggFT is NuggERC721, INuggFT {\\n    using EpochLib for uint256;\\n    using ItemLib for ItemLib.Storage;\\n    using SwapLib for SwapLib.Storage;\\n    using ShiftLib for uint256;\\n\\n    address payable public immutable override xnugg;\\n\\n    uint256 public immutable override genesis;\\n\\n    ItemLib.Storage private il_state;\\n\\n    mapping(uint256 => SwapLib.Storage) internal sl_state;\\n    mapping(uint256 => mapping(uint256 => SwapLib.Storage)) internal sl_state_items;\\n\\n    constructor(address _xnugg) NuggERC721('NUGGFT', 'Nugg Fungible Token') {\\n        xnugg = payable(_xnugg);\\n        genesis = block.number;\\n\\n        emit Genesis();\\n    }\\n\\n    function getActiveSwap(uint256 tokenid)\\n        external\\n        view\\n        override\\n        returns (\\n            address leader,\\n            uint256 amount,\\n            uint256 _epoch,\\n            bool isOwner\\n        )\\n    {\\n        (uint256 swapData, ) = sl_state[tokenid].loadStorage(address(0));\\n        require(swapData != 0, 'NS:GS:0');\\n        leader = address(swapData.account());\\n        amount = swapData.eth();\\n        _epoch = swapData.epoch();\\n        isOwner = swapData.isOwner();\\n    }\\n\\n    function getOfferByAccount(\\n        uint256 tokenid,\\n        uint256 index,\\n        address account\\n    ) external view override returns (uint256 amount) {\\n        (, uint256 offerData) = sl_state[tokenid].loadStorage(account, index);\\n        require(offerData != 0, 'NS:GS:0');\\n        amount = offerData.eth();\\n    }\\n\\n    function epoch() external view override returns (uint256 res) {\\n        res = genesis.activeEpoch();\\n    }\\n\\n    function delegate(uint256 tokenid) external payable override {\\n        MoveLib.delegate(sl_state[tokenid], il_state, genesis, tokenid, xnugg);\\n    }\\n\\n    function mint(uint256 tokenid) external payable override {\\n        MoveLib.mint(sl_state[tokenid], il_state, genesis, tokenid, xnugg);\\n    }\\n\\n    function delegateItem(\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 buyingTokenId\\n    ) external payable override {\\n        MoveLib.delegateItem(\\n            sl_state_items[sellingTokenId][itemid],\\n            el_state,\\n            genesis,\\n            sellingTokenId,\\n            itemid,\\n            uint160(buyingTokenId),\\n            xnugg\\n        );\\n    }\\n\\n    function commit(uint256 tokenid) external payable override {\\n        MoveLib.commit(sl_state[tokenid], tokenid, xnugg, genesis);\\n    }\\n\\n    function commitItem(\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 buyingTokenId\\n    ) external payable override {\\n        MoveLib.commitItem(\\n            sl_state_items[sellingTokenId][itemid],\\n            el_state,\\n            genesis,\\n            sellingTokenId,\\n            itemid,\\n            uint160(buyingTokenId),\\n            xnugg\\n        );\\n    }\\n\\n    function offer(uint256 tokenid) external payable override {\\n        MoveLib.offer(sl_state[tokenid], tokenid, xnugg, genesis);\\n    }\\n\\n    function offerItem(\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 buyingTokenId\\n    ) external payable override {\\n        MoveLib.offerItem(\\n            sl_state_items[sellingTokenId][itemid],\\n            el_state,\\n            sellingTokenId,\\n            genesis,\\n            itemid,\\n            uint160(buyingTokenId),\\n            xnugg\\n        );\\n    }\\n\\n    function claim(uint256 tokenid, uint256 endingEpoch) external override {\\n        MoveLib.claim(sl_state[tokenid], el_state, genesis, tokenid, endingEpoch);\\n    }\\n\\n    function claimItem(\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 buyingTokenId,\\n        uint256 endingEpoch\\n    ) external override {\\n        MoveLib.claimItem(\\n            sl_state_items[sellingTokenId][itemid],\\n            el_state,\\n            il_state,\\n            sellingTokenId,\\n            genesis,\\n            itemid,\\n            endingEpoch,\\n            uint160(buyingTokenId)\\n        );\\n    }\\n\\n    function swap(uint256 tokenid, uint256 floor) external override {\\n        MoveLib.swap(sl_state[tokenid], el_state, tokenid, floor);\\n    }\\n\\n    function swapItem(\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 floor\\n    ) external override {\\n        MoveLib.swapItem(\\n            sl_state_items[sellingTokenId][itemid],\\n            el_state,\\n            il_state,\\n            itemid,\\n            floor,\\n            uint160(sellingTokenId)\\n        );\\n    }\\n\\n    function infoOf(uint256 tokenId)\\n        public\\n        view\\n        returns (\\n            uint256 base,\\n            uint256 size,\\n            uint256[] memory items\\n        )\\n    {\\n        return il_state.infoOf(tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory res) {}\\n}\\n\",\"keccak256\":\"0x817cf3b1424e67a6c57bdf141e8e8b7070ffeff87f47301aefb46d53153681ec\",\"license\":\"MIT\"},\"contracts/src/base/NuggERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\n\\nimport '../../src/libraries/ERC721Lib.sol';\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract NuggERC721 is ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using ERC721Lib for ERC721Lib.Storage;\\n\\n    ERC721Lib.Storage internal el_state;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        el_state._name = name_;\\n        el_state._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        return el_state.balanceOf(owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return el_state.ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return el_state._name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return el_state._symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}. MODIFICATION 0\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory);\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = el_state.ownerOf(tokenId);\\n        require(to != owner, 'ERC721: approval to current owner');\\n\\n        require(\\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\\n            'ERC721: approve caller is not owner nor approved for all'\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        return el_state.getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != msg.sender, 'ERC721: approve to caller');\\n\\n        el_state._operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return el_state.isApprovedForAll(owner, operator);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(msg.sender, tokenId), 'ERC721: transfer caller is not owner nor approved');\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(msg.sender, tokenId), 'ERC721: transfer caller is not owner nor approved');\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            ERC721Lib._checkOnERC721Received(from, to, tokenId, _data),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return el_state._exists(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), 'ERC721: operator query for nonexistent token');\\n        address owner = el_state.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            ERC721Lib._checkOnERC721Received(address(0), to, tokenId, _data),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), 'ERC721: mint to the zero address');\\n        require(!_exists(tokenId), 'ERC721: token already minted');\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        el_state._balances[to] += 1;\\n        el_state._owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = el_state.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        el_state._balances[owner] -= 1;\\n        delete el_state._owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(el_state.ownerOf(tokenId) == from, 'ERC721: transfer of token that is not own');\\n        require(to != address(0), 'ERC721: transfer to the zero address');\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        el_state._balances[from] -= 1;\\n        el_state._balances[to] += 1;\\n        el_state._owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        el_state._tokenApprovals[tokenId] = to;\\n        emit Approval(el_state.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x3958efda04b67ebf03a19e121f07dd788cecb0388c49f940f50ea2bab57d0bdb\",\"license\":\"MIT\"},\"contracts/src/interfaces/INuggFT.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\ninterface INuggFT {\\n    event PreMint(uint256 tokenId, uint256[] items);\\n\\n    event PopItem(uint256 tokenId, uint256 itemId);\\n\\n    event PushItem(uint256 tokenId, uint256 itemId);\\n\\n    event Mint(uint256 epoch, address account, uint256 eth);\\n\\n    event Commit(uint256 tokenid, address account, uint256 eth);\\n\\n    event Offer(uint256 tokenid, address account, uint256 eth);\\n\\n    event Claim(uint256 tokenid, uint256 endingEpoch, address account);\\n\\n    event Swap(uint256 tokenid, address account, uint256 eth);\\n\\n    event CommitItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 eth);\\n\\n    event OfferItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 eth);\\n\\n    event ClaimItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 endingEpoch);\\n\\n    event SwapItem(uint256 sellingTokenId, uint256 itemId, uint256 eth);\\n\\n    event Genesis();\\n\\n    function swapItem(\\n        uint256 tokenid,\\n        uint256 floor,\\n        uint256 itemid\\n    ) external;\\n\\n    function xnugg() external view returns (address payable);\\n\\n    function genesis() external view returns (uint256 res);\\n\\n    function epoch() external view returns (uint256 res);\\n\\n    function delegate(uint256 tokenid) external payable;\\n\\n    function delegateItem(\\n        uint256 sellerTokenId,\\n        uint256 itemid,\\n        uint256 buyerTokenId\\n    ) external payable;\\n\\n    function mint(uint256 tokenid) external payable;\\n\\n    function commit(uint256 tokenid) external payable;\\n\\n    function commitItem(\\n        uint256 sellerTokenId,\\n        uint256 itemid,\\n        uint256 buyerTokenId\\n    ) external payable;\\n\\n    function offer(uint256 tokenid) external payable;\\n\\n    function offerItem(\\n        uint256 sellerTokenId,\\n        uint256 itemid,\\n        uint256 buyerTokenId\\n    ) external payable;\\n\\n    function claim(uint256 tokenid, uint256 endingEpoch) external;\\n\\n    function claimItem(\\n        uint256 sellerTokenId,\\n        uint256 itemid,\\n        uint256 buyerTokenId,\\n        uint256 endingEpoch\\n    ) external;\\n\\n    function swap(uint256 tokenid, uint256 floor) external;\\n\\n    function getOfferByAccount(\\n        uint256 tokenid,\\n        uint256 index,\\n        address account\\n    ) external view returns (uint256 eth);\\n\\n    function getActiveSwap(uint256 tokenid)\\n        external\\n        view\\n        returns (\\n            address leader,\\n            uint256 eth,\\n            uint256 _epoch,\\n            bool isOwner\\n        );\\n}\\n\",\"keccak256\":\"0xf9708222680f31273ed8885c22a9d282458feab0438c6819489e591e7cbe1a16\"},\"contracts/src/libraries/ERC721Lib.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\nlibrary ERC721Lib {\\n    using Address for address;\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    struct Storage {\\n        // Token name\\n        string _name;\\n        // Token symbol\\n        string _symbol;\\n        // Mapping from token ID to owner address\\n        mapping(uint256 => address) _owners;\\n        // Mapping owner address to token count\\n        mapping(address => uint256) _balances;\\n        // Mapping from token ID to approved address\\n        mapping(uint256 => address) _tokenApprovals;\\n        // Mapping from owner to operator approvals\\n        mapping(address => mapping(address => bool)) _operatorApprovals;\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(Storage storage s, uint256 tokenId) internal view returns (bool) {\\n        return s._owners[tokenId] != address(0);\\n    }\\n\\n    function isApprovedForAll(\\n        Storage storage s,\\n        address owner,\\n        address operator\\n    ) internal view returns (bool) {\\n        return s._operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(Storage storage s, uint256 tokenId) internal view returns (address) {\\n        require(_exists(s, tokenId), 'ERC721: approved query for nonexistent token');\\n\\n        return s._tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(Storage storage s, uint256 tokenId) internal view returns (address) {\\n        address owner = s._owners[tokenId];\\n        require(owner != address(0), 'ERC721: owner query for nonexistent token');\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(Storage storage s, address owner) internal view returns (uint256) {\\n        require(owner != address(0), 'ERC721: balance query for the zero address');\\n        return s._balances[owner];\\n    }\\n\\n    function clearApprovals(Storage storage s, uint256 tokenId) internal {\\n        s._tokenApprovals[tokenId] = address(0);\\n        emit Approval(ownerOf(s, tokenId), address(0), tokenId);\\n    }\\n\\n    function approvedTransferToSelf(\\n        Storage storage s,\\n        address from,\\n        uint256 tokenId\\n    ) internal {\\n        require(\\n            msg.sender == ownerOf(s, tokenId) && from == msg.sender && getApproved(s, tokenId) == address(this),\\n            'ERC721: transfer caller is not owner nor approved'\\n        );\\n\\n        // Clear approvals from the previous owner\\n        clearApprovals(s, tokenId);\\n\\n        s._balances[from] -= 1;\\n        s._balances[address(this)] += 1;\\n        s._owners[tokenId] = address(this);\\n\\n        emit Transfer(from, address(this), tokenId);\\n    }\\n\\n    function checkedTransferFromSelf(\\n        Storage storage s,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        require(\\n            _checkOnERC721Received(address(this), to, tokenId, ''),\\n            'ERC721: transfer caller is not owner nor approved'\\n        );\\n\\n        s._balances[address(this)] -= 1;\\n        s._balances[to] += 1;\\n        s._owners[tokenId] = to;\\n\\n        emit Transfer(address(this), to, tokenId);\\n    }\\n\\n    function checkedMintTo(\\n        Storage storage s,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        require(\\n            _checkOnERC721Received(address(this), to, tokenId, ''),\\n            'ERC721: transfer caller is not owner nor approved'\\n        );\\n\\n        s._balances[to] += 1;\\n        s._owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert('ERC721: transfer to non ERC721Receiver implementer');\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4c5ecbf03c740ee9d5f56849ad54e192bcd928df1de16ad916c5731082de2b73\"},\"contracts/src/libraries/EpochLib.sol\":{\"content\":\"import './ShiftLib.sol';\\n\\nlibrary EpochLib {\\n    using ShiftLib for uint256;\\n\\n    /**\\n     * @dev #TODO\\n     * @return res\\n     */\\n    function activeEpoch(uint256 genesis) internal view returns (uint256 res) {\\n        res = toEpoch(genesis, block.number);\\n    }\\n\\n    /**\\n     * @notice gets unique base based on given epoch and converts encoded bytes to object that can be merged\\n     * Note: by using the block hash no one knows what a nugg will look like before it's epoch.\\n     * We considered making this harder to manipulate, but we decided that if someone were able to\\n     * pull it off and make their own custom nugg, that would be really fucking cool.\\n     */\\n    function calculateSeed(uint256 genesis) internal view returns (uint256 res, uint256 epoch) {\\n        epoch = toEpoch(genesis, block.number);\\n        uint256 startblock = toStartBlock(genesis, epoch);\\n        bytes32 bhash = blockhash(startblock - 1);\\n        require(bhash != 0, 'EPC:SBL');\\n        res = uint256(keccak256(abi.encodePacked(bhash, epoch, address(this))));\\n    }\\n\\n    function interval() internal pure returns (uint256 res) {\\n        res = 25;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     * @return res\\n     */\\n    function toStartBlock(uint256 genesis, uint256 epoch) internal pure returns (uint256 res) {\\n        res = (epoch * interval()) + genesis;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     * @return res\\n     */\\n    function toEndBlock(uint256 genesis, uint256 epoch) internal pure returns (uint256 res) {\\n        res = toStartBlock(genesis, epoch + 1) - 1;\\n    }\\n\\n    function toEpoch(uint256 genesis, uint256 blocknum) internal pure returns (uint256 res) {\\n        res = (blocknum - genesis) / interval();\\n    }\\n}\\n\",\"keccak256\":\"0x747007bb97d92699e0da321a9afb11cb5a7eb9f56a74ed9f2b29130c99807fa9\"},\"contracts/src/libraries/ItemLib.sol\":{\"content\":\"import 'hardhat/console.sol';\\n\\nimport './ShiftLib.sol';\\nimport './EpochLib.sol';\\n\\nlibrary ItemLib {\\n    event PreMint(uint256 tokenId, uint256[] items);\\n    event PopItem(uint256 tokenId, uint256 itemId);\\n    event PushItem(uint256 tokenId, uint256 itemId);\\n    event OpenSlot(uint256 tokenId);\\n\\n    // /**\\n    //  * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n    //  */\\n    // event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    // /**\\n    //  * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n    //  * transfers.\\n    //  */\\n    // event TransferBatch(\\n    //     address indexed operator,\\n    //     address indexed from,\\n    //     address indexed to,\\n    //     uint256[] ids,\\n    //     uint256[] values\\n    // );\\n\\n    using ShiftLib for uint256;\\n\\n    struct Storage {\\n        mapping(uint256 => uint256) tokenData;\\n        mapping(uint256 => uint256) protocolItems;\\n    }\\n\\n    function infoOf(Storage storage s, uint256 tokenId)\\n        internal\\n        view\\n        returns (\\n            uint256 base,\\n            uint256 size,\\n            uint256[] memory items\\n        )\\n    {\\n        uint256 data = s.tokenData[tokenId];\\n        items = data.items();\\n        size = data.size();\\n        base = data.base();\\n    }\\n\\n    function premint(\\n        Storage storage s,\\n        uint256 tokenId,\\n        uint256 genesis\\n    ) internal {\\n        (uint256 itemData, uint256 epoch) = EpochLib.calculateSeed(genesis);\\n\\n        require(itemData != 0, '721:MINT:0');\\n        require(epoch == tokenId, '721:MINT:1');\\n\\n        itemData = itemData;\\n\\n        uint256[] memory items = mint(s, tokenId, itemData);\\n\\n        emit PreMint(tokenId, items);\\n\\n        uint256[] memory amounts = new uint256[](items.length);\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            amounts[i] = 1;\\n        }\\n\\n        // emit TransferBatch(address(this), address(0), msg.sender, items, amounts);\\n    }\\n\\n    function mint(\\n        Storage storage s,\\n        uint256 tokenId,\\n        uint256 data\\n    ) internal returns (uint256[] memory items) {\\n        require(s.tokenData[tokenId] == 0, 'IL:M:0');\\n\\n        data = data.base(data.base() % 20).size(0x4);\\n\\n        s.tokenData[tokenId] = data;\\n\\n        return data.items();\\n    }\\n\\n    function pop(\\n        Storage storage s,\\n        uint256 tokenId,\\n        uint256 itemId\\n    ) internal {\\n        uint256 data = s.tokenData[tokenId];\\n\\n        require(data != 0, '1155:STF:0');\\n\\n        (data, , ) = data.popFirstMatch(uint8(itemId));\\n\\n        s.tokenData[tokenId] = data;\\n\\n        s.protocolItems[itemId]++;\\n\\n        emit PushItem(tokenId, itemId);\\n        // emit TransferSingle(address(this), msg.sender, address(this), itemId, 1);\\n    }\\n\\n    function push(\\n        Storage storage s,\\n        uint256 tokenId,\\n        uint256 itemId\\n    ) internal {\\n        uint256 data = s.tokenData[tokenId];\\n        require(data != 0, '1155:STF:0');\\n\\n        require(s.protocolItems[itemId] > 0, '1155:SBTF:1');\\n\\n        s.protocolItems[itemId]++;\\n\\n        (data, ) = data.pushFirstEmpty(uint8(itemId));\\n\\n        s.tokenData[tokenId] = data;\\n\\n        emit PushItem(tokenId, itemId);\\n        // emit TransferSingle(address(this), address(this), msg.sender, itemId, 1);\\n    }\\n\\n    function open(Storage storage s, uint256 tokenId) internal {\\n        uint256 data = s.tokenData[tokenId];\\n        require(data != 0, '1155:STF:0');\\n\\n        data = data.size(data.size() + 1);\\n\\n        s.tokenData[tokenId] = data;\\n\\n        emit OpenSlot(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x25508199e26ccab2a848d501b1e91f7b957d947f1f702dc7940af924ee1ea16f\"},\"contracts/src/libraries/MoveLib.sol\":{\"content\":\"pragma solidity 0.8.4;\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport 'hardhat/console.sol';\\nimport './ShiftLib.sol';\\nimport './QuadMath.sol';\\nimport './SwapLib.sol';\\nimport './EpochLib.sol';\\nimport './ERC721Lib.sol';\\nimport './ItemLib.sol';\\n\\nlibrary MoveLib {\\n    using EpochLib for uint256;\\n    using SwapLib for SwapLib.Storage;\\n    using ShiftLib for uint256;\\n    using Address for address payable;\\n    using ERC721Lib for ERC721Lib.Storage;\\n    using ItemLib for ItemLib.Storage;\\n\\n    using QuadMath for uint256;\\n\\n    event Mint(uint256 epoch, address account, uint256 eth);\\n\\n    event Commit(uint256 tokenid, address account, uint256 eth);\\n\\n    event Offer(uint256 tokenid, address account, uint256 eth);\\n\\n    event Claim(uint256 tokenid, uint256 endingEpoch, address account);\\n\\n    event Swap(uint256 tokenid, address account, uint256 eth);\\n\\n    event CommitItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 eth);\\n\\n    event OfferItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 eth);\\n\\n    event ClaimItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 endingEpoch);\\n\\n    event SwapItem(uint256 sellingTokenId, uint256 itemId, uint256 eth);\\n\\n    function delegate(\\n        SwapLib.Storage storage s,\\n        // ERC721Lib.Storage storage e,\\n        ItemLib.Storage storage i,\\n        uint256 genesis,\\n        uint256 tokenid,\\n        address payable xnugg\\n    ) internal {\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = s.loadStorage(msg.sender);\\n\\n        if (activeEpoch == tokenid && swapData == 0) {\\n            mint(s, i, genesis, tokenid, xnugg);\\n        } else if (offerData == 0 && swapData.isOwner()) {\\n            commit(s, tokenid, xnugg, genesis);\\n        } else {\\n            offer(s, tokenid, xnugg, genesis);\\n        }\\n    }\\n\\n    function delegateItem(\\n        SwapLib.Storage storage s,\\n        ERC721Lib.Storage storage e,\\n        // ItemLib.Storage storage i,\\n        uint256 genesis,\\n        uint256 sellingTokenId,\\n        uint256 itemId,\\n        uint160 sendingTokenId,\\n        address payable xnugg\\n    ) internal {\\n        require(e.ownerOf(sendingTokenId) == msg.sender, 'AUC:TT:3');\\n\\n        (uint256 swapData, uint256 offerData) = s.loadStorage(sendingTokenId);\\n\\n        if (offerData == 0 && swapData.isOwner()) {\\n            commitItem(s, e, genesis, sellingTokenId, itemId, sendingTokenId, xnugg);\\n        } else {\\n            offerItem(s, e, genesis, sellingTokenId, itemId, sendingTokenId, xnugg);\\n        }\\n    }\\n\\n    function mint(\\n        SwapLib.Storage storage s,\\n        ItemLib.Storage storage i,\\n        uint256 genesis,\\n        uint256 tokenid,\\n        address payable xnugg\\n    ) internal returns (uint256 newSwapData) {\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = s.loadStorage(msg.sender);\\n\\n        // we do not need this, could take tokenid out as an argument - but do not want to give users\\n        // the ability to accidently place an offer for nugg A and end up minting nugg B.\\n        require(activeEpoch == tokenid, 'NS:M:0');\\n\\n        require(swapData == 0, 'NS:M:D');\\n\\n        (newSwapData, ) = uint256(0).epoch(activeEpoch).account(uint160(msg.sender)).eth(msg.value);\\n\\n        s.data = newSwapData;\\n\\n        if (msg.value > 0) xnugg.sendValue(msg.value);\\n\\n        i.premint(tokenid, genesis);\\n\\n        emit Mint(activeEpoch, msg.sender, newSwapData.eth());\\n    }\\n\\n    function commit(\\n        SwapLib.Storage storage s,\\n        uint256 tokenid,\\n        address payable xnugg,\\n        uint256 genesis\\n    ) internal {\\n        _commitCore(s, uint160(msg.sender), xnugg, genesis);\\n\\n        emit Commit(tokenid, msg.sender, msg.value);\\n    }\\n\\n    function commitItem(\\n        SwapLib.Storage storage s,\\n        ERC721Lib.Storage storage e,\\n        // ItemLib.Storage storage i,\\n        uint256 genesis,\\n        uint256 sellingTokenId,\\n        uint256 itemId,\\n        uint160 sendingTokenId,\\n        address payable xnugg\\n    ) internal {\\n        require(itemId < 256, 'ML:CI:0');\\n\\n        require(e.ownerOf(sendingTokenId) == msg.sender, 'AUC:TT:3');\\n\\n        _commitCore(s, sendingTokenId, xnugg, genesis);\\n\\n        emit CommitItem(sellingTokenId, itemId, sendingTokenId, msg.value);\\n    }\\n\\n    function _commitCore(\\n        SwapLib.Storage storage s,\\n        uint160 sender,\\n        address payable xnugg,\\n        uint256 genesis\\n    ) internal {\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = s.loadStorage(sender);\\n\\n        console.logBytes32(bytes32(swapData));\\n\\n        require(msg.value > 0, 'SL:COM:2');\\n\\n        require(offerData == 0, 'SL:HSO:0');\\n\\n        require(swapData.isOwner(), 'SL:HSO:1');\\n\\n        uint256 _epoch = activeEpoch + 1;\\n\\n        // copy relevent items from swapData to newSwapData\\n        (uint256 newSwapData, uint256 dust) = uint256(0).epoch(_epoch).account(sender).eth(msg.value);\\n\\n        require(swapData.eth().mulDiv(100, 10000) < newSwapData.eth(), 'SL:OBP:4');\\n\\n        s.offers[_epoch][swapData.account()] = swapData;\\n\\n        s.data = newSwapData;\\n\\n        xnugg.sendValue(newSwapData.eth() - swapData.eth() + dust);\\n\\n        // emit Commit(tokenid, sender, newSwapData.eth());\\n    }\\n\\n    function offer(\\n        SwapLib.Storage storage s,\\n        uint256 tokenid,\\n        address payable xnugg,\\n        uint256 genesis\\n    ) internal {\\n        _offerCore(s, uint160(msg.sender), xnugg, genesis);\\n\\n        emit Offer(tokenid, msg.sender, msg.value);\\n    }\\n\\n    function offerItem(\\n        SwapLib.Storage storage s,\\n        ERC721Lib.Storage storage e,\\n        // ItemLib.Storage storage i,\\n        uint256 genesis,\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint160 sendingTokenId,\\n        address payable xnugg\\n    ) internal {\\n        require(itemid < 256, 'ML:OI:0');\\n\\n        require(e.ownerOf(sendingTokenId) == msg.sender, 'AUC:TT:3');\\n\\n        _offerCore(s, sendingTokenId, xnugg, genesis);\\n\\n        emit OfferItem(sellingTokenId, itemid, sendingTokenId, msg.value);\\n    }\\n\\n    function _offerCore(\\n        SwapLib.Storage storage s,\\n        uint160 sender,\\n        address payable xnugg,\\n        uint256 genesis\\n    ) internal {\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = s.loadStorage(sender);\\n\\n        require(msg.value > 0, 'SL:OBP:2');\\n\\n        require(swapData != 0, 'NS:0:0');\\n\\n        // make sure user is not the owner of swap\\n        // we do not know how much to give them when they call \\\"claim\\\" otherwise\\n        require(!offerData.isOwner(), 'SL:HSO:0');\\n\\n        // if (swapData.epoch() == 0 && swapData.isOwner()) swapData = swapData.epoch(activeEpoch + 1);\\n\\n        // make sure swap is still active\\n        require(activeEpoch <= swapData.epoch(), 'SL:OBP:3');\\n\\n        // save prev offers data\\n        if (swapData.account() != sender) s.offers[swapData.epoch()][swapData.account()] = swapData;\\n\\n        // copy relevent items from swapData to newSwapData\\n        (uint256 newSwapData, uint256 dust) = uint256(0).epoch(swapData.epoch()).account(sender).eth(\\n            offerData.eth() + msg.value\\n        );\\n\\n        require(swapData.eth().mulDiv(100, 10000) < newSwapData.eth(), 'SL:OBP:4');\\n\\n        s.data = newSwapData;\\n\\n        xnugg.sendValue(newSwapData.eth() - swapData.eth() + dust);\\n    }\\n\\n    function claim(\\n        SwapLib.Storage storage s,\\n        ERC721Lib.Storage storage e,\\n        uint256 genesis,\\n        uint256 tokenid,\\n        uint256 endingEpoch\\n    ) internal {\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = s.loadStorage(msg.sender, endingEpoch);\\n\\n        delete s.offers[endingEpoch][uint160(msg.sender)];\\n\\n        if (SwapLib.checkClaimer(uint160(msg.sender), swapData, offerData, activeEpoch)) {\\n            delete s.data;\\n            if (endingEpoch == swapData.epoch()) {\\n                e.checkedMintTo(msg.sender, tokenid);\\n            } else {\\n                e.checkedTransferFromSelf(msg.sender, tokenid);\\n            }\\n        } else {\\n            payable(msg.sender).sendValue(offerData.eth());\\n        }\\n\\n        emit Claim(tokenid, endingEpoch, msg.sender);\\n    }\\n\\n    function claimItem(\\n        SwapLib.Storage storage s,\\n        ERC721Lib.Storage storage e,\\n        ItemLib.Storage storage i,\\n        uint256 genesis,\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 endingEpoch,\\n        uint160 sendingTokenId\\n    ) internal {\\n        require(e.ownerOf(sendingTokenId) == msg.sender, 'AUC:TT:3');\\n        require(itemid < 256, 'ML:CI:0');\\n\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = s.loadStorage(sendingTokenId, endingEpoch);\\n\\n        delete s.offers[endingEpoch][sendingTokenId];\\n\\n        if (SwapLib.checkClaimer(sendingTokenId, swapData, offerData, activeEpoch)) {\\n            delete s.data;\\n\\n            i.push(sendingTokenId, itemid);\\n        } else {\\n            payable(msg.sender).sendValue(offerData.eth());\\n        }\\n\\n        emit ClaimItem(sellingTokenId, itemid, endingEpoch, sendingTokenId);\\n    }\\n\\n    function swap(\\n        SwapLib.Storage storage s,\\n        ERC721Lib.Storage storage e,\\n        uint256 tokenid,\\n        uint256 floor\\n    ) internal {\\n        (uint256 swapData, ) = s.loadStorage(msg.sender);\\n\\n        // make sure swap does not exist\\n        require(swapData == 0, 'NS:SS:0');\\n\\n        // build starting swap data\\n        (swapData, ) = swapData.account(uint160(msg.sender)).isOwner(true).eth(floor);\\n\\n        s.data = swapData;\\n\\n        e.approvedTransferToSelf(msg.sender, tokenid);\\n\\n        emit Swap(tokenid, msg.sender, floor);\\n    }\\n\\n    function swapItem(\\n        SwapLib.Storage storage s,\\n        ERC721Lib.Storage storage e,\\n        ItemLib.Storage storage i,\\n        uint256 itemid,\\n        uint256 floor,\\n        uint160 sellingTokenId\\n    ) internal {\\n        require(e.ownerOf(sellingTokenId) == msg.sender, 'AUC:TT:3');\\n\\n        require(itemid < 256, 'ML:SI:0');\\n\\n        (uint256 swapData, ) = s.loadStorage(sellingTokenId);\\n\\n        // make sure swap does not exist\\n        require(swapData == 0, 'NS:SS:0');\\n\\n        // build starting swap data\\n        (swapData, ) = swapData.account(sellingTokenId).isOwner(true).eth(floor);\\n\\n        s.data = swapData;\\n\\n        i.pop(sellingTokenId, itemid);\\n\\n        emit SwapItem(sellingTokenId, itemid, floor);\\n    }\\n}\\n\",\"keccak256\":\"0xad9db0df10738918088b0430425c5031e6ca42c82855a2f2ef56aad67cccb359\"},\"contracts/src/libraries/QuadMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title QuadMath\\n * @notice a library for performing Quadruple-precision floating-point format math operations\\n * @dev #TODO\\n */\\nlibrary QuadMath {\\n    /**\\n     * @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @param a The multiplicand\\n     * @param b The multiplier\\n     * @param denominator The divisor\\n     * @return result The 256-bit result\\n     * @dev Credit to Uniswap under MIT license https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol\\n     */\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @param a The multiplicand\\n     * @param b The multiplier\\n     * @param denominator The divisor\\n     * @return result The 256-bit result\\n     * @dev Credit to Remco Bloemen under MIT license https:/an--2-umb.com/21/muldiv\\n     */\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        // fix for negation braking change in Solidity v8 - https://ethereum.stackexchange.com/a/96646\\n        uint256 twos = denominator & (~denominator + 1);\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n\\n        // this unchecked block is required for this to work with Solidity v8\\n        unchecked {\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xabfe5a4833bdb7d13403e55305444f033b31ff9cf50da4799175b8b26138bb2e\",\"license\":\"MIT\"},\"contracts/src/libraries/ShiftLib.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\nimport \\\"hardhat/console.sol\\\";\\nlibrary ShiftLib {\\n    function unmask(uint256 input) internal pure returns (uint256 res) {\\n        assembly {\\n            res := input\\n            if eq(res, not(0)) {\\n                res := 0\\n            }\\n        }\\n    }\\n\\n    function mask(uint256 input) internal pure returns (uint256 res) {\\n        assembly {\\n            res := input\\n            if eq(res, 0) {\\n                res := not(0)\\n            }\\n        }\\n    }\\n\\n        // function fletcher16(address a) internal pure returns (uint16 res) {\\n        // uint16 sum1 = 0;\\n        // uint16 sum2 = 0;\\n        // for (uint256 index = 0; index < data.length; index++) {\\n        //     sum1 = (sum1 + uint8(data[index])) % 255;\\n        //     sum2 = (sum2 + sum1) % 255;\\n        // }\\n        // res = (sum2 << 8) | sum1;\\n        // }\\n\\n    // function caddress(address a) internal pure returns (uint112 res) {\\n    //     assembly {\\n    //         let sum1 := 0\\n    //         let sum2 := 0\\n    //         let tmp := a\\n    //         for {\\n    //             let index := 0\\n    //         } lt(index, 20) {\\n    //             index := add(index, 0x2)\\n    //         } {\\n    //             sum1 := mod(add(sum1, and(0xffff, tmp)), 0xffff)\\n    //             sum2 := mod(add(sum1, sum2), 0xffff)\\n    //             tmp := shr(0xf, tmp)\\n    //         }\\n    //         res := or(and(shr(48, a), 0xFFFFFFFFFFFFFFFFFFFF00000000), or(shl(8, sum2), sum1))\\n    //     }\\n    // }\\n\\n\\n\\n\\n    function account(uint256 input) internal pure returns (uint160 res) {\\n        assembly {\\n            res := input\\n        }\\n    }\\n\\n    function account(uint256 input, uint160 update) internal pure returns (uint256 res) {\\n\\n        assembly {\\n            input := and(input, 0xffffffffffffffffffffffff0000000000000000000000000000000000000000)\\n            res := or(input, update)\\n        }\\n    }\\n\\n    function isOwner(uint256 input, bool) internal pure returns (uint256 res) {\\n        assembly {\\n            res := or(input, shl(255, 0x1))\\n        }\\n    }\\n\\n    function isOwner(uint256 input) internal pure returns (bool res) {\\n        assembly {\\n            res := and(shr(255, input), 0x1)\\n        }\\n    }\\n\\n    function eth(uint256 input) internal pure returns (uint256 res) {\\n        assembly {\\n            res := and(shr(160, input), 0xFFFFFFFFFFFFFF)\\n            let i := and(res, 0xff)\\n            res := shl(mul(4, i), shr(8, res))\\n            res := mul(res, 0xE8D4A51000)\\n        }\\n    }\\n\\n    // 14 f's\\n    function eth(uint256 input, uint256 update) internal pure returns (uint256 res, uint256 rem) {\\n        assembly {\\n            let in := update\\n            update := div(update, 0xE8D4A51000)\\n            for {\\n            } gt(update, 0xFFFFFFFFFFFF) {\\n                // 13\\n            } {\\n                res := add(res, 0x01)\\n                update := shr(4, update)\\n            }\\n            update := or(shl(8, update), res)\\n            let out := shl(mul(4, res), shr(8, update))\\n            rem := sub(in, mul(out, 0xE8D4A51000))\\n            input := and(input, 0xffffffffff00000000000000ffffffffffffffffffffffffffffffffffffffff)\\n            res := or(input, shl(160, update))\\n        }\\n    }\\n\\n    // 9 f's\\n    function epoch(uint256 input, uint256 update) internal pure returns (uint256 res) {\\n        assert(update <= 0xFFFFFFFFF);\\n        assembly {\\n            //                0xfffffffffffffffddffffffffffffffccfffffffffffffffffffffffffffffff)\\n            res := and(input, 0xf000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            res := or(res, shl(216, update))\\n        }\\n    }\\n\\n    function epoch(uint256 input) internal pure returns (uint256 res) {\\n        assembly {\\n            res := and(shr(216, input), 0xFFFFFFFFF)\\n        }\\n    }\\n\\n\\n\\n    function pushFirstEmpty(uint256 input, uint8 itemId) internal view returns (uint256 res, uint8 index) {\\n        uint256[] memory _items = items(input);\\n        for (uint8 i = 0; i < _items.length; i++) {\\n            if (_items[i] == 0) {\\n                index = i + 1;\\n                break;\\n            }\\n        }\\n        console.logBytes32(bytes32(input));\\n\\n        require(index > 0, 'SL:PFM:0');\\n\\n        index--;\\n\\n        res = pushItem(input, itemId, index);\\n\\n        console.logBytes32(bytes32(res));\\n\\n    }\\n\\n    function popFirstMatch(uint256 input, uint8 itemId)\\n        internal\\n        view\\n        returns (\\n            uint256 res,\\n            uint8 popped,\\n            uint8 index\\n        )\\n    {\\n        uint256[] memory _items = items(input);\\n        for (uint8 i = 0; i < _items.length; i++) {\\n            if (_items[i] == itemId) {\\n                index = i + 1;\\n                break;\\n            }\\n        }\\n                console.logBytes32(bytes32(input));\\n                console.logBytes1(bytes1(itemId));\\n\\n        require(index > 0, 'SL:PFM:0');\\n\\n        index--;\\n\\n\\n        (res, popped) = popItem(input, index);\\n\\n        console.logBytes32(bytes32(res));\\n\\n        require(popped == itemId, 'SL:PFM:1');\\n    }\\n\\n    function items(uint256 input) internal pure returns (uint256[] memory res) {\\n        uint256 s = size(input);\\n        res = new uint256[](s);\\n        input >>= 8;\\n        for (uint256 i = 0; i < s; i++) {\\n            input >>= 8;\\n            res[i] = input & 0xff;\\n        }\\n    }\\n\\n    function itemsWithTokenId(uint256 input, uint256 tokenId) internal pure returns (uint256[] memory res) {\\n        uint256 s = size(input);\\n        res = new uint256[](s + 1);\\n        res[0] = tokenId;\\n        input >>= 8;\\n        for (uint256 i = 1; i < res.length; i++) {\\n            input >>= 8;\\n            res[i] = input & 0xff;\\n        }\\n    }\\n\\n    function pushItem(\\n        uint256 input,\\n        uint8 item,\\n        uint8 at\\n    ) internal pure returns (uint256 res) {\\n        assembly {\\n            let offset := add(16, mul(8, at))\\n            res := and(input, not(shl(offset, 0xff)))\\n            res := or(input, shl(offset, item))\\n        }\\n    }\\n\\n    function popItem(uint256 input, uint8 at) internal pure returns (uint256 res, uint8 item) {\\n        assembly {\\n            let offset := add(16, mul(8, at))\\n            res := and(input, not(shl(offset, 0xff)))\\n            item := shr(offset, input)\\n        }\\n    }\\n\\n    function size(uint256 input, uint8 update) internal pure returns (uint256 res) {\\n        assembly {\\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00)\\n            res := or(update, input)\\n        }\\n    }\\n\\n    function size(uint256 input) internal pure returns (uint8 res) {\\n        assembly {\\n            res := and(input, 0xff)\\n        }\\n    }\\n\\n    function base(uint256 input) internal pure returns (uint8 res) {\\n        assembly {\\n            res := and(shr(0x8, input), 0xff)\\n        }\\n    }\\n\\n    function base(uint256 input, uint8 update) internal pure returns (uint256 res) {\\n        assembly {\\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff)\\n            res := or(shl(0x8, update), input)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6319a06a2ad5c0920d22f9ad310d7bd7bf7c67da6566a05226b16d7641ff202d\"},\"contracts/src/libraries/SwapLib.sol\":{\"content\":\"pragma solidity 0.8.4;\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport 'hardhat/console.sol';\\nimport './ShiftLib.sol';\\nimport './QuadMath.sol';\\n\\nlibrary SwapLib {\\n    using Address for address;\\n    using ShiftLib for uint256;\\n\\n    struct Storage {\\n        uint256 data;\\n        mapping(uint256 => mapping(uint160 => uint256)) offers;\\n    }\\n\\n    function loadStorage(Storage storage s, address account)\\n        internal\\n        view\\n        returns (uint256 swapData, uint256 offerData)\\n    {\\n        return loadStorage(s, uint160(account));\\n    }\\n\\n    function loadStorage(\\n        Storage storage s,\\n        address account,\\n        uint256 epoch\\n    ) internal view returns (uint256 swapData, uint256 offerData) {\\n        return loadStorage(s, uint160(account), epoch);\\n    }\\n\\n    function loadStorage(Storage storage s, uint160 account)\\n        internal\\n        view\\n        returns (uint256 swapData, uint256 offerData)\\n    {\\n        swapData = s.data;\\n\\n        offerData = swapData == 0 || account == swapData.account() ? swapData : s.offers[swapData.epoch()][account];\\n    }\\n\\n    function loadStorage(\\n        Storage storage s,\\n        uint160 account,\\n        uint256 epoch\\n    ) internal view returns (uint256 swapData, uint256 offerData) {\\n        swapData = s.data;\\n\\n        swapData = swapData.epoch() == epoch ? swapData : 0;\\n\\n        offerData = swapData != 0 && account == swapData.account() ? swapData : s.offers[epoch][account];\\n    }\\n\\n    function checkClaimer(\\n        uint160 account,\\n        uint256 swapData,\\n        uint256 offerData,\\n        uint256 activeEpoch\\n    ) internal pure returns (bool winner) {\\n        require(offerData != 0, 'SL:CC:1');\\n\\n        bool over = activeEpoch > swapData.epoch();\\n\\n        return swapData.isOwner() || (account == swapData.account() && over);\\n    }\\n\\n    function points(uint256 total, uint256 bps) internal pure returns (uint256 res) {\\n        res = QuadMath.mulDiv(total, bps, 10000);\\n    }\\n\\n    function pointsWith(uint256 total, uint256 bps) internal pure returns (uint256 res) {\\n        res = points(total, bps) + total;\\n    }\\n\\n    // function moveERC721(\\n    //     uint256 tokenid,\\n    //     address from,\\n    //     address to\\n    // ) internal {\\n    //     // require(IERC721(token).ownerOf(tokenid) == from, 'AUC:TT:1');\\n    //     console.log(to, addressToTokenId(from), isTokenIdAddress(from));\\n\\n    //     IERC721(token).safeTransferFrom(from, to, tokenid);\\n\\n    //     require(IERC721(token).ownerOf(tokenid) == to, 'AUC:TT:3');\\n    // }\\n\\n    function itemTokenId(uint256 itemid, uint256 tokenid) internal pure returns (uint256 res) {\\n        res = (tokenid << 8) | itemid;\\n    }\\n\\n    function tokenIdToAddress(uint256 tokenid) internal pure returns (address res) {\\n        res = address(uint160((0x42069 << 140) | tokenid));\\n    }\\n\\n    function addressToTokenId(address addr) internal pure returns (uint256 res) {\\n        res = uint136(uint160(addr));\\n    }\\n\\n    function isTokenIdAddress(address addr) internal view returns (bool res) {\\n        console.logBytes32(bytes32(uint256(uint160(addr) >> 80)));\\n        console.logBytes32(bytes32(uint256(0x42069 << 60)));\\n        if (uint160(addr) >> 80 == 0x42069 << 60) return true;\\n    }\\n\\n    // function validateSender(\\n    //     address token,\\n    //     // uint256 tokenid,\\n    //     address sender\\n    // ) internal view {\\n    //     console.log(sender, addressToTokenId(sender), isTokenIdAddress(sender));\\n    //     require(msg.sender == sender || IERC721(token).ownerOf(addressToTokenId(sender)) == msg.sender, 'SL:VS:0');\\n    // }\\n\\n    // function moveERC1155(\\n    //     address token,\\n    //     uint256 itemtokenid,\\n    //     bool from\\n    // ) internal {\\n    //     // require(IERC721(token).ownerOf(tokenid) == from, 'AUC:TT:1');\\n\\n    //     IERC1155(token).safeBatchTransferFrom(\\n    //         address(0),\\n    //         address(0),\\n    //         new uint256[](0),\\n    //         new uint256[](0),\\n    //         abi.encode(uint8(itemtokenid), itemtokenid >> 8, from)\\n    //     );\\n\\n    //     // require(moveERC1155(token).ownerOf(tokenid) == to, 'AUC:TT:3');\\n    // }\\n}\\n\",\"keccak256\":\"0x7cf92b6a68603621bd30a38f69abaf66c9f3e6ca02f04b956956664ba2bf0d71\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 4931,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "el_state",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Storage)5930_storage"
          },
          {
            "astId": 4464,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "il_state",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(Storage)6533_storage"
          },
          {
            "astId": 4469,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "sl_state",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(Storage)9097_storage)"
          },
          {
            "astId": 4476,
            "contract": "contracts/src/NuggFT.sol:NuggFT",
            "label": "sl_state_items",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Storage)9097_storage))"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_bool)"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_uint160,t_uint256)": {
            "encoding": "mapping",
            "key": "t_uint160",
            "label": "mapping(uint160 => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_uint256,t_address)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32",
            "value": "t_address"
          },
          "t_mapping(t_uint256,t_mapping(t_uint160,t_uint256))": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => mapping(uint160 => uint256))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_uint160,t_uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Storage)9097_storage))": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => mapping(uint256 => struct SwapLib.Storage))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_uint256,t_struct(Storage)9097_storage)"
          },
          "t_mapping(t_uint256,t_struct(Storage)9097_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct SwapLib.Storage)",
            "numberOfBytes": "32",
            "value": "t_struct(Storage)9097_storage"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Storage)5930_storage": {
            "encoding": "inplace",
            "label": "struct ERC721Lib.Storage",
            "members": [
              {
                "astId": 5909,
                "contract": "contracts/src/NuggFT.sol:NuggFT",
                "label": "_name",
                "offset": 0,
                "slot": "0",
                "type": "t_string_storage"
              },
              {
                "astId": 5911,
                "contract": "contracts/src/NuggFT.sol:NuggFT",
                "label": "_symbol",
                "offset": 0,
                "slot": "1",
                "type": "t_string_storage"
              },
              {
                "astId": 5915,
                "contract": "contracts/src/NuggFT.sol:NuggFT",
                "label": "_owners",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_uint256,t_address)"
              },
              {
                "astId": 5919,
                "contract": "contracts/src/NuggFT.sol:NuggFT",
                "label": "_balances",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "astId": 5923,
                "contract": "contracts/src/NuggFT.sol:NuggFT",
                "label": "_tokenApprovals",
                "offset": 0,
                "slot": "4",
                "type": "t_mapping(t_uint256,t_address)"
              },
              {
                "astId": 5929,
                "contract": "contracts/src/NuggFT.sol:NuggFT",
                "label": "_operatorApprovals",
                "offset": 0,
                "slot": "5",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_struct(Storage)6533_storage": {
            "encoding": "inplace",
            "label": "struct ItemLib.Storage",
            "members": [
              {
                "astId": 6528,
                "contract": "contracts/src/NuggFT.sol:NuggFT",
                "label": "tokenData",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "astId": 6532,
                "contract": "contracts/src/NuggFT.sol:NuggFT",
                "label": "protocolItems",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_uint256,t_uint256)"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Storage)9097_storage": {
            "encoding": "inplace",
            "label": "struct SwapLib.Storage",
            "members": [
              {
                "astId": 9090,
                "contract": "contracts/src/NuggFT.sol:NuggFT",
                "label": "data",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              },
              {
                "astId": 9096,
                "contract": "contracts/src/NuggFT.sol:NuggFT",
                "label": "offers",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_uint256,t_mapping(t_uint160,t_uint256))"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint160": {
            "encoding": "inplace",
            "label": "uint160",
            "numberOfBytes": "20"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/mock/erc721/ERC1155ExternalSupply.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol';\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155ExternalSupply is Context, ERC165, IERC1155 {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor() {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), 'ERC1155: balance query for the zero address');\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, 'ERC1155: accounts and ids length mismatch');\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, 'ERC1155: setting approval status for self');\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            'ERC1155: caller is not owner nor approved'\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            'ERC1155: transfer caller is not owner nor approved'\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), 'ERC1155: transfer to the zero address');\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, 'ERC1155: insufficient balance for transfer');\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n        require(to != address(0), 'ERC1155: transfer to the zero address');\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, 'ERC1155: insufficient balance for transfer');\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: mint to the zero address');\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), 'ERC1155: mint to the zero address');\\n        require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: burn from the zero address');\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), '');\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, 'ERC1155: burn amount exceeds balance');\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: burn from the zero address');\\n        require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, '');\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, 'ERC1155: burn amount exceeds balance');\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert('ERC1155: ERC1155Receiver rejected tokens');\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert('ERC1155: ERC1155Receiver rejected tokens');\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/src/libraries/SwapLib.sol\": {\n      \"content\": \"pragma solidity 0.8.4;\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport 'hardhat/console.sol';\\nimport './ShiftLib.sol';\\nimport './QuadMath.sol';\\n\\nlibrary SwapLib {\\n    using Address for address;\\n    using ShiftLib for uint256;\\n\\n    struct Storage {\\n        uint256 data;\\n        mapping(uint256 => mapping(uint160 => uint256)) offers;\\n    }\\n\\n    function loadStorage(Storage storage s, address account)\\n        internal\\n        view\\n        returns (uint256 swapData, uint256 offerData)\\n    {\\n        return loadStorage(s, uint160(account));\\n    }\\n\\n    function loadStorage(\\n        Storage storage s,\\n        address account,\\n        uint256 epoch\\n    ) internal view returns (uint256 swapData, uint256 offerData) {\\n        return loadStorage(s, uint160(account), epoch);\\n    }\\n\\n    function loadStorage(Storage storage s, uint160 account)\\n        internal\\n        view\\n        returns (uint256 swapData, uint256 offerData)\\n    {\\n        swapData = s.data;\\n\\n        offerData = swapData == 0 || account == swapData.account() ? swapData : s.offers[swapData.epoch()][account];\\n    }\\n\\n    function loadStorage(\\n        Storage storage s,\\n        uint160 account,\\n        uint256 epoch\\n    ) internal view returns (uint256 swapData, uint256 offerData) {\\n        swapData = s.data;\\n\\n        swapData = swapData.epoch() == epoch ? swapData : 0;\\n\\n        offerData = swapData != 0 && account == swapData.account() ? swapData : s.offers[epoch][account];\\n    }\\n\\n    function checkClaimer(\\n        uint160 account,\\n        uint256 swapData,\\n        uint256 offerData,\\n        uint256 activeEpoch\\n    ) internal pure returns (bool winner) {\\n        require(offerData != 0, 'SL:CC:1');\\n\\n        bool over = activeEpoch > swapData.epoch();\\n\\n        return swapData.isOwner() || (account == swapData.account() && over);\\n    }\\n\\n    function points(uint256 total, uint256 bps) internal pure returns (uint256 res) {\\n        res = QuadMath.mulDiv(total, bps, 10000);\\n    }\\n\\n    function pointsWith(uint256 total, uint256 bps) internal pure returns (uint256 res) {\\n        res = points(total, bps) + total;\\n    }\\n\\n    // function moveERC721(\\n    //     uint256 tokenid,\\n    //     address from,\\n    //     address to\\n    // ) internal {\\n    //     // require(IERC721(token).ownerOf(tokenid) == from, 'AUC:TT:1');\\n    //     console.log(to, addressToTokenId(from), isTokenIdAddress(from));\\n\\n    //     IERC721(token).safeTransferFrom(from, to, tokenid);\\n\\n    //     require(IERC721(token).ownerOf(tokenid) == to, 'AUC:TT:3');\\n    // }\\n\\n    function itemTokenId(uint256 itemid, uint256 tokenid) internal pure returns (uint256 res) {\\n        res = (tokenid << 8) | itemid;\\n    }\\n\\n    function tokenIdToAddress(uint256 tokenid) internal pure returns (address res) {\\n        res = address(uint160((0x42069 << 140) | tokenid));\\n    }\\n\\n    function addressToTokenId(address addr) internal pure returns (uint256 res) {\\n        res = uint136(uint160(addr));\\n    }\\n\\n    function isTokenIdAddress(address addr) internal view returns (bool res) {\\n        console.logBytes32(bytes32(uint256(uint160(addr) >> 80)));\\n        console.logBytes32(bytes32(uint256(0x42069 << 60)));\\n        if (uint160(addr) >> 80 == 0x42069 << 60) return true;\\n    }\\n\\n    // function validateSender(\\n    //     address token,\\n    //     // uint256 tokenid,\\n    //     address sender\\n    // ) internal view {\\n    //     console.log(sender, addressToTokenId(sender), isTokenIdAddress(sender));\\n    //     require(msg.sender == sender || IERC721(token).ownerOf(addressToTokenId(sender)) == msg.sender, 'SL:VS:0');\\n    // }\\n\\n    // function moveERC1155(\\n    //     address token,\\n    //     uint256 itemtokenid,\\n    //     bool from\\n    // ) internal {\\n    //     // require(IERC721(token).ownerOf(tokenid) == from, 'AUC:TT:1');\\n\\n    //     IERC1155(token).safeBatchTransferFrom(\\n    //         address(0),\\n    //         address(0),\\n    //         new uint256[](0),\\n    //         new uint256[](0),\\n    //         abi.encode(uint8(itemtokenid), itemtokenid >> 8, from)\\n    //     );\\n\\n    //     // require(moveERC1155(token).ownerOf(tokenid) == to, 'AUC:TT:3');\\n    // }\\n}\\n\"\n    },\n    \"hardhat/console.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\"\n    },\n    \"contracts/src/libraries/ShiftLib.sol\": {\n      \"content\": \"pragma solidity 0.8.4;\\n\\nimport \\\"hardhat/console.sol\\\";\\nlibrary ShiftLib {\\n    function unmask(uint256 input) internal pure returns (uint256 res) {\\n        assembly {\\n            res := input\\n            if eq(res, not(0)) {\\n                res := 0\\n            }\\n        }\\n    }\\n\\n    function mask(uint256 input) internal pure returns (uint256 res) {\\n        assembly {\\n            res := input\\n            if eq(res, 0) {\\n                res := not(0)\\n            }\\n        }\\n    }\\n\\n        // function fletcher16(address a) internal pure returns (uint16 res) {\\n        // uint16 sum1 = 0;\\n        // uint16 sum2 = 0;\\n        // for (uint256 index = 0; index < data.length; index++) {\\n        //     sum1 = (sum1 + uint8(data[index])) % 255;\\n        //     sum2 = (sum2 + sum1) % 255;\\n        // }\\n        // res = (sum2 << 8) | sum1;\\n        // }\\n\\n    // function caddress(address a) internal pure returns (uint112 res) {\\n    //     assembly {\\n    //         let sum1 := 0\\n    //         let sum2 := 0\\n    //         let tmp := a\\n    //         for {\\n    //             let index := 0\\n    //         } lt(index, 20) {\\n    //             index := add(index, 0x2)\\n    //         } {\\n    //             sum1 := mod(add(sum1, and(0xffff, tmp)), 0xffff)\\n    //             sum2 := mod(add(sum1, sum2), 0xffff)\\n    //             tmp := shr(0xf, tmp)\\n    //         }\\n    //         res := or(and(shr(48, a), 0xFFFFFFFFFFFFFFFFFFFF00000000), or(shl(8, sum2), sum1))\\n    //     }\\n    // }\\n\\n\\n\\n\\n    function account(uint256 input) internal pure returns (uint160 res) {\\n        assembly {\\n            res := input\\n        }\\n    }\\n\\n    function account(uint256 input, uint160 update) internal pure returns (uint256 res) {\\n\\n        assembly {\\n            input := and(input, 0xffffffffffffffffffffffff0000000000000000000000000000000000000000)\\n            res := or(input, update)\\n        }\\n    }\\n\\n    function isOwner(uint256 input, bool) internal pure returns (uint256 res) {\\n        assembly {\\n            res := or(input, shl(255, 0x1))\\n        }\\n    }\\n\\n    function isOwner(uint256 input) internal pure returns (bool res) {\\n        assembly {\\n            res := and(shr(255, input), 0x1)\\n        }\\n    }\\n\\n    function eth(uint256 input) internal pure returns (uint256 res) {\\n        assembly {\\n            res := and(shr(160, input), 0xFFFFFFFFFFFFFF)\\n            let i := and(res, 0xff)\\n            res := shl(mul(4, i), shr(8, res))\\n            res := mul(res, 0xE8D4A51000)\\n        }\\n    }\\n\\n    // 14 f's\\n    function eth(uint256 input, uint256 update) internal pure returns (uint256 res, uint256 rem) {\\n        assembly {\\n            let in := update\\n            update := div(update, 0xE8D4A51000)\\n            for {\\n            } gt(update, 0xFFFFFFFFFFFF) {\\n                // 13\\n            } {\\n                res := add(res, 0x01)\\n                update := shr(4, update)\\n            }\\n            update := or(shl(8, update), res)\\n            let out := shl(mul(4, res), shr(8, update))\\n            rem := sub(in, mul(out, 0xE8D4A51000))\\n            input := and(input, 0xffffffffff00000000000000ffffffffffffffffffffffffffffffffffffffff)\\n            res := or(input, shl(160, update))\\n        }\\n    }\\n\\n    // 9 f's\\n    function epoch(uint256 input, uint256 update) internal pure returns (uint256 res) {\\n        assert(update <= 0xFFFFFFFFF);\\n        assembly {\\n            //                0xfffffffffffffffddffffffffffffffccfffffffffffffffffffffffffffffff)\\n            res := and(input, 0xf000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            res := or(res, shl(216, update))\\n        }\\n    }\\n\\n    function epoch(uint256 input) internal pure returns (uint256 res) {\\n        assembly {\\n            res := and(shr(216, input), 0xFFFFFFFFF)\\n        }\\n    }\\n\\n\\n\\n    function pushFirstEmpty(uint256 input, uint8 itemId) internal view returns (uint256 res, uint8 index) {\\n        uint256[] memory _items = items(input);\\n        for (uint8 i = 0; i < _items.length; i++) {\\n            if (_items[i] == 0) {\\n                index = i + 1;\\n                break;\\n            }\\n        }\\n        console.logBytes32(bytes32(input));\\n\\n        require(index > 0, 'SL:PFM:0');\\n\\n        index--;\\n\\n        res = pushItem(input, itemId, index);\\n\\n        console.logBytes32(bytes32(res));\\n\\n    }\\n\\n    function popFirstMatch(uint256 input, uint8 itemId)\\n        internal\\n        view\\n        returns (\\n            uint256 res,\\n            uint8 popped,\\n            uint8 index\\n        )\\n    {\\n        uint256[] memory _items = items(input);\\n        for (uint8 i = 0; i < _items.length; i++) {\\n            if (_items[i] == itemId) {\\n                index = i + 1;\\n                break;\\n            }\\n        }\\n                console.logBytes32(bytes32(input));\\n                console.logBytes1(bytes1(itemId));\\n\\n        require(index > 0, 'SL:PFM:0');\\n\\n        index--;\\n\\n\\n        (res, popped) = popItem(input, index);\\n\\n        console.logBytes32(bytes32(res));\\n\\n        require(popped == itemId, 'SL:PFM:1');\\n    }\\n\\n    function items(uint256 input) internal pure returns (uint256[] memory res) {\\n        uint256 s = size(input);\\n        res = new uint256[](s);\\n        input >>= 8;\\n        for (uint256 i = 0; i < s; i++) {\\n            input >>= 8;\\n            res[i] = input & 0xff;\\n        }\\n    }\\n\\n    function itemsWithTokenId(uint256 input, uint256 tokenId) internal pure returns (uint256[] memory res) {\\n        uint256 s = size(input);\\n        res = new uint256[](s + 1);\\n        res[0] = tokenId;\\n        input >>= 8;\\n        for (uint256 i = 1; i < res.length; i++) {\\n            input >>= 8;\\n            res[i] = input & 0xff;\\n        }\\n    }\\n\\n    function pushItem(\\n        uint256 input,\\n        uint8 item,\\n        uint8 at\\n    ) internal pure returns (uint256 res) {\\n        assembly {\\n            let offset := add(16, mul(8, at))\\n            res := and(input, not(shl(offset, 0xff)))\\n            res := or(input, shl(offset, item))\\n        }\\n    }\\n\\n    function popItem(uint256 input, uint8 at) internal pure returns (uint256 res, uint8 item) {\\n        assembly {\\n            let offset := add(16, mul(8, at))\\n            res := and(input, not(shl(offset, 0xff)))\\n            item := shr(offset, input)\\n        }\\n    }\\n\\n    function size(uint256 input, uint8 update) internal pure returns (uint256 res) {\\n        assembly {\\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00)\\n            res := or(update, input)\\n        }\\n    }\\n\\n    function size(uint256 input) internal pure returns (uint8 res) {\\n        assembly {\\n            res := and(input, 0xff)\\n        }\\n    }\\n\\n    function base(uint256 input) internal pure returns (uint8 res) {\\n        assembly {\\n            res := and(shr(0x8, input), 0xff)\\n        }\\n    }\\n\\n    function base(uint256 input, uint8 update) internal pure returns (uint256 res) {\\n        assembly {\\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff)\\n            res := or(shl(0x8, update), input)\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/src/libraries/QuadMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title QuadMath\\n * @notice a library for performing Quadruple-precision floating-point format math operations\\n * @dev #TODO\\n */\\nlibrary QuadMath {\\n    /**\\n     * @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @param a The multiplicand\\n     * @param b The multiplier\\n     * @param denominator The divisor\\n     * @return result The 256-bit result\\n     * @dev Credit to Uniswap under MIT license https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol\\n     */\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @param a The multiplicand\\n     * @param b The multiplier\\n     * @param denominator The divisor\\n     * @return result The 256-bit result\\n     * @dev Credit to Remco Bloemen under MIT license https:/an--2-umb.com/21/muldiv\\n     */\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        // fix for negation braking change in Solidity v8 - https://ethereum.stackexchange.com/a/96646\\n        uint256 twos = denominator & (~denominator + 1);\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n\\n        // this unchecked block is required for this to work with Solidity v8\\n        unchecked {\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n        }\\n        return result;\\n    }\\n}\\n\"\n    },\n    \"contracts/src/NuggFT.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './interfaces/INuggFT.sol';\\n\\nimport './libraries/EpochLib.sol';\\nimport './libraries/ItemLib.sol';\\nimport './libraries/SwapLib.sol';\\nimport './libraries/ERC721Lib.sol';\\nimport './libraries/ItemLib.sol';\\nimport './libraries/MoveLib.sol';\\nimport './base/NuggERC721.sol';\\n\\ncontract NuggFT is NuggERC721, INuggFT {\\n    using EpochLib for uint256;\\n    using ItemLib for ItemLib.Storage;\\n    using SwapLib for SwapLib.Storage;\\n    using ShiftLib for uint256;\\n\\n    address payable public immutable override xnugg;\\n\\n    uint256 public immutable override genesis;\\n\\n    ItemLib.Storage private il_state;\\n\\n    mapping(uint256 => SwapLib.Storage) internal sl_state;\\n    mapping(uint256 => mapping(uint256 => SwapLib.Storage)) internal sl_state_items;\\n\\n    constructor(address _xnugg) NuggERC721('NUGGFT', 'Nugg Fungible Token') {\\n        xnugg = payable(_xnugg);\\n        genesis = block.number;\\n\\n        emit Genesis();\\n    }\\n\\n    function getActiveSwap(uint256 tokenid)\\n        external\\n        view\\n        override\\n        returns (\\n            address leader,\\n            uint256 amount,\\n            uint256 _epoch,\\n            bool isOwner\\n        )\\n    {\\n        (uint256 swapData, ) = sl_state[tokenid].loadStorage(address(0));\\n        require(swapData != 0, 'NS:GS:0');\\n        leader = address(swapData.account());\\n        amount = swapData.eth();\\n        _epoch = swapData.epoch();\\n        isOwner = swapData.isOwner();\\n    }\\n\\n    function getOfferByAccount(\\n        uint256 tokenid,\\n        uint256 index,\\n        address account\\n    ) external view override returns (uint256 amount) {\\n        (, uint256 offerData) = sl_state[tokenid].loadStorage(account, index);\\n        require(offerData != 0, 'NS:GS:0');\\n        amount = offerData.eth();\\n    }\\n\\n    function epoch() external view override returns (uint256 res) {\\n        res = genesis.activeEpoch();\\n    }\\n\\n    function delegate(uint256 tokenid) external payable override {\\n        MoveLib.delegate(sl_state[tokenid], il_state, genesis, tokenid, xnugg);\\n    }\\n\\n    function mint(uint256 tokenid) external payable override {\\n        MoveLib.mint(sl_state[tokenid], il_state, genesis, tokenid, xnugg);\\n    }\\n\\n    function delegateItem(\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 buyingTokenId\\n    ) external payable override {\\n        MoveLib.delegateItem(\\n            sl_state_items[sellingTokenId][itemid],\\n            el_state,\\n            genesis,\\n            sellingTokenId,\\n            itemid,\\n            uint160(buyingTokenId),\\n            xnugg\\n        );\\n    }\\n\\n    function commit(uint256 tokenid) external payable override {\\n        MoveLib.commit(sl_state[tokenid], tokenid, xnugg, genesis);\\n    }\\n\\n    function commitItem(\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 buyingTokenId\\n    ) external payable override {\\n        MoveLib.commitItem(\\n            sl_state_items[sellingTokenId][itemid],\\n            el_state,\\n            genesis,\\n            sellingTokenId,\\n            itemid,\\n            uint160(buyingTokenId),\\n            xnugg\\n        );\\n    }\\n\\n    function offer(uint256 tokenid) external payable override {\\n        MoveLib.offer(sl_state[tokenid], tokenid, xnugg, genesis);\\n    }\\n\\n    function offerItem(\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 buyingTokenId\\n    ) external payable override {\\n        MoveLib.offerItem(\\n            sl_state_items[sellingTokenId][itemid],\\n            el_state,\\n            sellingTokenId,\\n            genesis,\\n            itemid,\\n            uint160(buyingTokenId),\\n            xnugg\\n        );\\n    }\\n\\n    function claim(uint256 tokenid, uint256 endingEpoch) external override {\\n        MoveLib.claim(sl_state[tokenid], el_state, genesis, tokenid, endingEpoch);\\n    }\\n\\n    function claimItem(\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 buyingTokenId,\\n        uint256 endingEpoch\\n    ) external override {\\n        MoveLib.claimItem(\\n            sl_state_items[sellingTokenId][itemid],\\n            el_state,\\n            il_state,\\n            sellingTokenId,\\n            genesis,\\n            itemid,\\n            endingEpoch,\\n            uint160(buyingTokenId)\\n        );\\n    }\\n\\n    function swap(uint256 tokenid, uint256 floor) external override {\\n        MoveLib.swap(sl_state[tokenid], el_state, tokenid, floor);\\n    }\\n\\n    function swapItem(\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 floor\\n    ) external override {\\n        MoveLib.swapItem(\\n            sl_state_items[sellingTokenId][itemid],\\n            el_state,\\n            il_state,\\n            itemid,\\n            floor,\\n            uint160(sellingTokenId)\\n        );\\n    }\\n\\n    function infoOf(uint256 tokenId)\\n        public\\n        view\\n        returns (\\n            uint256 base,\\n            uint256 size,\\n            uint256[] memory items\\n        )\\n    {\\n        return il_state.infoOf(tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory res) {}\\n}\\n\"\n    },\n    \"contracts/src/interfaces/INuggFT.sol\": {\n      \"content\": \"pragma solidity 0.8.4;\\n\\ninterface INuggFT {\\n    event PreMint(uint256 tokenId, uint256[] items);\\n\\n    event PopItem(uint256 tokenId, uint256 itemId);\\n\\n    event PushItem(uint256 tokenId, uint256 itemId);\\n\\n    event Mint(uint256 epoch, address account, uint256 eth);\\n\\n    event Commit(uint256 tokenid, address account, uint256 eth);\\n\\n    event Offer(uint256 tokenid, address account, uint256 eth);\\n\\n    event Claim(uint256 tokenid, uint256 endingEpoch, address account);\\n\\n    event Swap(uint256 tokenid, address account, uint256 eth);\\n\\n    event CommitItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 eth);\\n\\n    event OfferItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 eth);\\n\\n    event ClaimItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 endingEpoch);\\n\\n    event SwapItem(uint256 sellingTokenId, uint256 itemId, uint256 eth);\\n\\n    event Genesis();\\n\\n    function swapItem(\\n        uint256 tokenid,\\n        uint256 floor,\\n        uint256 itemid\\n    ) external;\\n\\n    function xnugg() external view returns (address payable);\\n\\n    function genesis() external view returns (uint256 res);\\n\\n    function epoch() external view returns (uint256 res);\\n\\n    function delegate(uint256 tokenid) external payable;\\n\\n    function delegateItem(\\n        uint256 sellerTokenId,\\n        uint256 itemid,\\n        uint256 buyerTokenId\\n    ) external payable;\\n\\n    function mint(uint256 tokenid) external payable;\\n\\n    function commit(uint256 tokenid) external payable;\\n\\n    function commitItem(\\n        uint256 sellerTokenId,\\n        uint256 itemid,\\n        uint256 buyerTokenId\\n    ) external payable;\\n\\n    function offer(uint256 tokenid) external payable;\\n\\n    function offerItem(\\n        uint256 sellerTokenId,\\n        uint256 itemid,\\n        uint256 buyerTokenId\\n    ) external payable;\\n\\n    function claim(uint256 tokenid, uint256 endingEpoch) external;\\n\\n    function claimItem(\\n        uint256 sellerTokenId,\\n        uint256 itemid,\\n        uint256 buyerTokenId,\\n        uint256 endingEpoch\\n    ) external;\\n\\n    function swap(uint256 tokenid, uint256 floor) external;\\n\\n    function getOfferByAccount(\\n        uint256 tokenid,\\n        uint256 index,\\n        address account\\n    ) external view returns (uint256 eth);\\n\\n    function getActiveSwap(uint256 tokenid)\\n        external\\n        view\\n        returns (\\n            address leader,\\n            uint256 eth,\\n            uint256 _epoch,\\n            bool isOwner\\n        );\\n}\\n\"\n    },\n    \"contracts/src/libraries/EpochLib.sol\": {\n      \"content\": \"import './ShiftLib.sol';\\n\\nlibrary EpochLib {\\n    using ShiftLib for uint256;\\n\\n    /**\\n     * @dev #TODO\\n     * @return res\\n     */\\n    function activeEpoch(uint256 genesis) internal view returns (uint256 res) {\\n        res = toEpoch(genesis, block.number);\\n    }\\n\\n    /**\\n     * @notice gets unique base based on given epoch and converts encoded bytes to object that can be merged\\n     * Note: by using the block hash no one knows what a nugg will look like before it's epoch.\\n     * We considered making this harder to manipulate, but we decided that if someone were able to\\n     * pull it off and make their own custom nugg, that would be really fucking cool.\\n     */\\n    function calculateSeed(uint256 genesis) internal view returns (uint256 res, uint256 epoch) {\\n        epoch = toEpoch(genesis, block.number);\\n        uint256 startblock = toStartBlock(genesis, epoch);\\n        bytes32 bhash = blockhash(startblock - 1);\\n        require(bhash != 0, 'EPC:SBL');\\n        res = uint256(keccak256(abi.encodePacked(bhash, epoch, address(this))));\\n    }\\n\\n    function interval() internal pure returns (uint256 res) {\\n        res = 25;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     * @return res\\n     */\\n    function toStartBlock(uint256 genesis, uint256 epoch) internal pure returns (uint256 res) {\\n        res = (epoch * interval()) + genesis;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     * @return res\\n     */\\n    function toEndBlock(uint256 genesis, uint256 epoch) internal pure returns (uint256 res) {\\n        res = toStartBlock(genesis, epoch + 1) - 1;\\n    }\\n\\n    function toEpoch(uint256 genesis, uint256 blocknum) internal pure returns (uint256 res) {\\n        res = (blocknum - genesis) / interval();\\n    }\\n}\\n\"\n    },\n    \"contracts/src/libraries/ItemLib.sol\": {\n      \"content\": \"import 'hardhat/console.sol';\\n\\nimport './ShiftLib.sol';\\nimport './EpochLib.sol';\\n\\nlibrary ItemLib {\\n    event PreMint(uint256 tokenId, uint256[] items);\\n    event PopItem(uint256 tokenId, uint256 itemId);\\n    event PushItem(uint256 tokenId, uint256 itemId);\\n    event OpenSlot(uint256 tokenId);\\n\\n    // /**\\n    //  * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n    //  */\\n    // event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    // /**\\n    //  * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n    //  * transfers.\\n    //  */\\n    // event TransferBatch(\\n    //     address indexed operator,\\n    //     address indexed from,\\n    //     address indexed to,\\n    //     uint256[] ids,\\n    //     uint256[] values\\n    // );\\n\\n    using ShiftLib for uint256;\\n\\n    struct Storage {\\n        mapping(uint256 => uint256) tokenData;\\n        mapping(uint256 => uint256) protocolItems;\\n    }\\n\\n    function infoOf(Storage storage s, uint256 tokenId)\\n        internal\\n        view\\n        returns (\\n            uint256 base,\\n            uint256 size,\\n            uint256[] memory items\\n        )\\n    {\\n        uint256 data = s.tokenData[tokenId];\\n        items = data.items();\\n        size = data.size();\\n        base = data.base();\\n    }\\n\\n    function premint(\\n        Storage storage s,\\n        uint256 tokenId,\\n        uint256 genesis\\n    ) internal {\\n        (uint256 itemData, uint256 epoch) = EpochLib.calculateSeed(genesis);\\n\\n        require(itemData != 0, '721:MINT:0');\\n        require(epoch == tokenId, '721:MINT:1');\\n\\n        itemData = itemData;\\n\\n        uint256[] memory items = mint(s, tokenId, itemData);\\n\\n        emit PreMint(tokenId, items);\\n\\n        uint256[] memory amounts = new uint256[](items.length);\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            amounts[i] = 1;\\n        }\\n\\n        // emit TransferBatch(address(this), address(0), msg.sender, items, amounts);\\n    }\\n\\n    function mint(\\n        Storage storage s,\\n        uint256 tokenId,\\n        uint256 data\\n    ) internal returns (uint256[] memory items) {\\n        require(s.tokenData[tokenId] == 0, 'IL:M:0');\\n\\n        data = data.base(data.base() % 20).size(0x4);\\n\\n        s.tokenData[tokenId] = data;\\n\\n        return data.items();\\n    }\\n\\n    function pop(\\n        Storage storage s,\\n        uint256 tokenId,\\n        uint256 itemId\\n    ) internal {\\n        uint256 data = s.tokenData[tokenId];\\n\\n        require(data != 0, '1155:STF:0');\\n\\n        (data, , ) = data.popFirstMatch(uint8(itemId));\\n\\n        s.tokenData[tokenId] = data;\\n\\n        s.protocolItems[itemId]++;\\n\\n        emit PushItem(tokenId, itemId);\\n        // emit TransferSingle(address(this), msg.sender, address(this), itemId, 1);\\n    }\\n\\n    function push(\\n        Storage storage s,\\n        uint256 tokenId,\\n        uint256 itemId\\n    ) internal {\\n        uint256 data = s.tokenData[tokenId];\\n        require(data != 0, '1155:STF:0');\\n\\n        require(s.protocolItems[itemId] > 0, '1155:SBTF:1');\\n\\n        s.protocolItems[itemId]++;\\n\\n        (data, ) = data.pushFirstEmpty(uint8(itemId));\\n\\n        s.tokenData[tokenId] = data;\\n\\n        emit PushItem(tokenId, itemId);\\n        // emit TransferSingle(address(this), address(this), msg.sender, itemId, 1);\\n    }\\n\\n    function open(Storage storage s, uint256 tokenId) internal {\\n        uint256 data = s.tokenData[tokenId];\\n        require(data != 0, '1155:STF:0');\\n\\n        data = data.size(data.size() + 1);\\n\\n        s.tokenData[tokenId] = data;\\n\\n        emit OpenSlot(tokenId);\\n    }\\n}\\n\"\n    },\n    \"contracts/src/libraries/ERC721Lib.sol\": {\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\nlibrary ERC721Lib {\\n    using Address for address;\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    struct Storage {\\n        // Token name\\n        string _name;\\n        // Token symbol\\n        string _symbol;\\n        // Mapping from token ID to owner address\\n        mapping(uint256 => address) _owners;\\n        // Mapping owner address to token count\\n        mapping(address => uint256) _balances;\\n        // Mapping from token ID to approved address\\n        mapping(uint256 => address) _tokenApprovals;\\n        // Mapping from owner to operator approvals\\n        mapping(address => mapping(address => bool)) _operatorApprovals;\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(Storage storage s, uint256 tokenId) internal view returns (bool) {\\n        return s._owners[tokenId] != address(0);\\n    }\\n\\n    function isApprovedForAll(\\n        Storage storage s,\\n        address owner,\\n        address operator\\n    ) internal view returns (bool) {\\n        return s._operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(Storage storage s, uint256 tokenId) internal view returns (address) {\\n        require(_exists(s, tokenId), 'ERC721: approved query for nonexistent token');\\n\\n        return s._tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(Storage storage s, uint256 tokenId) internal view returns (address) {\\n        address owner = s._owners[tokenId];\\n        require(owner != address(0), 'ERC721: owner query for nonexistent token');\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(Storage storage s, address owner) internal view returns (uint256) {\\n        require(owner != address(0), 'ERC721: balance query for the zero address');\\n        return s._balances[owner];\\n    }\\n\\n    function clearApprovals(Storage storage s, uint256 tokenId) internal {\\n        s._tokenApprovals[tokenId] = address(0);\\n        emit Approval(ownerOf(s, tokenId), address(0), tokenId);\\n    }\\n\\n    function approvedTransferToSelf(\\n        Storage storage s,\\n        address from,\\n        uint256 tokenId\\n    ) internal {\\n        require(\\n            msg.sender == ownerOf(s, tokenId) && from == msg.sender && getApproved(s, tokenId) == address(this),\\n            'ERC721: transfer caller is not owner nor approved'\\n        );\\n\\n        // Clear approvals from the previous owner\\n        clearApprovals(s, tokenId);\\n\\n        s._balances[from] -= 1;\\n        s._balances[address(this)] += 1;\\n        s._owners[tokenId] = address(this);\\n\\n        emit Transfer(from, address(this), tokenId);\\n    }\\n\\n    function checkedTransferFromSelf(\\n        Storage storage s,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        require(\\n            _checkOnERC721Received(address(this), to, tokenId, ''),\\n            'ERC721: transfer caller is not owner nor approved'\\n        );\\n\\n        s._balances[address(this)] -= 1;\\n        s._balances[to] += 1;\\n        s._owners[tokenId] = to;\\n\\n        emit Transfer(address(this), to, tokenId);\\n    }\\n\\n    function checkedMintTo(\\n        Storage storage s,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        require(\\n            _checkOnERC721Received(address(this), to, tokenId, ''),\\n            'ERC721: transfer caller is not owner nor approved'\\n        );\\n\\n        s._balances[to] += 1;\\n        s._owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert('ERC721: transfer to non ERC721Receiver implementer');\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/src/libraries/MoveLib.sol\": {\n      \"content\": \"pragma solidity 0.8.4;\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport 'hardhat/console.sol';\\nimport './ShiftLib.sol';\\nimport './QuadMath.sol';\\nimport './SwapLib.sol';\\nimport './EpochLib.sol';\\nimport './ERC721Lib.sol';\\nimport './ItemLib.sol';\\n\\nlibrary MoveLib {\\n    using EpochLib for uint256;\\n    using SwapLib for SwapLib.Storage;\\n    using ShiftLib for uint256;\\n    using Address for address payable;\\n    using ERC721Lib for ERC721Lib.Storage;\\n    using ItemLib for ItemLib.Storage;\\n\\n    using QuadMath for uint256;\\n\\n    event Mint(uint256 epoch, address account, uint256 eth);\\n\\n    event Commit(uint256 tokenid, address account, uint256 eth);\\n\\n    event Offer(uint256 tokenid, address account, uint256 eth);\\n\\n    event Claim(uint256 tokenid, uint256 endingEpoch, address account);\\n\\n    event Swap(uint256 tokenid, address account, uint256 eth);\\n\\n    event CommitItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 eth);\\n\\n    event OfferItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 eth);\\n\\n    event ClaimItem(uint256 sellingTokenId, uint256 itemId, uint256 buyingTokenId, uint256 endingEpoch);\\n\\n    event SwapItem(uint256 sellingTokenId, uint256 itemId, uint256 eth);\\n\\n    function delegate(\\n        SwapLib.Storage storage s,\\n        // ERC721Lib.Storage storage e,\\n        ItemLib.Storage storage i,\\n        uint256 genesis,\\n        uint256 tokenid,\\n        address payable xnugg\\n    ) internal {\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = s.loadStorage(msg.sender);\\n\\n        if (activeEpoch == tokenid && swapData == 0) {\\n            mint(s, i, genesis, tokenid, xnugg);\\n        } else if (offerData == 0 && swapData.isOwner()) {\\n            commit(s, tokenid, xnugg, genesis);\\n        } else {\\n            offer(s, tokenid, xnugg, genesis);\\n        }\\n    }\\n\\n    function delegateItem(\\n        SwapLib.Storage storage s,\\n        ERC721Lib.Storage storage e,\\n        // ItemLib.Storage storage i,\\n        uint256 genesis,\\n        uint256 sellingTokenId,\\n        uint256 itemId,\\n        uint160 sendingTokenId,\\n        address payable xnugg\\n    ) internal {\\n        require(e.ownerOf(sendingTokenId) == msg.sender, 'AUC:TT:3');\\n\\n        (uint256 swapData, uint256 offerData) = s.loadStorage(sendingTokenId);\\n\\n        if (offerData == 0 && swapData.isOwner()) {\\n            commitItem(s, e, genesis, sellingTokenId, itemId, sendingTokenId, xnugg);\\n        } else {\\n            offerItem(s, e, genesis, sellingTokenId, itemId, sendingTokenId, xnugg);\\n        }\\n    }\\n\\n    function mint(\\n        SwapLib.Storage storage s,\\n        ItemLib.Storage storage i,\\n        uint256 genesis,\\n        uint256 tokenid,\\n        address payable xnugg\\n    ) internal returns (uint256 newSwapData) {\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = s.loadStorage(msg.sender);\\n\\n        // we do not need this, could take tokenid out as an argument - but do not want to give users\\n        // the ability to accidently place an offer for nugg A and end up minting nugg B.\\n        require(activeEpoch == tokenid, 'NS:M:0');\\n\\n        require(swapData == 0, 'NS:M:D');\\n\\n        (newSwapData, ) = uint256(0).epoch(activeEpoch).account(uint160(msg.sender)).eth(msg.value);\\n\\n        s.data = newSwapData;\\n\\n        if (msg.value > 0) xnugg.sendValue(msg.value);\\n\\n        i.premint(tokenid, genesis);\\n\\n        emit Mint(activeEpoch, msg.sender, newSwapData.eth());\\n    }\\n\\n    function commit(\\n        SwapLib.Storage storage s,\\n        uint256 tokenid,\\n        address payable xnugg,\\n        uint256 genesis\\n    ) internal {\\n        _commitCore(s, uint160(msg.sender), xnugg, genesis);\\n\\n        emit Commit(tokenid, msg.sender, msg.value);\\n    }\\n\\n    function commitItem(\\n        SwapLib.Storage storage s,\\n        ERC721Lib.Storage storage e,\\n        // ItemLib.Storage storage i,\\n        uint256 genesis,\\n        uint256 sellingTokenId,\\n        uint256 itemId,\\n        uint160 sendingTokenId,\\n        address payable xnugg\\n    ) internal {\\n        require(itemId < 256, 'ML:CI:0');\\n\\n        require(e.ownerOf(sendingTokenId) == msg.sender, 'AUC:TT:3');\\n\\n        _commitCore(s, sendingTokenId, xnugg, genesis);\\n\\n        emit CommitItem(sellingTokenId, itemId, sendingTokenId, msg.value);\\n    }\\n\\n    function _commitCore(\\n        SwapLib.Storage storage s,\\n        uint160 sender,\\n        address payable xnugg,\\n        uint256 genesis\\n    ) internal {\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = s.loadStorage(sender);\\n\\n        console.logBytes32(bytes32(swapData));\\n\\n        require(msg.value > 0, 'SL:COM:2');\\n\\n        require(offerData == 0, 'SL:HSO:0');\\n\\n        require(swapData.isOwner(), 'SL:HSO:1');\\n\\n        uint256 _epoch = activeEpoch + 1;\\n\\n        // copy relevent items from swapData to newSwapData\\n        (uint256 newSwapData, uint256 dust) = uint256(0).epoch(_epoch).account(sender).eth(msg.value);\\n\\n        require(swapData.eth().mulDiv(100, 10000) < newSwapData.eth(), 'SL:OBP:4');\\n\\n        s.offers[_epoch][swapData.account()] = swapData;\\n\\n        s.data = newSwapData;\\n\\n        xnugg.sendValue(newSwapData.eth() - swapData.eth() + dust);\\n\\n        // emit Commit(tokenid, sender, newSwapData.eth());\\n    }\\n\\n    function offer(\\n        SwapLib.Storage storage s,\\n        uint256 tokenid,\\n        address payable xnugg,\\n        uint256 genesis\\n    ) internal {\\n        _offerCore(s, uint160(msg.sender), xnugg, genesis);\\n\\n        emit Offer(tokenid, msg.sender, msg.value);\\n    }\\n\\n    function offerItem(\\n        SwapLib.Storage storage s,\\n        ERC721Lib.Storage storage e,\\n        // ItemLib.Storage storage i,\\n        uint256 genesis,\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint160 sendingTokenId,\\n        address payable xnugg\\n    ) internal {\\n        require(itemid < 256, 'ML:OI:0');\\n\\n        require(e.ownerOf(sendingTokenId) == msg.sender, 'AUC:TT:3');\\n\\n        _offerCore(s, sendingTokenId, xnugg, genesis);\\n\\n        emit OfferItem(sellingTokenId, itemid, sendingTokenId, msg.value);\\n    }\\n\\n    function _offerCore(\\n        SwapLib.Storage storage s,\\n        uint160 sender,\\n        address payable xnugg,\\n        uint256 genesis\\n    ) internal {\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = s.loadStorage(sender);\\n\\n        require(msg.value > 0, 'SL:OBP:2');\\n\\n        require(swapData != 0, 'NS:0:0');\\n\\n        // make sure user is not the owner of swap\\n        // we do not know how much to give them when they call \\\"claim\\\" otherwise\\n        require(!offerData.isOwner(), 'SL:HSO:0');\\n\\n        // if (swapData.epoch() == 0 && swapData.isOwner()) swapData = swapData.epoch(activeEpoch + 1);\\n\\n        // make sure swap is still active\\n        require(activeEpoch <= swapData.epoch(), 'SL:OBP:3');\\n\\n        // save prev offers data\\n        if (swapData.account() != sender) s.offers[swapData.epoch()][swapData.account()] = swapData;\\n\\n        // copy relevent items from swapData to newSwapData\\n        (uint256 newSwapData, uint256 dust) = uint256(0).epoch(swapData.epoch()).account(sender).eth(\\n            offerData.eth() + msg.value\\n        );\\n\\n        require(swapData.eth().mulDiv(100, 10000) < newSwapData.eth(), 'SL:OBP:4');\\n\\n        s.data = newSwapData;\\n\\n        xnugg.sendValue(newSwapData.eth() - swapData.eth() + dust);\\n    }\\n\\n    function claim(\\n        SwapLib.Storage storage s,\\n        ERC721Lib.Storage storage e,\\n        uint256 genesis,\\n        uint256 tokenid,\\n        uint256 endingEpoch\\n    ) internal {\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = s.loadStorage(msg.sender, endingEpoch);\\n\\n        delete s.offers[endingEpoch][uint160(msg.sender)];\\n\\n        if (SwapLib.checkClaimer(uint160(msg.sender), swapData, offerData, activeEpoch)) {\\n            delete s.data;\\n            if (endingEpoch == swapData.epoch()) {\\n                e.checkedMintTo(msg.sender, tokenid);\\n            } else {\\n                e.checkedTransferFromSelf(msg.sender, tokenid);\\n            }\\n        } else {\\n            payable(msg.sender).sendValue(offerData.eth());\\n        }\\n\\n        emit Claim(tokenid, endingEpoch, msg.sender);\\n    }\\n\\n    function claimItem(\\n        SwapLib.Storage storage s,\\n        ERC721Lib.Storage storage e,\\n        ItemLib.Storage storage i,\\n        uint256 genesis,\\n        uint256 sellingTokenId,\\n        uint256 itemid,\\n        uint256 endingEpoch,\\n        uint160 sendingTokenId\\n    ) internal {\\n        require(e.ownerOf(sendingTokenId) == msg.sender, 'AUC:TT:3');\\n        require(itemid < 256, 'ML:CI:0');\\n\\n        uint256 activeEpoch = genesis.activeEpoch();\\n\\n        (uint256 swapData, uint256 offerData) = s.loadStorage(sendingTokenId, endingEpoch);\\n\\n        delete s.offers[endingEpoch][sendingTokenId];\\n\\n        if (SwapLib.checkClaimer(sendingTokenId, swapData, offerData, activeEpoch)) {\\n            delete s.data;\\n\\n            i.push(sendingTokenId, itemid);\\n        } else {\\n            payable(msg.sender).sendValue(offerData.eth());\\n        }\\n\\n        emit ClaimItem(sellingTokenId, itemid, endingEpoch, sendingTokenId);\\n    }\\n\\n    function swap(\\n        SwapLib.Storage storage s,\\n        ERC721Lib.Storage storage e,\\n        uint256 tokenid,\\n        uint256 floor\\n    ) internal {\\n        (uint256 swapData, ) = s.loadStorage(msg.sender);\\n\\n        // make sure swap does not exist\\n        require(swapData == 0, 'NS:SS:0');\\n\\n        // build starting swap data\\n        (swapData, ) = swapData.account(uint160(msg.sender)).isOwner(true).eth(floor);\\n\\n        s.data = swapData;\\n\\n        e.approvedTransferToSelf(msg.sender, tokenid);\\n\\n        emit Swap(tokenid, msg.sender, floor);\\n    }\\n\\n    function swapItem(\\n        SwapLib.Storage storage s,\\n        ERC721Lib.Storage storage e,\\n        ItemLib.Storage storage i,\\n        uint256 itemid,\\n        uint256 floor,\\n        uint160 sellingTokenId\\n    ) internal {\\n        require(e.ownerOf(sellingTokenId) == msg.sender, 'AUC:TT:3');\\n\\n        require(itemid < 256, 'ML:SI:0');\\n\\n        (uint256 swapData, ) = s.loadStorage(sellingTokenId);\\n\\n        // make sure swap does not exist\\n        require(swapData == 0, 'NS:SS:0');\\n\\n        // build starting swap data\\n        (swapData, ) = swapData.account(sellingTokenId).isOwner(true).eth(floor);\\n\\n        s.data = swapData;\\n\\n        i.pop(sellingTokenId, itemid);\\n\\n        emit SwapItem(sellingTokenId, itemid, floor);\\n    }\\n}\\n\"\n    },\n    \"contracts/src/base/NuggERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\n\\nimport '../../src/libraries/ERC721Lib.sol';\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract NuggERC721 is ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using ERC721Lib for ERC721Lib.Storage;\\n\\n    ERC721Lib.Storage internal el_state;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        el_state._name = name_;\\n        el_state._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        return el_state.balanceOf(owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return el_state.ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return el_state._name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return el_state._symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}. MODIFICATION 0\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory);\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = el_state.ownerOf(tokenId);\\n        require(to != owner, 'ERC721: approval to current owner');\\n\\n        require(\\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\\n            'ERC721: approve caller is not owner nor approved for all'\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        return el_state.getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != msg.sender, 'ERC721: approve to caller');\\n\\n        el_state._operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return el_state.isApprovedForAll(owner, operator);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(msg.sender, tokenId), 'ERC721: transfer caller is not owner nor approved');\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(msg.sender, tokenId), 'ERC721: transfer caller is not owner nor approved');\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            ERC721Lib._checkOnERC721Received(from, to, tokenId, _data),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return el_state._exists(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), 'ERC721: operator query for nonexistent token');\\n        address owner = el_state.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            ERC721Lib._checkOnERC721Received(address(0), to, tokenId, _data),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), 'ERC721: mint to the zero address');\\n        require(!_exists(tokenId), 'ERC721: token already minted');\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        el_state._balances[to] += 1;\\n        el_state._owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = el_state.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        el_state._balances[owner] -= 1;\\n        delete el_state._owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(el_state.ownerOf(tokenId) == from, 'ERC721: transfer of token that is not own');\\n        require(to != address(0), 'ERC721: transfer to the zero address');\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        el_state._balances[from] -= 1;\\n        el_state._balances[to] += 1;\\n        el_state._owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        el_state._tokenApprovals[tokenId] = to;\\n        emit Approval(el_state.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"contracts/src/libraries/StakeLib.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './QuadMath.sol';\\n\\n/**\\n * @title StakeMath\\n * @notice a library for performing staking operations\\n * @dev #TODO\\n */\\nlibrary StakeLib {\\n    using QuadMath for uint256;\\n\\n    struct Storage {\\n        uint256 shares;\\n        mapping(address => uint256) owned;\\n    }\\n\\n    // function load() internal pure returns (Storage storage s) {\\n    //     uint256 ptr = StorageLib.pointer('epoch');\\n    //     assembly {\\n    //         s.slot := ptr\\n    //     }\\n    // }\\n\\n    function getActiveEth() internal view returns (uint256 res) {\\n        assembly {\\n            res := selfbalance()\\n        }\\n    }\\n\\n    function getActiveValue() internal view returns (uint256 res) {\\n        res = getActiveEth() + 10**20;\\n    }\\n\\n    function getActiveEthOf(Storage storage s, address account) internal view returns (uint256 res) {\\n        res = sharesToSupply(s.owned[account], getActiveEth(), s.shares, false);\\n    }\\n\\n    function getActiveSharesOf(Storage storage s, address account) internal view returns (uint256 res) {\\n        res = s.owned[account];\\n    }\\n\\n    function getActiveShares(Storage storage s) internal view returns (uint256 res) {\\n        res = s.shares;\\n    }\\n\\n    /**\\n     * @notice #TODO\\n     * @return res shares\\n     * @dev #TODO\\n     */\\n    function getActiveOwnershipOf(Storage storage s, address account) internal view returns (uint256 res) {\\n        return s.owned[account].mulDiv(0x100000000000000000000000000000000, s.shares);\\n    }\\n\\n    function start(Storage storage s, address account) internal returns (uint256 res) {\\n        uint256 ethBalance = getActiveEth();\\n        uint256 activeShares = s.shares;\\n\\n        require(ethBalance == 0);\\n        require(activeShares == s.shares);\\n\\n        res = 10**20;\\n\\n        s.shares = res;\\n        s.owned[account] = res;\\n    }\\n\\n    function add(\\n        Storage storage s,\\n        address account,\\n        uint256 eth\\n    ) internal returns (uint256 shares) {\\n        // uint256 eth = msg.value;\\n        require(eth > 0, 'SL:ADD:0');\\n\\n        uint256 ethBalance = getActiveValue();\\n        uint256 activeShares = s.shares;\\n\\n        if (activeShares == 0) {\\n            require(ethBalance == eth, 'SL:SA:0');\\n            shares = eth;\\n        } else {\\n            uint256 prev_eth_balance = ethBalance - eth;\\n            shares = supplyToShares(eth, prev_eth_balance, activeShares, false);\\n        }\\n\\n        s.shares += shares;\\n        s.owned[account] += shares;\\n    }\\n\\n    function sub(\\n        Storage storage s,\\n        address account,\\n        uint256 shares\\n    ) internal returns (uint256 eth) {\\n        uint256 ethBalance = getActiveValue();\\n        uint256 activeShares = s.shares;\\n\\n        // require(shares <= s.owned[account], 'SL:SUB:0');\\n\\n        eth = sharesToSupply(shares, ethBalance, activeShares, false);\\n\\n        s.shares -= shares;\\n        s.owned[account] -= shares;\\n    }\\n\\n    function move(\\n        Storage storage s,\\n        address from,\\n        address to,\\n        uint256 shares\\n    ) internal {\\n        // require(shares <= s.owned[from], 'SL:SUB:0');\\n\\n        s.owned[from] -= shares;\\n        s.owned[to] += shares;\\n    }\\n\\n    function supplyToShares(\\n        uint256 eth,\\n        uint256 active_eth_supply,\\n        uint256 active_shares,\\n        bool roundup\\n    ) private pure returns (uint256 res) {\\n        res = roundup\\n            ? eth.mulDivRoundingUp(active_shares, active_eth_supply)\\n            : eth.mulDiv(active_shares, active_eth_supply);\\n    }\\n\\n    function sharesToSupply(\\n        uint256 share_amount,\\n        uint256 active_eth_supply,\\n        uint256 active_shares,\\n        bool roundup\\n    ) private pure returns (uint256 res) {\\n        res = roundup\\n            ? share_amount.mulDivRoundingUp(active_eth_supply, active_shares)\\n            : share_amount.mulDiv(active_eth_supply, active_shares);\\n    }\\n}\\n\"\n    },\n    \"contracts/src/xNUGG.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport './interfaces/IxNUGG.sol';\\n\\nimport './libraries/StakeLib.sol';\\n\\n/**\\n * @title xNUGG\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice leggo\\n */\\ncontract xNUGG is IxNUGG, ERC20 {\\n    using Address for address payable;\\n    using StakeLib for StakeLib.Storage;\\n\\n    StakeLib.Storage internal sl_state;\\n\\n    uint256 public immutable override genesis;\\n\\n    constructor() ERC20('Staked NUGG', 'xNUGG') {\\n        emit Genesis();\\n\\n        uint256 shares = sl_state.start(msg.sender);\\n\\n        emit Transfer(address(0), msg.sender, shares);\\n\\n        genesis = block.number;\\n    }\\n\\n    receive() external payable {\\n        emit Receive(msg.sender, msg.value);\\n    }\\n\\n    fallback() external payable {\\n        emit Receive(msg.sender, msg.value);\\n    }\\n\\n    function mint() public payable override {\\n        uint256 mintedShares = sl_state.add(msg.sender, msg.value);\\n\\n        emit Transfer(address(0), msg.sender, mintedShares);\\n        emit Receive(msg.sender, msg.value);\\n    }\\n\\n    function burn(uint256 shares) public override {\\n        uint256 eth = sl_state.sub(msg.sender, shares);\\n\\n        payable(msg.sender).sendValue(eth);\\n\\n        emit Transfer(msg.sender, address(0), shares);\\n        emit Send(msg.sender, eth);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 shares\\n    ) internal override {\\n        sl_state.move(from, to, shares);\\n\\n        emit Transfer(from, to, shares);\\n    }\\n\\n    /**\\n     * @dev in regards to this contract, this could just be earningsOf + sharesOf\\n     */\\n    function totalSupply() public view virtual override(ERC20, IxNUGG) returns (uint256 res) {\\n        res = sl_state.getActiveShares();\\n    }\\n\\n    /**\\n     * @dev in regards to this contract, this could just be earningsOf + sharesOf\\n     */\\n    function balanceOf(address account) public view override(ERC20, IxNUGG) returns (uint256 res) {\\n        res = sl_state.getActiveSharesOf(account);\\n    }\\n\\n    /**\\n     * @dev public wrapper for _shares - to save on gas\\n     */\\n    function totalEth() public view override returns (uint256 res) {\\n        res = StakeLib.getActiveEth();\\n    }\\n\\n    /**\\n     * @dev public wrapper for _shares - to save on gas\\n     */\\n    function ethOf(address account) public view override returns (uint256 res) {\\n        res = sl_state.getActiveEthOf(account);\\n    }\\n\\n    function ownershipOf(address account) public view override returns (uint256 res) {\\n        res = sl_state.getActiveOwnershipOf(account);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"contracts/src/interfaces/IxNUGG.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title ISeedable\\n * @dev interface for Seedable.sol\\n */\\ninterface IxNUGG is IERC20 {\\n    event Receive(address sender, uint256 eth);\\n\\n    event Send(address receiver, uint256 eth);\\n\\n    event Genesis();\\n\\n    function genesis() external view returns (uint256 res);\\n\\n    function ownershipOf(address account) external view returns (uint256 res);\\n\\n    function totalEth() external view returns (uint256 res);\\n\\n    function ethOf(address account) external view returns (uint256 res);\\n\\n    function mint() external payable;\\n\\n    function burn(uint256 amount) external;\\n\\n    function totalSupply() external view override(IERC20) returns (uint256 res);\\n\\n    function balanceOf(address from) external view override(IERC20) returns (uint256 res);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"contracts/mock/interfaces/IWETH9.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\"\n    },\n    \"contracts/mock/WETH9.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport './interfaces/IWETH9.sol';\\n\\n// adapted from WBNB on BSC  https://bscscan.com/address/0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c#code\\n\\ncontract WETH9 {\\n    string public name = 'Wrapped ETH';\\n    string public symbol = 'WETH';\\n    uint8 public decimals = 18;\\n\\n    event Approval(address indexed src, address indexed guy, uint256 wad);\\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    uint256 private constant _MAX_INT = 2**256 - 1;\\n\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    receive() external payable {\\n        deposit();\\n    }\\n\\n    fallback() external payable {\\n        deposit();\\n    }\\n\\n    function deposit() public payable {\\n        balanceOf[msg.sender] += msg.value;\\n        emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    function withdraw(uint256 wad) public {\\n        require(balanceOf[msg.sender] >= wad);\\n        balanceOf[msg.sender] -= wad;\\n        address payable sender = payable(msg.sender);\\n        sender.transfer(wad);\\n        emit Withdrawal(msg.sender, wad);\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function approve(address guy, uint256 wad) public returns (bool) {\\n        allowance[msg.sender][guy] = wad;\\n        emit Approval(msg.sender, guy, wad);\\n        return true;\\n    }\\n\\n    function transfer(address dst, uint256 wad) public returns (bool) {\\n        return transferFrom(msg.sender, dst, wad);\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) public returns (bool) {\\n        require(balanceOf[src] >= wad);\\n\\n        if (src != msg.sender && allowance[src][msg.sender] != _MAX_INT) {\\n            require(allowance[src][msg.sender] >= wad);\\n            allowance[src][msg.sender] -= wad;\\n        }\\n\\n        balanceOf[src] -= wad;\\n        balanceOf[dst] += wad;\\n\\n        emit Transfer(src, dst, wad);\\n\\n        return true;\\n    }\\n}\\n\"\n    },\n    \"contracts/mock/erc721/myERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\n\\nimport '../../src/libraries/ERC721Lib.sol';\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract myERC721 is ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using ERC721Lib for ERC721Lib.Storage;\\n\\n    ERC721Lib.Storage internal el_state;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        el_state._name = name_;\\n        el_state._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        return el_state.balanceOf(owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return el_state.ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return el_state._name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return el_state._symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}. MODIFICATION 0\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory);\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = el_state.ownerOf(tokenId);\\n        require(to != owner, 'ERC721: approval to current owner');\\n\\n        require(\\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\\n            'ERC721: approve caller is not owner nor approved for all'\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        return el_state.getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != msg.sender, 'ERC721: approve to caller');\\n\\n        el_state._operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return el_state.isApprovedForAll(owner, operator);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(msg.sender, tokenId), 'ERC721: transfer caller is not owner nor approved');\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(msg.sender, tokenId), 'ERC721: transfer caller is not owner nor approved');\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            ERC721Lib._checkOnERC721Received(from, to, tokenId, _data),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return el_state._exists(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), 'ERC721: operator query for nonexistent token');\\n        address owner = el_state.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            ERC721Lib._checkOnERC721Received(address(0), to, tokenId, _data),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), 'ERC721: mint to the zero address');\\n        require(!_exists(tokenId), 'ERC721: token already minted');\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        el_state._balances[to] += 1;\\n        el_state._owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = el_state.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        el_state._balances[owner] -= 1;\\n        delete el_state._owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(el_state.ownerOf(tokenId) == from, 'ERC721: transfer of token that is not own');\\n        require(to != address(0), 'ERC721: transfer to the zero address');\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        el_state._balances[from] -= 1;\\n        el_state._balances[to] += 1;\\n        el_state._owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        el_state._tokenApprovals[tokenId] = to;\\n        emit Approval(el_state.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"contracts/mock/erc721/ERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n\\n    // Token name\\n    string internal _name;\\n\\n    // Token symbol\\n    string internal _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) internal _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) internal _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) internal _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) internal _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), 'ERC721: balance query for the zero address');\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), 'ERC721: owner query for nonexistent token');\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    // /**\\n    //  * @dev See {IERC721Metadata-tokenURI}.\\n    //  */\\n    // function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n    //     require(_exists(tokenId), 'ERC721Metadata: URI query for nonexistent token');\\n\\n    //     string memory baseURI = _baseURI();\\n    //     return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    // }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}. MODIFICATION 0\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory);\\n\\n    // /**\\n    //  * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n    //  * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n    //  * by default, can be overriden in child contracts.\\n    //  */\\n    // function _baseURI() internal view virtual returns (string memory) {\\n    //     return '';\\n    // }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, 'ERC721: approval to current owner');\\n\\n        require(\\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\\n            'ERC721: approve caller is not owner nor approved for all'\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), 'ERC721: approved query for nonexistent token');\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != msg.sender, 'ERC721: approve to caller');\\n\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(msg.sender, tokenId), 'ERC721: transfer caller is not owner nor approved');\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(msg.sender, tokenId), 'ERC721: transfer caller is not owner nor approved');\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), 'ERC721: transfer to non ERC721Receiver implementer');\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), 'ERC721: operator query for nonexistent token');\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), 'ERC721: mint to the zero address');\\n        require(!_exists(tokenId), 'ERC721: token already minted');\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, 'ERC721: transfer of token that is not own');\\n        require(to != address(0), 'ERC721: transfer to the zero address');\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert('ERC721: transfer to non ERC721Receiver implementer');\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"contracts/mock/erc721/ERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport './ERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), 'ERC721Enumerable: owner index out of bounds');\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), 'ERC721Enumerable: global index out of bounds');\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            // _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            // _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    // /**\\n    //  * @dev Private function to add a token to this extension's token tracking data structures.\\n    //  * @param tokenId uint256 ID of the token to be added to the tokens list\\n    //  */\\n    // function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n    //     _allTokensIndex[tokenId] = _allTokens.length;\\n    //     _allTokens.push(tokenId);\\n    // }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    // /**\\n    //  * @dev Private function to remove a token from this extension's token tracking data structures.\\n    //  * This has O(1) time complexity, but alters the order of the _allTokens array.\\n    //  * @param tokenId uint256 ID of the token to be removed from the tokens list\\n    //  */\\n    // function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n    //     // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n    //     // then delete the last slot (swap and pop).\\n\\n    //     uint256 lastTokenIndex = _allTokens.length - 1;\\n    //     uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n    //     // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n    //     // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n    //     // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n    //     uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n    //     _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n    //     _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n    //     // This also deletes the contents at the last position of the array\\n    //     delete _allTokensIndex[tokenId];\\n    //     _allTokens.pop();\\n    // }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 1000\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "202de86cfd6f2d1a44f031f16dd30a0c",
      "transactionHash": "0xc2088ba4c5979838f6100b22e3093d23b25dafae8f907d7b486321bcbd034ea8",
      "args": [
        "0x84500Cc78ce2fF2A9c17af6cdCa2c92ca49682Ca"
      ]
    },
    "decoded": {
      "from": "0xB666C13b621568FeC210724DF161604adccfA257",
      "gasPrice": "1700000012",
      "maxFeePerGas": "1700000012",
      "maxPriorityFeePerGas": "1700000000",
      "gasLimit": "3465846",
      "to": null,
      "value": "0",
      "nonce": 107,
      "data": "0x60c06040523480156200001157600080fd5b5060405162003fa638038062003fa683398101604081905262000034916200019c565b6040805180820182526006815265139551d1d19560d21b60208083019182528351808501909452601384527f4e7567672046756e6769626c6520546f6b656e000000000000000000000000009084015281519192916200009791600091620000f6565b508051620000ad906001906020840190620000f6565b5050506001600160601b0319606082901b166080524360a0526040517f6bf6eaff5e9af8fbccb949f4c38cc016936f8775363ccf4224db160365785d5290600090a15062000209565b8280546200010490620001cc565b90600052602060002090601f01602090048101928262000128576000855562000173565b82601f106200014357805160ff191683800117855562000173565b8280016001018555821562000173579182015b828111156200017357825182559160200191906001019062000156565b506200018192915062000185565b5090565b5b8082111562000181576000815560010162000186565b600060208284031215620001ae578081fd5b81516001600160a01b0381168114620001c5578182fd5b9392505050565b600181811c90821680620001e157607f821691505b602082108114156200020357634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c60a051613cfd620002a9600039600081816104db0152818161085801528181610a2501528181610aa001528181610b6a01528181610bc401528181610c2201528181610c7e01528181610e1d01528181610e630152610f2c0152600081816104240152818161087c01528181610a7f01528181610be801528181610c4401528181610ca001528181610e860152610f0b0152613cfd6000f3fe6080604052600436106101cd5760003560e01c80638f4c1d4f116100f7578063a7f0b3de11610095578063d636feae11610064578063d636feae1461055e578063d96073cf14610571578063e985e9c514610591578063f4f98ad5146105b157600080fd5b8063a7f0b3de146104c9578063b88d4fde146104fd578063c34902631461051d578063c87b56dd1461053d57600080fd5b806396cfd827116100d157806396cfd827146104705780639fa6dd3514610483578063a0712d6814610496578063a22cb465146104a957600080fd5b80638f4c1d4f14610412578063900cf0cf1461044657806395d89b411461045b57600080fd5b806342842e0e1161016f57806370a082311161013e57806370a0823114610382578063761610fc146103b057806378b38f36146103c3578063884c66ae146103f257600080fd5b806342842e0e1461030257806349b44f98146103225780634dd1496b146103425780636352211e1461036257600080fd5b8063095ea7b3116101ab578063095ea7b3146102615780630cf27c2a146102835780631cd4ad3a1461029657806323b872dd146102e257600080fd5b806301ffc9a7146101d257806306fdde0314610207578063081812fc14610229575b600080fd5b3480156101de57600080fd5b506101f26101ed366004613930565b6105c4565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b5061021c610661565b6040516101fe9190613ae8565b34801561023557600080fd5b50610249610244366004613968565b6106f5565b6040516001600160a01b0390911681526020016101fe565b34801561026d57600080fd5b5061028161027c366004613907565b610701565b005b6102816102913660046139d5565b610839565b3480156102a257600080fd5b506102b66102b1366004613968565b6108a0565b604080516001600160a01b039095168552602085019390935291830152151560608201526080016101fe565b3480156102ee57600080fd5b506102816102fd3660046137bd565b610946565b34801561030e57600080fd5b5061028161031d3660046137bd565b6109c1565b34801561032e57600080fd5b5061028161033d3660046139d5565b6109dc565b34801561034e57600080fd5b5061028161035d366004613a00565b610a03565b34801561036e57600080fd5b5061024961037d366004613968565b610a52565b34801561038e57600080fd5b506103a261039d36600461377a565b610a5e565b6040519081526020016101fe565b6102816103be366004613968565b610a6a565b3480156103cf57600080fd5b506103e36103de366004613968565b610ac7565b6040516101fe93929190613b14565b3480156103fe57600080fd5b506103a261040d3660046139a1565b610ae4565b34801561041e57600080fd5b506102497f000000000000000000000000000000000000000000000000000000000000000081565b34801561045257600080fd5b506103a2610b63565b34801561046757600080fd5b5061021c610b93565b61028161047e3660046139d5565b610ba5565b610281610491366004613968565b610c0c565b6102816104a4366004613968565b610c68565b3480156104b557600080fd5b506102816104c43660046138cd565b610cc8565b3480156104d557600080fd5b506103a27f000000000000000000000000000000000000000000000000000000000000000081565b34801561050957600080fd5b506102816105183660046137f8565b610d8d565b34801561052957600080fd5b50610281610538366004613980565b610e09565b34801561054957600080fd5b5061021c610558366004613968565b50606090565b61028161056c3660046139d5565b610e43565b34801561057d57600080fd5b5061028161058c366004613980565b610eaa565b34801561059d57600080fd5b506101f26105ac366004613794565b610ec3565b6102816105bf366004613968565b610ef6565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061062757506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061065b57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b606060008001805461067290613bd7565b80601f016020809104026020016040519081016040528092919081815260200182805461069e90613bd7565b80156106eb5780601f106106c0576101008083540402835291602001916106eb565b820191906000526020600020905b8154815290600101906020018083116106ce57829003601f168201915b5050505050905090565b600061065b8183610f50565b600061070d8183610feb565b9050806001600160a01b0316836001600160a01b0316141561079c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806107b857506107b88133610ec3565b61082a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610793565b6108348383611078565b505050565b60008381526009602090815260408083208584529091528120610834917f00000000000000000000000000000000000000000000000000000000000000008686867f00000000000000000000000000000000000000000000000000000000000000006110e7565b600081815260086020526040812081908190819081906108c090826111df565b509050806108fa5760405162461bcd60e51b815260206004820152600760248201526604e533a47533a360cc1b6044820152606401610793565b80945060a881901c65ffffffffffff1660a082901c60ff166004021b64e8d4a510000293506109308160d81c640fffffffff1690565b925061093c8160ff1c90565b9150509193509193565b61095033826111f7565b6109b65760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b6108348383836112c2565b61083483838360405180602001604052806000815250610d8d565b60008381526009602090815260408083208584529091528120610834916006858588611491565b60008481526009602090815260408083208684529091528120610a4c916006877f0000000000000000000000000000000000000000000000000000000000000000888789611623565b50505050565b600061065b8183610feb565b600061065b81836117ae565b6000818152600860205260409020610ac490827f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061184c565b50565b6000806060610ad76006856118a1565b9250925092509193909250565b60008381526008602052604081208190610aff9084866118d4565b91505080610b395760405162461bcd60e51b815260206004820152600760248201526604e533a47533a360cc1b6044820152606401610793565b60a881901c65ffffffffffff1660a082901c60ff166004021b64e8d4a51000025b95945050505050565b6000610b8e7f00000000000000000000000000000000000000000000000000000000000000006118ee565b905090565b60606000600101805461067290613bd7565b60008381526009602090815260408083208584529091528120610834917f00000000000000000000000000000000000000000000000000000000000000008686867f00000000000000000000000000000000000000000000000000000000000000006118fa565b6000818152600860205260409020610ac49060067f0000000000000000000000000000000000000000000000000000000000000000847f00000000000000000000000000000000000000000000000000000000000000006119a8565b6000818152600860205260409020610cc49060067f0000000000000000000000000000000000000000000000000000000000000000847f0000000000000000000000000000000000000000000000000000000000000000611a2a565b5050565b6001600160a01b038216331415610d215760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610793565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610d9733836111f7565b610dfd5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b610a4c84848484611b9a565b6000828152600860205260408120610cc4917f00000000000000000000000000000000000000000000000000000000000000008585611c23565b6000838152600960209081526040808320858452909152812061083491857f000000000000000000000000000000000000000000000000000000000000000086867f0000000000000000000000000000000000000000000000000000000000000000611d1b565b6000828152600860205260408120610cc4918484611e1c565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081205460ff165b9392505050565b6000818152600860205260409020610ac490827f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611ed6565b60008181526002830160205260408120546001600160a01b0316610fcb5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610793565b50600090815260049190910160205260409020546001600160a01b031690565b60008181526002830160205260408120546001600160a01b031680610eef5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610793565b600081815260046020526040812080546001600160a01b0319166001600160a01b03851690811790915582916110ae9083610feb565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61010083106111225760405162461bcd60e51b815260206004820152600760248201526604d4c3a43493a360cc1b6044820152606401610793565b33611136876001600160a01b038516610feb565b6001600160a01b0316146111775760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b61118387838388611f21565b60408051858152602081018590526001600160a01b038416918101919091523460608201527ff562263f29883bf3519f3733bb30b47c831bfe9809884430857d8cf29571d554906080015b60405180910390a150505050505050565b6000806111ec848461217d565b915091509250929050565b6000611202826121fc565b6112635760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610793565b600061126f8184610feb565b9050806001600160a01b0316846001600160a01b031614806112aa5750836001600160a01b031661129f846106f5565b6001600160a01b0316145b806112ba57506112ba8185610ec3565b949350505050565b6001600160a01b0383166112d7600083610feb565b6001600160a01b0316146113535760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610793565b6001600160a01b0382166113ce5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610793565b6113d9600082611078565b6001600160a01b0383166000908152600360205260408120805460019290611402908490613ba3565b90915550506001600160a01b0382166000908152600360205260408120805460019290611430908490613b33565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b336114a5866001600160a01b038416610feb565b6001600160a01b0316146114e65760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b61010083106115375760405162461bcd60e51b815260206004820152600760248201527f4d4c3a53493a30000000000000000000000000000000000000000000000000006044820152606401610793565b6000611543878361217d565b509050801561157e5760405162461bcd60e51b815260206004820152600760248201526604e533a53533a360cc1b6044820152606401610793565b6115c2836115bc60016001600160a01b0319851686175b90507f80000000000000000000000000000000000000000000000000000000000000001790565b9061221b565b5080885590506115dc856001600160a01b0384168661229c565b604080516001600160a01b0384168152602081018690529081018490527fc8032e5c721106f3e30ad0f1a45e919c8d034cf788842ff336b0150f0fbcc60e906060016111ce565b33611637886001600160a01b038416610feb565b6001600160a01b0316146116785760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b61010083106116b35760405162461bcd60e51b815260206004820152600760248201526604d4c3a43493a360cc1b6044820152606401610793565b60006116be866118ee565b90506000806116ce8b8587612359565b600087815260018e01602090815260408083206001600160a01b038a1684529091528120559092509050611704848383866123d9565b156117265760008b55611721896001600160a01b03861688612477565b611751565b61175160a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a51000025b3390612593565b60408051888152602081018890529081018690526001600160a01b03851660608201527f38195a074a64067740045e77ca5873f34a0df243a8ac9ecc39452c47e7061e479060800160405180910390a15050505050505050505050565b60006001600160a01b03821661182c5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610793565b506001600160a01b03166000908152600391909101602052604090205490565b611858843384846126ac565b6040805184815233602082015234918101919091527f2d57124cfa4e385afd5cc9d6f24874bdd21303ac9131d7cb674be2a5855c7002906060015b60405180910390a150505050565b60008181526020839052604081205481906060906118be816129b0565b60ff600883901c81169892169650945092505050565b6000806118e2858585612359565b91509150935093915050565b600061065b8243612a6a565b3361190e876001600160a01b038516610feb565b6001600160a01b03161461194f5760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b60008061195c898561217d565b9150915080600014801561197557506119758260ff1c90565b1561198e57611989898989898989896110e7565b61199d565b61199d89898989898989611d1b565b505050505050505050565b60006119b3846118ee565b90506000806119c288336111df565b9150915084831480156119d3575081155b156119eb576119e58888888888611a2a565b50611a20565b801580156119fe57506119fe8260ff1c90565b15611a1457611a0f88868689611ed6565b611a20565b611a208886868961184c565b5050505050505050565b600080611a36856118ee565b9050600080611a4589336111df565b91509150858314611a985760405162461bcd60e51b815260206004820152600660248201527f4e533a4d3a3000000000000000000000000000000000000000000000000000006044820152606401610793565b8115611ae65760405162461bcd60e51b815260206004820152600660248201527f4e533a4d3a4400000000000000000000000000000000000000000000000000006044820152606401610793565b611b07346115bc33611af9600088612a82565b6001600160a01b0319161790565b50808a5593503415611b2657611b266001600160a01b03861634612593565b611b31888789612ad4565b6040805184815233602082015264e8d4a5100065ffffffffffff60a888901c16600460ff60a08a901c16021b028183015290517f4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f69181900360600190a150505095945050505050565b611ba58484846112c2565b611bb184848484612c6d565b610a4c5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610793565b6000611c2e846118ee565b9050600080611c3e8833866118d4565b600086815260018b01602090815260408083203380855292528220919091559193509150611c6e908383866123d9565b15611caa5760008855611c888260d81c640fffffffff1690565b841415611c9f57611c9a873387612dcd565b611cd2565b611c9a873387612eda565b611cd260a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a510000261174a565b6040805186815260208101869052338183015290517fd79254e5daba749baa8ba954e77bbbb18efef113a8070d00df9a188d819324269181900360600190a15050505050505050565b6101008310611d6c5760405162461bcd60e51b815260206004820152600760248201527f4d4c3a4f493a30000000000000000000000000000000000000000000000000006044820152606401610793565b33611d80876001600160a01b038516610feb565b6001600160a01b031614611dc15760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b6044820152606401610793565b611dcd878383886126ac565b60408051858152602081018590526001600160a01b038416918101919091523460608201527fe237f23f900f35d5f1a406ba97ccfdffe082ffcda87098765811817c2c14ac87906080016111ce565b6000611e2885336111df565b5090508015611e635760405162461bcd60e51b815260206004820152600760248201526604e533a53533a360cc1b6044820152606401610793565b611e7e826115bc60016001600160a01b031985163317611595565b508086559050611e8f84338561300e565b604080518481523360208201529081018390527f48b43f133ac721cb5f6e2a3d8ab7caee987bccfb4197537cf43c9f907f057f3a9060600160405180910390a15050505050565b611ee284338484611f21565b6040805184815233602082015234918101919091527f094925310677b39991f64178494fad708beb62f73f36bb0baa493476ecf5870990606001611893565b6000611f2c826118ee565b9050600080611f3b878761217d565b9092509050611f4982613180565b60003411611f995760405162461bcd60e51b815260206004820152600860248201527f534c3a434f4d3a320000000000000000000000000000000000000000000000006044820152606401610793565b8015611fd25760405162461bcd60e51b81526020600482015260086024820152670534c3a48534f3a360c41b6044820152606401610793565b611fdc8260ff1c90565b6120285760405162461bcd60e51b815260206004820152600860248201527f534c3a48534f3a310000000000000000000000000000000000000000000000006044820152606401610793565b6000612035846001613b33565b905060008061204c346115bc8b611af98588612a82565b909250905060a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a51000026120a1606461271060a889901c65ffffffffffff1660a08a901c60ff166004021b64e8d4a51000025b91906131f3565b106120d95760405162461bcd60e51b815260206004820152600860248201526714d30e93d0940e8d60c21b6044820152606401610793565b600083815260018b01602052604081208691826001600160a01b03168152602081019190915260400160002055818a556121718160a887901c65ffffffffffff1660a088901c60ff166004021b64e8d4a510000260a885901c65ffffffffffff1660a086901c60ff166004021b64e8d4a51000026121579190613ba3565b6121619190613b33565b6001600160a01b038a1690612593565b50505050505050505050565b8154600081158061219f5750816001600160a01b0316836001600160a01b0316145b6121f1578360010160006121ba8460d81c640fffffffff1690565b81526020019081526020016000206000846001600160a01b03166001600160a01b03168152602001908152602001600020546121f3565b815b90509250929050565b6000818152600260205260408120546001600160a01b0316151561065b565b6000808264e8d4a51000840493505b65ffffffffffff841115612249576001830192508360041c935061222a565b828460081b1793508360081c836004021b64e8d4a5100081028203925050507fffffffffff00000000000000ffffffffffffffffffffffffffffffffffffffff841693508260a01b841791509250929050565b600082815260208490526040902054806122e55760405162461bcd60e51b815260206004820152600a6024820152690313135353a5354463a360b41b6044820152606401610793565b6122ef81836132b1565b505060008481526020868152604080832084905585835260018801909152812080549293509061231e83613c12565b909155505060408051848152602081018490527f452c5f777db10bd58f64d8bc58668d14487d008ff527ca431853ea22e195f1769101611893565b825460008261236f8360d81c640fffffffff1690565b1461237b57600061237d565b815b9150811580159061239f5750816001600160a01b0316846001600160a01b0316145b6123cd57600083815260018601602090815260408083206001600160a01b03881684529091529020546123cf565b815b9050935093915050565b6000826124285760405162461bcd60e51b815260206004820152600760248201527f534c3a43433a31000000000000000000000000000000000000000000000000006044820152606401610793565b600061243b8560d81c640fffffffff1690565b831190506124498560ff1c90565b8061246d5750846001600160a01b0316866001600160a01b031614801561246d5750805b9695505050505050565b600082815260208490526040902054806124c05760405162461bcd60e51b815260206004820152600a6024820152690313135353a5354463a360b41b6044820152606401610793565b600082815260018501602052604090205461251d5760405162461bcd60e51b815260206004820152600b60248201527f313135353a534254463a310000000000000000000000000000000000000000006044820152606401610793565b6000828152600185016020526040812080549161253983613c12565b9091555061254990508183613408565b506000848152602086815260409182902083905581518681529081018590529192507f452c5f777db10bd58f64d8bc58668d14487d008ff527ca431853ea22e195f1769101611893565b804710156125e35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610793565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612630576040519150601f19603f3d011682016040523d82523d6000602084013e612635565b606091505b50509050806108345760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610793565b60006126b7826118ee565b90506000806126c6878761217d565b915091506000341161271a5760405162461bcd60e51b815260206004820152600860248201527f534c3a4f42503a320000000000000000000000000000000000000000000000006044820152606401610793565b816127675760405162461bcd60e51b815260206004820152600660248201527f4e533a303a3000000000000000000000000000000000000000000000000000006044820152606401610793565b6127718160ff1c90565b156127a95760405162461bcd60e51b81526020600482015260086024820152670534c3a48534f3a360c41b6044820152606401610793565b6127ba8260d81c640fffffffff1690565b8311156128095760405162461bcd60e51b815260206004820152600860248201527f534c3a4f42503a330000000000000000000000000000000000000000000000006044820152606401610793565b6001600160a01b038616826001600160a01b03161461286c578187600101600061283a8560d81c640fffffffff1690565b815260200190815260200160002060006128518590565b6001600160a01b031681526020810191909152604001600020555b6000806128bb61289b3464e8d4a5100065ffffffffffff60a888901c16600460ff60a08a901c16021b02613b33565b6115bc8a611af96128b38960d81c640fffffffff1690565b600090612a82565b909250905060a882901c65ffffffffffff1660a083901c60ff166004021b64e8d4a510000261290d606461271060a888901c65ffffffffffff1660a089901c60ff166004021b64e8d4a510000261209a565b106129455760405162461bcd60e51b815260206004820152600860248201526714d30e93d0940e8d60c21b6044820152606401610793565b81895561199d8160a886901c65ffffffffffff1660a087901c60ff166004021b64e8d4a510000260a885901c65ffffffffffff1660a086901c60ff166004021b64e8d4a51000026129969190613ba3565b6129a09190613b33565b6001600160a01b03891690612593565b606060ff82168067ffffffffffffffff8111156129dd57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612a06578160200160208202803683370190505b509150600883901c925060005b81811015612a6357600884901c93508360ff16838281518110612a4657634e487b7160e01b600052603260045260246000fd5b602090810291909101015280612a5b81613c12565b915050612a13565b5050919050565b60006019612a788484613ba3565b610eef9190613b70565b6000640fffffffff821115612aa757634e487b7160e01b600052600160045260246000fd5b5060d81b7ff000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff919091161790565b600080612ae0836134f2565b915091508160001415612b355760405162461bcd60e51b815260206004820152600a60248201527f3732313a4d494e543a30000000000000000000000000000000000000000000006044820152606401610793565b838114612b845760405162461bcd60e51b815260206004820152600a60248201527f3732313a4d494e543a31000000000000000000000000000000000000000000006044820152606401610793565b6000612b918686856135bb565b90507fe98dd458321045a46b57bd2d5251a739e0f01750a71e4d3e71cee6c17164dd328582604051612bc4929190613afb565b60405180910390a16000815167ffffffffffffffff811115612bf657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612c1f578160200160208202803683370190505b50905060005b8151811015611a20576001828281518110612c5057634e487b7160e01b600052603260045260246000fd5b602090810291909101015280612c6581613c12565b915050612c25565b60006001600160a01b0384163b15612dc557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612cb1903390899088908890600401613ab6565b602060405180830381600087803b158015612ccb57600080fd5b505af1925050508015612cfb575060408051601f3d908101601f19168201909252612cf89181019061394c565b60015b612dab573d808015612d29576040519150601f19603f3d011682016040523d82523d6000602084013e612d2e565b606091505b508051612da35760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610793565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506112ba565b5060016112ba565b612de830838360405180602001604052806000815250612c6d565b612e4e5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b6001600160a01b03821660009081526003840160205260408120805460019290612e79908490613b33565b9091555050600081815260028401602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b612ef530838360405180602001604052806000815250612c6d565b612f5b5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b3060009081526003840160205260408120805460019290612f7d908490613ba3565b90915550506001600160a01b03821660009081526003840160205260408120805460019290612fad908490613b33565b9091555050600081815260028401602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839230917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a4505050565b6130188382610feb565b6001600160a01b0316336001600160a01b031614801561304057506001600160a01b03821633145b801561305d5750306130528483610f50565b6001600160a01b0316145b6130c35760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610793565b6130cd838261366c565b6001600160a01b038216600090815260038401602052604081208054600192906130f8908490613ba3565b9091555050306000908152600384016020526040812080546001929061311f908490613b33565b9091555050600081815260028401602052604080822080546001600160a01b03191630908117909155905183926001600160a01b038616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a4505050565b610ac48160405160240161319691815260200190565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f27b7cf8500000000000000000000000000000000000000000000000000000000179052613696565b60008080600019858709858702925082811083820303915050806000141561322d576000841161322257600080fd5b508290049050610eef565b80841161323957600080fd5b600084868809808403938111909203919050600061325986196001613b33565b8616958690049560026003880281188089028203028089028203028089028203028089028203028089028203028089029091030260008290038290046001019490940294049390931791909102925050509392505050565b6000806000806132c0866129b0565b905060005b81518160ff16101561332a578560ff16828260ff16815181106132f857634e487b7160e01b600052603260045260246000fd5b6020026020010151141561331857613311816001613b4b565b925061332a565b8061332281613c2d565b9150506132c5565b5061333486613180565b6133408560f81b6136b7565b60008260ff161161337e5760405162461bcd60e51b81526020600482015260086024820152670534c3a50464d3a360c41b6044820152606401610793565b8161338881613bba565b60ff6010600883020190811b198916965088901c945092506133ab905084613180565b8460ff168360ff16146134005760405162461bcd60e51b815260206004820152600860248201527f534c3a50464d3a310000000000000000000000000000000000000000000000006044820152606401610793565b509250925092565b6000806000613416856129b0565b905060005b81518160ff16101561347e57818160ff168151811061344a57634e487b7160e01b600052603260045260246000fd5b60200260200101516000141561346c57613465816001613b4b565b925061347e565b8061347681613c2d565b91505061341b565b5061348885613180565b60008260ff16116134c65760405162461bcd60e51b81526020600482015260086024820152670534c3a50464d3a360c41b6044820152606401610793565b816134d081613bba565b9250506008820260100184901b851792506134ea83613180565b509250929050565b6000806134ff8343612a6a565b9050600061350d8483613746565b9050600061351c600183613ba3565b4090508061356c5760405162461bcd60e51b815260206004820152600760248201527f4550433a53424c000000000000000000000000000000000000000000000000006044820152606401610793565b604080516020810183905290810184905230606090811b6bffffffffffffffffffffffff1916908201526074016040516020818303038152906040528051906020012060001c93505050915091565b6000828152602084905260409020546060901561361a5760405162461bcd60e51b815260206004820152600660248201527f494c3a4d3a3000000000000000000000000000000000000000000000000000006044820152606401610793565b613650600461364860146136318660081c60ff1690565b61363b9190613c4d565b60081b61ff001986161790565b60ff19161790565b600084815260208690526040902081905591506112ba826129b0565b6000818152600483016020526040812080546001600160a01b031916905581906110ae8483610feb565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6040517fff0000000000000000000000000000000000000000000000000000000000000082166024820152610ac49060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f6e18a12800000000000000000000000000000000000000000000000000000000179052613696565b600082613754601984613b84565b610eef9190613b33565b80356001600160a01b038116811461377557600080fd5b919050565b60006020828403121561378b578081fd5b610eef8261375e565b600080604083850312156137a6578081fd5b6137af8361375e565b91506121f36020840161375e565b6000806000606084860312156137d1578081fd5b6137da8461375e565b92506137e86020850161375e565b9150604084013590509250925092565b6000806000806080858703121561380d578081fd5b6138168561375e565b93506138246020860161375e565b925060408501359150606085013567ffffffffffffffff80821115613847578283fd5b818701915087601f83011261385a578283fd5b81358181111561386c5761386c613c9b565b604051601f8201601f19908116603f0116810190838211818310171561389457613894613c9b565b816040528281528a60208487010111156138ac578586fd5b82602086016020830137918201602001949094529598949750929550505050565b600080604083850312156138df578182fd5b6138e88361375e565b9150602083013580151581146138fc578182fd5b809150509250929050565b60008060408385031215613919578182fd5b6139228361375e565b946020939093013593505050565b600060208284031215613941578081fd5b8135610eef81613cb1565b60006020828403121561395d578081fd5b8151610eef81613cb1565b600060208284031215613979578081fd5b5035919050565b60008060408385031215613992578182fd5b50508035926020909101359150565b6000806000606084860312156139b5578283fd5b83359250602084013591506139cc6040850161375e565b90509250925092565b6000806000606084860312156139e9578283fd5b505081359360208301359350604090920135919050565b60008060008060808587031215613a15578384fd5b5050823594602084013594506040840135936060013592509050565b6000815180845260208085019450808401835b83811015613a6057815187529582019590820190600101613a44565b509495945050505050565b60008151808452815b81811015613a9057602081850181015186830182015201613a74565b81811115613aa15782602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261246d6080830184613a6b565b602081526000610eef6020830184613a6b565b8281526040602082015260006112ba6040830184613a31565b838152826020820152606060408201526000610b5a6060830184613a31565b60008219821115613b4657613b46613c6f565b500190565b600060ff821660ff84168060ff03821115613b6857613b68613c6f565b019392505050565b600082613b7f57613b7f613c85565b500490565b6000816000190483118215151615613b9e57613b9e613c6f565b500290565b600082821015613bb557613bb5613c6f565b500390565b600060ff821680613bcd57613bcd613c6f565b6000190192915050565b600181811c90821680613beb57607f821691505b60208210811415613c0c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613c2657613c26613c6f565b5060010190565b600060ff821660ff811415613c4457613c44613c6f565b60010192915050565b600060ff831680613c6057613c60613c85565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610ac457600080fdfea26469706673582212205169566c3a53102d2c7a1d44a4ebc1b265d9e8453682048cb21a5b3bd367327264736f6c6343000804003300000000000000000000000084500cc78ce2ff2a9c17af6cdca2c92ca49682ca",
      "r": "0x38f01a9b56a7624602e72f316aa64b24aa96e1a4911c313b968bad7541066f9a",
      "s": "0x25408febafca2918e4bd8fe474757231b37a2e5070333a05dee9e7e30279adf4",
      "v": 0,
      "chainId": 3
    }
  }
}