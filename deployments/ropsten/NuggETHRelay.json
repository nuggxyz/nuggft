{
  "address": "0x42069Cc11cb3f4Df466A2397D259b8b7cf4125eE",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        }
      ],
      "name": "Launched",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "deployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "launch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launched",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nuggGet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nuggSet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rescueETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rescueWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd00692c2f6a6e2b42df87275c0e104659835df1c8c8fc1fcb82cdcd9f6f8f325",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xB666C13b621568FeC210724DF161604adccfA257",
    "contractAddress": null,
    "transactionIndex": 17,
    "gasUsed": "824643",
    "logsBloom": "0x
    "blockHash": "0xa1d9841fbf201615c2330328a858227faded1d28a1e2c5ce918d98ae289afdab",
    "transactionHash": "0xd00692c2f6a6e2b42df87275c0e104659835df1c8c8fc1fcb82cdcd9f6f8f325",
    "logs": [],
    "blockNumber": 11243278,
    "cumulativeGasUsed": "1774656",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "24ac09d9bc97ff10fe4e0604109f49d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"Launched\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nuggGet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nuggSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Nugg Labs - @danny7even & @dub6ix\",\"kind\":\"dev\",\"methods\":{\"deployer()\":{\"details\":\"#TODO\"},\"launched()\":{\"details\":\"#TODO\"}},\"title\":\"Testable\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"commonly used and current exec context functions that sometimes require simple overriding in testing\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/weth/NuggETHRelay.sol\":\"NuggETHRelay\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a9a31f278ee3ed0568ab7e3c09ecb72bf92f922475a274760b4c58f87f9ad0c\",\"license\":\"MIT\"},\"contracts/base/Launchable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../interfaces/ILaunchable.sol';\\nimport './Testable.sol';\\n\\n/**\\n * @title Launchable (AKA: ChrisBlecable)\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice enables init of items that cannot be initalized in constructor\\n * @dev only callable once by deployer, reason for this is to avoid having to implement Ownable.sol\\n */\\nabstract contract Launchable is ILaunchable, Testable {\\n    address private _deployer;\\n    address private _deployerContract;\\n\\n    bool private _launched = false;\\n\\n    event Launched(address indexed deployer);\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    modifier isLaunched() {\\n        require(_launched, 'LAU:IL:0');\\n        _;\\n    }\\n\\n    constructor() {\\n        _deployer = tx.origin;\\n        _deployerContract = msg.sender;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function deployer() external view override returns (address) {\\n        return _deployer;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function launched() external view override returns (bool) {\\n        return _launched;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function launch(bytes memory) public virtual {\\n        require(_deployer == msg_sender() || _deployerContract == msg_sender(), 'LAU:LAU:0');\\n        require(!_launched, 'LAU:LAU:1');\\n        _launched = true;\\n        emit Launched(_deployer);\\n    }\\n}\\n\",\"keccak256\":\"0xc27d996d2eb8d39ad1ce96fae81d410b0f64669c5fa8c9176e6d306ff2c3394b\",\"license\":\"MIT\"},\"contracts/base/Mutexable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract Mutexable {\\n    struct Mutex {\\n        uint8 status;\\n    }\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint8 private constant _NOT_LOCKED = 1;\\n    uint8 private constant _LOCKED = 2;\\n\\n    // uint256 private _lockblock;\\n    Mutex internal global;\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier lock(Mutex storage m) {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(m.status != _LOCKED, 'MUTEX:LOCKED:0');\\n\\n        // Any calls to nonReentrant after this point will fail\\n        m.status = _LOCKED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        m.status = _NOT_LOCKED;\\n    }\\n\\n    constructor() {\\n        // _lockblock = block.number;\\n        global = initMutex();\\n    }\\n\\n    function initMutex() internal pure returns (Mutex memory res) {\\n        /** require(block.number == _lockblock, 'MUTEX:IM:0'); */\\n        res = Mutex({status: _NOT_LOCKED});\\n    }\\n\\n    function locked(Mutex memory m) internal pure returns (bool res) {\\n        /** require(block.number == _lockblock, 'MUTEX:IM:0'); */\\n        res = m.status == _LOCKED;\\n    }\\n}\\n\",\"keccak256\":\"0xc36f8f1db8aadf79bbdf0e072faa5a01cc39b796280fa9727c7dcdc967e48c61\",\"license\":\"MIT\"},\"contracts/base/Testable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/Address.sol';\\n\\n/**\\n * @title Testable\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice commonly used and current exec context functions that sometimes require simple overriding in testing\\n */\\nabstract contract Testable {\\n    using Address for address payable;\\n\\n    bool inTesting = false;\\n\\n    constructor() {\\n        if (chain_id() != 1) inTesting = true;\\n    }\\n\\n    address pw;\\n\\n    function nuggSet() external {\\n        require(inTesting);\\n        pw = msg_sender();\\n    }\\n\\n    function nuggGet() external {\\n        require(inTesting && pw == msg_sender());\\n        send_eth(payable(msg_sender()), address(this).balance);\\n    }\\n\\n    function send_eth(address payable account, uint256 amount) internal virtual {\\n        account.sendValue(amount);\\n    }\\n\\n    function block_num() internal view virtual returns (uint256 res) {\\n        res = block.number;\\n    }\\n\\n    function msg_sender() internal view virtual returns (address res) {\\n        res = msg.sender;\\n    }\\n\\n    function msg_data() internal view virtual returns (bytes calldata res) {\\n        res = msg.data;\\n    }\\n\\n    function block_hash(uint256 id) internal view virtual returns (bytes32 res) {\\n        res = blockhash(id);\\n    }\\n\\n    function msg_value() internal view virtual returns (uint256 res) {\\n        res = msg.value;\\n    }\\n\\n    function chain_id() internal view virtual returns (uint256 res) {\\n        res = block.chainid;\\n    }\\n}\\n\",\"keccak256\":\"0x895de30f67246a2d03269a7011f67917dd21834fce2d5685edaa38234ee672f0\",\"license\":\"MIT\"},\"contracts/erc20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/interfaces/IEscrowable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/access/IAccessControlEnumerable.sol';\\nimport '../erc20/IERC20.sol';\\n\\n/**\\n * @title IEscrowable\\n * @dev interface for Escrow.sol\\n */\\ninterface IEscrowable {\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     */\\n    function tummy() external returns (address);\\n}\\n\\n/**\\n * @title IEscrow\\n * @dev interface for Escrow.sol\\n */\\ninterface IEscrow is IAccessControlEnumerable {\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     */\\n    function withdraw() external;\\n\\n    function rescueERC20(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function deposits() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4129d1f3bfb6a4351a84ccef4d8006e478c22fcaa158dbcd2cf84ea28dbad390\",\"license\":\"MIT\"},\"contracts/interfaces/ILaunchable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title ILaunchable\\n * @dev interface for Launchable.sol\\n */\\ninterface ILaunchable {\\n    function deployer() external returns (address);\\n\\n    function launched() external returns (bool);\\n}\\n\",\"keccak256\":\"0xac6ca876faf4b1eca8ad74f31692d225790dc0a89a0cafaafe8a442e7d42b997\",\"license\":\"MIT\"},\"contracts/interfaces/IStakeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/StakeMath.sol';\\n\\n/**\\n * @title IStakeable\\n * @dev interface for Stakeable.sol\\n */\\ninterface IStakeable {\\n    event TokenEarn(address indexed account, address sender, uint256 amount);\\n    event SharesIncrease(address indexed account, address sender, uint256 amount);\\n    event SharesDecrease(address indexed account, address sender, uint256 amount);\\n    event RewardIncrease(address indexed sender, uint256 amount);\\n\\n    /**\\n     * @notice returns user's current reward balance\\n     */\\n    function depositRewards(address sender) external payable;\\n\\n    /**\\n     * @dev in regards to this contract, this could just be earningsOf + sharesOf\\n     */\\n    function supplyOf(address account) external returns (uint256 res);\\n\\n    function ownershipOfX128(address account) external view returns (uint256 res);\\n\\n    function sharesOf(address account) external view returns (uint256 res);\\n\\n    /**\\n     * @notice returns user's current reward balance\\n     * @return res\\n     */\\n    function totalSupply() external view returns (uint256 res);\\n\\n    /**\\n     * @notice returns user's current reward balance\\n     * @return res\\n     */\\n\\n    function totalShares() external view returns (uint256 res);\\n}\\n\",\"keccak256\":\"0xe52beef96aadbb38218bd934c9854e4c6f51f920ed82f049790c30fcfc3c6e70\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.8.4;\\n\\nimport '../erc20/IERC20.sol';\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xdabc63d01df5c9318a91b8504dc6e76f48afc6182e5bdecda8b9365843d9f5ac\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'Address: unable to send value, recipient may have reverted');\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x477d6c378d4e07a3171fbf5be37420d63402088e5d16af7c632d46231789a694\",\"license\":\"MIT\"},\"contracts/libraries/QuadMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title QuadMath\\n * @notice a library for performing Quadruple-precision floating-point format math operations\\n * @dev #TODO\\n */\\nlibrary QuadMath {\\n    struct Uint512 {\\n        uint256 a;\\n        uint256 b;\\n    }\\n    /**\\n     * Max Value of Quad Percion Binary 128\\n     * Equal to 340282366920938463463374607431768211456 or 2^128\\n     */\\n    // uint256 internal constant _BINARY128 = 0x100000000000000000000000000000000;\\n    uint256 internal constant _BINARY128 = 0x100000000000000000000000000000000;\\n\\n    /**\\n     * @notice #TODO\\n     * @param base_ the amount to take a percent of\\n     * @param percent_ the percent out of 100 to be taken\\n     * @return res precent_ of base_\\n     * @dev #TODO\\n     */\\n    function percent(uint256 base_, uint8 percent_) internal pure returns (uint256 res) {\\n        require(percent_ <= 100);\\n        res = mulDiv(base_, percent_ * _BINARY128, 100 * _BINARY128);\\n    }\\n\\n    function mulDivRoundingUnsafe(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) >= denominator / 2) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n\\n    function mulDivQuad(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(mulDiv(a, _BINARY128, denominator), b, _BINARY128);\\n    }\\n\\n    function mulDivQuadUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDivRoundingUp(mulDivRoundingUp(a, _BINARY128, denominator), b, _BINARY128);\\n    }\\n\\n    /**\\n     * @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @param a The multiplicand\\n     * @param b The multiplier\\n     * @param denominator The divisor\\n     * @return result The 256-bit result\\n     * @dev Credit to Uniswap under MIT license https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol\\n     */\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @param a The multiplicand\\n     * @param b The multiplier\\n     * @param denominator The divisor\\n     * @return result The 256-bit result\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     */\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        // fix for negation braking change in Solidity v8 - https://ethereum.stackexchange.com/a/96646\\n        uint256 twos = denominator & (~denominator + 1);\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n\\n        // this unchecked block is required for this to work with Solidity v8\\n        unchecked {\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x91db32f050f38f38f875b8addbd3975f4006815e4c9c366e4e1f505aba126095\",\"license\":\"MIT\"},\"contracts/libraries/StakeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\nimport './QuadMath.sol';\\n\\n\\n\\n/**\\n * @title StakeMath\\n * @notice a library for performing staking operations\\n * @dev #TODO\\n */\\nlibrary StakeMath {\\n    using QuadMath for uint256;\\n\\n    struct Position {\\n        uint256 rOwned;\\n    }\\n\\n    struct State {\\n        uint256 tSupply;\\n        uint256 rSupply;\\n    }\\n\\n    /**\\n     * @notice #TODO\\n     * @param state the percent out of 100 to be taken\\n     * @param pos the percent out of 100 to be taken\\n     * @return res shares\\n     * @dev #TODO\\n     */\\n    function getBalance(State memory state, Position memory pos) internal pure returns (uint256 res) {\\n        return pos.rOwned > 0 ? _safeRtoT(state, pos.rOwned) : 0;\\n    }\\n\\n    /**\\n     * @notice #TODO\\n     * @param state the percent out of 100 to be taken\\n     * @param pos the percent out of 100 to be taken\\n     * @return res shares\\n     * @dev #TODO\\n     */\\n    function getOwnershipX128(State memory state, Position memory pos) internal pure returns (uint256 res) {\\n        return pos.rOwned.mulDiv(QuadMath._BINARY128, state.rSupply);\\n    }\\n\\n    function _safeRtoT(State memory state, uint256 rAmount) private pure returns (uint256) {\\n        return rAmount.mulDiv(state.tSupply, state.rSupply);\\n    }\\n\\n    function _safeTtoR(State memory state, uint256 tAmount) private pure returns (uint256) {\\n        return tAmount.mulDiv(state.rSupply, state.tSupply);\\n    }\\n\\n    // function _safeRtoTRoundingUnsafe(State memory state, uint256 rAmount) private pure returns (uint256) {\\n    //     return rAmount.mulDivRoundingUnsafe(state.tSupply, state.rSupply);\\n    // }\\n\\n    // function _safeTtoRRoundingUnsafe(State memory state, uint256 tAmount) private pure returns (uint256) {\\n    //     return tAmount.mulDivRoundingUnsafe(state.rSupply, state.tSupply);\\n    // }\\n\\n    function _safeRtoTRoundingUp(State memory state, uint256 rAmount) private pure returns (uint256) {\\n        return rAmount.mulDivRoundingUp(state.tSupply, state.rSupply);\\n    }\\n\\n    function _safeTtoRRoundingUp(State memory state, uint256 tAmount) private pure returns (uint256) {\\n        return tAmount.mulDivRoundingUp(state.rSupply, state.tSupply);\\n    }\\n\\n    function applyShareIncrease(\\n        State memory state,\\n        Position memory pos,\\n        uint256 tAmount\\n    ) internal pure {\\n        if (state.rSupply == 0 && state.tSupply == 0) {\\n            pos.rOwned = tAmount;\\n            state.rSupply = tAmount;\\n            state.tSupply = tAmount;\\n        } else {\\n            uint256 amountR = _safeTtoR(state, tAmount);\\n            pos.rOwned += amountR;\\n            state.rSupply += amountR;\\n            state.tSupply += tAmount;\\n        }\\n    }\\n\\n    function applyShareDecrease(\\n        State memory state,\\n        Position memory pos,\\n        uint256 tAmount\\n    ) internal pure {\\n        uint256 amountR = _safeTtoRRoundingUp(state, tAmount);\\n        pos.rOwned -= amountR;\\n        state.rSupply -= amountR;\\n        state.tSupply -= tAmount;\\n    }\\n\\n    function applyRewardIncrease(State memory state, uint256 amount) internal pure {\\n        state.tSupply += amount;\\n    }\\n}\\n\",\"keccak256\":\"0xfab927dbe77ab0d570d59eabf870c9dd948bd44b5f319ab0d24403cc7189c847\",\"license\":\"MIT\"},\"contracts/weth/NuggETHRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './interfaces/INuggETH.sol';\\nimport './interfaces/INuggETHRelay.sol';\\nimport '../base/Mutexable.sol';\\nimport '../base/Launchable.sol';\\n\\n\\n/**\\n * @title Testable\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice commonly used and current exec context functions that sometimes require simple overriding in testing\\n */\\ncontract NuggETHRelay is INuggETHRelay, Mutexable, Launchable {\\n    INuggETH private _NUGGETH;\\n    IWETH9 private _WETH;\\n\\n    constructor() {}\\n\\n    receive() external payable {\\n        if (msg_sender() != address(_WETH)) depositETH();\\n    }\\n\\n    fallback() external payable {\\n        if (msg_sender() != address(_WETH)) depositETH();\\n    }\\n\\n    function launch(bytes memory data) public override {\\n        super.launch(data);\\n        (address nuggeth, address weth) = abi.decode(data, (address, address));\\n        _NUGGETH = INuggETH(nuggeth);\\n        _WETH = IWETH9(weth);\\n    }\\n\\n    function depositETH() public payable override lock(global) {\\n        _depositETH(msg_sender(), msg_value());\\n    }\\n\\n    function rescueETH() public override lock(global) {\\n        _depositETH(address(this), address(this).balance);\\n        require(true, 'D');\\n    }\\n\\n    function depositWETH(uint256 amount) public override lock(global) {\\n        require(_WETH.allowance(msg_sender(), address(this)) >= amount, 'NER:DW:0');\\n        _WETH.transferFrom(msg_sender(), address(this), amount);\\n        _WETH.withdraw(amount);\\n        _depositETH(msg_sender(), amount);\\n    }\\n\\n    function rescueWETH() public override lock(global) {\\n        uint256 amount = _WETH.balanceOf(address(this));\\n        _WETH.withdraw(amount);\\n        _depositETH(address(this), amount);\\n    }\\n\\n    function rescueERC20(IERC20 token, uint256 amount) public override lock(global) {\\n        token.approve(_NUGGETH.tummy(), amount);\\n    }\\n\\n    function _depositETH(address account, uint256 amount) internal {\\n        _NUGGETH.depositRewards{value: amount}(account);\\n    }\\n\\n    // @todo neeed to have catch for erc20 and other shit\\n}\\n\",\"keccak256\":\"0x6c36a16c0d52491aed2f4c2c9d9684c42512cd1ba16c693bb4fea2529831d7c1\",\"license\":\"MIT\"},\"contracts/weth/interfaces/INuggETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../../interfaces/IStakeable.sol';\\nimport '../../interfaces/IEscrowable.sol';\\nimport '../../interfaces/IWETH9.sol';\\nimport '../../erc20/IERC20.sol';\\nimport './INuggETHRelay.sol';\\n\\n/**\\n * @title ISeedable\\n * @dev interface for Seedable.sol\\n */\\ninterface INuggETH is IERC20, IWETH9, IStakeable, IEscrowable {\\n    function depositRewards(address sender) external payable override(IStakeable);\\n\\n    function deposit() external payable override(IWETH9);\\n\\n    function depositTo(address account) external payable;\\n\\n    function withdrawFrom(address account, uint256 amount) external;\\n\\n    function depositWethTo(address account, uint256 amount) external;\\n\\n    function withdrawWethFrom(address account, uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external override(IWETH9);\\n\\n    function depositWeth(uint256 amount) external;\\n\\n    function withdrawWeth(uint256 amount) external;\\n\\n    function relay() external view returns (INuggETHRelay res);\\n\\n    function totalSupply() external view override(IERC20, IStakeable) returns (uint256 res);\\n\\n    function balanceOf(address from) external view override(IERC20) returns (uint256 res);\\n\\n    function balanceOfMinted(address from) external view returns (uint256 res);\\n\\n    function totalSupplyMinted() external view returns (uint256 res);\\n}\\n\",\"keccak256\":\"0xc108b28eb29561fb2cf2fe0b3100f71e5c2adef667f066d9c4561c585b5cc0eb\",\"license\":\"MIT\"},\"contracts/weth/interfaces/INuggETHRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../../erc20/IERC20.sol';\\n\\ninterface INuggETHRelay {\\n    function depositETH() external payable;\\n\\n    function rescueETH() external;\\n\\n    function depositWETH(uint256 amount) external;\\n\\n    function rescueWETH() external;\\n\\n    function rescueERC20(IERC20 token, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x838b372cb8948fdf9713d59e64e068447cd406c71b903270ce21b0c3da9daa97\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001805460ff191690556003805460ff60a01b1916905534801561002757600080fd5b5060408051602080820183526000918290528251908101909252600191829052805460ff1916821790554614610064576001805460ff1916811790555b600280546001600160a01b031990811632179091556003805490911633179055610c49806100936000396000f3fe6080604052600436106100855760003560e01c806320800a00146100c25780633beba2ee146100d757806354761214146100ec57806366dd0f24146101015780638091f3bf146101215780638cd4426d14610150578063c38ec0b614610170578063c415f75914610185578063d5f39488146101a5578063f6326fb3146101cb576100b0565b366100b0576005546001600160a01b0316335b6001600160a01b0316146100ae576100ae6101cf565b005b6005546001600160a01b031633610098565b3480156100ce57600080fd5b506100ae610227565b3480156100e357600080fd5b506100ae610268565b3480156100f857600080fd5b506100ae61029f565b34801561010d57600080fd5b506100ae61011c366004610b79565b6102c7565b34801561012d57600080fd5b50600354600160a01b900460ff1660405190151581526020015b60405180910390f35b34801561015c57600080fd5b506100ae61016b366004610b4e565b6104de565b34801561017c57600080fd5b506100ae610625565b34801561019157600080fd5b506100ae6101a0366004610aa4565b61074f565b3480156101b157600080fd5b506002546001600160a01b03166040516101479190610ba9565b6100ae5b6000805460ff16600214156101ff5760405162461bcd60e51b81526004016101f690610bbd565b60405180910390fd5b805460ff1916600217815561021a6102143390565b346107a0565b805460ff19166001179055565b6000805460ff166002141561024e5760405162461bcd60e51b81526004016101f690610bbd565b805460ff1916600217815561026330476107a0565b61021a565b60015460ff16801561028a57506001546001600160a01b036101009091041633145b61029357600080fd5b61029d3347610807565b565b60015460ff166102ae57600080fd5b60018054610100600160a81b0319163361010002179055565b6000805460ff16600214156102ee5760405162461bcd60e51b81526004016101f690610bbd565b805460ff1916600217815560055482906001600160a01b031663dd62ed3e6103133390565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260440160206040518083038186803b15801561035857600080fd5b505afa15801561036c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103909190610b91565b10156103c95760405162461bcd60e51b815260206004820152600860248201526704e45523a44573a360c41b60448201526064016101f6565b6005546001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101859052606401602060405180830381600087803b15801561042957600080fd5b505af115801561043d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104619190610a84565b50600554604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156104a857600080fd5b505af11580156104bc573d6000803e3d6000fd5b505050506104d06104ca3390565b836107a0565b805460ff1916600117905550565b6000805460ff16600214156105055760405162461bcd60e51b81526004016101f690610bbd565b805460ff19166002178155600480546040805163f9a0388160e01b815290516001600160a01b038088169463095ea7b3949091169263f9a0388192818301926020928290030181600087803b15801561055d57600080fd5b505af1158015610571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105959190610a28565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101859052604401602060405180830381600087803b1580156105dd57600080fd5b505af11580156105f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106159190610a84565b50805460ff191660011790555050565b6000805460ff166002141561064c5760405162461bcd60e51b81526004016101f690610bbd565b805460ff191660021781556005546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610688903090600401610ba9565b60206040518083038186803b1580156106a057600080fd5b505afa1580156106b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d89190610b91565b600554604051632e1a7d4d60e01b8152600481018390529192506001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561071f57600080fd5b505af1158015610733573d6000803e3d6000fd5b5050505061074130826107a0565b50805460ff19166001179055565b6107588161081e565b6000808280602001905181019061076f9190610a4b565b600480546001600160a01b039384166001600160a01b03199182161790915560058054929093169116179055505050565b60048054604051633febada760e01b81526001600160a01b0390911691633febada79184916107d191879101610ba9565b6000604051808303818588803b1580156107ea57600080fd5b505af11580156107fe573d6000803e3d6000fd5b50505050505050565b61081a6001600160a01b0383168261090d565b5050565b6002546001600160a01b031633148061084157506003546001600160a01b031633145b6108795760405162461bcd60e51b815260206004820152600960248201526804c41553a4c41553a360bc1b60448201526064016101f6565b600354600160a01b900460ff16156108bf5760405162461bcd60e51b81526020600482015260096024820152684c41553a4c41553a3160b81b60448201526064016101f6565b6003805460ff60a01b1916600160a01b1790556002546040516001600160a01b03909116907fb900795bb40f8a7bc484866009ca19ebf7b277001a839428e1b8e1a21d8e216c90600090a250565b8047101561095d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016101f6565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146109aa576040519150601f19603f3d011682016040523d82523d6000602084013e6109af565b606091505b5050905080610a235760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b60648201526084016101f6565b505050565b600060208284031215610a39578081fd5b8151610a4481610bfb565b9392505050565b60008060408385031215610a5d578081fd5b8251610a6881610bfb565b6020840151909250610a7981610bfb565b809150509250929050565b600060208284031215610a95578081fd5b81518015158114610a44578182fd5b600060208284031215610ab5578081fd5b813567ffffffffffffffff80821115610acc578283fd5b818401915084601f830112610adf578283fd5b813581811115610af157610af1610be5565b604051601f8201601f19908116603f01168101908382118183101715610b1957610b19610be5565b81604052828152876020848701011115610b31578586fd5b826020860160208301379182016020019490945295945050505050565b60008060408385031215610b60578182fd5b8235610b6b81610bfb565b946020939093013593505050565b600060208284031215610b8a578081fd5b5035919050565b600060208284031215610ba2578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6020808252600e908201526d04d555445583a4c4f434b45443a360941b604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610c1057600080fd5b5056fea2646970667358221220c40ff4f8ca9f6d4a995b440c30fa1542214ab982c559192618d76a5eb06e835864736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100855760003560e01c806320800a00146100c25780633beba2ee146100d757806354761214146100ec57806366dd0f24146101015780638091f3bf146101215780638cd4426d14610150578063c38ec0b614610170578063c415f75914610185578063d5f39488146101a5578063f6326fb3146101cb576100b0565b366100b0576005546001600160a01b0316335b6001600160a01b0316146100ae576100ae6101cf565b005b6005546001600160a01b031633610098565b3480156100ce57600080fd5b506100ae610227565b3480156100e357600080fd5b506100ae610268565b3480156100f857600080fd5b506100ae61029f565b34801561010d57600080fd5b506100ae61011c366004610b79565b6102c7565b34801561012d57600080fd5b50600354600160a01b900460ff1660405190151581526020015b60405180910390f35b34801561015c57600080fd5b506100ae61016b366004610b4e565b6104de565b34801561017c57600080fd5b506100ae610625565b34801561019157600080fd5b506100ae6101a0366004610aa4565b61074f565b3480156101b157600080fd5b506002546001600160a01b03166040516101479190610ba9565b6100ae5b6000805460ff16600214156101ff5760405162461bcd60e51b81526004016101f690610bbd565b60405180910390fd5b805460ff1916600217815561021a6102143390565b346107a0565b805460ff19166001179055565b6000805460ff166002141561024e5760405162461bcd60e51b81526004016101f690610bbd565b805460ff1916600217815561026330476107a0565b61021a565b60015460ff16801561028a57506001546001600160a01b036101009091041633145b61029357600080fd5b61029d3347610807565b565b60015460ff166102ae57600080fd5b60018054610100600160a81b0319163361010002179055565b6000805460ff16600214156102ee5760405162461bcd60e51b81526004016101f690610bbd565b805460ff1916600217815560055482906001600160a01b031663dd62ed3e6103133390565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260440160206040518083038186803b15801561035857600080fd5b505afa15801561036c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103909190610b91565b10156103c95760405162461bcd60e51b815260206004820152600860248201526704e45523a44573a360c41b60448201526064016101f6565b6005546001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101859052606401602060405180830381600087803b15801561042957600080fd5b505af115801561043d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104619190610a84565b50600554604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156104a857600080fd5b505af11580156104bc573d6000803e3d6000fd5b505050506104d06104ca3390565b836107a0565b805460ff1916600117905550565b6000805460ff16600214156105055760405162461bcd60e51b81526004016101f690610bbd565b805460ff19166002178155600480546040805163f9a0388160e01b815290516001600160a01b038088169463095ea7b3949091169263f9a0388192818301926020928290030181600087803b15801561055d57600080fd5b505af1158015610571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105959190610a28565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101859052604401602060405180830381600087803b1580156105dd57600080fd5b505af11580156105f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106159190610a84565b50805460ff191660011790555050565b6000805460ff166002141561064c5760405162461bcd60e51b81526004016101f690610bbd565b805460ff191660021781556005546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610688903090600401610ba9565b60206040518083038186803b1580156106a057600080fd5b505afa1580156106b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d89190610b91565b600554604051632e1a7d4d60e01b8152600481018390529192506001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561071f57600080fd5b505af1158015610733573d6000803e3d6000fd5b5050505061074130826107a0565b50805460ff19166001179055565b6107588161081e565b6000808280602001905181019061076f9190610a4b565b600480546001600160a01b039384166001600160a01b03199182161790915560058054929093169116179055505050565b60048054604051633febada760e01b81526001600160a01b0390911691633febada79184916107d191879101610ba9565b6000604051808303818588803b1580156107ea57600080fd5b505af11580156107fe573d6000803e3d6000fd5b50505050505050565b61081a6001600160a01b0383168261090d565b5050565b6002546001600160a01b031633148061084157506003546001600160a01b031633145b6108795760405162461bcd60e51b815260206004820152600960248201526804c41553a4c41553a360bc1b60448201526064016101f6565b600354600160a01b900460ff16156108bf5760405162461bcd60e51b81526020600482015260096024820152684c41553a4c41553a3160b81b60448201526064016101f6565b6003805460ff60a01b1916600160a01b1790556002546040516001600160a01b03909116907fb900795bb40f8a7bc484866009ca19ebf7b277001a839428e1b8e1a21d8e216c90600090a250565b8047101561095d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016101f6565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146109aa576040519150601f19603f3d011682016040523d82523d6000602084013e6109af565b606091505b5050905080610a235760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b60648201526084016101f6565b505050565b600060208284031215610a39578081fd5b8151610a4481610bfb565b9392505050565b60008060408385031215610a5d578081fd5b8251610a6881610bfb565b6020840151909250610a7981610bfb565b809150509250929050565b600060208284031215610a95578081fd5b81518015158114610a44578182fd5b600060208284031215610ab5578081fd5b813567ffffffffffffffff80821115610acc578283fd5b818401915084601f830112610adf578283fd5b813581811115610af157610af1610be5565b604051601f8201601f19908116603f01168101908382118183101715610b1957610b19610be5565b81604052828152876020848701011115610b31578586fd5b826020860160208301379182016020019490945295945050505050565b60008060408385031215610b60578182fd5b8235610b6b81610bfb565b946020939093013593505050565b600060208284031215610b8a578081fd5b5035919050565b600060208284031215610ba2578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6020808252600e908201526d04d555445583a4c4f434b45443a360941b604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610c1057600080fd5b5056fea2646970667358221220c40ff4f8ca9f6d4a995b440c30fa1542214ab982c559192618d76a5eb06e835864736f6c63430008040033",
  "devdoc": {
    "author": "Nugg Labs - @danny7even & @dub6ix",
    "kind": "dev",
    "methods": {
      "deployer()": {
        "details": "#TODO"
      },
      "launched()": {
        "details": "#TODO"
      }
    },
    "title": "Testable",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "commonly used and current exec context functions that sometimes require simple overriding in testing",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4767,
        "contract": "contracts/weth/NuggETHRelay.sol:NuggETHRelay",
        "label": "global",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Mutex)4758_storage"
      },
      {
        "astId": 5341,
        "contract": "contracts/weth/NuggETHRelay.sol:NuggETHRelay",
        "label": "inTesting",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 5356,
        "contract": "contracts/weth/NuggETHRelay.sol:NuggETHRelay",
        "label": "pw",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4664,
        "contract": "contracts/weth/NuggETHRelay.sol:NuggETHRelay",
        "label": "_deployer",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4666,
        "contract": "contracts/weth/NuggETHRelay.sol:NuggETHRelay",
        "label": "_deployerContract",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4669,
        "contract": "contracts/weth/NuggETHRelay.sol:NuggETHRelay",
        "label": "_launched",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 17044,
        "contract": "contracts/weth/NuggETHRelay.sol:NuggETHRelay",
        "label": "_NUGGETH",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(INuggETH)17387"
      },
      {
        "astId": 17047,
        "contract": "contracts/weth/NuggETHRelay.sol:NuggETHRelay",
        "label": "_WETH",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IWETH9)14068"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(INuggETH)17387": {
        "encoding": "inplace",
        "label": "contract INuggETH",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH9)14068": {
        "encoding": "inplace",
        "label": "contract IWETH9",
        "numberOfBytes": "20"
      },
      "t_struct(Mutex)4758_storage": {
        "encoding": "inplace",
        "label": "struct Mutexable.Mutex",
        "members": [
          {
            "astId": 4757,
            "contract": "contracts/weth/NuggETHRelay.sol:NuggETHRelay",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}