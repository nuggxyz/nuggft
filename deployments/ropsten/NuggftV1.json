{
  "address": "0x463932D1416c4006a6790BA5E3B4757e3D2e6259",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultResolver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "ethOwed",
          "type": "uint96"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "DotnuggV1ResolverUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocknum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "interval",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "offset",
          "type": "uint32"
        }
      ],
      "name": "Genesis",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "v2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "MigrateV1Sent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "migrator",
          "type": "address"
        }
      ],
      "name": "MigratorV1Updated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "eth",
          "type": "uint96"
        }
      ],
      "name": "ProtocolEthExtracted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "trust",
          "type": "bool"
        }
      ],
      "name": "TrustUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "UserTrustUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_OFFER",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "anchor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "buyerTokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint160",
          "name": "sellerTokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        }
      ],
      "name": "claimItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "buyerTokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint160",
          "name": "sellerTokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        }
      ],
      "name": "delegateItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "dotnuggV1Callback",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renderedAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "xovers",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "yovers",
              "type": "uint8[]"
            },
            {
              "internalType": "string[]",
              "name": "labels",
              "type": "string[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IDotnuggV1Metadata.Memory",
          "name": "data",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dotnuggV1DefaultWidth",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dotnuggV1DefaultZoom",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dotnuggV1Processor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "dotnuggV1ResolverOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[][]",
          "name": "data",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint8",
          "name": "feature",
          "type": "uint8"
        }
      ],
      "name": "dotnuggV1StoreFiles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "res",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethPerShare",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "res",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extractProtocolEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "genesis",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTrusted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "feature",
          "type": "uint8"
        }
      ],
      "name": "lengthOf",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "loan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "loanInfo",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "toPayoff",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "toRebalance",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "earned",
          "type": "uint96"
        },
        {
          "internalType": "uint32",
          "name": "epochDue",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "loaner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSharePrice",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "res",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "payoff",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "proofOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "proofToDotnuggMetadata",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proof",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "defaultIds",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "overxs",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "overys",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolEth",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "res",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint8",
          "name": "index0",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "index1",
          "type": "uint8"
        }
      ],
      "name": "rotate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "setDotnuggV1Resolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "setIsTrusted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_migrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedEth",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "res",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedShares",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "res",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint96",
          "name": "floor",
          "type": "uint96"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "sellerTokenId",
          "type": "uint160"
        },
        {
          "internalType": "uint16",
          "name": "itemId",
          "type": "uint16"
        },
        {
          "internalType": "uint96",
          "name": "floor",
          "type": "uint96"
        }
      ],
      "name": "swapItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "trustedMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "valueForDelegate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canDelegate",
          "type": "bool"
        },
        {
          "internalType": "uint96",
          "name": "nextSwapAmount",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "senderCurrentOffer",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "valueForPayoff",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "res",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "tokenId",
          "type": "uint160"
        }
      ],
      "name": "valueForRebalance",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "res",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc0f7f494e6d6369f612d846edcb2303cfcc6c6d34dee53b0032bbefb11015d89",
  "receipt": {
    "to": null,
    "from": "0xB666C13b621568FeC210724DF161604adccfA257",
    "contractAddress": "0x463932D1416c4006a6790BA5E3B4757e3D2e6259",
    "transactionIndex": 1,
    "gasUsed": "4747545",
    "logsBloom": "0x
    "blockHash": "0x2e72749c24ffd9d8a8bd39b6f0902292a1bddc84e2aa9016145c446ffd0e09d5",
    "transactionHash": "0xc0f7f494e6d6369f612d846edcb2303cfcc6c6d34dee53b0032bbefb11015d89",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 11739301,
        "transactionHash": "0xc0f7f494e6d6369f612d846edcb2303cfcc6c6d34dee53b0032bbefb11015d89",
        "address": "0x463932D1416c4006a6790BA5E3B4757e3D2e6259",
        "topics": [
          "0x183ba372104e811ca56ea566d43048a8c560dbb9cce5c8d5e9987c710b38d946"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000b320a500000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000bb8",
        "logIndex": 0,
        "blockHash": "0x2e72749c24ffd9d8a8bd39b6f0902292a1bddc84e2aa9016145c446ffd0e09d5"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 11739301,
        "transactionHash": "0xc0f7f494e6d6369f612d846edcb2303cfcc6c6d34dee53b0032bbefb11015d89",
        "address": "0x463932D1416c4006a6790BA5E3B4757e3D2e6259",
        "topics": [
          "0xe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986",
          "0x000000000000000000000000b666c13b621568fec210724df161604adccfa257"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 1,
        "blockHash": "0x2e72749c24ffd9d8a8bd39b6f0902292a1bddc84e2aa9016145c446ffd0e09d5"
      }
    ],
    "blockNumber": 11739301,
    "cumulativeGasUsed": "4768545",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF7895Bc8A3C3A8B91D834b888a6BdEaE4a2fb098"
  ],
  "solcInputHash": "6758c1116ab34cc79ee235c722064db0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultResolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"ethOwed\",\"type\":\"uint96\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"DotnuggV1ResolverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocknum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"interval\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"offset\",\"type\":\"uint32\"}],\"name\":\"Genesis\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"v2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"MigrateV1Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"migrator\",\"type\":\"address\"}],\"name\":\"MigratorV1Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"eth\",\"type\":\"uint96\"}],\"name\":\"ProtocolEthExtracted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trust\",\"type\":\"bool\"}],\"name\":\"TrustUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"UserTrustUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_OFFER\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"anchor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"buyerTokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"sellerTokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"}],\"name\":\"claimItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"buyerTokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"sellerTokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"}],\"name\":\"delegateItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"dotnuggV1Callback\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renderedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IDotnuggV1Metadata.Memory\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dotnuggV1DefaultWidth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dotnuggV1DefaultZoom\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dotnuggV1Processor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"dotnuggV1ResolverOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"data\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint8\",\"name\":\"feature\",\"type\":\"uint8\"}],\"name\":\"dotnuggV1StoreFiles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"res\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPerShare\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"res\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractProtocolEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTrusted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feature\",\"type\":\"uint8\"}],\"name\":\"lengthOf\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"loan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"loanInfo\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"toPayoff\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"toRebalance\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"earned\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"epochDue\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"loaner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSharePrice\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"res\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"payoff\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"proofOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"proofToDotnuggMetadata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"defaultIds\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"overxs\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"overys\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolEth\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"res\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint8\",\"name\":\"index0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"index1\",\"type\":\"uint8\"}],\"name\":\"rotate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"setDotnuggV1Resolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"setIsTrusted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedEth\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"res\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedShares\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"res\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint96\",\"name\":\"floor\",\"type\":\"uint96\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sellerTokenId\",\"type\":\"uint160\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"floor\",\"type\":\"uint96\"}],\"name\":\"swapItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"trustedMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"valueForDelegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canDelegate\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"nextSwapAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"senderCurrentOffer\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"valueForPayoff\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"res\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"}],\"name\":\"valueForRebalance\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"res\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"The zero address indicates there is no approved address.  Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.\",\"params\":{\"_approved\":\"The new approved NFT controller\",\"_tokenId\":\"The NFT to approve\"}},\"burn(uint160)\":{\"details\":\"should only be called directly\",\"params\":{\"tokenId\":\"the id of the nugg being burned\"}},\"ethPerShare()\":{\"details\":\"this value not always equivilent to the \\\"floor\\\" price which can consist of perceived value. can be looked at as an \\\"intrinsic floor\\\"this is the value that users will receive when their either burn or loan out nuggs\",\"returns\":{\"res\":\"-> [current staked eth] / [current staked shares]\"}},\"extractProtocolEth()\":{\"details\":\"caller must be a trusted user\"},\"getApproved(uint256)\":{\"details\":\"Throws if `_tokenId` is not a valid NFT.\",\"params\":{\"_tokenId\":\"The NFT to find the approved address for\"},\"returns\":{\"_0\":\"The approved address for this NFT, or the zero address if there is none\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"_operator\":\"The address that acts on behalf of the owner\",\"_owner\":\"The address that owns the NFTs\"},\"returns\":{\"_0\":\"True if `_operator` is an approved operator for `_owner`, false otherwise\"}},\"loanInfo(uint160)\":{\"details\":\"contract ->frontend -> used to set the amount of eth for user\",\"params\":{\"tokenId\":\"the token who's current loan to check\"},\"returns\":{\"earned\":\"-> the amount of eth the minSharePrice has increased since loan was last rebalanced\",\"epochDue\":\"-> the final epoch a user is safe from liquidation (inclusive)\",\"loaner\":\"-> the user responsable for the loan\",\"toPayoff\":\"->  the current amount loaned out, plus the final rebalance fee\",\"toRebalance\":\"->  the fee a user must pay to rebalance (and extend) the loan on their nugg\"}},\"minSharePrice()\":{\"details\":\"premium here is used to push against dillution of supply through ensuring the price always increasesused by the front end\",\"returns\":{\"res\":\"-> premium + protcolFee + ethPerShare\"}},\"ownerOf(uint256)\":{\"details\":\"NFTs assigned to zero address are considered invalid, and queries  about them do throw.\",\"params\":{\"_tokenId\":\"The identifier for an NFT\"},\"returns\":{\"_0\":\"The address of the owner of the NFT\"}},\"protocolEth()\":{\"details\":\"this will be\",\"returns\":{\"res\":\"-> (PROTOCOL_FEE_BPS * [all eth staked] / 10000) - [all previously extracted eth]\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Emits the ApprovalForAll event. The contract MUST allow  multiple operators per owner.\",\"params\":{\"_approved\":\"True if the operator is approved, false to revoke approval\",\"_operator\":\"Address to add to the set of authorized operators\"}},\"setMigrator(address)\":{\"details\":\"caller must be a trusted user\",\"params\":{\"migrator\":\"the address to set as the migrator contract\"}},\"stakedEth()\":{\"details\":\"can be used as the market-cap or tvl of all nuggft v1not equivilent to the balance of eth the contract holds, which also hs protocolEth and unclaimed eth from unsuccessful swaps\"},\"stakedShares()\":{\"details\":\"this is equivilent to the amount of nuggs in existance\"},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.\",\"params\":{\"interfaceID\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise\"}},\"tokenURI(uint256)\":{\"details\":\"Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \\\"ERC721  Metadata JSON Schema\\\".\"},\"valueForDelegate(address,uint160)\":{\"details\":\"returns 0 if no delegate can be made for this oken\",\"params\":{\"sender\":\"-> the address of the user who will be delegating\",\"tokenId\":\"-> the token to be delegated to\"},\"returns\":{\"canDelegate\":\"-> instead of reverting this function will return false\",\"nextSwapAmount\":\"-> the minimum value that must be sent with a delegate call\",\"senderCurrentOffer\":\"->\"}},\"valueForPayoff(uint160)\":{\"details\":\"should be used to tell user how much eth to send for payoff\"},\"valueForRebalance(uint160)\":{\"details\":\"should be used to tell user how much eth to send for rebalance\"}},\"version\":1},\"userdoc\":{\"events\":{\"Genesis(uint256,uint32,uint32)\":{\"notice\":\"Explain to an end user what this does\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Change or reaffirm the approved address for an NFT\"},\"burn(uint160)\":{\"notice\":\"burns a nugg from existance, dealing the eth worth of that share to the user\"},\"ethPerShare()\":{\"notice\":\"returns the total \\\"ethPerShare\\\" held by the contract\"},\"extractProtocolEth()\":{\"notice\":\"sends the current protocolEth to the user and resets the value to zero\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved address for a single NFT\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Query if an address is an authorized operator for another address\"},\"loanInfo(uint160)\":{\"notice\":\"for a nugg's active loan: calculates the current min eth a user must send to payoff or rebalance\"},\"minSharePrice()\":{\"notice\":\"returns the minimum eth that must be added to create a new share\"},\"name()\":{\"notice\":\"A descriptive name for a collection of NFTs in this contract\"},\"ownerOf(uint256)\":{\"notice\":\"Find the owner of an NFT\"},\"protocolEth()\":{\"notice\":\"returns the amount of eth extractable by protocol\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enable or disable approval for a third party (\\\"operator\\\") to manage  all of `msg.sender`'s assets\"},\"setMigrator(address)\":{\"notice\":\"sets the migrator contract\"},\"stakedEth()\":{\"notice\":\"returns the total amount of staked eth held by the contract\"},\"stakedShares()\":{\"notice\":\"returns the total number of staked shares held by the contract\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"},\"symbol()\":{\"notice\":\"An abbreviated name for NFTs in this contract\"},\"tokenURI(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"},\"valueForDelegate(address,uint160)\":{\"notice\":\"calculates the minimum eth that must be sent with a delegate call\"},\"valueForPayoff(uint160)\":{\"notice\":\"\\\"toPayoff\\\" value from \\\"loanInfo\\\"\"},\"valueForRebalance(uint160)\":{\"notice\":\"\\\"toRebalance\\\" value from \\\"loanInfo\\\"\"}},\"notice\":\"deviations from ERC721 standard: 1. no verificaiton the receiver is a ERC721Reciever - on top of this being a gross waste of gas, the way the swapping logic works makes this only worth calling when a user places an offer - and we did not want to call \\\"onERC721Recieved\\\" when no token was being sent. 2.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/NuggftV1.sol\":\"NuggftV1\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"src/NuggftV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721, IERC165, IERC721Metadata} from './interfaces/IERC721.sol';\\n\\nimport {NuggftV1Loan} from './core/NuggftV1Loan.sol';\\nimport {NuggftV1Dotnugg} from './core/NuggftV1Dotnugg.sol';\\nimport {Trust} from './core/Trust.sol';\\n\\nimport {INuggftV1Migrator} from './interfaces/nuggftv1/INuggftV1Migrator.sol';\\nimport {IDotnuggV1Metadata} from './interfaces/dotnuggv1/IDotnuggV1Metadata.sol';\\nimport {IDotnuggV1Implementer} from './interfaces/dotnuggv1/IDotnuggV1Implementer.sol';\\nimport {IDotnuggV1ImplementerMetadata} from './interfaces/dotnuggv1/IDotnuggV1ImplementerMetadata.sol';\\nimport {IDotnuggV1} from './interfaces/dotnuggv1/IDotnuggV1.sol';\\n\\nimport {INuggftV1Token} from './interfaces/nuggftv1/INuggftV1Token.sol';\\nimport {INuggftV1Stake} from './interfaces/nuggftv1/INuggftV1Stake.sol';\\n\\nimport {INuggftV1} from './interfaces/nuggftv1/INuggftV1.sol';\\n\\nimport {SafeTransferLib} from './libraries/SafeTransferLib.sol';\\nimport {SafeCastLib} from './libraries/SafeCastLib.sol';\\n\\nimport {NuggftV1StakeType} from './types/NuggftV1StakeType.sol';\\n\\n/// @title NuggFT V1\\n/// @author nugg.xyz - danny7even & dub6ix\\n/// @notice Explain to an end user what this does\\n/// @dev Explain to a developer any extra details\\n/// @dev the words \\\"share\\\" and \\\"nugg\\\" are used interchangably throughout\\n\\n/// deviations from ERC721 standard:\\n/// 1. no verificaiton the receiver is a ERC721Reciever - on top of this being a gross waste of gas,\\n/// the way the swapping logic works makes this only worth calling when a user places an offer - and\\n/// we did not want to call \\\"onERC721Recieved\\\" when no token was being sent.\\n/// 2.\\ncontract NuggftV1 is IERC721Metadata, NuggftV1Loan {\\n    using SafeCastLib for uint256;\\n\\n    using NuggftV1StakeType for uint256;\\n\\n    constructor(address _defaultResolver) NuggftV1Dotnugg(_defaultResolver) Trust(msg.sender) {}\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IDotnuggV1Implementer).interfaceId ||\\n            interfaceId == type(IDotnuggV1ImplementerMetadata).interfaceId ||\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n\\n    function name() public pure override returns (string memory) {\\n        return 'Nugg Fungible Token V1';\\n    }\\n\\n    function symbol() public pure override returns (string memory) {\\n        return 'NUGGFT';\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory res) {\\n        uint160 safeTokenId = tokenId.safe160();\\n\\n        address resolver = hasResolver(safeTokenId) ? dotnuggV1ResolverOf(safeTokenId) : dotnuggV1Processor;\\n\\n        (, res) = IDotnuggV1(dotnuggV1Processor).dotnuggToUri(\\n            address(this),\\n            tokenId,\\n            resolver,\\n            dotnuggV1DefaultWidth,\\n            dotnuggV1DefaultZoom\\n        );\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                CORE\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc IDotnuggV1Implementer\\n    function dotnuggV1Callback(uint256 tokenId) public view override returns (IDotnuggV1Metadata.Memory memory data) {\\n        (uint256 proof, uint8[] memory ids, uint8[] memory xovers, uint8[] memory yovers) = proofToDotnuggMetadata(tokenId.safe160());\\n\\n        string[] memory labels = new string[](8);\\n\\n        labels[0] = 'BASE';\\n        labels[1] = 'EYES';\\n        labels[2] = 'MOUTH';\\n        labels[3] = 'HAIR';\\n        labels[4] = 'HAT';\\n        labels[5] = 'BACK';\\n        labels[6] = 'NECK';\\n        labels[7] = 'HOLD';\\n\\n        data = IDotnuggV1Metadata.Memory({\\n            version: 1,\\n            renderedAt: block.timestamp,\\n            name: 'NuggFT V1',\\n            desc: 'Nugg Fungible Token V1',\\n            owner: owners[tokenId], // fix\\n            tokenId: tokenId,\\n            data: abi.encode(proof),\\n            ids: ids,\\n            xovers: xovers,\\n            yovers: yovers,\\n            labels: labels\\n        });\\n    }\\n\\n    /// @inheritdoc INuggftV1Token\\n    function trustedMint(uint160 tokenId, address to) external payable override requiresTrust {\\n        require(tokenId < TRUSTED_MINT_TOKENS && tokenId != 0, 'G:1');\\n\\n        // require(!exists(tokenId), 'G:2');\\n\\n        addStakedShareFromMsgValue();\\n\\n        setProof(tokenId);\\n\\n        _mintTo(to, tokenId);\\n    }\\n\\n    /// @inheritdoc INuggftV1Token\\n    function mint(uint160 tokenId) public payable override {\\n        require(tokenId < UNTRUSTED_MINT_TOKENS + TRUSTED_MINT_TOKENS && tokenId > TRUSTED_MINT_TOKENS, 'G:1');\\n\\n        // require(!exists(tokenId), 'G:2');\\n\\n        addStakedShareFromMsgValue();\\n\\n        setProof(tokenId);\\n\\n        _mintTo(msg.sender, tokenId);\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                BURN/MIGRATE\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function burn(uint160 tokenId) external {\\n        uint96 ethOwed = subStakedShare(tokenId);\\n\\n        SafeTransferLib.safeTransferETH(msg.sender, ethOwed);\\n\\n        emit Burn(tokenId, msg.sender, ethOwed);\\n    }\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function migrate(uint160 tokenId) external {\\n        require(migrator != address(0), 'T:4');\\n\\n        // stores the proof before deleting the nugg\\n        uint256 proof = proofOf(tokenId);\\n\\n        uint96 ethOwed = subStakedShare(tokenId);\\n\\n        INuggftV1Migrator(migrator).nuggftMigrateFromV1{value: ethOwed}(tokenId, proof, msg.sender);\\n\\n        emit MigrateV1Sent(migrator, tokenId, proof, msg.sender, ethOwed);\\n    }\\n\\n    /// @notice removes a staked share from the contract,\\n    /// @dev this is the only way to remove a share\\n    /// @dev caculcates but does not handle dealing the eth - which is handled by the two helpers above\\n    /// @dev ensures the user is the owner of the nugg\\n    /// @param tokenId the id of the nugg being unstaked\\n    /// @return ethOwed -> the amount of eth owed to the unstaking user - equivilent to \\\"ethPerShare\\\"\\n    function subStakedShare(uint160 tokenId) internal returns (uint96 ethOwed) {\\n        // reverts if token does not exist\\n        address owner = _ownerOf(tokenId);\\n\\n        require(_getApproved(tokenId) == address(this) && owner == msg.sender, 'T:3');\\n\\n        uint256 cache = stake;\\n\\n        // hanles all logic not related to staking the nugg\\n        delete owners[tokenId];\\n        delete approvals[tokenId];\\n\\n        delete swaps[tokenId];\\n        delete loans[tokenId];\\n        delete proofs[tokenId];\\n        delete resolvers[tokenId];\\n\\n        emitTransferEvent(owner, address(0), tokenId);\\n\\n        ethOwed = calculateEthPerShare(cache);\\n\\n        /// TODO - test migration\\n        assert(cache.shares() >= 1);\\n        assert(cache.staked() >= ethOwed);\\n\\n        cache = cache.subShares(1);\\n        cache = cache.subStaked(ethOwed);\\n\\n        stake = cache;\\n    }\\n}\\n\",\"keccak256\":\"0x729f92c15d84aa98efffd148dae0ef116257b031dbb588f62af355bbaf688198\",\"license\":\"MIT\"},\"src/core/NuggftV1Dotnugg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Storage} from '../interfaces/dotnuggv1/IDotnuggV1Storage.sol';\\n\\nimport {IDotnuggV1Metadata} from '../interfaces/dotnuggv1/IDotnuggV1Metadata.sol';\\nimport {IDotnuggV1Resolver} from '../interfaces/dotnuggv1/IDotnuggV1Resolver.sol';\\nimport {IDotnuggV1Implementer} from '../interfaces/dotnuggv1/IDotnuggV1Implementer.sol';\\nimport {IDotnuggV1ImplementerMetadata} from '../interfaces/dotnuggv1/IDotnuggV1ImplementerMetadata.sol';\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\nimport {INuggftV1Dotnugg} from '../interfaces/nuggftv1/INuggftV1Dotnugg.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {NuggftV1Token} from './NuggftV1Token.sol';\\n\\nimport {Trust} from './Trust.sol';\\n\\nabstract contract NuggftV1Dotnugg is INuggftV1Dotnugg, NuggftV1Token, Trust {\\n    using SafeCastLib for uint256;\\n    using SafeCastLib for uint16;\\n\\n    /// @inheritdoc IDotnuggV1ImplementerMetadata\\n    address public override dotnuggV1Processor;\\n\\n    /// @inheritdoc IDotnuggV1ImplementerMetadata\\n    uint8 public override dotnuggV1DefaultWidth = 45;\\n\\n    /// @inheritdoc IDotnuggV1ImplementerMetadata\\n    uint8 public override dotnuggV1DefaultZoom = 10;\\n\\n    mapping(uint256 => address) resolvers;\\n\\n    uint256 internal featureLengths;\\n\\n    constructor(address _dotnuggV1Processor) {\\n        require(_dotnuggV1Processor != address(0), 'F:4');\\n        dotnuggV1Processor = _dotnuggV1Processor;\\n    }\\n\\n    /// @inheritdoc IDotnuggV1Implementer\\n    function dotnuggV1StoreFiles(uint256[][] calldata data, uint8 feature) external override requiresTrust {\\n        uint8 len = IDotnuggV1Storage(dotnuggV1Processor).store(feature, data);\\n\\n        uint256 cache = featureLengths;\\n\\n        uint256 newLen = _lengthOf(cache, feature) + len;\\n\\n        featureLengths = ShiftLib.set(cache, 8, feature * 8, newLen);\\n    }\\n\\n    function lengthOf(uint8 feature) external view returns (uint8) {\\n        return _lengthOf(featureLengths, feature);\\n    }\\n\\n    function _lengthOf(uint256 cache, uint8 feature) internal pure returns (uint8) {\\n        return uint8(ShiftLib.get(cache, 8, feature * 8));\\n    }\\n\\n    /// @inheritdoc IDotnuggV1ImplementerMetadata\\n    function setDotnuggV1Resolver(uint256 tokenId, address to) public virtual override {\\n        require(_isOperatorForOwner(msg.sender, tokenId.safe160()), 'F:5');\\n\\n        resolvers[tokenId] = to;\\n\\n        emit DotnuggV1ResolverUpdated(tokenId, to);\\n    }\\n\\n    /// @inheritdoc IDotnuggV1ImplementerMetadata\\n    function dotnuggV1ResolverOf(uint256 tokenId) public view virtual override returns (address) {\\n        return resolvers[tokenId.safe160()];\\n    }\\n\\n    function hasResolver(uint160 tokenId) internal view returns (bool) {\\n        return resolvers[tokenId] != address(0);\\n    }\\n}\\n\",\"keccak256\":\"0xace09faa9621688df72a56ba621bc170a8e5fbac8d45340560172bb44ece52cc\",\"license\":\"MIT\"},\"src/core/NuggftV1Epoch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggftV1Epoch} from '../interfaces/nuggftv1/INuggftV1Epoch.sol';\\n\\nabstract contract NuggftV1Epoch is INuggftV1Epoch {\\n    uint256 public immutable genesis;\\n\\n    uint32 constant INTERVAL = 69;\\n    uint32 constant OFFSET = 3000;\\n\\n    constructor() {\\n        genesis = block.number;\\n        emit Genesis(block.number, INTERVAL, OFFSET);\\n    }\\n\\n    /// @inheritdoc INuggftV1Epoch\\n    function epoch() public view override returns (uint32 res) {\\n        res = toEpoch(block.number);\\n    }\\n\\n    function toStartBlock(uint32 _epoch) internal view returns (uint256 res) {\\n        res = ((_epoch - OFFSET) * INTERVAL) + genesis;\\n    }\\n\\n    function toEpoch(uint256 blocknum) internal view returns (uint32 res) {\\n        res = (uint32(blocknum - genesis) / INTERVAL) + OFFSET;\\n    }\\n\\n    function toEndBlock(uint32 _epoch) internal view returns (uint256 res) {\\n        res = toStartBlock(_epoch + 1) - 1;\\n    }\\n\\n    function calculateSeed() internal view returns (uint256 res, uint32 _epoch) {\\n        _epoch = epoch();\\n        res = calculateSeedCore(_epoch);\\n    }\\n\\n    function tryCalculateSeed(uint32 _epoch) internal view returns (uint256 res) {\\n        res = calculateSeedCore(_epoch);\\n    }\\n\\n    /// @notice gets unique base based on given epoch and converts encoded bytes to object that can be merged\\n    /// Note: by using the block hash no one knows what a nugg will look like before it's epoch.\\n    /// We considered making this harder to manipulate, but we decided that if someone were able to\\n    /// pull it off and make their own custom nugg, that would be really fucking cool.\\n    function calculateSeedCore(uint32 _epoch) internal view returns (uint256 res) {\\n        uint256 startblock = toStartBlock(_epoch);\\n        bytes32 bhash = blockhash(startblock - 2);\\n        require(bhash != 0, 'E:0');\\n        res = uint256(keccak256(abi.encodePacked(bhash, _epoch, address(this))));\\n    }\\n}\\n\",\"keccak256\":\"0x3719deee5088e266acff7e807369c4426d21f3f5f7bc3b4f6426f246d82b4efc\",\"license\":\"MIT\"},\"src/core/NuggftV1Loan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggftV1Loan} from '../interfaces/nuggftv1/INuggftV1Loan.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {NuggftV1AgentType} from '../types/NuggftV1AgentType.sol';\\n\\nimport {NuggftV1Swap} from './NuggftV1Swap.sol';\\n\\nabstract contract NuggftV1Loan is INuggftV1Loan, NuggftV1Swap {\\n    using SafeCastLib for uint256;\\n\\n    using NuggftV1AgentType for uint256;\\n\\n    mapping(uint160 => uint256) loans;\\n\\n    uint32 constant LIQUIDATION_PERIOD = 1000;\\n\\n    uint96 constant REBALANCE_FEE_BPS = 100;\\n\\n    /// @inheritdoc INuggftV1Loan\\n    function loan(uint160 tokenId) external override {\\n        address sender = _ownerOf(tokenId);\\n\\n        require(_isOperatorFor(msg.sender, sender), 'L:0');\\n\\n        (uint256 loanData, ) = NuggftV1AgentType.newAgentType(epoch(), sender, ethPerShare(), false);\\n\\n        loans[tokenId] = loanData; // starting swap data\\n\\n        // emit TakeLoan(tokenId, loanData.eth());\\n\\n        approvedTransferToSelf(tokenId);\\n\\n        SafeTransferLib.safeTransferETH(sender, loanData.eth());\\n    }\\n\\n    /// @inheritdoc INuggftV1Loan\\n    function payoff(uint160 tokenId) external payable override {\\n        (uint96 toPayoff, uint96 toRebalance, uint96 owed, uint96 epochDue, address loaner) = loanInfo(tokenId);\\n\\n        assert(address(this) == _ownerOf(tokenId)); // should always be true - should revert in loanInfo\\n\\n        delete loans[tokenId];\\n\\n        address benif = msg.sender;\\n\\n        if (epochDue >= epoch()) {\\n            // if liquidaton deadline has not passed - check perrmission\\n            require(_isOperatorFor(msg.sender, loaner), 'L:1');\\n            benif = loaner;\\n        }\\n\\n        uint96 value = msg.value.safe96();\\n\\n        require(toPayoff <= value, 'L:2');\\n\\n        uint96 overpayment = value - toPayoff;\\n\\n        // uint96 owed = earned + overpayment;\\n\\n        // emit Rebalance(tokenId, toRebalance, earned);\\n\\n        // emit Payoff(tokenId, benif, toPayoff);\\n\\n        addStakedEth(toRebalance + overpayment);\\n\\n        SafeTransferLib.safeTransferETH(benif, owed);\\n\\n        checkedTransferFromSelf(benif, tokenId);\\n    }\\n\\n    /// @inheritdoc INuggftV1Loan\\n    function rebalance(uint160 tokenId) external payable override {\\n        (, uint96 toRebalance, uint96 earned, , address loaner) = loanInfo(tokenId);\\n\\n        assert(address(this) == _ownerOf(tokenId)); // should always be true - should revert in loanInfo\\n\\n        require(toRebalance <= msg.value, 'L:3');\\n\\n        // uint96 overpayment = msg.value.safe96() - toRebalance;\\n\\n        // uint96 owed = earned;\\n\\n        // must be done before new principal is calculated\\n        addStakedEth(msg.value.safe96());\\n\\n        (uint256 res, uint96 dust) = NuggftV1AgentType.newAgentType(epoch(), loaner, ethPerShare(), false);\\n\\n        loans[tokenId] = res;\\n\\n        // emit Rebalance(tokenId, toRebalance, earned);\\n\\n        SafeTransferLib.safeTransferETH(loaner, earned + dust);\\n    }\\n\\n    /// @inheritdoc INuggftV1Loan\\n    function valueForPayoff(uint160 tokenId) external view returns (uint96 res) {\\n        (res, , , , ) = loanInfo(tokenId);\\n    }\\n\\n    /// @inheritdoc INuggftV1Loan\\n    function valueForRebalance(uint160 tokenId) external view returns (uint96 res) {\\n        (, res, , , ) = loanInfo(tokenId);\\n    }\\n\\n    /// @inheritdoc INuggftV1Loan\\n    function loanInfo(uint160 tokenId)\\n        public\\n        view\\n        override\\n        returns (\\n            uint96 toPayoff,\\n            uint96 toRebalance,\\n            uint96 earned,\\n            uint32 epochDue,\\n            address loaner\\n        )\\n    {\\n        uint256 cache = loans[tokenId];\\n\\n        loaner = cache.account();\\n\\n        require(loaner != address(0), 'L:4');\\n\\n        // the amount of eth currently loanded by user\\n        uint96 curr = cache.eth();\\n\\n        uint96 activeEps = ethPerShare();\\n\\n        toRebalance = ((curr * REBALANCE_FEE_BPS) / 10000);\\n\\n        toPayoff = curr + toRebalance;\\n\\n        // value earned while lone was taken out\\n        earned = toPayoff >= activeEps ? 0 : activeEps - toPayoff;\\n\\n        epochDue = cache.epoch() + LIQUIDATION_PERIOD;\\n    }\\n}\\n\",\"keccak256\":\"0xd95acb6318f9ce71a0d537d231b49c88df9263217dd5c0f3e55111a3ee0e2b48\",\"license\":\"MIT\"},\"src/core/NuggftV1Proof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggftV1Proof} from '../interfaces/nuggftv1/INuggftV1Proof.sol';\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport {NuggftV1Dotnugg} from './NuggftV1Dotnugg.sol';\\n\\nimport {NuggftV1ProofType} from '../types/NuggftV1ProofType.sol';\\n\\nabstract contract NuggftV1Proof is INuggftV1Proof, NuggftV1Dotnugg {\\n    using SafeCastLib for uint160;\\n    using SafeCastLib for uint256;\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                state\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n    struct Settings {\\n        mapping(uint256 => uint256) anchorOverrides;\\n        // uint8 displayLen; // default 4\\n    }\\n\\n    mapping(uint160 => uint256) proofs;\\n\\n    mapping(uint160 => Settings) settings;\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                           external functions\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @inheritdoc INuggftV1Proof\\n    function rotate(\\n        uint160 tokenId,\\n        uint8 index0,\\n        uint8 index1\\n    ) external override {\\n        ensureOperatorForOwner(msg.sender, tokenId);\\n\\n        uint256 working = proofOf(tokenId);\\n\\n        working = NuggftV1ProofType.swapIndexs(working, index0, index1);\\n\\n        proofs[tokenId] = working;\\n    }\\n\\n    /// @inheritdoc INuggftV1Proof\\n    function anchor(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        uint256 x,\\n        uint256 y\\n    ) external override {\\n        require(x < 64 && y < 64, 'UNTEESTED:1');\\n\\n        ensureOperatorForOwner(msg.sender, tokenId);\\n\\n        settings[tokenId].anchorOverrides[itemId] = x | (y << 6);\\n    }\\n\\n    /// @inheritdoc INuggftV1Proof\\n    function proofOf(uint160 tokenId) public view virtual override returns (uint256) {\\n        if (proofs[tokenId] != 0) return proofs[tokenId];\\n\\n        (uint256 seed, uint256 epoch, uint256 proof) = pendingProof();\\n\\n        if (epoch == tokenId && seed != 0) return proof;\\n        else return 0;\\n    }\\n\\n    /// @inheritdoc INuggftV1Proof\\n    function proofToDotnuggMetadata(uint160 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint256 proof,\\n            uint8[] memory defaultIds,\\n            uint8[] memory overxs,\\n            uint8[] memory overys\\n        )\\n    {\\n        proof = proofOf(tokenId);\\n\\n        if (proof == 0) {\\n            proof = initFromSeed(tryCalculateSeed(tokenId.safe32()));\\n            require(proof != 0, 'P:L');\\n        }\\n\\n        defaultIds = new uint8[](8);\\n        overxs = new uint8[](8);\\n        overys = new uint8[](8);\\n\\n        defaultIds[0] = uint8(proof & ShiftLib.mask(3));\\n\\n        for (uint8 i = 0; i < 7; i++) {\\n            uint16 item = NuggftV1ProofType.getIndex(proof, i);\\n\\n            if (item == 0) continue;\\n\\n            (uint8 feature, uint8 pos) = NuggftV1ProofType.parseItemId(item);\\n\\n            if (defaultIds[feature] == 0) {\\n                uint256 overrides = settings[tokenId].anchorOverrides[item];\\n                overys[feature] = uint8(overrides >> 6);\\n                overxs[feature] = uint8(overrides & ShiftLib.mask(6));\\n\\n                defaultIds[feature] = pos;\\n            }\\n        }\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                             internal functions\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function exists(uint160 tokenId) internal view override returns (bool) {\\n        return proofOf(tokenId) != 0;\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            SWAP MANAGEMENT\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function addItem(uint160 tokenId, uint16 itemId) internal {\\n        ensureOperatorForOwner(msg.sender, tokenId);\\n\\n        uint256 working = proofOf(tokenId);\\n\\n        working = NuggftV1ProofType.setIndex(working, NuggftV1ProofType.search(working, 0), itemId);\\n\\n        proofs[tokenId] = working;\\n    }\\n\\n    function removeItem(uint160 tokenId, uint16 itemId) internal {\\n        ensureOperatorForOwner(msg.sender, tokenId);\\n\\n        uint256 working = proofOf(tokenId);\\n\\n        working = NuggftV1ProofType.setIndex(working, NuggftV1ProofType.search(working, itemId), 0);\\n\\n        proofs[tokenId] = working;\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            INITIALIZATION\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function setProof(uint160 tokenId) internal {\\n        require(proofs[tokenId] == 0, 'P:5');\\n\\n        uint256 randomEnoughSeed = uint256(keccak256(abi.encodePacked(hex'420690', tokenId, blockhash(block.number - 1))));\\n\\n        uint256 res = initFromSeed(randomEnoughSeed);\\n\\n        proofs[tokenId] = res;\\n    }\\n\\n    function setProofFromEpoch(uint160 tokenId) internal {\\n        require(proofs[tokenId] == 0, 'P:6');\\n\\n        (, uint256 epoch, uint256 res) = pendingProof();\\n\\n        require(epoch == tokenId, 'P:7');\\n\\n        proofs[tokenId] = res;\\n    }\\n\\n    // TODO TO BE TESTED\\n    function initFromSeed(uint256 seed) internal view returns (uint256 res) {\\n        require(seed != 0, 'P:8');\\n\\n        uint256 lengths = featureLengths;\\n\\n        res |= ((safeMod(ShiftLib.get(seed, 8, 0), _lengthOf(lengths, 0))) + 1);\\n        res |= ((1 << 8) | ((safeMod(ShiftLib.get(seed, 8, 8), _lengthOf(lengths, 1))) + 1)) << 3;\\n        res |= ((2 << 8) | ((safeMod(ShiftLib.get(seed, 8, 16), _lengthOf(lengths, 2))) + 1)) << (3 + 11);\\n\\n        uint256 selA = ShiftLib.get(seed, 8, 24);\\n\\n        uint256 valA = ShiftLib.get(seed, 8, 32);\\n\\n        uint256 selB = ShiftLib.get(seed, 8, 24);\\n\\n        uint256 valB = ShiftLib.get(seed, 8, 40);\\n\\n        if (selA < 128) valA = (3 << 8) | ((safeMod(valA, _lengthOf(lengths, 3))) + 1);\\n        else valA = (4 << 8) | ((safeMod(valA, _lengthOf(lengths, 4))) + 1);\\n\\n        res |= (valA) << (3 + 22);\\n\\n        if (selB < 30) valB = (5 << 8) | ((safeMod(valB, _lengthOf(lengths, 5))) + 1);\\n        else if (selB < 55) valB = (6 << 8) | ((safeMod(valB, _lengthOf(lengths, 6))) + 1);\\n        else if (selB < 75) valB = (7 << 8) | ((safeMod(valB, _lengthOf(lengths, 7))) + 1);\\n        else {\\n            return res;\\n        }\\n\\n        res |= (valB) << (3 + 33);\\n    }\\n\\n    function safeMod(uint256 value, uint8 modder) internal pure returns (uint256) {\\n        require(modder != 0, 'P:9');\\n        return value.safe8() % modder;\\n    }\\n\\n    function pendingProof()\\n        internal\\n        view\\n        returns (\\n            uint256 seed,\\n            uint256 epoch,\\n            uint256 proof\\n        )\\n    {\\n        (seed, epoch) = calculateSeed();\\n\\n        proof = initFromSeed(seed);\\n    }\\n}\\n\",\"keccak256\":\"0x58770b20c8ddef98bc823789d7506205b91adb7ba00fe392f39298aa14de1d33\",\"license\":\"MIT\"},\"src/core/NuggftV1Stake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {NuggftV1Proof} from './NuggftV1Proof.sol';\\n\\nimport {INuggftV1Migrator} from '../interfaces/nuggftv1/INuggftV1Migrator.sol';\\nimport {INuggftV1Stake} from '../interfaces/nuggftv1/INuggftV1Stake.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {NuggftV1StakeType} from '../types/NuggftV1StakeType.sol';\\n\\nabstract contract NuggftV1Stake is INuggftV1Stake, NuggftV1Proof {\\n    using SafeCastLib for uint256;\\n    using NuggftV1StakeType for uint256;\\n\\n    address public migrator;\\n\\n    uint256 internal stake;\\n\\n    uint96 constant PROTOCOL_FEE_BPS = 1000;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TRUSTED\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function extractProtocolEth() external requiresTrust {\\n        uint256 cache = stake;\\n\\n        emit ProtocolEthExtracted(cache.proto());\\n\\n        SafeTransferLib.safeTransferETH(msg.sender, cache.proto());\\n\\n        stake = cache.proto(0);\\n    }\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function setMigrator(address _migrator) external requiresTrust {\\n        migrator = _migrator;\\n\\n        emit MigratorV1Updated(_migrator);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                VIEW\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function ethPerShare() public view override returns (uint96 res) {\\n        res = calculateEthPerShare(stake);\\n    }\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function minSharePrice() public view override returns (uint96 res) {\\n        (res, , , ) = minSharePriceBreakdown(stake);\\n    }\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function stakedShares() public view override returns (uint64 res) {\\n        res = stake.shares();\\n    }\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function stakedEth() public view override returns (uint96 res) {\\n        res = stake.staked();\\n    }\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function protocolEth() public view override returns (uint96 res) {\\n        res = stake.proto();\\n    }\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function totalSupply() public view override returns (uint256 res) {\\n        res = stakedShares();\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            ADD STAKE & SHARES\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @notice handles the adding of shares - ensures enough eth is being added\\n    /// @dev this is the only way to add shares - the logic here ensures that \\\"ethPerShare\\\" can never decrease\\n    function addStakedShareFromMsgValue() internal {\\n        uint96 value = msg.value.safe96();\\n\\n        uint256 cache = stake;\\n\\n        (uint96 totalPrice, , uint96 protocolFee, ) = minSharePriceBreakdown(cache);\\n\\n        // logically unnessesary - to help front end\\n        require(value >= totalPrice, 'T:1'); // \\\"not enough eth to create share\\\"\\n\\n        uint96 overpay = value - totalPrice;\\n\\n        // the rest of the value gets added to stakedEth\\n        protocolFee += calculateProtocolFeeOf(overpay);\\n\\n        cache = cache.addShares(1);\\n        cache = cache.addStaked(value - protocolFee);\\n        cache = cache.addProto(protocolFee);\\n\\n        stake = cache;\\n\\n        // emit StakeEth(value - protocolFee, protocolFee);\\n    }\\n\\n    /// @notice handles isolated staking of eth\\n    /// @dev supply of eth goes up while supply of shares stays constant - increasing \\\"minSharePrice\\\"\\n    /// @param eth the amount of eth being staked - must be some portion of msg.value\\n    function addStakedEth(uint96 eth) internal {\\n        require(msg.value >= eth, 'T:2'); // \\\"value of tx too low\\\"\\n\\n        uint256 cache = stake;\\n\\n        uint96 protocolFee = calculateProtocolFeeOf(eth);\\n\\n        stake = cache.staked(cache.staked() + eth - protocolFee).proto(cache.proto() + protocolFee);\\n\\n        // emit StakeEth(eth - protocolFee, protocolFee);\\n    }\\n\\n    function calculateProtocolFeeOf(uint96 any) internal pure returns (uint96 res) {\\n        res = (any * PROTOCOL_FEE_BPS) / 10000;\\n    }\\n\\n    // @test manual\\n    function minSharePriceBreakdown(uint256 cache)\\n        internal\\n        pure\\n        returns (\\n            uint96 total,\\n            uint96 eps,\\n            uint96 protocolFee,\\n            uint96 premium\\n        )\\n    {\\n        eps = calculateEthPerShare(cache);\\n\\n        protocolFee = calculateProtocolFeeOf(eps);\\n\\n        premium = ((eps * cache.shares()) / 10000);\\n\\n        total = eps + protocolFee + premium;\\n    }\\n\\n    // @test manual\\n    function calculateEthPerShare(uint256 cache) internal pure returns (uint96 res) {\\n        res = cache.shares() == 0 ? 0 : cache.staked() / cache.shares();\\n    }\\n}\\n\",\"keccak256\":\"0x70864fbf1c47069801eee5ddb8771e12e8c8541548fe7836d3428221e622baba\",\"license\":\"MIT\"},\"src/core/NuggftV1Swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggftV1Swap} from '../interfaces/nuggftv1/INuggftV1Swap.sol';\\n\\nimport {NuggftV1Stake} from './NuggftV1Stake.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {NuggftV1AgentType} from '../types/NuggftV1AgentType.sol';\\n\\n/// @notice mechanism for trading of nuggs between users (and items between nuggs)\\n/// @dev Explain to a developer any extra details\\nabstract contract NuggftV1Swap is INuggftV1Swap, NuggftV1Stake {\\n    using SafeCastLib for uint256;\\n\\n    using NuggftV1AgentType for uint256;\\n\\n    struct Mapping {\\n        Storage self;\\n        mapping(uint16 => Storage) items;\\n    }\\n\\n    struct Storage {\\n        uint256 data;\\n        mapping(address => uint256) offers;\\n    }\\n\\n    struct Memory {\\n        uint256 swapData;\\n        uint256 offerData;\\n        uint32 activeEpoch;\\n        address sender;\\n    }\\n\\n    mapping(uint16 => uint256) protocolItems;\\n    mapping(uint160 => Mapping) swaps;\\n\\n    uint96 public constant MIN_OFFER = 10**13 * 50;\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                  delegate\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @inheritdoc INuggftV1Swap\\n    function delegate(address sender, uint160 tokenId) external payable override {\\n        require(_isOperatorFor(msg.sender, sender), 'S:0');\\n\\n        (Storage storage s, Memory memory m) = loadTokenSwap(tokenId, sender);\\n\\n        // make sure user is not the owner of swap\\n        // we do not know how much to give them when they call \\\"claim\\\" otherwise\\n\\n        if (m.activeEpoch == tokenId && m.swapData == 0) {\\n            // to ensure we at least have enough to increment the offer amount by 2%\\n            require(msg.value >= MIN_OFFER, 'S:1');\\n\\n            // we do not need this, could take tokenId out as an argument - but do not want to give users\\n            // the ability to accidently place an offer for nugg A and end up minting nugg B.\\n            assert(m.offerData == 0);\\n\\n            (s.data, ) = NuggftV1AgentType.newAgentType(m.activeEpoch, m.sender, msg.value.safe96(), false);\\n\\n            addStakedShareFromMsgValue();\\n\\n            setProofFromEpoch(tokenId);\\n\\n            emitTransferEvent(address(0), address(this), tokenId);\\n        } else {\\n            require(m.swapData != 0, 'S:4');\\n\\n            if (m.offerData != 0) {\\n                // forces user to claim previous swap before acting on this one\\n                // prevents owner from COMMITTING on their own swap - not offering\\n                require(m.offerData.epoch() >= m.activeEpoch, 'S:R');\\n\\n                require(!m.offerData.isOwner(), 'NOPE'); // always be caught by the require above\\n            }\\n\\n            // if the leader \\\"owns\\\" the swap, then it was initated by them - \\\"commit\\\" must be executed\\n            m.swapData.isOwner() ? commit(s, m) : offer(s, m);\\n        }\\n    }\\n\\n    /// @inheritdoc INuggftV1Swap\\n    function delegateItem(\\n        uint160 buyerTokenId,\\n        uint160 sellerTokenId,\\n        uint16 itemId\\n    ) external payable override {\\n        require(_isOperatorForOwner(msg.sender, buyerTokenId), 'S:6');\\n\\n        (Storage storage s, Memory memory m) = loadItemSwap(sellerTokenId, itemId, address(buyerTokenId));\\n\\n        require(m.swapData != 0, 'S:S');\\n\\n        if (m.offerData != 0) {\\n            // forces user to claim previous swap before acting on this one\\n            // prevents owner from COMMITTING on their own swap - not offering\\n            require(m.offerData.epoch() >= m.activeEpoch, 'S:7');\\n\\n            require(!m.offerData.isOwner(), 'NOPE'); // always be caught by the require above\\n        }\\n\\n        m.offerData == 0 && m.swapData.isOwner() ? commit(s, m) : offer(s, m);\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                  claim\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @inheritdoc INuggftV1Swap\\n    function claim(address sender, uint160 tokenId) external override {\\n        require(_isOperatorFor(msg.sender, sender), 'S:8');\\n\\n        (Storage storage s, Memory memory m) = loadTokenSwap(tokenId, sender);\\n\\n        delete s.offers[sender];\\n\\n        if (checkClaimerIsWinnerOrLoser(m)) {\\n            delete s.data;\\n\\n            checkedTransferFromSelf(sender, tokenId);\\n        } else {\\n            SafeTransferLib.safeTransferETH(sender, m.offerData.eth());\\n        }\\n    }\\n\\n    /// @inheritdoc INuggftV1Swap\\n    function claimItem(\\n        uint160 buyerTokenId,\\n        uint160 sellerTokenId,\\n        uint16 itemId\\n    ) external override {\\n        require(_isOperatorForOwner(msg.sender, buyerTokenId), 'S:9');\\n\\n        (Storage storage s, Memory memory m) = loadItemSwap(sellerTokenId, itemId, address(buyerTokenId));\\n\\n        delete s.offers[address(buyerTokenId)];\\n\\n        if (checkClaimerIsWinnerOrLoser(m)) {\\n            delete s.data;\\n\\n            require(protocolItems[itemId] > 0, 'P:3');\\n\\n            addItem(buyerTokenId, itemId);\\n\\n            protocolItems[itemId]--;\\n        } else {\\n            SafeTransferLib.safeTransferETH(_ownerOf(buyerTokenId), m.offerData.eth());\\n        }\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                  swap\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @inheritdoc INuggftV1Swap\\n    function swap(uint160 tokenId, uint96 floor) external override {\\n        address sender = _ownerOf(tokenId);\\n\\n        require(_isOperatorFor(msg.sender, sender), 'S:A');\\n\\n        require(floor >= ethPerShare(), 'S:B');\\n\\n        approvedTransferToSelf(tokenId);\\n\\n        (Storage storage s, Memory memory m) = loadTokenSwap(tokenId, sender);\\n\\n        // make sure swap does not exist - this logically should never happen\\n        require(m.swapData == 0, 'NOPE2');\\n\\n        // no need to check dust as no value is being transfered\\n        (s.data, ) = NuggftV1AgentType.newAgentType(0, sender, floor, true);\\n    }\\n\\n    /// @inheritdoc INuggftV1Swap\\n    function swapItem(\\n        uint160 sellerTokenId,\\n        uint16 itemId,\\n        uint96 floor\\n    ) external override {\\n        require(_isOperatorForOwner(msg.sender, sellerTokenId), 'S:C');\\n\\n        // will revert if they do not have the item\\n        removeItem(sellerTokenId, itemId);\\n\\n        protocolItems[itemId]++;\\n\\n        (Storage storage s, Memory memory m) = loadItemSwap(sellerTokenId, itemId, address(sellerTokenId));\\n\\n        // cannot sell two of the same item at same time\\n        require(m.swapData == 0, 'S:D');\\n\\n        (s.data, ) = NuggftV1AgentType.newAgentType(0, address(sellerTokenId), floor, true);\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                    view\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    // / @inheritdoc INuggftV1Swap\\n    function valueForDelegate(address sender, uint160 tokenId)\\n        external\\n        view\\n        override\\n        returns (\\n            bool canDelegate,\\n            uint96 nextSwapAmount,\\n            uint96 senderCurrentOffer\\n        )\\n    {\\n        canDelegate = true;\\n\\n        (, Memory memory m) = loadTokenSwap(tokenId, sender);\\n\\n        if (m.swapData == 0) {\\n            if (m.activeEpoch == tokenId) {\\n                // swap is minting\\n                nextSwapAmount = NuggftV1AgentType.compressEthRoundUp(minSharePrice());\\n            } else {\\n                // swap does not exist\\n                return (false, 0, 0);\\n            }\\n        } else {\\n            if (m.offerData.isOwner()) canDelegate = false;\\n\\n            senderCurrentOffer = m.offerData.eth();\\n\\n            nextSwapAmount = m.swapData.eth();\\n\\n            if (nextSwapAmount < ethPerShare()) {\\n                nextSwapAmount = ethPerShare();\\n            }\\n        }\\n\\n        if (nextSwapAmount == 0) {\\n            nextSwapAmount = MIN_OFFER;\\n        } else {\\n            nextSwapAmount = NuggftV1AgentType.addIncrement(nextSwapAmount);\\n        }\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                internal\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function commit(Storage storage s, Memory memory m) internal returns (uint96 newAmount) {\\n        require(msg.value >= ethPerShare(), 'S:5');\\n\\n        require(m.offerData == 0 && m.swapData != 0, 'NOPE3');\\n\\n        require(m.swapData.isOwner(), 'NOPE4');\\n\\n        // forces a user not to commit on their own swap\\n        // commented out as the logic is handled by S:R\\n        // require(!m.offerData.isOwner()(), 'S:3');\\n\\n        (uint256 newSwapData, uint96 increment, uint96 dust) = updateSwapDataWithEpoch(m.swapData, m.activeEpoch + 1, m.sender, 0);\\n\\n        s.data = newSwapData;\\n\\n        s.offers[m.swapData.account()] = m.swapData.isOwner(false).epoch(m.activeEpoch + 1);\\n\\n        addStakedEth(increment + dust);\\n\\n        return newSwapData.eth();\\n    }\\n\\n    function offer(Storage storage s, Memory memory m) internal returns (uint96 newAmount) {\\n        // make sure swap is still active\\n        require(m.activeEpoch <= m.swapData.epoch(), 'S:F');\\n\\n        if (m.swapData.account() != m.sender) s.offers[m.swapData.account()] = m.swapData;\\n\\n        (uint256 newSwapData, uint96 increment, uint96 dust) = updateSwapDataWithEpoch(\\n            m.swapData,\\n            m.swapData.epoch(),\\n            m.sender,\\n            m.offerData.eth()\\n        );\\n\\n        s.data = newSwapData;\\n\\n        addStakedEth(increment + dust);\\n\\n        return newSwapData.eth();\\n    }\\n\\n    function checkClaimerIsWinnerOrLoser(Memory memory m) internal pure returns (bool winner) {\\n        require(m.offerData != 0, 'S:E');\\n\\n        bool isOver = m.activeEpoch > m.swapData.epoch();\\n        bool isLeader = m.offerData.account() == m.swapData.account();\\n        bool isOwner = m.swapData.isOwner() && m.offerData.isOwner();\\n\\n        return isLeader && (isOwner || isOver);\\n    }\\n\\n    // @test  unit\\n    function updateSwapDataWithEpoch(\\n        uint256 prevSwapData,\\n        uint32 _epoch,\\n        address account,\\n        uint96 currUserOffer\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 res,\\n            uint96 increment,\\n            uint96 dust\\n        )\\n    {\\n        uint96 baseEth = prevSwapData.eth();\\n\\n        currUserOffer += msg.value.safe96();\\n\\n        require(NuggftV1AgentType.addIncrement(baseEth) <= currUserOffer, 'S:G');\\n\\n        (res, dust) = NuggftV1AgentType.newAgentType(_epoch, account, currUserOffer, false);\\n\\n        increment = currUserOffer - baseEth;\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TOKEN SWAP\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function loadTokenSwap(uint160 tokenId, address account) internal view returns (Storage storage s, Memory memory m) {\\n        s = swaps[tokenId].self;\\n        m = _load(s, account);\\n    }\\n\\n    function loadItemSwap(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        address account\\n    ) internal view returns (Storage storage s, Memory memory m) {\\n        s = swaps[tokenId].items[itemId];\\n        m = _load(s, account);\\n    }\\n\\n    function _load(Storage storage ptr, address account) private view returns (Memory memory m) {\\n        uint256 cache = ptr.data;\\n        m.swapData = cache;\\n        m.activeEpoch = epoch();\\n        m.sender = account;\\n\\n        if (account == cache.account()) {\\n            m.offerData = cache;\\n        } else {\\n            m.offerData = ptr.offers[account];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x59f301632ca0dad9e75e8a857182150bc3bab6033fa6d29f0d2080a07f7fb105\",\"license\":\"MIT\"},\"src/core/NuggftV1Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721} from '../interfaces/IERC721.sol';\\n\\nimport {INuggftV1Token} from '../interfaces/nuggftv1/INuggftV1Token.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport {NuggftV1Epoch} from './NuggftV1Epoch.sol';\\n\\n///\\n/// @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard\\n///\\nabstract contract NuggftV1Token is INuggftV1Token, NuggftV1Epoch {\\n    using SafeCastLib for uint256;\\n\\n    uint32 constant TRUSTED_MINT_TOKENS = 500;\\n    uint32 constant UNTRUSTED_MINT_TOKENS = 10000;\\n\\n    mapping(uint256 => address) owners;\\n    // mapping(address => uint256) balances;\\n    mapping(uint256 => address) approvals;\\n    mapping(address => mapping(address => bool)) operatorApprovals;\\n\\n    /// @inheritdoc IERC721\\n    function approve(address to, uint256 tokenId) public payable override {\\n        address owner = _ownerOf(tokenId.safe160());\\n\\n        require(_isOperatorFor(msg.sender, owner), 'G:1');\\n\\n        approvals[tokenId] = to;\\n\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) public override {\\n        // require(msg.sender != operator && operator == address(this), 'G:0');\\n\\n        operatorApprovals[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 tokenId) external view override returns (address) {\\n        return _ownerOf(tokenId.safe160());\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(uint256 tokenId) external view override returns (address) {\\n        return _getApproved(tokenId.safe160());\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(address owner, address operator) external view override returns (bool) {\\n        return _isOperatorFor(operator, owner);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                DISABLED\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function balanceOf(address) public pure override returns (uint256) {\\n        return 0;\\n    }\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) public payable override {\\n        revert();\\n    }\\n\\n    function safeTransferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) public payable override {\\n        revert();\\n    }\\n\\n    function safeTransferFrom(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public payable override {\\n        revert();\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                internal\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function _mintTo(address to, uint160 tokenId) internal {\\n        owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                view\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function exists(uint160 tokenId) internal view virtual returns (bool);\\n\\n    function _isOperatorFor(address operator, address owner) internal view returns (bool) {\\n        return owner == operator || operatorApprovals[owner][operator];\\n    }\\n\\n    function _isOperatorForOwner(address operator, uint160 tokenId) internal view returns (bool) {\\n        return _isOperatorFor(operator, _ownerOf(tokenId));\\n    }\\n\\n    function ensureOperatorForOwner(address operator, uint160 tokenId) internal view returns (address owner) {\\n        owner = _ownerOf(tokenId);\\n        require(_isOperatorFor(operator, owner), 'P:B');\\n    }\\n\\n    function _getApproved(uint160 tokenId) internal view returns (address) {\\n        require(exists(tokenId), 'T:9:1');\\n        return approvals[tokenId];\\n    }\\n\\n    function _ownerOf(uint160 tokenId) internal view returns (address owner) {\\n        require(exists(tokenId), 'T:9:2');\\n        owner = owners[tokenId];\\n        if (owner == address(0)) return address(this);\\n    }\\n\\n    function _isApprovedOrOwner(address spender, uint160 tokenId) internal view returns (bool) {\\n        address owner = _ownerOf(tokenId);\\n        return (spender == owner || _getApproved(tokenId) == spender || _isOperatorFor(owner, spender));\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TRANSFER\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function checkedTransferFromSelf(address to, uint160 tokenId) internal {\\n        require(_ownerOf(tokenId) == address(this), 'N:0');\\n\\n        owners[tokenId] = to;\\n\\n        emitTransferEvent(address(this), to, tokenId);\\n    }\\n\\n    function approvedTransferToSelf(uint160 tokenId) internal {\\n        require(_isOperatorForOwner(msg.sender, tokenId) && _getApproved(tokenId) == address(this), 'N:1');\\n\\n        delete owners[tokenId];\\n\\n        // Clear approvals from the previous owner\\n        delete approvals[tokenId];\\n\\n        emitTransferEvent(msg.sender, address(this), tokenId);\\n    }\\n\\n    function emitTransferEvent(\\n        address from,\\n        address to,\\n        uint160 tokenId\\n    ) internal {\\n        emit Transfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x7f528121c75b4e302b5a794c41151c0b8e868a24a22dc3439e2575bae6ec6305\",\"license\":\"MIT\"},\"src/core/Trust.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ITrust} from '../interfaces/ITrust.sol';\\n\\n/// @notice Ultra minimal authorization logic for smart contracts.\\n/// @author Inspired by Dappsys V2 (https://github.com/dapp-org/dappsys-v2/blob/main/src/auth.sol)\\nabstract contract Trust is ITrust {\\n    event UserTrustUpdated(address indexed user, bool trusted);\\n\\n    mapping(address => bool) public override isTrusted;\\n\\n    constructor(address initialUser) {\\n        isTrusted[initialUser] = true;\\n\\n        emit UserTrustUpdated(initialUser, true);\\n    }\\n\\n    function setIsTrusted(address user, bool trusted) public virtual requiresTrust {\\n        isTrusted[user] = trusted;\\n\\n        emit UserTrustUpdated(user, trusted);\\n    }\\n\\n    modifier requiresTrust() {\\n        _requiresTrust();\\n        _;\\n    }\\n\\n    function _requiresTrust() internal view {\\n        require(isTrusted[msg.sender], 'UNTRUSTED');\\n    }\\n}\\n\",\"keccak256\":\"0x7ba4088e160be1b59ed62ded76162823a4c1fd05b21a5aefbb20cfef9bd2222a\",\"license\":\"MIT\"},\"src/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\\n/// @title ERC-721 Non-Fungible Token Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 is IERC165 {\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\n    ///  may be created and assigned without emitting Transfer. At the time of\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when the approved address for an NFT is changed or\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\n    ///  When a Transfer event emits, this also indicates that the approved\\n    ///  address for that NFT (if any) is reset to none.\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\n    ///  The operator can manage all NFTs of the owner.\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n    /// @notice Count all NFTs assigned to an owner\\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\\n    ///  function throws for queries about the zero address.\\n    /// @param _owner An address for whom to query the balance\\n    /// @return The number of NFTs owned by `_owner`, possibly zero\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Find the owner of an NFT\\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\\n    ///  about them do throw.\\n    /// @param _tokenId The identifier for an NFT\\n    /// @return The address of the owner of the NFT\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n    ///  `onERC721Received` on `_to` and throws if the return value is not\\n    ///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes memory data\\n    ) external payable;\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev This works identically to the other function with an extra data parameter,\\n    ///  except this function just sets data to \\\"\\\".\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external payable;\\n\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n    ///  THEY MAY BE PERMANENTLY LOST\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external payable;\\n\\n    /// @notice Change or reaffirm the approved address for an NFT\\n    /// @dev The zero address indicates there is no approved address.\\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\n    ///  operator of the current owner.\\n    /// @param _approved The new approved NFT controller\\n    /// @param _tokenId The NFT to approve\\n    function approve(address _approved, uint256 _tokenId) external payable;\\n\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\n    ///  all of `msg.sender`'s assets\\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\\n    ///  multiple operators per owner.\\n    /// @param _operator Address to add to the set of authorized operators\\n    /// @param _approved True if the operator is approved, false to revoke approval\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /// @notice Get the approved address for a single NFT\\n    /// @dev Throws if `_tokenId` is not a valid NFT.\\n    /// @param _tokenId The NFT to find the approved address for\\n    /// @return The approved address for this NFT, or the zero address if there is none\\n    function getApproved(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Query if an address is an authorized operator for another address\\n    /// @param _owner The address that owns the NFTs\\n    /// @param _operator The address that acts on behalf of the owner\\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata is IERC721 {\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\n    function name() external view returns (string memory _name);\\n\\n    /// @notice An abbreviated name for NFTs in this contract\\n    function symbol() external view returns (string memory _symbol);\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe2d5f8f2ad6b005a82fe8370c7685b7c20d5d23788d7efd83e6ec347dbe48d87\",\"license\":\"MIT\"},\"src/interfaces/ITrust.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITrust {\\n    event TrustUpdated(address indexed user, bool trust);\\n\\n    function setIsTrusted(address user, bool trust) external;\\n\\n    function isTrusted(address user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8301ef0061614b920c6a6d1869c464b696105dc8881fb6e330296a6d7d60dc02\",\"license\":\"MIT\"},\"src/interfaces/dotnuggv1/IDotnuggV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata} from './IDotnuggV1Metadata.sol';\\nimport {IDotnuggV1Resolver} from './IDotnuggV1Resolver.sol';\\nimport {IDotnuggV1Storage} from './IDotnuggV1Storage.sol';\\n\\ninterface IDotnuggV1 is IDotnuggV1Resolver, IDotnuggV1Storage {\\n    function process(\\n        address implementer,\\n        uint256 tokenId,\\n        uint8 width\\n    ) external view returns (uint256[] memory file, IDotnuggV1Metadata.Memory memory dat);\\n\\n    function dotnuggToBytes(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (address resolvedBy, bytes memory res);\\n\\n    function dotnuggToRaw(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (address resolvedBy, uint256[] memory res);\\n\\n    function dotnuggToMetadata(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (address resolvedBy, IDotnuggV1Metadata.Memory memory res);\\n\\n    function dotnuggToString(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (address resolvedBy, string memory res);\\n\\n    function dotnuggToUri(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (address resolvedBy, string memory res);\\n}\\n\",\"keccak256\":\"0x237c7552be8c2a1e942e3e67008405c5b6a39cfaffbffe9d6c01a37d81c14be7\",\"license\":\"MIT\"},\"src/interfaces/dotnuggv1/IDotnuggV1Implementer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata} from './IDotnuggV1Metadata.sol';\\n\\ninterface IDotnuggV1Implementer {\\n    function dotnuggV1Callback(uint256 tokenId) external view returns (IDotnuggV1Metadata.Memory memory data);\\n\\n    function dotnuggV1StoreFiles(uint256[][] calldata data, uint8 feature) external;\\n}\\n\",\"keccak256\":\"0x10c073976228eeba301841b321ba13c81d82f9dfdede02228b42820306fcbe9a\",\"license\":\"MIT\"},\"src/interfaces/dotnuggv1/IDotnuggV1ImplementerMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IDotnuggV1ImplementerMetadata {\\n    event DotnuggV1ResolverUpdated(uint256 tokenId, address to);\\n\\n    function setDotnuggV1Resolver(uint256 tokenId, address to) external;\\n\\n    function dotnuggV1ResolverOf(uint256 tokenId) external view returns (address resolver);\\n\\n    function dotnuggV1Processor() external returns (address);\\n\\n    function dotnuggV1DefaultWidth() external returns (uint8);\\n\\n    function dotnuggV1DefaultZoom() external returns (uint8);\\n}\\n\",\"keccak256\":\"0x87b58826daefab43ffe388e5fca78d0e2b2f04e876f63759ea4e5b200afc7f5b\",\"license\":\"MIT\"},\"src/interfaces/dotnuggv1/IDotnuggV1Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IDotnuggV1Metadata {\\n    struct Memory {\\n        uint256 version;\\n        uint256 renderedAt;\\n        string name;\\n        string desc;\\n        address owner;\\n        uint256 tokenId;\\n        uint8[] ids;\\n        uint8[] xovers;\\n        uint8[] yovers;\\n        string[] labels;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0x3b623a767c633838703eb2cd59602e5e55ac3a7d75c267882d4bed714dcf5824\",\"license\":\"MIT\"},\"src/interfaces/dotnuggv1/IDotnuggV1Resolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata} from './IDotnuggV1Metadata.sol';\\n\\ninterface IDotnuggV1Resolver {\\n    function resolveBytes(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) external view returns (bytes memory res);\\n\\n    function resolveRaw(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) external view returns (uint256[] memory res);\\n\\n    function resolveMetadata(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) external view returns (IDotnuggV1Metadata.Memory memory res);\\n\\n    function resolveString(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) external view returns (string memory res);\\n\\n    function resolveUri(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) external view returns (string memory res);\\n}\\n\",\"keccak256\":\"0x816035c81399e79c031f6f65ff57cca1b488c0b707eb8b0429d501bd9fb1dbf4\",\"license\":\"MIT\"},\"src/interfaces/dotnuggv1/IDotnuggV1Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IDotnuggV1Storage {\\n    function stored(address implementer, uint8 feature) external view returns (uint8);\\n\\n    function store(uint8 feature, uint256[][] calldata data) external returns (uint8 amount);\\n\\n    function unsafeBulkStore(uint256[][][] calldata data) external;\\n}\\n\",\"keccak256\":\"0xefb2220d184cd420e5b9cfcb7812dc4d309da7f35c499224bf4d401620f7ee65\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggftV1Token} from './INuggftV1Token.sol';\\nimport {INuggftV1Stake} from './INuggftV1Stake.sol';\\nimport {INuggftV1Proof} from './INuggftV1Proof.sol';\\nimport {INuggftV1Dotnugg} from './INuggftV1Dotnugg.sol';\\nimport {INuggftV1Swap} from './INuggftV1Swap.sol';\\nimport {INuggftV1Loan} from './INuggftV1Loan.sol';\\nimport {INuggftV1Epoch} from './INuggftV1Epoch.sol';\\n\\nimport {IERC721Metadata} from '../IERC721.sol';\\n\\ninterface INuggftV1 is\\n    IERC721Metadata,\\n    INuggftV1Token,\\n    INuggftV1Stake,\\n    INuggftV1Proof,\\n    INuggftV1Dotnugg,\\n    INuggftV1Swap,\\n    INuggftV1Loan,\\n    INuggftV1Epoch\\n{}\\n\",\"keccak256\":\"0xc9fcd03f3fc8de3ac97bca0d64c7cbdcddb48d464789a0ba1cf7b72b4634c2a4\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Dotnugg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Implementer} from '../dotnuggv1/IDotnuggV1Implementer.sol';\\nimport {IDotnuggV1ImplementerMetadata} from '../dotnuggv1/IDotnuggV1ImplementerMetadata.sol';\\n\\ninterface INuggftV1Dotnugg is IDotnuggV1Implementer, IDotnuggV1ImplementerMetadata {}\\n\",\"keccak256\":\"0xb91cda40f8d4c12dc9dbdb113c3cce234fd27e8dc640330f5a930f51d1b910d7\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Epoch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Epoch {\\n    /// @notice Explain to an end user what this does\\n    /// @dev Explain to a developer any extra details\\n    event Genesis(uint256 blocknum, uint32 interval, uint32 offset);\\n\\n    function epoch() external view returns (uint32 res);\\n}\\n\",\"keccak256\":\"0x504d60cddf03de5e1f3ed4bd2dd6f23a00fbe7b9ed391723478a29eecceada6b\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Loan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Loan {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    // event TakeLoan(uint160 tokenId, uint96 principal);\\n    // event Payoff(uint160 tokenId, address account, uint96 payoffAmount);\\n    // event Rebalance(uint160 tokenId, uint96 fee, uint96 earned);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function rebalance(uint160 tokenId) external payable;\\n\\n    function loan(uint160 tokenId) external;\\n\\n    function payoff(uint160 tokenId) external payable;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @notice for a nugg's active loan: calculates the current min eth a user must send to payoff or rebalance\\n    /// @dev contract ->\\n    /// @dev frontend -> used to set the amount of eth for user\\n    /// @param tokenId the token who's current loan to check\\n    /// @return toPayoff ->  the current amount loaned out, plus the final rebalance fee\\n    /// @return toRebalance ->  the fee a user must pay to rebalance (and extend) the loan on their nugg\\n    /// @return earned -> the amount of eth the minSharePrice has increased since loan was last rebalanced\\n    /// @return epochDue -> the final epoch a user is safe from liquidation (inclusive)\\n    /// @return loaner -> the user responsable for the loan\\n    function loanInfo(uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 toPayoff,\\n            uint96 toRebalance,\\n            uint96 earned,\\n            uint32 epochDue,\\n            address loaner\\n        );\\n\\n    /// @notice \\\"toPayoff\\\" value from \\\"loanInfo\\\"\\n    /// @dev should be used to tell user how much eth to send for payoff\\n    function valueForPayoff(uint160 tokenId) external view returns (uint96 res);\\n\\n    /// @notice \\\"toRebalance\\\" value from \\\"loanInfo\\\"\\n    /// @dev should be used to tell user how much eth to send for rebalance\\n    function valueForRebalance(uint160 tokenId) external view returns (uint96 res);\\n}\\n\",\"keccak256\":\"0x565779b2a5c4b39587b4a0dd9121b811bc4d7158b60160a81060cde046bc4712\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Migrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Migrator {\\n    event MigrateV1Accepted(address v1, uint160 tokenId, uint256 proof, address owner, uint96 eth);\\n\\n    function nuggftMigrateFromV1(\\n        uint160 tokenId,\\n        uint256 proof,\\n        address owner\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x4d29c605f2565daa86ea16b75ba13d5385c373aac9121aef4df42d4e3e77b6aa\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Proof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Proof {\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                             STATE CHANGING\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function rotate(\\n        uint160 tokenId,\\n        uint8 index0,\\n        uint8 index1\\n    ) external;\\n\\n    function anchor(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        uint256 x,\\n        uint256 y\\n    ) external;\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                               VIEW FUNCTIONS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function proofOf(uint160 tokenId) external view returns (uint256);\\n\\n    function proofToDotnuggMetadata(uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            uint256 proof,\\n            uint8[] memory defaultIds,\\n            uint8[] memory overxs,\\n            uint8[] memory overys\\n        );\\n}\\n\",\"keccak256\":\"0xa8982b8892625d65e2b82dd098214186522b14942fb17616d55f90ba927e40d4\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Stake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Stake {\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    event ProtocolEthExtracted(uint96 eth);\\n    event MigratorV1Updated(address migrator);\\n    event MigrateV1Sent(address v2, uint160 tokenId, uint256 proof, address owner, uint96 eth);\\n    event Burn(uint160 tokenId, address owner, uint96 ethOwed);\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function migrate(uint160 tokenId) external;\\n\\n    /// @notice burns a nugg from existance, dealing the eth worth of that share to the user\\n    /// @dev should only be called directly\\n    /// @param tokenId the id of the nugg being burned\\n    function burn(uint160 tokenId) external;\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @notice returns the minimum eth that must be added to create a new share\\n    /// @dev premium here is used to push against dillution of supply through ensuring the price always increases\\n    /// @dev used by the front end\\n    /// @return res -> premium + protcolFee + ethPerShare\\n    function minSharePrice() external view returns (uint96 res);\\n\\n    /// @notice returns the amount of eth extractable by protocol\\n    /// @dev this will be\\n    /// @return res -> (PROTOCOL_FEE_BPS * [all eth staked] / 10000) - [all previously extracted eth]\\n    function protocolEth() external view returns (uint96);\\n\\n    /// @notice returns the total number of staked shares held by the contract\\n    /// @dev this is equivilent to the amount of nuggs in existance\\n    function stakedShares() external view returns (uint64);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice returns the total amount of staked eth held by the contract\\n    /// @dev can be used as the market-cap or tvl of all nuggft v1\\n    /// @dev not equivilent to the balance of eth the contract holds, which also hs protocolEth and\\n    /// unclaimed eth from unsuccessful swaps\\n    function stakedEth() external view returns (uint96);\\n\\n    /// @notice returns the total \\\"ethPerShare\\\" held by the contract\\n    /// @dev this value not always equivilent to the \\\"floor\\\" price which can consist of perceived value.\\n    /// can be looked at as an \\\"intrinsic floor\\\"\\n    /// @dev this is the value that users will receive when their either burn or loan out nuggs\\n    /// @return res -> [current staked eth] / [current staked shares]\\n    function ethPerShare() external view returns (uint96);\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TRUSTED\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @notice sends the current protocolEth to the user and resets the value to zero\\n    /// @dev caller must be a trusted user\\n    function extractProtocolEth() external;\\n\\n    /// @notice sets the migrator contract\\n    /// @dev caller must be a trusted user\\n    /// @param migrator the address to set as the migrator contract\\n    function setMigrator(address migrator) external;\\n}\\n\",\"keccak256\":\"0x9462b2533b105f2ac63e54d0b0fc827936001a11e0c0f356309bf1624f443329\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Swap {\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function delegate(address sender, uint160 tokenId) external payable;\\n\\n    function delegateItem(\\n        uint160 buyerTokenId,\\n        uint160 sellerTokenId,\\n        uint16 itemId\\n    ) external payable;\\n\\n    function claim(address sender, uint160 tokenId) external;\\n\\n    function claimItem(\\n        uint160 buyerTokenId,\\n        uint160 sellerTokenId,\\n        uint16 itemid\\n    ) external;\\n\\n    function swap(uint160 tokenId, uint96 floor) external;\\n\\n    function swapItem(\\n        uint160 sellerTokenId,\\n        uint16 itemid,\\n        uint96 floor\\n    ) external;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @notice calculates the minimum eth that must be sent with a delegate call\\n    /// @dev returns 0 if no delegate can be made for this oken\\n    /// @param tokenId -> the token to be delegated to\\n    /// @param sender -> the address of the user who will be delegating\\n    /// @return canDelegate -> instead of reverting this function will return false\\n    /// @return nextSwapAmount -> the minimum value that must be sent with a delegate call\\n    /// @return senderCurrentOffer ->\\n    function valueForDelegate(address sender, uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            bool canDelegate,\\n            uint96 nextSwapAmount,\\n            uint96 senderCurrentOffer\\n        );\\n}\\n\",\"keccak256\":\"0xe3609bac347c2ad35088b04ca3c7aea9e65b8e2d5003bdd84f839d44df89e241\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721} from '../IERC721.sol';\\n\\ninterface INuggftV1Token is IERC721 {\\n    function mint(uint160 tokenId) external payable;\\n\\n    function trustedMint(uint160 tokenId, address to) external payable;\\n}\\n\",\"keccak256\":\"0xf2725afb8caeb9e24b19d11985b8e9f678960284e87b5d402c166617e4d9c87a\",\"license\":\"MIT\"},\"src/libraries/SafeCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/// Adapted from Rari-Capital/solmate\\n\\n/// @notice Safe unsigned integer casting library that reverts on overflow.\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\\nlibrary SafeCastLib {\\n    function safe160(uint256 x) internal pure returns (uint160 y) {\\n        require(x <= type(uint160).max);\\n        y = uint160(x);\\n    }\\n\\n    function safe96(uint256 x) internal pure returns (uint96 y) {\\n        require(x <= type(uint96).max);\\n        y = uint96(x);\\n    }\\n\\n    function safe64(uint256 x) internal pure returns (uint64 y) {\\n        require(x <= type(uint64).max);\\n        y = uint64(x);\\n    }\\n\\n    function safe32(uint256 x) internal pure returns (uint32 y) {\\n        require(x <= type(uint32).max);\\n        y = uint32(x);\\n    }\\n\\n    function safe16(uint256 x) internal pure returns (uint16 y) {\\n        require(x <= type(uint16).max);\\n        y = uint16(x);\\n    }\\n\\n    function safe8(uint256 x) internal pure returns (uint8 y) {\\n        require(x <= type(uint8).max);\\n        y = uint8(x);\\n    }\\n\\n    // function safe6to256(uint256 x) internal pure returns (uint256 y) {\\n    //     require(x <= 63);\\n    //     y = x;\\n    // }\\n}\\n\",\"keccak256\":\"0x3b3f1bde1e54f817aed70d85b0649fded11d7973b66703f7a14b609a0e11f282\",\"license\":\"MIT\"},\"src/libraries/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/// Adapted from Rari-Capital/solmate\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\nlibrary SafeTransferLib {\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                               ETH OPERATIONS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, 'Z:0');\\n    }\\n}\\n\",\"keccak256\":\"0xc656f6d67b0de690a5cd3613628efcccb0b6d7433c364b6662a77258d6932780\",\"license\":\"MIT\"},\"src/libraries/ShiftLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeCastLib} from './SafeCastLib.sol';\\n\\nlibrary ShiftLib {\\n    using SafeCastLib for uint256;\\n\\n    /// @notice creates a bit mask\\n    /// @dev res = (2 ^ bits) - 1\\n    /// @param bits bit size of mask\\n    /// @return res the mask\\n    function mask(uint8 bits) internal pure returns (uint256 res) {\\n        assembly {\\n            res := sub(shl(bits, 1), 1)\\n        }\\n    }\\n\\n    function fullsubmask(uint8 bits, uint8 pos) internal pure returns (uint256 res) {\\n        res = ~(mask(bits) << pos);\\n    }\\n\\n    function set(\\n        uint256 preStore,\\n        uint8 bits,\\n        uint8 pos,\\n        uint256 value\\n    ) internal pure returns (uint256 postStore) {\\n        postStore = preStore & fullsubmask(bits, pos);\\n\\n        assembly {\\n            value := shl(pos, value)\\n        }\\n\\n        postStore |= value;\\n    }\\n\\n    function get(\\n        uint256 store,\\n        uint8 bits,\\n        uint8 pos\\n    ) internal pure returns (uint256 value) {\\n        assembly {\\n            value := shr(pos, store)\\n        }\\n        value &= mask(bits);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                ARRAYS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    // function getArray(uint256 store, uint8 pos) internal pure returns (uint8[] memory arr) {\\n    //     store = get(store, 64, pos);\\n\\n    //     arr = new uint8[](8);\\n    //     for (uint256 i = 0; i < 8; i++) {\\n    //         arr[i] = uint8(store & 0xff);\\n    //         store >>= 8;\\n    //     }\\n    // }\\n\\n    // function setArray(\\n    //     uint256 store,\\n    //     uint8 pos,\\n    //     uint8[] memory arr\\n    // ) internal pure returns (uint256 res) {\\n    //     for (uint256 i = 8; i > 0; i--) {\\n    //         res |= uint256(arr[i - 1]) << ((8 * (i - 1)));\\n    //     }\\n\\n    //     res = set(store, 64, pos, res);\\n    // }\\n}\\n\",\"keccak256\":\"0x2825b61e081888fb3b78d5dc8db451d5c867486efa91cf6f0527875bf5ee8c56\",\"license\":\"MIT\"},\"src/types/NuggftV1AgentType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\n/// @notice Explain to an end user what this does\\n/// @dev Explain to a developer any extra details\\nlibrary NuggftV1AgentType {\\n    using SafeCastLib for uint256;\\n\\n    // 10**13\\n    uint96 constant COMPRESSION_PERCISION = 0x9184E72A000;\\n\\n    // struct Memory {\\n    //     uint96 eth;\\n    //     uint32 epoch;\\n    //     address account;\\n    //     bool isOwner;\\n    //     bool flag;\\n    // }\\n\\n    // function unpack(uint256 packed) internal pure returns (Memory memory m) {\\n    //     if (packed != 0) {\\n    //         m.flag = true;\\n    //         m.epoch = epoch(packed);\\n    //         m.account = account(packed);\\n    //         m.eth = eth(packed);\\n    //         m.isOwner = isOwner(packed);\\n    //     }\\n    // }\\n\\n    // function pack(Memory memory m) internal pure returns (uint256 outuput, uint96 dust) {\\n    //     (outuput, dust) = newAgentType(m.epoch, m.account, m.eth, m.isOwner);\\n    // }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                               CALCULATION\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    // @test  manual\\n    function addIncrement(uint96 value) internal pure returns (uint96) {\\n        return compressEthRoundUp(((value * 10200) / 10000));\\n    }\\n\\n    // @test  manual\\n    function compressEthRoundDown(uint96 value) internal pure returns (uint96) {\\n        return (value / COMPRESSION_PERCISION) * COMPRESSION_PERCISION;\\n    }\\n\\n    // @test  manual\\n    function compressEthRoundUp(uint96 value) internal pure returns (uint96) {\\n        if (value % COMPRESSION_PERCISION > 0) {\\n            return ((value / COMPRESSION_PERCISION) + 1) * COMPRESSION_PERCISION;\\n        } else {\\n            return compressEthRoundDown(value);\\n        }\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                              SHIFT HELPERS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n    // @test input output unit test\\n    // type(uint96).max / 10**13 = 0x01C25C268497681 =  7922816251426433\\n    // type(uint56).max          = 0x100000000000000 = 72057594037927936\\n    function eth(uint256 input) internal pure returns (uint96 res) {\\n        return (ShiftLib.get(input, 56, 160) * COMPRESSION_PERCISION).safe96();\\n    }\\n\\n    function eth(uint256 input, uint96 update) internal pure returns (uint256 cache, uint96 rem) {\\n        rem = update % COMPRESSION_PERCISION;\\n        cache = ShiftLib.set(input, 56, 160, update / COMPRESSION_PERCISION);\\n    }\\n\\n    // @test  input output unit test\\n    function epoch(uint256 input, uint32 update) internal pure returns (uint256 res) {\\n        return ShiftLib.set(input, 32, 216, update);\\n    }\\n\\n    function epoch(uint256 input) internal pure returns (uint32 res) {\\n        return ShiftLib.get(input, 32, 216).safe32();\\n    }\\n\\n    // @test  input output unit test\\n    function account(uint256 input) internal pure returns (address res) {\\n        res = address(ShiftLib.get(input, 160, 0).safe160());\\n    }\\n\\n    function account(uint256 input, address update) internal pure returns (uint256 output) {\\n        output = ShiftLib.set(input, 160, 0, uint160(update));\\n    }\\n\\n    // @test  input output unit test\\n    function isOwner(uint256 input, bool update) internal pure returns (uint256 res) {\\n        return ShiftLib.set(input, 1, 255, update ? 0x1 : 0x0);\\n    }\\n\\n    function isOwner(uint256 input) internal pure returns (bool output) {\\n        output = ShiftLib.get(input, 1, 255) == 0x1;\\n    }\\n\\n    // @test  check to see if it does this - will be easy\\n    function flag(uint256 input) internal pure returns (uint256 res) {\\n        res = ShiftLib.set(input, 1, 254, 0x01);\\n    }\\n\\n    // @test  manual\\n    function newAgentType(\\n        uint32 _epoch,\\n        address _account,\\n        uint96 _eth,\\n        bool _isOwner\\n    ) internal pure returns (uint256 res, uint96 dust) {\\n        res = epoch(res, _epoch);\\n        res = account(res, _account);\\n        if (_isOwner) res = isOwner(res, true);\\n        (res, dust) = eth(res, _eth);\\n        res = flag(res);\\n    }\\n}\\n\",\"keccak256\":\"0x5bbd6a0a72f0bc8396239b62be4a5ca5bd99fbd1b69a9070390f4bb223bc4eb5\",\"license\":\"MIT\"},\"src/types/NuggftV1ProofType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\n/// @notice abstracts all the logic for converting the proof between a the uint256 which is stored in\\n/// in state and the the 4 uint8 arrays that it consists off.\\n/// @dev Explain to a developer any extra details\\n/// @dev itemIds are externally 16 bits, but here there are referenced as 8 bit ids in one of 8 indexs\\n/// where the id is the position the item exists in the file storage, and the index is the feature id\\n/// @dev there is not check - but dotnugg v1 only allows for max 63 for size, so anchor overrides should\\n/// reflect this.\\n/// @dev pushing and pulling is only set up for the extra array, so the user must manage their default array\\n/// by passing through the extra array - this is to reduce complexity\\n/// @dev see the dotnugg specification for more clarificaiton on the values used here\\n///\\n///  uint256 bit allocation of proof \\\"state\\\" variable:\\n/// \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u252c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u252c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n/// \\u2502  0 - 63   \\u2502 64 bits \\u2502  default item ids - 8 x 8 bits     \\u2502\\n/// \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524\\n/// \\u2502 64 - 127  \\u2502 64 bits \\u2502  extra item ids - 8 x 8 bits       \\u2502\\n/// \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524\\n/// \\u2502 128 - 191 \\u2502 64 bits \\u2502  x anchor overrides - 8 x 8 bits   \\u2502\\n/// \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524\\n/// \\u2502 192 - 255 \\u2502 64 bits \\u2502  y anchor overrides - 8 x 8 bits   \\u2502\\n/// \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n///\\nlibrary NuggftV1ProofType {\\n    /// @notice converts the proof state into a human readable form\\n    /// @dev fully parses the proof from a uint256 to 4 uint8 arrays\\n    /// @param state -> the uint256 proof state\\n    /// @return proof -> the uint256 proof state\\n    /// @return defaultIds -> the modifed uint256 proof state\\n    /// @return extraIds -> the modifed uint256 proof state\\n    /// @return xOverrides -> the modifed uint256 proof state\\n    /// @return yOverrides -> the modifed uint256 proof state\\n    // function fullProof(uint256 state)\\n    //     internal\\n    //     pure\\n    //     returns (\\n    //         uint256 proof,\\n    //         uint8[] memory defaultIds,\\n    //         uint8[] memory extraIds,\\n    //         uint8[] memory xOverrides,\\n    //         uint8[] memory yOverrides\\n    //     )\\n    // {\\n    //     proof = state;\\n    //     defaultIds = ShiftLib.getArray(state, 0);\\n    //     extraIds = ShiftLib.getArray(state, 64);\\n    //     xOverrides = ShiftLib.getArray(state, 128);\\n    //     yOverrides = ShiftLib.getArray(state, 192);\\n    // }\\n\\n    /// @notice sets an item to the extra array\\n    /// @dev extra array must be empty at the feature positon being added to\\n    /// @param state -> the uint256 proof state\\n    /// @param itemId -> the itemId being added\\n    /// @return res -> the modifed uint256 proof state\\n    // function pushToExtra(uint256 state, uint16 itemId) internal pure returns (uint256 res) {\\n    //     uint8[] memory arr = ShiftLib.getArray(state, 64);\\n\\n    //     (uint8 feat, uint8 pos) = parseItemId(itemId);\\n\\n    //     require(arr[feat] == 0, 'P:D');\\n\\n    //     arr[feat] = pos;\\n\\n    //     res = ShiftLib.setArray(state, 64, arr);\\n    // }\\n\\n    /// / @notice removes an item from the extra array\\n    // / @dev extra array must NOT be empty at the feature positon being removed\\n    // / @dev the extra array must have that specific feature in that postion\\n    // / @param state -> the uint256 proof state\\n    // / @param itemId -> the itemId being removed\\n    // / @return res -> the modifed uint256 proof state\\n    // function pullFromExtra(uint256 state, uint16 itemId) internal pure returns (uint256 res) {\\n    //     uint8[] memory arr = ShiftLib.getArray(state, 64);\\n\\n    //     (uint8 feat, uint8 pos) = parseItemId(itemId);\\n\\n    //     require(feat != 0, 'P:F');\\n\\n    //     require(arr[feat] == pos, 'P:E');\\n\\n    //     arr[feat] = 0;\\n\\n    //     res = ShiftLib.setArray(state, 64, arr);\\n    // }\\n\\n    function search(uint256 state, uint256 itemId) internal pure returns (uint8 index) {\\n        state >>= 3;\\n\\n        do {\\n            if (state & 11 == itemId) return index;\\n            index++;\\n        } while ((state >>= 11) != 0);\\n\\n        require(index != 22, 'UNTESTED');\\n\\n        // if (index == 22) revert('UNTESTED');\\n    }\\n\\n    function swapIndexs(\\n        uint256 state,\\n        uint8 index1,\\n        uint8 index2\\n    ) internal pure returns (uint256 res) {\\n        uint256 tmp = getIndex(state, index1);\\n        res = setIndex(state, index1, getIndex(state, index2));\\n        res = setIndex(state, index2, tmp);\\n    }\\n\\n    function getIndex(uint256 state, uint8 index) internal pure returns (uint16 res) {\\n        res = uint16(ShiftLib.get(state, 11, 3 + 11 * index));\\n    }\\n\\n    function setIndex(\\n        uint256 state,\\n        uint8 index,\\n        uint256 id\\n    ) internal pure returns (uint256 res) {\\n        res = ShiftLib.set(state, 11, 3 + 11 * index, id);\\n    }\\n\\n    /// @notice updates the x and y override arrays\\n    /// @dev all must be set at once\\n    /// @param state -> the uint256 proof state\\n    /// @param xOverrides -> uint8 array of new x overrides\\n    /// @param yOverrides -> uint8 array of new x overrides\\n    /// @return res -> the modifed uint256 proof state\\n    // function setNewAnchorOverrides(\\n    //     uint256 state,\\n    //     uint8[] memory xOverrides,\\n    //     uint8[] memory yOverrides\\n    // ) internal pure returns (uint256 res) {\\n    //     res = ShiftLib.setArray(state, 128, xOverrides);\\n    //     res = ShiftLib.setArray(res, 192, yOverrides);\\n    // }\\n\\n    /// @notice clears the anchor overrides for a specific feature\\n    /// @dev this should be called each time an item is added or removed from a feature\\n    /// @param state -> the uint256 proof state\\n    /// @param feature -> the feature to switch items for\\n    /// @return res -> the modifed uint256 proof state\\n    // function clearAnchorOverridesForFeature(uint256 state, uint8 feature) internal pure returns (uint256 res) {\\n    //     uint8[] memory x = ShiftLib.getArray(state, 128);\\n    //     uint8[] memory y = ShiftLib.getArray(state, 192);\\n\\n    //     y[feature] = 0;\\n    //     x[feature] = 0;\\n\\n    //     res = ShiftLib.setArray(state, 128, x);\\n    //     res = ShiftLib.setArray(res, 192, y);\\n    // }\\n\\n    /// @notice parses the external itemId into a feautre and position\\n    /// @dev this follows dotnugg v1 specification\\n    /// @param itemId -> the external itemId\\n    /// @return feat -> the feautre of the item\\n    /// @return pos -> the file storage position of the item\\n    function parseItemId(uint16 itemId) internal pure returns (uint8 feat, uint8 pos) {\\n        feat = uint8(itemId >> 8);\\n        pos = uint8(itemId & 0xff);\\n    }\\n}\\n\",\"keccak256\":\"0x06bce92824e43d4740034b0fd81a3928c6995c5b927b9f0d1a31c9887ed2f00f\",\"license\":\"MIT\"},\"src/types/NuggftV1StakeType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\nlibrary NuggftV1StakeType {\\n    /// 96 protocol\\n    /// 96 stakedEth\\n    /// 64 stakedShares\\n\\n    function proto(uint256 cache) internal pure returns (uint96 res) {\\n        res = uint96(cache);\\n    }\\n\\n    function proto(uint256 cache, uint96 update) internal pure returns (uint256 res) {\\n        res = cache & ShiftLib.fullsubmask(96, 0);\\n        res |= update;\\n    }\\n\\n    function addProto(uint256 cache, uint96 add) internal pure returns (uint256 res) {\\n        add += proto(cache);\\n        res = proto(cache, add);\\n    }\\n\\n    function subProto(uint256 cache, uint96 sub) internal pure returns (uint256 res) {\\n        sub = proto(cache) - sub;\\n        res = proto(cache, sub);\\n    }\\n\\n    // @test input output unit test\\n    function staked(uint256 cache) internal pure returns (uint96 res) {\\n        // using casting to select only 96\\n        res = uint96(cache >> 96);\\n    }\\n\\n    function staked(uint256 cache, uint96 update) internal pure returns (uint256 res) {\\n        // clear stakedEth\\n        res = cache & ShiftLib.fullsubmask(96, 96);\\n        res |= uint256(update) << 96;\\n    }\\n\\n    function addStaked(uint256 cache, uint96 add) internal pure returns (uint256 res) {\\n        add += staked(cache);\\n        res = staked(cache, add);\\n    }\\n\\n    function subStaked(uint256 cache, uint96 sub) internal pure returns (uint256 res) {\\n        sub = staked(cache) - sub;\\n        res = staked(cache, sub);\\n    }\\n\\n    // @test input output unit test\\n    function shares(uint256 cache) internal pure returns (uint64 res) {\\n        res = uint64(cache >> 192);\\n    }\\n\\n    function addShares(uint256 cache, uint64 add) internal pure returns (uint256 res) {\\n        add += shares(cache);\\n        res = shares(cache, add);\\n    }\\n\\n    function subShares(uint256 cache, uint64 sub) internal pure returns (uint256 res) {\\n        sub = shares(cache) - sub;\\n        res = shares(cache, sub);\\n    }\\n\\n    function shares(uint256 cache, uint64 update) internal pure returns (uint256 res) {\\n        res = cache & type(uint192).max;\\n        res |= (uint256(update) << 192);\\n    }\\n}\\n\",\"keccak256\":\"0xdfe7917e72accb6061faf5c13e6c2876f3ea40c213dd2495909d662ec5f0166d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526004805461ffff60a01b1916610a2d60a01b1790553480156200002657600080fd5b506040516200563b3803806200563b833981016040819052620000499162000156565b4360808190526040805191825260456020830152610bb88282015251829133917f183ba372104e811ca56ea566d43048a8c560dbb9cce5c8d5e9987c710b38d9469181900360600190a16001600160a01b038116600081815260036020908152604091829020805460ff1916600190811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a2506001600160a01b0381166200012f5760405162461bcd60e51b8152602060048201526003602482015262118e8d60ea1b604482015260640160405180910390fd5b600480546001600160a01b0319166001600160a01b03929092169190911790555062000188565b6000602082840312156200016957600080fd5b81516001600160a01b03811681146200018157600080fd5b9392505050565b608051615489620001b26000396000818161090e01528181613c6a015261478001526154896000f3fe60806040526004361061036b5760003560e01c806390a577ef116101c6578063c06c822f116100f7578063ee0ca98911610095578063fa7329921161006f578063fa73299214610acf578063fb306b0f14610ae2578063fb774eb814610b02578063fca840ae14610b2257600080fd5b8063ee0ca98914610a90578063f666b9a614610aa5578063f71d090414610aba57600080fd5b8063d7dc6819116100d1578063d7dc6819146109c4578063e5cbd48e14610a30578063e985e9c514610a50578063ecc1113f14610a7057600080fd5b8063c06c822f14610971578063c5c8beeb14610984578063c87b56dd146109a457600080fd5b8063998a049111610164578063a7f0b3de1161013e578063a7f0b3de146108fc578063b88d4fde14610930578063b88ea0141461093e578063beace31f1461095e57600080fd5b8063998a0491146108a9578063a22cb465146108c9578063a2c71727146108e957600080fd5b8063957c9e28116101a0578063957c9e28146107b457806395d89b41146107e757806396d648791461082d57806399081a261461085d57600080fd5b806390a577ef14610751578063939f41301461077f5780639531b94d1461079f57600080fd5b806351d4d67e116102a057806372b1c7581161023e5780637cd07e47116102185780637cd07e47146106c757806381dcebcf146106e75780638307fa5b14610707578063900cf0cf1461072757600080fd5b806372b1c75814610664578063750656f61461069457806376df8314146106a757600080fd5b80635e983d4f1161027a5780635e983d4f146105d6578063608cceb0146106035780636352211e1461062357806370a082311461064357600080fd5b806351d4d67e146105815780635558e4e2146105a1578063570f67ad146105c157600080fd5b806318160ddd1161030d5780632bff4833116102e75780632bff4833146104e55780633853d8a11461050557806342842e0e146104b757806348a7dec01461053d57600080fd5b806318160ddd1461049457806323b872dd146104b757806323cf3118146104c557600080fd5b8063081812fc11610349578063081812fc14610416578063095ea7b31461044e5780631056b9d5146104615780631393916a1461047457600080fd5b806301ffc9a7146103705780630251f62c146103a557806306fdde03146103c7575b600080fd5b34801561037c57600080fd5b5061039061038b3660046147d7565b610b42565b60405190151581526020015b60405180910390f35b3480156103b157600080fd5b506103c56103c036600461482e565b610cbf565b005b3480156103d357600080fd5b5060408051808201909152601681527f4e7567672046756e6769626c6520546f6b656e2056310000000000000000000060208201525b60405161039c91906148a3565b34801561042257600080fd5b506104366104313660046148b6565b610d90565b6040516001600160a01b03909116815260200161039c565b6103c561045c3660046148cf565b610da3565b6103c561046f36600461490d565b610e82565b34801561048057600080fd5b506103c561048f366004614954565b611044565b3480156104a057600080fd5b506104a96110c9565b60405190815260200161039c565b6103c561036b366004614992565b3480156104d157600080fd5b506103c56104e036600461482e565b6110e2565b3480156104f157600080fd5b506103c56105003660046149d3565b611156565b34801561051157600080fd5b506105206601c6bf5263400081565b6040516bffffffffffffffffffffffff909116815260200161039c565b34801561054957600080fd5b5060045461056f9074010000000000000000000000000000000000000000900460ff1681565b60405160ff909116815260200161039c565b34801561058d57600080fd5b506103c561059c366004614a17565b6111f3565b3480156105ad57600080fd5b506104366105bc3660046148b6565b6112ae565b3480156105cd57600080fd5b506103c56112e0565b3480156105e257600080fd5b506105f66105f13660046148b6565b61135e565b60405161039c9190614adb565b34801561060f57600080fd5b5061052061061e36600461482e565b611796565b34801561062f57600080fd5b5061043661063e3660046148b6565b6117ac565b34801561064f57600080fd5b506104a961065e36600461482e565b50600090565b34801561067057600080fd5b5061068461067f36600461482e565b6117ba565b60405161039c9493929190614be8565b6103c56106a236600461482e565b611a05565b3480156106b357600080fd5b506103c56106c2366004614c41565b611aa4565b3480156106d357600080fd5b50600954610436906001600160a01b031681565b3480156106f357600080fd5b506103c561070236600461482e565b611ae9565b34801561071357600080fd5b506103c5610722366004614c8c565b611c64565b34801561073357600080fd5b5061073c611d41565b60405163ffffffff909116815260200161039c565b34801561075d57600080fd5b50610766611d51565b60405167ffffffffffffffff909116815260200161039c565b34801561078b57600080fd5b506103c561079a36600461482e565b611d5f565b3480156107ab57600080fd5b50610520611dda565b3480156107c057600080fd5b5060045461056f907501000000000000000000000000000000000000000000900460ff1681565b3480156107f357600080fd5b5060408051808201909152600681527f4e554747465400000000000000000000000000000000000000000000000000006020820152610409565b34801561083957600080fd5b5061039061084836600461482e565b60036020526000908152604090205460ff1681565b34801561086957600080fd5b5061087d610878366004614a17565b611df0565b6040805193151584526bffffffffffffffffffffffff928316602085015291169082015260600161039c565b3480156108b557600080fd5b5061056f6108c4366004614cb1565b611ef0565b3480156108d557600080fd5b506103c56108e4366004614954565b611efe565b6103c56108f7366004614a17565b611f88565b34801561090857600080fd5b506104a97f000000000000000000000000000000000000000000000000000000000000000081565b6103c561036b366004614d56565b34801561094a57600080fd5b506104a961095936600461482e565b6121fe565b6103c561096c366004614a17565b61227a565b6103c561097f36600461482e565b61230f565b34801561099057600080fd5b506103c561099f366004614e21565b612402565b3480156109b057600080fd5b506104096109bf3660046148b6565b61255a565b3480156109d057600080fd5b506109e46109df36600461482e565b6126a4565b604080516bffffffffffffffffffffffff96871681529486166020860152929094169183019190915263ffffffff1660608201526001600160a01b03909116608082015260a00161039c565b348015610a3c57600080fd5b50600454610436906001600160a01b031681565b348015610a5c57600080fd5b50610390610a6b366004614a17565b6127c1565b348015610a7c57600080fd5b50610520610a8b36600461482e565b6127d4565b348015610a9c57600080fd5b506105206127ea565b348015610ab157600080fd5b506105206127f5565b348015610ac657600080fd5b50610520612803565b6103c5610add36600461482e565b612810565b348015610aee57600080fd5b506103c5610afd366004614e4d565b6129b0565b348015610b0e57600080fd5b506103c5610b1d36600461490d565b612ab2565b348015610b2e57600080fd5b506103c5610b3d366004614ec8565b612bf2565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fa5a85640000000000000000000000000000000000000000000000000000000001480610bd557507fffffffff0000000000000000000000000000000000000000000000000000000082167fee4f8adf00000000000000000000000000000000000000000000000000000000145b80610c2157507fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000145b80610c6d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610cb957507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b6000610cca82612ce6565b9050610cd63382612d6a565b610d275760405162461bcd60e51b815260206004820152600360248201527f4c3a30000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000610d44610d34611d41565b83610d3d612803565b6000612db7565b506001600160a01b0384166000908152600d602052604090208190559050610d6b83612e09565b610d8b82610d7883612ed7565b6bffffffffffffffffffffffff16612efe565b505050565b6000610cb9610d9e83612f59565b612f73565b6000610db6610db183612f59565b612ce6565b9050610dc23382612d6a565b610e0e5760405162461bcd60e51b815260206004820152600360248201527f473a3100000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60008281526001602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b610e8c3384612fe9565b610ed85760405162461bcd60e51b815260206004820152600360248201527f533a3600000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b600080610ee6848487612ffd565b80519193509150610f395760405162461bcd60e51b815260206004820152600360248201527f533a5300000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60208101511561100957806040015163ffffffff16610f5b8260200151613059565b63ffffffff161015610faf5760405162461bcd60e51b815260206004820152600360248201527f533a3700000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b602081015160ff1c600114156110095760405162461bcd60e51b8152600401610d1e9060208082526004908201527f4e4f504500000000000000000000000000000000000000000000000000000000604082015260600190565b602081015115801561101f5750805160ff1c6001145b6110325761102d828261306e565b61103c565b61103c8282613188565b505050505050565b61104c613337565b6001600160a01b03821660008181526003602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b60006110d3611d51565b67ffffffffffffffff16905090565b6110ea613337565b600980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040519081527fc97e86a927b4a897832650767255fd568e377e7fbe9586c81d26b77a2c3ffc8b9060200160405180910390a150565b6040821080156111665750604081105b6111b25760405162461bcd60e51b815260206004820152600b60248201527f554e544545535445443a310000000000000000000000000000000000000000006044820152606401610d1e565b6111bc3385613398565b506001600160a01b03909316600090815260086020908152604080832061ffff90951683529390529190912060069290921b179055565b6111fd3383612d6a565b6112495760405162461bcd60e51b815260206004820152600360248201527f533a3800000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60008061125683856133fb565b6001600160a01b0386166000908152600183016020526040812055909250905061127f81613447565b1561129757600082556112928484613535565b6112a8565b6112a884610d788360200151612ed7565b50505050565b6000600560006112bd84612f59565b6001600160a01b0390811682526020820192909252604001600020541692915050565b6112e8613337565b600a547f8e4dbe2f73d3458c68bca94210eabefac52a4d20c038a8e50197ac9db654291b816040516bffffffffffffffffffffffff909116815260200160405180910390a16113373382610d78565b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016600a55565b6113c46040518061016001604052806000815260200160008152602001606081526020016060815260200160006001600160a01b031681526020016000815260200160608152602001606081526020016060815260200160608152602001606081525090565b6000806000806113d661067f87612f59565b6040805160088082526101208201909252949850929650909450925060009190816020015b60608152602001906001900390816113fb5790505090506040518060400160405280600481526020017f42415345000000000000000000000000000000000000000000000000000000008152508160008151811061145b5761145b614f04565b60200260200101819052506040518060400160405280600481526020017f4559455300000000000000000000000000000000000000000000000000000000815250816001815181106114af576114af614f04565b60200260200101819052506040518060400160405280600581526020017f4d4f5554480000000000000000000000000000000000000000000000000000008152508160028151811061150357611503614f04565b60200260200101819052506040518060400160405280600481526020017f48414952000000000000000000000000000000000000000000000000000000008152508160038151811061155757611557614f04565b60200260200101819052506040518060400160405280600381526020017f4841540000000000000000000000000000000000000000000000000000000000815250816004815181106115ab576115ab614f04565b60200260200101819052506040518060400160405280600481526020017f4241434b00000000000000000000000000000000000000000000000000000000815250816005815181106115ff576115ff614f04565b60200260200101819052506040518060400160405280600481526020017f4e45434b000000000000000000000000000000000000000000000000000000008152508160068151811061165357611653614f04565b60200260200101819052506040518060400160405280600481526020017f484f4c4400000000000000000000000000000000000000000000000000000000815250816007815181106116a7576116a7614f04565b602090810291909101810191909152604080516101608101825260018152428184015281518083018352600981527f4e75676746542056310000000000000000000000000000000000000000000000818501528183015281518083018352601681527f4e7567672046756e6769626c6520546f6b656e2056310000000000000000000081850152606082015260008a8152808452829020546001600160a01b0316608082015260a081019990995260c089019590955260e08801939093526101008701919091526101208601528151808201939093528151808403909101815291810190526101408301525090565b60006117a1826126a4565b509195945050505050565b6000610cb9610db183612f59565b600060608060606117ca856121fe565b935083611842576117f36117ee6117e9876001600160a01b03166135e6565b6135f9565b613604565b9350836118425760405162461bcd60e51b815260206004820152600360248201527f503a4c00000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60408051600880825261012082019092529060208201610100803683375050604080516008808252610120820190925292955090506020820161010080368337505060408051600880825261012082019092529294509050602082016101008036833701905050905060078416836000815181106118c2576118c2614f04565b602002602001019060ff16908160ff168152505060005b60078160ff1610156119fd5760006118f186836137ee565b905061ffff811661190257506119eb565b845160ff600883901c8116919083169087908390811061192457611924614f04565b602002602001015160ff16600014156119e7576001600160a01b038916600090815260086020908152604080832061ffff871684529091529020548551600682901c90879060ff861690811061197c5761197c614f04565b60ff90921660209283029190910190910152603f8116878460ff16815181106119a7576119a7614f04565b602002602001019060ff16908160ff168152505081888460ff16815181106119d1576119d1614f04565b602002602001019060ff16908160ff1681525050505b5050505b806119f581614f62565b9150506118d9565b509193509193565b611a136101f4612710614f82565b63ffffffff16816001600160a01b0316108015611a3a57506101f46001600160a01b038216115b611a865760405162461bcd60e51b815260206004820152600360248201527f473a3100000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b611a8e61381e565b611a9781613907565b611aa13382613a21565b50565b611aae3384613398565b506000611aba846121fe565b9050611ac7818484613a94565b6001600160a01b03909416600090815260076020526040902093909355505050565b6009546001600160a01b0316611b415760405162461bcd60e51b815260206004820152600360248201527f543a3400000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6000611b4c826121fe565b90506000611b5983613acc565b6009546040517f80011aa70000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018690523360448301529293509116906380011aa7906bffffffffffffffffffffffff8416906064016000604051808303818588803b158015611bd757600080fd5b505af1158015611beb573d6000803e3d6000fd5b5050600954604080516001600160a01b039283168152918816602083015281018690523360608201526bffffffffffffffffffffffff851660808201527f58ca548c1fd63f641dfb02f79df36d4f29bd995f0733d2ed3595b6cfde7db4e1935060a0019150611c579050565b60405180910390a1505050565b611c7633611c7184612f59565b612fe9565b611cc25760405162461bcd60e51b815260206004820152600360248201527f463a3500000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60008281526005602090815260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0385169081179091558251858152918201527f7656ff24c75404c1fac4fa475e193f5ac3f455ada5e60a315bf6b8eaa8bd5e9b91015b60405180910390a15050565b6000611d4c43613c5e565b905090565b6000611d4c600a5460c01c90565b6000611d6a82613acc565b9050611d8433826bffffffffffffffffffffffff16612efe565b604080516001600160a01b03841681523360208201526bffffffffffffffffffffffff8316918101919091527f6866bab9e57b1b8d6e867bb41dc78ec6f8fcbdca05d8f065e3353df689741ff290606001611d35565b6000611de7600a54613ca3565b50919392505050565b600160008080611e0085876133fb565b805190925015159050611e5057846001600160a01b0316816040015163ffffffff161415611e3f57611e38611e33611dda565b613d0a565b9250611eb9565b600080600093509350935050611ee9565b602081015160ff1c60011415611e6557600093505b611e728160200151612ed7565b9150611e818160000151612ed7565b9250611e8b612803565b6bffffffffffffffffffffffff16836bffffffffffffffffffffffff161015611eb957611eb6612803565b92505b6bffffffffffffffffffffffff8316611edb576601c6bf526340009250611ee7565b611ee483613d60565b92505b505b9250925092565b6000610cb960065483613d7e565b3360008181526002602090815260408083206001600160a01b0387168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b611f923383612d6a565b611fde5760405162461bcd60e51b815260206004820152600360248201527f533a3000000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b600080611feb83856133fb565b91509150826001600160a01b0316816040015163ffffffff1614801561201057508051155b156120b4576601c6bf5263400034101561206c5760405162461bcd60e51b815260206004820152600360248201527f533a3100000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60208101511561207e5761207e614faa565b61209481604001518260600151610d3d34613d90565b50825561209f61381e565b6120a883613dab565b61129260003085613e99565b80516121025760405162461bcd60e51b815260206004820152600360248201527f533a3400000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6020810151156121d257806040015163ffffffff166121248260200151613059565b63ffffffff1610156121785760405162461bcd60e51b815260206004820152600360248201527f533a5200000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b602081015160ff1c600114156121d25760405162461bcd60e51b8152600401610d1e9060208082526004908201527f4e4f504500000000000000000000000000000000000000000000000000000000604082015260600190565b805160ff1c6001146121ed576121e8828261306e565b6121f7565b6121f78282613188565b5050505050565b6001600160a01b0381166000908152600760205260408120541561223857506001600160a01b031660009081526007602052604090205490565b6000806000612245613ee8565b925092509250846001600160a01b03168214801561226257508215155b1561226f57949350505050565b506000949350505050565b612282613337565b6101f46001600160a01b0383161080156122a457506001600160a01b03821615155b6122f05760405162461bcd60e51b815260206004820152600360248201527f473a3100000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6122f861381e565b61230182613907565b61230b8183613a21565b5050565b600080600061231d846126a4565b945050935093505061232e84612ce6565b6001600160a01b0316306001600160a01b03161461234e5761234e614faa565b34836bffffffffffffffffffffffff1611156123ac5760405162461bcd60e51b815260206004820152600360248201527f4c3a3300000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6123bd6123b834613d90565b613f10565b6000806123d46123cb611d41565b84610d3d612803565b6001600160a01b0388166000908152600d60205260409020829055909250905061103c83610d788387614fd9565b600061240d83612ce6565b90506124193382612d6a565b6124655760405162461bcd60e51b815260206004820152600360248201527f533a4100000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b61246d612803565b6bffffffffffffffffffffffff16826bffffffffffffffffffffffff1610156124d85760405162461bcd60e51b815260206004820152600360248201527f533a4200000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6124e183612e09565b6000806124ee85846133fb565b80519193509150156125425760405162461bcd60e51b815260206004820152600560248201527f4e4f5045320000000000000000000000000000000000000000000000000000006044820152606401610d1e565b612550600084866001612db7565b5090915550505050565b6060600061256783612f59565b6001600160a01b03808216600090815260056020526040812054929350911661259b576004546001600160a01b03166125ad565b6125ad826001600160a01b03166112ae565b600480546040517f084050f50000000000000000000000000000000000000000000000000000000081523092810192909252602482018790526001600160a01b03838116604484015260ff7401000000000000000000000000000000000000000083048116606485015275010000000000000000000000000000000000000000008304166084840152929350919091169063084050f59060a40160006040518083038186803b15801561265f57600080fd5b505afa158015612673573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261269b9190810190615000565b95945050505050565b6001600160a01b0381166000908152600d602052604081205481908190819081906126ce81614034565b91506001600160a01b0382166127265760405162461bcd60e51b815260206004820152600360248201527f4c3a3400000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b600061273182612ed7565b9050600061273d612803565b905061271061274d60648461508d565b61275791906150f0565b96506127638783614fd9565b9750806bffffffffffffffffffffffff16886bffffffffffffffffffffffff16101561279857612793888261511b565b61279b565b60005b95506103e86127a984613059565b6127b39190614f82565b945050505091939590929450565b60006127cd8284612d6a565b9392505050565b60006127df826126a4565b509295945050505050565b6000611d4c600a5490565b6000611d4c600a5460601c90565b6000611d4c600a54614048565b6000806000806000612821866126a4565b945063ffffffff16945094509450945061283a86612ce6565b6001600160a01b0316306001600160a01b03161461285a5761285a614faa565b6001600160a01b0386166000908152600d60205260408120553361287c611d41565b63ffffffff16836bffffffffffffffffffffffff16106128ef576128a03383612d6a565b6128ec5760405162461bcd60e51b815260206004820152600360248201527f4c3a3100000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b50805b60006128fa34613d90565b9050806bffffffffffffffffffffffff16876bffffffffffffffffffffffff1611156129685760405162461bcd60e51b815260206004820152600360248201527f4c3a3200000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6000612974888361511b565b90506129836123b88289614fd9565b61299b83876bffffffffffffffffffffffff16612efe565b6129a5838a613535565b505050505050505050565b6129b8613337565b600480546040517f11c16aa30000000000000000000000000000000000000000000000000000000081526000926001600160a01b03909216916311c16aa391612a079186918991899101615197565b602060405180830381600087803b158015612a2157600080fd5b505af1158015612a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a599190615280565b600654909150600082612a6c8386613d7e565b612a76919061529d565b60ff169050612aa7826008612a8b87826152c2565b84811b600190921b6000190160ff919091161b19919091161790565b600655505050505050565b612abc3384612fe9565b612b085760405162461bcd60e51b815260206004820152600360248201527f533a3900000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b600080612b16848487612ffd565b6001600160a01b03871660009081526001830160205260408120559092509050612b3f81613447565b15612bd957600080835561ffff84168152600b6020526040902054612ba65760405162461bcd60e51b815260206004820152600360248201527f503a3300000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b612bb08584614098565b61ffff83166000908152600b60205260408120805491612bcf836152eb565b91905055506121f7565b6121f7612be586612ce6565b610d788360200151612ed7565b612bfc3384612fe9565b612c485760405162461bcd60e51b815260206004820152600360248201527f533a4300000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b612c5283836140c9565b61ffff82166000908152600b60205260408120805491612c7183615302565b9190505550600080612c84858587612ffd565b8051919350915015612cd85760405162461bcd60e51b815260206004820152600360248201527f533a4400000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b612550600086856001612db7565b6000612cf1826140fa565b612d3d5760405162461bcd60e51b815260206004820152600560248201527f543a393a320000000000000000000000000000000000000000000000000000006044820152606401610d1e565b506001600160a01b038082166000908152602081905260409020541680612d65575030919050565b919050565b6000826001600160a01b0316826001600160a01b031614806127cd5750506001600160a01b0390811660009081526002602090815260408083209490931682529290925290205460ff1690565b600080612dc4828761410d565b9150612dd0828661415e565b91508215612de657612de3826001614193565b91505b612df082856141ca565b9092509050612dfe82614229565b915094509492505050565b612e133382612fe9565b8015612e2f575030612e2482612f73565b6001600160a01b0316145b612e7b5760405162461bcd60e51b815260206004820152600360248201527f4e3a3100000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6001600160a01b03811660009081526020818152604080832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116909155600190925290912080549091169055611aa1333083613e99565b6000610cb9612ef96509184e72a00060a085901c66ffffffffffffff1661531d565b613d90565b600080600080600085875af1905080610d8b5760405162461bcd60e51b815260206004820152600360248201527f5a3a3000000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60006001600160a01b03821115612f6f57600080fd5b5090565b6000612f7e826140fa565b612fca5760405162461bcd60e51b815260206004820152600560248201527f543a393a310000000000000000000000000000000000000000000000000000006044820152606401610d1e565b506001600160a01b039081166000908152600160205260409020541690565b60006127cd83612ff884612ce6565b612d6a565b6040805160808101825260008082526020808301829052828401829052606083018290526001600160a01b0387168252600c815283822061ffff871683526002019052919091209061304f8284614275565b9050935093915050565b6000610cb963ffffffff60d884901c166135e6565b600061307d8260000151613059565b63ffffffff16826040015163ffffffff1611156130dc5760405162461bcd60e51b815260206004820152600360248201527f533a4600000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b81606001516001600160a01b03166130f78360000151614034565b6001600160a01b03161461313157815160018401600061311683614034565b6001600160a01b031681526020810191909152604001600020555b81516000908190819061315e9061314781613059565b87606001516131598960200151612ed7565b614315565b828955919450925090506131756123b88284614fd9565b61317e83612ed7565b9695505050505050565b6000613192612803565b6bffffffffffffffffffffffff163410156131ef5760405162461bcd60e51b815260206004820152600360248201527f533a3500000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60208201511580156132015750815115155b61324d5760405162461bcd60e51b815260206004820152600560248201527f4e4f5045330000000000000000000000000000000000000000000000000000006044820152606401610d1e565b815160ff1c6001146132a15760405162461bcd60e51b815260206004820152600560248201527f4e4f5045340000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60008060006132cb8560000151866040015160016132bf9190614f82565b87606001516000614315565b828955604088015192955090935091506132fd906132ea906001614f82565b86516132f7906000614193565b9061410d565b8660010160006133108860000151614034565b6001600160a01b031681526020810191909152604001600020556131756123b88284614fd9565b3360009081526003602052604090205460ff166133965760405162461bcd60e51b815260206004820152600960248201527f554e5452555354454400000000000000000000000000000000000000000000006044820152606401610d1e565b565b60006133a382612ce6565b90506133af8382612d6a565b610cb95760405162461bcd60e51b815260206004820152600360248201527f503a4200000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6040805160808101825260008082526020808301829052828401829052606083018290526001600160a01b0386168252600c9052919091209061343e8284614275565b90509250929050565b600081602001516000141561349e5760405162461bcd60e51b815260206004820152600360248201527f533a4500000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60006134ad8360000151613059565b63ffffffff16836040015163ffffffff1611905060006134d08460000151614034565b6001600160a01b03166134e68560200151614034565b6001600160a01b031614905060006135088560000151600160ff9190911c1490565b801561351b5750602085015160ff1c6001145b905081801561269b5750808061269b575091949350505050565b3061353f82612ce6565b6001600160a01b0316146135955760405162461bcd60e51b815260206004820152600360248201527f4e3a3000000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6001600160a01b03818116600090815260208190526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001691841691909117905561230b308383613e99565b600063ffffffff821115612f6f57600080fd5b6000610cb9826143d8565b6000816136535760405162461bcd60e51b815260206004820152600360248201527f503a3800000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60065461366d60ff8416613668836000613d7e565b6144c6565b61367890600161533c565b90911790600361369460ff600886901c16613668846001613d7e565b61369f90600161533c565b61010017901b9190911790600e6136c260ff601086901c16613668846002613d7e565b6136cd90600161533c565b61020017901b919091179060ff601884901c811690602085901c8116908290602887901c1660808210156137205761370a83613668876003613d7e565b61371590600161533c565b610300179250613741565b61372f83613668876004613d7e565b61373a90600161533c565b6104001792505b601983901b86179550601e8210156137785761376281613668876005613d7e565b61376d90600161533c565b6105001790506137de565b60378210156137a65761379081613668876006613d7e565b61379b90600161533c565b6106001790506137de565b604b8210156137d4576137be81613668876007613d7e565b6137c990600161533c565b6107001790506137de565b5050505050919050565b60241b9490941795945050505050565b60006127cd83600b61380085826152c2565b61380b90600361529d565b82811c6001831b60001901169392505050565b600061382934613d90565b600a5490915060008061383b83613ca3565b509250509150816bffffffffffffffffffffffff16846bffffffffffffffffffffffff1610156138ad5760405162461bcd60e51b815260206004820152600360248201527f543a3100000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60006138b9838661511b565b90506138c481614536565b6138ce9083614fd9565b91506138db846001614551565b93506138f16138ea838761511b565b85906145b1565b93506138fd8483614611565b600a555050505050565b6001600160a01b0381166000908152600760205260409020541561396d5760405162461bcd60e51b815260206004820152600360248201527f503a3500000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60008161397b600143615354565b6040517f4206900000000000000000000000000000000000000000000000000000000000602082015260609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660238301524060378201526057016040516020818303038152906040528051906020012060001c90506000613a0082613604565b6001600160a01b039093166000908152600760205260409020929092555050565b6001600160a01b0381811660008181526020819052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169487169485179055519192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600080613aa185856137ee565b61ffff169050613abf8585613ab688876137ee565b61ffff16614657565b915061269b858483614657565b600080613ad883612ce6565b905030613ae484612f73565b6001600160a01b0316148015613b0257506001600160a01b03811633145b613b4e5760405162461bcd60e51b815260206004820152600360248201527f543a3300000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b600a546001600160a01b03841660009081526020818152604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915560018352818420805482169055600c8352818420849055600d8352818420849055600783528184208490556005909252822080549091169055613bd890839086613e99565b613be181614048565b92506001613bef8260c01c90565b67ffffffffffffffff161015613c0757613c07614faa565b826bffffffffffffffffffffffff16613c208260601c90565b6bffffffffffffffffffffffff161015613c3c57613c3c614faa565b613c47816001614698565b9050613c5381846146af565b600a55509092915050565b6000610bb86045613c8f7f000000000000000000000000000000000000000000000000000000000000000085615354565b613c99919061536b565b610cb99190614f82565b600080600080613cb285614048565b9250613cbd83614536565b9150612710613ccc8660c01c90565b613ce09067ffffffffffffffff168561508d565b613cea91906150f0565b905080613cf78385614fd9565b613d019190614fd9565b93509193509193565b600080613d1d6509184e72a00084615382565b6bffffffffffffffffffffffff161115613d57576509184e72a000613d4281846150f0565b613d4d906001614fd9565b610cb9919061508d565b610cb9826146c6565b6000610cb9612710613d74846127d861508d565b611e3391906150f0565b60006127cd83600861380b85826152c2565b60006bffffffffffffffffffffffff821115612f6f57600080fd5b6001600160a01b03811660009081526007602052604090205415613e115760405162461bcd60e51b815260206004820152600360248201527f503a3600000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b600080613e1c613ee8565b9250925050826001600160a01b03168214613e795760405162461bcd60e51b815260206004820152600360248201527f503a3700000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6001600160a01b0390921660009081526007602052604090209190915550565b806001600160a01b0316826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000806000613ef56146d9565b90935063ffffffff169150613f0983613604565b9050909192565b806bffffffffffffffffffffffff16341015613f6e5760405162461bcd60e51b815260206004820152600360248201527f543a3200000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b600a546000613f7c83614536565b905061402c613f8b8284614fd9565b613ff58386613f9a8760601c90565b613fa49190614fd9565b613fae919061511b565b7fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff861660609190911b77ffffffffffffffffffffffff000000000000000000000000161790565b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff919091161790565b600a55505050565b6000610cb96001600160a01b038316612f59565b60006140548260c01c90565b67ffffffffffffffff16156140905761406d8260c01c90565b67ffffffffffffffff166140818360601c90565b61408b91906150f0565b610cb9565b600092915050565b6140a23383613398565b5060006140ae836121fe565b9050613a00816140bf8360006146f5565b8461ffff16614657565b6140d33383613398565b5060006140df836121fe565b9050613a00816140f3838561ffff166146f5565b6000614657565b6000614105826121fe565b151592915050565b60007fff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff83167effffffff00000000000000000000000000000000000000000000000000000060d884901b16176127cd565b60007fffffffffffffffffffffffff000000000000000000000000000000000000000083166001600160a01b038316176127cd565b60006127cd83600160ff856141a95760006141ac565b60015b60ff16811b600190921b6000190160ff919091161b19919091161790565b6000806141dd6509184e72a00084615382565b905061422084603860a06141f76509184e72a000886150f0565b6bffffffffffffffffffffffff16811b600190921b6000190160ff919091161b19919091161790565b91509250929050565b60007fbfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82167f400000000000000000000000000000000000000000000000000000000000000017610cb9565b60408051608081018252600060208201819052918101829052606081019190915282548082526142a3611d41565b63ffffffff1660408301526001600160a01b03831660608301526142c681614034565b6001600160a01b0316836001600160a01b031614156142eb576020820181905261430e565b6001600160a01b0383166000908152600185016020908152604090912054908301525b5092915050565b60008060008061432488612ed7565b905061432f34613d90565b6143399086614fd9565b9450846bffffffffffffffffffffffff1661435382613d60565b6bffffffffffffffffffffffff1611156143af5760405162461bcd60e51b815260206004820152600360248201527f533a4700000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6143bc8787876000612db7565b90945091506143cb818661511b565b9250509450945094915050565b6000806143e48361477c565b905060006143f3600283615354565b409050806144435760405162461bcd60e51b815260206004820152600360248201527f453a3000000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6040805160208082019390935260e09590951b7fffffffff0000000000000000000000000000000000000000000000000000000016858201523060601b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660448601528051603881870301815260589095019052835193019290922092915050565b600060ff82166145185760405162461bcd60e51b815260206004820152600360248201527f503a3900000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b81614522846147c7565b61452c91906153ad565b60ff169392505050565b60006127106145476103e88461508d565b610cb991906150f0565b600061455d8360c01c90565b61456790836153cf565b915077ffffffffffffffffffffffffffffffffffffffffffffffff831660c083901b7fffffffffffffffff00000000000000000000000000000000000000000000000016176127cd565b60006145bd8360601c90565b6145c79083614fd9565b91507fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff8316606083901b77ffffffffffffffffffffffff00000000000000000000000016176127cd565b600061461d8383614fd9565b91506bffffffffffffffffffffffff82167fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008416176127cd565b600061469084600b61466986826152c2565b61467490600361529d565b85811b600190921b6000190160ff919091161b19919091161790565b949350505050565b6000816146a58460c01c90565b61456791906153f2565b6000816146bc8460601c90565b6145c7919061511b565b60006509184e72a000613d4d81846150f0565b6000806146e4611d41565b90506146ef816143d8565b91509091565b6000600383901c92505b8183600b16141561470f57610cb9565b8061471981614f62565b600b9490941c93915050826146ff578060ff1660161415610cb95760405162461bcd60e51b815260206004820152600860248201527f554e5445535445440000000000000000000000000000000000000000000000006044820152606401610d1e565b60007f000000000000000000000000000000000000000000000000000000000000000060456147ad610bb885615413565b6147b79190615430565b63ffffffff16610cb9919061533c565b600060ff821115612f6f57600080fd5b6000602082840312156147e957600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146127cd57600080fd5b6001600160a01b0381168114611aa157600080fd5b60006020828403121561484057600080fd5b81356127cd81614819565b60005b8381101561486657818101518382015260200161484e565b838111156112a85750506000910152565b6000815180845261488f81602086016020860161484b565b601f01601f19169290920160200192915050565b6020815260006127cd6020830184614877565b6000602082840312156148c857600080fd5b5035919050565b600080604083850312156148e257600080fd5b82356148ed81614819565b946020939093013593505050565b803561ffff81168114612d6557600080fd5b60008060006060848603121561492257600080fd5b833561492d81614819565b9250602084013561493d81614819565b915061494b604085016148fb565b90509250925092565b6000806040838503121561496757600080fd5b823561497281614819565b91506020830135801515811461498757600080fd5b809150509250929050565b6000806000606084860312156149a757600080fd5b83356149b281614819565b925060208401356149c281614819565b929592945050506040919091013590565b600080600080608085870312156149e957600080fd5b84356149f481614819565b9350614a02602086016148fb565b93969395505050506040820135916060013590565b60008060408385031215614a2a57600080fd5b8235614a3581614819565b9150602083013561498781614819565b600081518084526020808501945080840160005b83811015614a7857815160ff1687529582019590820190600101614a59565b509495945050505050565b600082825180855260208086019550808260051b84010181860160005b84811015614ace57601f19868403018952614abc838351614877565b98840198925090830190600101614aa0565b5090979650505050505050565b60208152815160208201526020820151604082015260006040830151610160806060850152614b0e610180850183614877565b91506060850151601f1980868503016080870152614b2c8483614877565b935060808701519150614b4a60a08701836001600160a01b03169052565b60a087015160c087015260c08701519150808685030160e0870152614b6f8483614a45565b935060e08701519150610100818786030181880152614b8e8584614a45565b945080880151925050610120818786030181880152614bad8584614a45565b945080880151925050610140818786030181880152614bcc8584614a83565b90880151878203909201848801529350905061317e8382614877565b848152608060208201526000614c016080830186614a45565b8281036040840152614c138186614a45565b90508281036060840152614c278185614a45565b979650505050505050565b60ff81168114611aa157600080fd5b600080600060608486031215614c5657600080fd5b8335614c6181614819565b92506020840135614c7181614c32565b91506040840135614c8181614c32565b809150509250925092565b60008060408385031215614c9f57600080fd5b82359150602083013561498781614819565b600060208284031215614cc357600080fd5b81356127cd81614c32565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614d2657614d26614cce565b604052919050565b600067ffffffffffffffff821115614d4857614d48614cce565b50601f01601f191660200190565b60008060008060808587031215614d6c57600080fd5b8435614d7781614819565b93506020850135614d8781614819565b925060408501359150606085013567ffffffffffffffff811115614daa57600080fd5b8501601f81018713614dbb57600080fd5b8035614dce614dc982614d2e565b614cfd565b818152886020838501011115614de357600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b80356bffffffffffffffffffffffff81168114612d6557600080fd5b60008060408385031215614e3457600080fd5b8235614e3f81614819565b915061343e60208401614e05565b600080600060408486031215614e6257600080fd5b833567ffffffffffffffff80821115614e7a57600080fd5b818601915086601f830112614e8e57600080fd5b813581811115614e9d57600080fd5b8760208260051b8501011115614eb257600080fd5b60209283019550935050840135614c8181614c32565b600080600060608486031215614edd57600080fd5b8335614ee881614819565b9250614ef6602085016148fb565b915061494b60408501614e05565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff811415614f7957614f79614f33565b60010192915050565b600063ffffffff808316818516808303821115614fa157614fa1614f33565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60006bffffffffffffffffffffffff808316818516808303821115614fa157614fa1614f33565b6000806040838503121561501357600080fd5b825161501e81614819565b602084015190925067ffffffffffffffff81111561503b57600080fd5b8301601f8101851361504c57600080fd5b805161505a614dc982614d2e565b81815286602083850101111561506f57600080fd5b61508082602083016020860161484b565b8093505050509250929050565b60006bffffffffffffffffffffffff808316818516818304811182151516156150b8576150b8614f33565b02949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006bffffffffffffffffffffffff8084168061510f5761510f6150c1565b92169190910492915050565b60006bffffffffffffffffffffffff8381169083168181101561514057615140614f33565b039392505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561517a57600080fd5b8260051b8083602087013760009401602001938452509192915050565b60006040820160ff8616835260206040818501528185835260608501905060059250606086841b8601018760005b88811015615271577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa088840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18b360301811261522657600080fd5b8a01803567ffffffffffffffff81111561523f57600080fd5b80881b36038c131561525057600080fd5b61525d8582898501615148565b9587019594505050908401906001016151c5565b50909998505050505050505050565b60006020828403121561529257600080fd5b81516127cd81614c32565b600060ff821660ff84168060ff038211156152ba576152ba614f33565b019392505050565b600060ff821660ff84168160ff04811182151516156152e3576152e3614f33565b029392505050565b6000816152fa576152fa614f33565b506000190190565b600060001982141561531657615316614f33565b5060010190565b600081600019048311821515161561533757615337614f33565b500290565b6000821982111561534f5761534f614f33565b500190565b60008282101561536657615366614f33565b500390565b600063ffffffff8084168061510f5761510f6150c1565b60006bffffffffffffffffffffffff808416806153a1576153a16150c1565b92169190910692915050565b600060ff8316806153c0576153c06150c1565b8060ff84160691505092915050565b600067ffffffffffffffff808316818516808303821115614fa157614fa1614f33565b600067ffffffffffffffff8381169083168181101561514057615140614f33565b600063ffffffff8381169083168181101561514057615140614f33565b600063ffffffff808316818516818304811182151516156150b8576150b8614f3356fea26469706673582212200f634d34fcf2e4a4150d2420e9432f5e286cf08cb6e21fb90b80d61563d4e50b64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061036b5760003560e01c806390a577ef116101c6578063c06c822f116100f7578063ee0ca98911610095578063fa7329921161006f578063fa73299214610acf578063fb306b0f14610ae2578063fb774eb814610b02578063fca840ae14610b2257600080fd5b8063ee0ca98914610a90578063f666b9a614610aa5578063f71d090414610aba57600080fd5b8063d7dc6819116100d1578063d7dc6819146109c4578063e5cbd48e14610a30578063e985e9c514610a50578063ecc1113f14610a7057600080fd5b8063c06c822f14610971578063c5c8beeb14610984578063c87b56dd146109a457600080fd5b8063998a049111610164578063a7f0b3de1161013e578063a7f0b3de146108fc578063b88d4fde14610930578063b88ea0141461093e578063beace31f1461095e57600080fd5b8063998a0491146108a9578063a22cb465146108c9578063a2c71727146108e957600080fd5b8063957c9e28116101a0578063957c9e28146107b457806395d89b41146107e757806396d648791461082d57806399081a261461085d57600080fd5b806390a577ef14610751578063939f41301461077f5780639531b94d1461079f57600080fd5b806351d4d67e116102a057806372b1c7581161023e5780637cd07e47116102185780637cd07e47146106c757806381dcebcf146106e75780638307fa5b14610707578063900cf0cf1461072757600080fd5b806372b1c75814610664578063750656f61461069457806376df8314146106a757600080fd5b80635e983d4f1161027a5780635e983d4f146105d6578063608cceb0146106035780636352211e1461062357806370a082311461064357600080fd5b806351d4d67e146105815780635558e4e2146105a1578063570f67ad146105c157600080fd5b806318160ddd1161030d5780632bff4833116102e75780632bff4833146104e55780633853d8a11461050557806342842e0e146104b757806348a7dec01461053d57600080fd5b806318160ddd1461049457806323b872dd146104b757806323cf3118146104c557600080fd5b8063081812fc11610349578063081812fc14610416578063095ea7b31461044e5780631056b9d5146104615780631393916a1461047457600080fd5b806301ffc9a7146103705780630251f62c146103a557806306fdde03146103c7575b600080fd5b34801561037c57600080fd5b5061039061038b3660046147d7565b610b42565b60405190151581526020015b60405180910390f35b3480156103b157600080fd5b506103c56103c036600461482e565b610cbf565b005b3480156103d357600080fd5b5060408051808201909152601681527f4e7567672046756e6769626c6520546f6b656e2056310000000000000000000060208201525b60405161039c91906148a3565b34801561042257600080fd5b506104366104313660046148b6565b610d90565b6040516001600160a01b03909116815260200161039c565b6103c561045c3660046148cf565b610da3565b6103c561046f36600461490d565b610e82565b34801561048057600080fd5b506103c561048f366004614954565b611044565b3480156104a057600080fd5b506104a96110c9565b60405190815260200161039c565b6103c561036b366004614992565b3480156104d157600080fd5b506103c56104e036600461482e565b6110e2565b3480156104f157600080fd5b506103c56105003660046149d3565b611156565b34801561051157600080fd5b506105206601c6bf5263400081565b6040516bffffffffffffffffffffffff909116815260200161039c565b34801561054957600080fd5b5060045461056f9074010000000000000000000000000000000000000000900460ff1681565b60405160ff909116815260200161039c565b34801561058d57600080fd5b506103c561059c366004614a17565b6111f3565b3480156105ad57600080fd5b506104366105bc3660046148b6565b6112ae565b3480156105cd57600080fd5b506103c56112e0565b3480156105e257600080fd5b506105f66105f13660046148b6565b61135e565b60405161039c9190614adb565b34801561060f57600080fd5b5061052061061e36600461482e565b611796565b34801561062f57600080fd5b5061043661063e3660046148b6565b6117ac565b34801561064f57600080fd5b506104a961065e36600461482e565b50600090565b34801561067057600080fd5b5061068461067f36600461482e565b6117ba565b60405161039c9493929190614be8565b6103c56106a236600461482e565b611a05565b3480156106b357600080fd5b506103c56106c2366004614c41565b611aa4565b3480156106d357600080fd5b50600954610436906001600160a01b031681565b3480156106f357600080fd5b506103c561070236600461482e565b611ae9565b34801561071357600080fd5b506103c5610722366004614c8c565b611c64565b34801561073357600080fd5b5061073c611d41565b60405163ffffffff909116815260200161039c565b34801561075d57600080fd5b50610766611d51565b60405167ffffffffffffffff909116815260200161039c565b34801561078b57600080fd5b506103c561079a36600461482e565b611d5f565b3480156107ab57600080fd5b50610520611dda565b3480156107c057600080fd5b5060045461056f907501000000000000000000000000000000000000000000900460ff1681565b3480156107f357600080fd5b5060408051808201909152600681527f4e554747465400000000000000000000000000000000000000000000000000006020820152610409565b34801561083957600080fd5b5061039061084836600461482e565b60036020526000908152604090205460ff1681565b34801561086957600080fd5b5061087d610878366004614a17565b611df0565b6040805193151584526bffffffffffffffffffffffff928316602085015291169082015260600161039c565b3480156108b557600080fd5b5061056f6108c4366004614cb1565b611ef0565b3480156108d557600080fd5b506103c56108e4366004614954565b611efe565b6103c56108f7366004614a17565b611f88565b34801561090857600080fd5b506104a97f000000000000000000000000000000000000000000000000000000000000000081565b6103c561036b366004614d56565b34801561094a57600080fd5b506104a961095936600461482e565b6121fe565b6103c561096c366004614a17565b61227a565b6103c561097f36600461482e565b61230f565b34801561099057600080fd5b506103c561099f366004614e21565b612402565b3480156109b057600080fd5b506104096109bf3660046148b6565b61255a565b3480156109d057600080fd5b506109e46109df36600461482e565b6126a4565b604080516bffffffffffffffffffffffff96871681529486166020860152929094169183019190915263ffffffff1660608201526001600160a01b03909116608082015260a00161039c565b348015610a3c57600080fd5b50600454610436906001600160a01b031681565b348015610a5c57600080fd5b50610390610a6b366004614a17565b6127c1565b348015610a7c57600080fd5b50610520610a8b36600461482e565b6127d4565b348015610a9c57600080fd5b506105206127ea565b348015610ab157600080fd5b506105206127f5565b348015610ac657600080fd5b50610520612803565b6103c5610add36600461482e565b612810565b348015610aee57600080fd5b506103c5610afd366004614e4d565b6129b0565b348015610b0e57600080fd5b506103c5610b1d36600461490d565b612ab2565b348015610b2e57600080fd5b506103c5610b3d366004614ec8565b612bf2565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fa5a85640000000000000000000000000000000000000000000000000000000001480610bd557507fffffffff0000000000000000000000000000000000000000000000000000000082167fee4f8adf00000000000000000000000000000000000000000000000000000000145b80610c2157507fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000145b80610c6d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610cb957507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b6000610cca82612ce6565b9050610cd63382612d6a565b610d275760405162461bcd60e51b815260206004820152600360248201527f4c3a30000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000610d44610d34611d41565b83610d3d612803565b6000612db7565b506001600160a01b0384166000908152600d602052604090208190559050610d6b83612e09565b610d8b82610d7883612ed7565b6bffffffffffffffffffffffff16612efe565b505050565b6000610cb9610d9e83612f59565b612f73565b6000610db6610db183612f59565b612ce6565b9050610dc23382612d6a565b610e0e5760405162461bcd60e51b815260206004820152600360248201527f473a3100000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60008281526001602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b610e8c3384612fe9565b610ed85760405162461bcd60e51b815260206004820152600360248201527f533a3600000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b600080610ee6848487612ffd565b80519193509150610f395760405162461bcd60e51b815260206004820152600360248201527f533a5300000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60208101511561100957806040015163ffffffff16610f5b8260200151613059565b63ffffffff161015610faf5760405162461bcd60e51b815260206004820152600360248201527f533a3700000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b602081015160ff1c600114156110095760405162461bcd60e51b8152600401610d1e9060208082526004908201527f4e4f504500000000000000000000000000000000000000000000000000000000604082015260600190565b602081015115801561101f5750805160ff1c6001145b6110325761102d828261306e565b61103c565b61103c8282613188565b505050505050565b61104c613337565b6001600160a01b03821660008181526003602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b60006110d3611d51565b67ffffffffffffffff16905090565b6110ea613337565b600980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040519081527fc97e86a927b4a897832650767255fd568e377e7fbe9586c81d26b77a2c3ffc8b9060200160405180910390a150565b6040821080156111665750604081105b6111b25760405162461bcd60e51b815260206004820152600b60248201527f554e544545535445443a310000000000000000000000000000000000000000006044820152606401610d1e565b6111bc3385613398565b506001600160a01b03909316600090815260086020908152604080832061ffff90951683529390529190912060069290921b179055565b6111fd3383612d6a565b6112495760405162461bcd60e51b815260206004820152600360248201527f533a3800000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60008061125683856133fb565b6001600160a01b0386166000908152600183016020526040812055909250905061127f81613447565b1561129757600082556112928484613535565b6112a8565b6112a884610d788360200151612ed7565b50505050565b6000600560006112bd84612f59565b6001600160a01b0390811682526020820192909252604001600020541692915050565b6112e8613337565b600a547f8e4dbe2f73d3458c68bca94210eabefac52a4d20c038a8e50197ac9db654291b816040516bffffffffffffffffffffffff909116815260200160405180910390a16113373382610d78565b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016600a55565b6113c46040518061016001604052806000815260200160008152602001606081526020016060815260200160006001600160a01b031681526020016000815260200160608152602001606081526020016060815260200160608152602001606081525090565b6000806000806113d661067f87612f59565b6040805160088082526101208201909252949850929650909450925060009190816020015b60608152602001906001900390816113fb5790505090506040518060400160405280600481526020017f42415345000000000000000000000000000000000000000000000000000000008152508160008151811061145b5761145b614f04565b60200260200101819052506040518060400160405280600481526020017f4559455300000000000000000000000000000000000000000000000000000000815250816001815181106114af576114af614f04565b60200260200101819052506040518060400160405280600581526020017f4d4f5554480000000000000000000000000000000000000000000000000000008152508160028151811061150357611503614f04565b60200260200101819052506040518060400160405280600481526020017f48414952000000000000000000000000000000000000000000000000000000008152508160038151811061155757611557614f04565b60200260200101819052506040518060400160405280600381526020017f4841540000000000000000000000000000000000000000000000000000000000815250816004815181106115ab576115ab614f04565b60200260200101819052506040518060400160405280600481526020017f4241434b00000000000000000000000000000000000000000000000000000000815250816005815181106115ff576115ff614f04565b60200260200101819052506040518060400160405280600481526020017f4e45434b000000000000000000000000000000000000000000000000000000008152508160068151811061165357611653614f04565b60200260200101819052506040518060400160405280600481526020017f484f4c4400000000000000000000000000000000000000000000000000000000815250816007815181106116a7576116a7614f04565b602090810291909101810191909152604080516101608101825260018152428184015281518083018352600981527f4e75676746542056310000000000000000000000000000000000000000000000818501528183015281518083018352601681527f4e7567672046756e6769626c6520546f6b656e2056310000000000000000000081850152606082015260008a8152808452829020546001600160a01b0316608082015260a081019990995260c089019590955260e08801939093526101008701919091526101208601528151808201939093528151808403909101815291810190526101408301525090565b60006117a1826126a4565b509195945050505050565b6000610cb9610db183612f59565b600060608060606117ca856121fe565b935083611842576117f36117ee6117e9876001600160a01b03166135e6565b6135f9565b613604565b9350836118425760405162461bcd60e51b815260206004820152600360248201527f503a4c00000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60408051600880825261012082019092529060208201610100803683375050604080516008808252610120820190925292955090506020820161010080368337505060408051600880825261012082019092529294509050602082016101008036833701905050905060078416836000815181106118c2576118c2614f04565b602002602001019060ff16908160ff168152505060005b60078160ff1610156119fd5760006118f186836137ee565b905061ffff811661190257506119eb565b845160ff600883901c8116919083169087908390811061192457611924614f04565b602002602001015160ff16600014156119e7576001600160a01b038916600090815260086020908152604080832061ffff871684529091529020548551600682901c90879060ff861690811061197c5761197c614f04565b60ff90921660209283029190910190910152603f8116878460ff16815181106119a7576119a7614f04565b602002602001019060ff16908160ff168152505081888460ff16815181106119d1576119d1614f04565b602002602001019060ff16908160ff1681525050505b5050505b806119f581614f62565b9150506118d9565b509193509193565b611a136101f4612710614f82565b63ffffffff16816001600160a01b0316108015611a3a57506101f46001600160a01b038216115b611a865760405162461bcd60e51b815260206004820152600360248201527f473a3100000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b611a8e61381e565b611a9781613907565b611aa13382613a21565b50565b611aae3384613398565b506000611aba846121fe565b9050611ac7818484613a94565b6001600160a01b03909416600090815260076020526040902093909355505050565b6009546001600160a01b0316611b415760405162461bcd60e51b815260206004820152600360248201527f543a3400000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6000611b4c826121fe565b90506000611b5983613acc565b6009546040517f80011aa70000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018690523360448301529293509116906380011aa7906bffffffffffffffffffffffff8416906064016000604051808303818588803b158015611bd757600080fd5b505af1158015611beb573d6000803e3d6000fd5b5050600954604080516001600160a01b039283168152918816602083015281018690523360608201526bffffffffffffffffffffffff851660808201527f58ca548c1fd63f641dfb02f79df36d4f29bd995f0733d2ed3595b6cfde7db4e1935060a0019150611c579050565b60405180910390a1505050565b611c7633611c7184612f59565b612fe9565b611cc25760405162461bcd60e51b815260206004820152600360248201527f463a3500000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60008281526005602090815260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0385169081179091558251858152918201527f7656ff24c75404c1fac4fa475e193f5ac3f455ada5e60a315bf6b8eaa8bd5e9b91015b60405180910390a15050565b6000611d4c43613c5e565b905090565b6000611d4c600a5460c01c90565b6000611d6a82613acc565b9050611d8433826bffffffffffffffffffffffff16612efe565b604080516001600160a01b03841681523360208201526bffffffffffffffffffffffff8316918101919091527f6866bab9e57b1b8d6e867bb41dc78ec6f8fcbdca05d8f065e3353df689741ff290606001611d35565b6000611de7600a54613ca3565b50919392505050565b600160008080611e0085876133fb565b805190925015159050611e5057846001600160a01b0316816040015163ffffffff161415611e3f57611e38611e33611dda565b613d0a565b9250611eb9565b600080600093509350935050611ee9565b602081015160ff1c60011415611e6557600093505b611e728160200151612ed7565b9150611e818160000151612ed7565b9250611e8b612803565b6bffffffffffffffffffffffff16836bffffffffffffffffffffffff161015611eb957611eb6612803565b92505b6bffffffffffffffffffffffff8316611edb576601c6bf526340009250611ee7565b611ee483613d60565b92505b505b9250925092565b6000610cb960065483613d7e565b3360008181526002602090815260408083206001600160a01b0387168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b611f923383612d6a565b611fde5760405162461bcd60e51b815260206004820152600360248201527f533a3000000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b600080611feb83856133fb565b91509150826001600160a01b0316816040015163ffffffff1614801561201057508051155b156120b4576601c6bf5263400034101561206c5760405162461bcd60e51b815260206004820152600360248201527f533a3100000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60208101511561207e5761207e614faa565b61209481604001518260600151610d3d34613d90565b50825561209f61381e565b6120a883613dab565b61129260003085613e99565b80516121025760405162461bcd60e51b815260206004820152600360248201527f533a3400000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6020810151156121d257806040015163ffffffff166121248260200151613059565b63ffffffff1610156121785760405162461bcd60e51b815260206004820152600360248201527f533a5200000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b602081015160ff1c600114156121d25760405162461bcd60e51b8152600401610d1e9060208082526004908201527f4e4f504500000000000000000000000000000000000000000000000000000000604082015260600190565b805160ff1c6001146121ed576121e8828261306e565b6121f7565b6121f78282613188565b5050505050565b6001600160a01b0381166000908152600760205260408120541561223857506001600160a01b031660009081526007602052604090205490565b6000806000612245613ee8565b925092509250846001600160a01b03168214801561226257508215155b1561226f57949350505050565b506000949350505050565b612282613337565b6101f46001600160a01b0383161080156122a457506001600160a01b03821615155b6122f05760405162461bcd60e51b815260206004820152600360248201527f473a3100000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6122f861381e565b61230182613907565b61230b8183613a21565b5050565b600080600061231d846126a4565b945050935093505061232e84612ce6565b6001600160a01b0316306001600160a01b03161461234e5761234e614faa565b34836bffffffffffffffffffffffff1611156123ac5760405162461bcd60e51b815260206004820152600360248201527f4c3a3300000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6123bd6123b834613d90565b613f10565b6000806123d46123cb611d41565b84610d3d612803565b6001600160a01b0388166000908152600d60205260409020829055909250905061103c83610d788387614fd9565b600061240d83612ce6565b90506124193382612d6a565b6124655760405162461bcd60e51b815260206004820152600360248201527f533a4100000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b61246d612803565b6bffffffffffffffffffffffff16826bffffffffffffffffffffffff1610156124d85760405162461bcd60e51b815260206004820152600360248201527f533a4200000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6124e183612e09565b6000806124ee85846133fb565b80519193509150156125425760405162461bcd60e51b815260206004820152600560248201527f4e4f5045320000000000000000000000000000000000000000000000000000006044820152606401610d1e565b612550600084866001612db7565b5090915550505050565b6060600061256783612f59565b6001600160a01b03808216600090815260056020526040812054929350911661259b576004546001600160a01b03166125ad565b6125ad826001600160a01b03166112ae565b600480546040517f084050f50000000000000000000000000000000000000000000000000000000081523092810192909252602482018790526001600160a01b03838116604484015260ff7401000000000000000000000000000000000000000083048116606485015275010000000000000000000000000000000000000000008304166084840152929350919091169063084050f59060a40160006040518083038186803b15801561265f57600080fd5b505afa158015612673573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261269b9190810190615000565b95945050505050565b6001600160a01b0381166000908152600d602052604081205481908190819081906126ce81614034565b91506001600160a01b0382166127265760405162461bcd60e51b815260206004820152600360248201527f4c3a3400000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b600061273182612ed7565b9050600061273d612803565b905061271061274d60648461508d565b61275791906150f0565b96506127638783614fd9565b9750806bffffffffffffffffffffffff16886bffffffffffffffffffffffff16101561279857612793888261511b565b61279b565b60005b95506103e86127a984613059565b6127b39190614f82565b945050505091939590929450565b60006127cd8284612d6a565b9392505050565b60006127df826126a4565b509295945050505050565b6000611d4c600a5490565b6000611d4c600a5460601c90565b6000611d4c600a54614048565b6000806000806000612821866126a4565b945063ffffffff16945094509450945061283a86612ce6565b6001600160a01b0316306001600160a01b03161461285a5761285a614faa565b6001600160a01b0386166000908152600d60205260408120553361287c611d41565b63ffffffff16836bffffffffffffffffffffffff16106128ef576128a03383612d6a565b6128ec5760405162461bcd60e51b815260206004820152600360248201527f4c3a3100000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b50805b60006128fa34613d90565b9050806bffffffffffffffffffffffff16876bffffffffffffffffffffffff1611156129685760405162461bcd60e51b815260206004820152600360248201527f4c3a3200000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6000612974888361511b565b90506129836123b88289614fd9565b61299b83876bffffffffffffffffffffffff16612efe565b6129a5838a613535565b505050505050505050565b6129b8613337565b600480546040517f11c16aa30000000000000000000000000000000000000000000000000000000081526000926001600160a01b03909216916311c16aa391612a079186918991899101615197565b602060405180830381600087803b158015612a2157600080fd5b505af1158015612a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a599190615280565b600654909150600082612a6c8386613d7e565b612a76919061529d565b60ff169050612aa7826008612a8b87826152c2565b84811b600190921b6000190160ff919091161b19919091161790565b600655505050505050565b612abc3384612fe9565b612b085760405162461bcd60e51b815260206004820152600360248201527f533a3900000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b600080612b16848487612ffd565b6001600160a01b03871660009081526001830160205260408120559092509050612b3f81613447565b15612bd957600080835561ffff84168152600b6020526040902054612ba65760405162461bcd60e51b815260206004820152600360248201527f503a3300000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b612bb08584614098565b61ffff83166000908152600b60205260408120805491612bcf836152eb565b91905055506121f7565b6121f7612be586612ce6565b610d788360200151612ed7565b612bfc3384612fe9565b612c485760405162461bcd60e51b815260206004820152600360248201527f533a4300000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b612c5283836140c9565b61ffff82166000908152600b60205260408120805491612c7183615302565b9190505550600080612c84858587612ffd565b8051919350915015612cd85760405162461bcd60e51b815260206004820152600360248201527f533a4400000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b612550600086856001612db7565b6000612cf1826140fa565b612d3d5760405162461bcd60e51b815260206004820152600560248201527f543a393a320000000000000000000000000000000000000000000000000000006044820152606401610d1e565b506001600160a01b038082166000908152602081905260409020541680612d65575030919050565b919050565b6000826001600160a01b0316826001600160a01b031614806127cd5750506001600160a01b0390811660009081526002602090815260408083209490931682529290925290205460ff1690565b600080612dc4828761410d565b9150612dd0828661415e565b91508215612de657612de3826001614193565b91505b612df082856141ca565b9092509050612dfe82614229565b915094509492505050565b612e133382612fe9565b8015612e2f575030612e2482612f73565b6001600160a01b0316145b612e7b5760405162461bcd60e51b815260206004820152600360248201527f4e3a3100000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6001600160a01b03811660009081526020818152604080832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116909155600190925290912080549091169055611aa1333083613e99565b6000610cb9612ef96509184e72a00060a085901c66ffffffffffffff1661531d565b613d90565b600080600080600085875af1905080610d8b5760405162461bcd60e51b815260206004820152600360248201527f5a3a3000000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60006001600160a01b03821115612f6f57600080fd5b5090565b6000612f7e826140fa565b612fca5760405162461bcd60e51b815260206004820152600560248201527f543a393a310000000000000000000000000000000000000000000000000000006044820152606401610d1e565b506001600160a01b039081166000908152600160205260409020541690565b60006127cd83612ff884612ce6565b612d6a565b6040805160808101825260008082526020808301829052828401829052606083018290526001600160a01b0387168252600c815283822061ffff871683526002019052919091209061304f8284614275565b9050935093915050565b6000610cb963ffffffff60d884901c166135e6565b600061307d8260000151613059565b63ffffffff16826040015163ffffffff1611156130dc5760405162461bcd60e51b815260206004820152600360248201527f533a4600000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b81606001516001600160a01b03166130f78360000151614034565b6001600160a01b03161461313157815160018401600061311683614034565b6001600160a01b031681526020810191909152604001600020555b81516000908190819061315e9061314781613059565b87606001516131598960200151612ed7565b614315565b828955919450925090506131756123b88284614fd9565b61317e83612ed7565b9695505050505050565b6000613192612803565b6bffffffffffffffffffffffff163410156131ef5760405162461bcd60e51b815260206004820152600360248201527f533a3500000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60208201511580156132015750815115155b61324d5760405162461bcd60e51b815260206004820152600560248201527f4e4f5045330000000000000000000000000000000000000000000000000000006044820152606401610d1e565b815160ff1c6001146132a15760405162461bcd60e51b815260206004820152600560248201527f4e4f5045340000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60008060006132cb8560000151866040015160016132bf9190614f82565b87606001516000614315565b828955604088015192955090935091506132fd906132ea906001614f82565b86516132f7906000614193565b9061410d565b8660010160006133108860000151614034565b6001600160a01b031681526020810191909152604001600020556131756123b88284614fd9565b3360009081526003602052604090205460ff166133965760405162461bcd60e51b815260206004820152600960248201527f554e5452555354454400000000000000000000000000000000000000000000006044820152606401610d1e565b565b60006133a382612ce6565b90506133af8382612d6a565b610cb95760405162461bcd60e51b815260206004820152600360248201527f503a4200000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6040805160808101825260008082526020808301829052828401829052606083018290526001600160a01b0386168252600c9052919091209061343e8284614275565b90509250929050565b600081602001516000141561349e5760405162461bcd60e51b815260206004820152600360248201527f533a4500000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60006134ad8360000151613059565b63ffffffff16836040015163ffffffff1611905060006134d08460000151614034565b6001600160a01b03166134e68560200151614034565b6001600160a01b031614905060006135088560000151600160ff9190911c1490565b801561351b5750602085015160ff1c6001145b905081801561269b5750808061269b575091949350505050565b3061353f82612ce6565b6001600160a01b0316146135955760405162461bcd60e51b815260206004820152600360248201527f4e3a3000000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6001600160a01b03818116600090815260208190526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001691841691909117905561230b308383613e99565b600063ffffffff821115612f6f57600080fd5b6000610cb9826143d8565b6000816136535760405162461bcd60e51b815260206004820152600360248201527f503a3800000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60065461366d60ff8416613668836000613d7e565b6144c6565b61367890600161533c565b90911790600361369460ff600886901c16613668846001613d7e565b61369f90600161533c565b61010017901b9190911790600e6136c260ff601086901c16613668846002613d7e565b6136cd90600161533c565b61020017901b919091179060ff601884901c811690602085901c8116908290602887901c1660808210156137205761370a83613668876003613d7e565b61371590600161533c565b610300179250613741565b61372f83613668876004613d7e565b61373a90600161533c565b6104001792505b601983901b86179550601e8210156137785761376281613668876005613d7e565b61376d90600161533c565b6105001790506137de565b60378210156137a65761379081613668876006613d7e565b61379b90600161533c565b6106001790506137de565b604b8210156137d4576137be81613668876007613d7e565b6137c990600161533c565b6107001790506137de565b5050505050919050565b60241b9490941795945050505050565b60006127cd83600b61380085826152c2565b61380b90600361529d565b82811c6001831b60001901169392505050565b600061382934613d90565b600a5490915060008061383b83613ca3565b509250509150816bffffffffffffffffffffffff16846bffffffffffffffffffffffff1610156138ad5760405162461bcd60e51b815260206004820152600360248201527f543a3100000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60006138b9838661511b565b90506138c481614536565b6138ce9083614fd9565b91506138db846001614551565b93506138f16138ea838761511b565b85906145b1565b93506138fd8483614611565b600a555050505050565b6001600160a01b0381166000908152600760205260409020541561396d5760405162461bcd60e51b815260206004820152600360248201527f503a3500000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b60008161397b600143615354565b6040517f4206900000000000000000000000000000000000000000000000000000000000602082015260609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660238301524060378201526057016040516020818303038152906040528051906020012060001c90506000613a0082613604565b6001600160a01b039093166000908152600760205260409020929092555050565b6001600160a01b0381811660008181526020819052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169487169485179055519192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600080613aa185856137ee565b61ffff169050613abf8585613ab688876137ee565b61ffff16614657565b915061269b858483614657565b600080613ad883612ce6565b905030613ae484612f73565b6001600160a01b0316148015613b0257506001600160a01b03811633145b613b4e5760405162461bcd60e51b815260206004820152600360248201527f543a3300000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b600a546001600160a01b03841660009081526020818152604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915560018352818420805482169055600c8352818420849055600d8352818420849055600783528184208490556005909252822080549091169055613bd890839086613e99565b613be181614048565b92506001613bef8260c01c90565b67ffffffffffffffff161015613c0757613c07614faa565b826bffffffffffffffffffffffff16613c208260601c90565b6bffffffffffffffffffffffff161015613c3c57613c3c614faa565b613c47816001614698565b9050613c5381846146af565b600a55509092915050565b6000610bb86045613c8f7f000000000000000000000000000000000000000000000000000000000000000085615354565b613c99919061536b565b610cb99190614f82565b600080600080613cb285614048565b9250613cbd83614536565b9150612710613ccc8660c01c90565b613ce09067ffffffffffffffff168561508d565b613cea91906150f0565b905080613cf78385614fd9565b613d019190614fd9565b93509193509193565b600080613d1d6509184e72a00084615382565b6bffffffffffffffffffffffff161115613d57576509184e72a000613d4281846150f0565b613d4d906001614fd9565b610cb9919061508d565b610cb9826146c6565b6000610cb9612710613d74846127d861508d565b611e3391906150f0565b60006127cd83600861380b85826152c2565b60006bffffffffffffffffffffffff821115612f6f57600080fd5b6001600160a01b03811660009081526007602052604090205415613e115760405162461bcd60e51b815260206004820152600360248201527f503a3600000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b600080613e1c613ee8565b9250925050826001600160a01b03168214613e795760405162461bcd60e51b815260206004820152600360248201527f503a3700000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6001600160a01b0390921660009081526007602052604090209190915550565b806001600160a01b0316826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000806000613ef56146d9565b90935063ffffffff169150613f0983613604565b9050909192565b806bffffffffffffffffffffffff16341015613f6e5760405162461bcd60e51b815260206004820152600360248201527f543a3200000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b600a546000613f7c83614536565b905061402c613f8b8284614fd9565b613ff58386613f9a8760601c90565b613fa49190614fd9565b613fae919061511b565b7fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff861660609190911b77ffffffffffffffffffffffff000000000000000000000000161790565b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff919091161790565b600a55505050565b6000610cb96001600160a01b038316612f59565b60006140548260c01c90565b67ffffffffffffffff16156140905761406d8260c01c90565b67ffffffffffffffff166140818360601c90565b61408b91906150f0565b610cb9565b600092915050565b6140a23383613398565b5060006140ae836121fe565b9050613a00816140bf8360006146f5565b8461ffff16614657565b6140d33383613398565b5060006140df836121fe565b9050613a00816140f3838561ffff166146f5565b6000614657565b6000614105826121fe565b151592915050565b60007fff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff83167effffffff00000000000000000000000000000000000000000000000000000060d884901b16176127cd565b60007fffffffffffffffffffffffff000000000000000000000000000000000000000083166001600160a01b038316176127cd565b60006127cd83600160ff856141a95760006141ac565b60015b60ff16811b600190921b6000190160ff919091161b19919091161790565b6000806141dd6509184e72a00084615382565b905061422084603860a06141f76509184e72a000886150f0565b6bffffffffffffffffffffffff16811b600190921b6000190160ff919091161b19919091161790565b91509250929050565b60007fbfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82167f400000000000000000000000000000000000000000000000000000000000000017610cb9565b60408051608081018252600060208201819052918101829052606081019190915282548082526142a3611d41565b63ffffffff1660408301526001600160a01b03831660608301526142c681614034565b6001600160a01b0316836001600160a01b031614156142eb576020820181905261430e565b6001600160a01b0383166000908152600185016020908152604090912054908301525b5092915050565b60008060008061432488612ed7565b905061432f34613d90565b6143399086614fd9565b9450846bffffffffffffffffffffffff1661435382613d60565b6bffffffffffffffffffffffff1611156143af5760405162461bcd60e51b815260206004820152600360248201527f533a4700000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6143bc8787876000612db7565b90945091506143cb818661511b565b9250509450945094915050565b6000806143e48361477c565b905060006143f3600283615354565b409050806144435760405162461bcd60e51b815260206004820152600360248201527f453a3000000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b6040805160208082019390935260e09590951b7fffffffff0000000000000000000000000000000000000000000000000000000016858201523060601b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660448601528051603881870301815260589095019052835193019290922092915050565b600060ff82166145185760405162461bcd60e51b815260206004820152600360248201527f503a3900000000000000000000000000000000000000000000000000000000006044820152606401610d1e565b81614522846147c7565b61452c91906153ad565b60ff169392505050565b60006127106145476103e88461508d565b610cb991906150f0565b600061455d8360c01c90565b61456790836153cf565b915077ffffffffffffffffffffffffffffffffffffffffffffffff831660c083901b7fffffffffffffffff00000000000000000000000000000000000000000000000016176127cd565b60006145bd8360601c90565b6145c79083614fd9565b91507fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff8316606083901b77ffffffffffffffffffffffff00000000000000000000000016176127cd565b600061461d8383614fd9565b91506bffffffffffffffffffffffff82167fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008416176127cd565b600061469084600b61466986826152c2565b61467490600361529d565b85811b600190921b6000190160ff919091161b19919091161790565b949350505050565b6000816146a58460c01c90565b61456791906153f2565b6000816146bc8460601c90565b6145c7919061511b565b60006509184e72a000613d4d81846150f0565b6000806146e4611d41565b90506146ef816143d8565b91509091565b6000600383901c92505b8183600b16141561470f57610cb9565b8061471981614f62565b600b9490941c93915050826146ff578060ff1660161415610cb95760405162461bcd60e51b815260206004820152600860248201527f554e5445535445440000000000000000000000000000000000000000000000006044820152606401610d1e565b60007f000000000000000000000000000000000000000000000000000000000000000060456147ad610bb885615413565b6147b79190615430565b63ffffffff16610cb9919061533c565b600060ff821115612f6f57600080fd5b6000602082840312156147e957600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146127cd57600080fd5b6001600160a01b0381168114611aa157600080fd5b60006020828403121561484057600080fd5b81356127cd81614819565b60005b8381101561486657818101518382015260200161484e565b838111156112a85750506000910152565b6000815180845261488f81602086016020860161484b565b601f01601f19169290920160200192915050565b6020815260006127cd6020830184614877565b6000602082840312156148c857600080fd5b5035919050565b600080604083850312156148e257600080fd5b82356148ed81614819565b946020939093013593505050565b803561ffff81168114612d6557600080fd5b60008060006060848603121561492257600080fd5b833561492d81614819565b9250602084013561493d81614819565b915061494b604085016148fb565b90509250925092565b6000806040838503121561496757600080fd5b823561497281614819565b91506020830135801515811461498757600080fd5b809150509250929050565b6000806000606084860312156149a757600080fd5b83356149b281614819565b925060208401356149c281614819565b929592945050506040919091013590565b600080600080608085870312156149e957600080fd5b84356149f481614819565b9350614a02602086016148fb565b93969395505050506040820135916060013590565b60008060408385031215614a2a57600080fd5b8235614a3581614819565b9150602083013561498781614819565b600081518084526020808501945080840160005b83811015614a7857815160ff1687529582019590820190600101614a59565b509495945050505050565b600082825180855260208086019550808260051b84010181860160005b84811015614ace57601f19868403018952614abc838351614877565b98840198925090830190600101614aa0565b5090979650505050505050565b60208152815160208201526020820151604082015260006040830151610160806060850152614b0e610180850183614877565b91506060850151601f1980868503016080870152614b2c8483614877565b935060808701519150614b4a60a08701836001600160a01b03169052565b60a087015160c087015260c08701519150808685030160e0870152614b6f8483614a45565b935060e08701519150610100818786030181880152614b8e8584614a45565b945080880151925050610120818786030181880152614bad8584614a45565b945080880151925050610140818786030181880152614bcc8584614a83565b90880151878203909201848801529350905061317e8382614877565b848152608060208201526000614c016080830186614a45565b8281036040840152614c138186614a45565b90508281036060840152614c278185614a45565b979650505050505050565b60ff81168114611aa157600080fd5b600080600060608486031215614c5657600080fd5b8335614c6181614819565b92506020840135614c7181614c32565b91506040840135614c8181614c32565b809150509250925092565b60008060408385031215614c9f57600080fd5b82359150602083013561498781614819565b600060208284031215614cc357600080fd5b81356127cd81614c32565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614d2657614d26614cce565b604052919050565b600067ffffffffffffffff821115614d4857614d48614cce565b50601f01601f191660200190565b60008060008060808587031215614d6c57600080fd5b8435614d7781614819565b93506020850135614d8781614819565b925060408501359150606085013567ffffffffffffffff811115614daa57600080fd5b8501601f81018713614dbb57600080fd5b8035614dce614dc982614d2e565b614cfd565b818152886020838501011115614de357600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b80356bffffffffffffffffffffffff81168114612d6557600080fd5b60008060408385031215614e3457600080fd5b8235614e3f81614819565b915061343e60208401614e05565b600080600060408486031215614e6257600080fd5b833567ffffffffffffffff80821115614e7a57600080fd5b818601915086601f830112614e8e57600080fd5b813581811115614e9d57600080fd5b8760208260051b8501011115614eb257600080fd5b60209283019550935050840135614c8181614c32565b600080600060608486031215614edd57600080fd5b8335614ee881614819565b9250614ef6602085016148fb565b915061494b60408501614e05565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff811415614f7957614f79614f33565b60010192915050565b600063ffffffff808316818516808303821115614fa157614fa1614f33565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60006bffffffffffffffffffffffff808316818516808303821115614fa157614fa1614f33565b6000806040838503121561501357600080fd5b825161501e81614819565b602084015190925067ffffffffffffffff81111561503b57600080fd5b8301601f8101851361504c57600080fd5b805161505a614dc982614d2e565b81815286602083850101111561506f57600080fd5b61508082602083016020860161484b565b8093505050509250929050565b60006bffffffffffffffffffffffff808316818516818304811182151516156150b8576150b8614f33565b02949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006bffffffffffffffffffffffff8084168061510f5761510f6150c1565b92169190910492915050565b60006bffffffffffffffffffffffff8381169083168181101561514057615140614f33565b039392505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561517a57600080fd5b8260051b8083602087013760009401602001938452509192915050565b60006040820160ff8616835260206040818501528185835260608501905060059250606086841b8601018760005b88811015615271577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa088840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18b360301811261522657600080fd5b8a01803567ffffffffffffffff81111561523f57600080fd5b80881b36038c131561525057600080fd5b61525d8582898501615148565b9587019594505050908401906001016151c5565b50909998505050505050505050565b60006020828403121561529257600080fd5b81516127cd81614c32565b600060ff821660ff84168060ff038211156152ba576152ba614f33565b019392505050565b600060ff821660ff84168160ff04811182151516156152e3576152e3614f33565b029392505050565b6000816152fa576152fa614f33565b506000190190565b600060001982141561531657615316614f33565b5060010190565b600081600019048311821515161561533757615337614f33565b500290565b6000821982111561534f5761534f614f33565b500190565b60008282101561536657615366614f33565b500390565b600063ffffffff8084168061510f5761510f6150c1565b60006bffffffffffffffffffffffff808416806153a1576153a16150c1565b92169190910692915050565b600060ff8316806153c0576153c06150c1565b8060ff84160691505092915050565b600067ffffffffffffffff808316818516808303821115614fa157614fa1614f33565b600067ffffffffffffffff8381169083168181101561514057615140614f33565b600063ffffffff8381169083168181101561514057615140614f33565b600063ffffffff808316818516818304811182151516156150b8576150b8614f3356fea26469706673582212200f634d34fcf2e4a4150d2420e9432f5e286cf08cb6e21fb90b80d61563d4e50b64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "The zero address indicates there is no approved address.  Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.",
        "params": {
          "_approved": "The new approved NFT controller",
          "_tokenId": "The NFT to approve"
        }
      },
      "burn(uint160)": {
        "details": "should only be called directly",
        "params": {
          "tokenId": "the id of the nugg being burned"
        }
      },
      "ethPerShare()": {
        "details": "this value not always equivilent to the \"floor\" price which can consist of perceived value. can be looked at as an \"intrinsic floor\"this is the value that users will receive when their either burn or loan out nuggs",
        "returns": {
          "res": "-> [current staked eth] / [current staked shares]"
        }
      },
      "extractProtocolEth()": {
        "details": "caller must be a trusted user"
      },
      "getApproved(uint256)": {
        "details": "Throws if `_tokenId` is not a valid NFT.",
        "params": {
          "_tokenId": "The NFT to find the approved address for"
        },
        "returns": {
          "_0": "The approved address for this NFT, or the zero address if there is none"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "_operator": "The address that acts on behalf of the owner",
          "_owner": "The address that owns the NFTs"
        },
        "returns": {
          "_0": "True if `_operator` is an approved operator for `_owner`, false otherwise"
        }
      },
      "loanInfo(uint160)": {
        "details": "contract ->frontend -> used to set the amount of eth for user",
        "params": {
          "tokenId": "the token who's current loan to check"
        },
        "returns": {
          "earned": "-> the amount of eth the minSharePrice has increased since loan was last rebalanced",
          "epochDue": "-> the final epoch a user is safe from liquidation (inclusive)",
          "loaner": "-> the user responsable for the loan",
          "toPayoff": "->  the current amount loaned out, plus the final rebalance fee",
          "toRebalance": "->  the fee a user must pay to rebalance (and extend) the loan on their nugg"
        }
      },
      "minSharePrice()": {
        "details": "premium here is used to push against dillution of supply through ensuring the price always increasesused by the front end",
        "returns": {
          "res": "-> premium + protcolFee + ethPerShare"
        }
      },
      "ownerOf(uint256)": {
        "details": "NFTs assigned to zero address are considered invalid, and queries  about them do throw.",
        "params": {
          "_tokenId": "The identifier for an NFT"
        },
        "returns": {
          "_0": "The address of the owner of the NFT"
        }
      },
      "protocolEth()": {
        "details": "this will be",
        "returns": {
          "res": "-> (PROTOCOL_FEE_BPS * [all eth staked] / 10000) - [all previously extracted eth]"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Emits the ApprovalForAll event. The contract MUST allow  multiple operators per owner.",
        "params": {
          "_approved": "True if the operator is approved, false to revoke approval",
          "_operator": "Address to add to the set of authorized operators"
        }
      },
      "setMigrator(address)": {
        "details": "caller must be a trusted user",
        "params": {
          "migrator": "the address to set as the migrator contract"
        }
      },
      "stakedEth()": {
        "details": "can be used as the market-cap or tvl of all nuggft v1not equivilent to the balance of eth the contract holds, which also hs protocolEth and unclaimed eth from unsuccessful swaps"
      },
      "stakedShares()": {
        "details": "this is equivilent to the amount of nuggs in existance"
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.",
        "params": {
          "interfaceID": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise"
        }
      },
      "tokenURI(uint256)": {
        "details": "Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \"ERC721  Metadata JSON Schema\"."
      },
      "valueForDelegate(address,uint160)": {
        "details": "returns 0 if no delegate can be made for this oken",
        "params": {
          "sender": "-> the address of the user who will be delegating",
          "tokenId": "-> the token to be delegated to"
        },
        "returns": {
          "canDelegate": "-> instead of reverting this function will return false",
          "nextSwapAmount": "-> the minimum value that must be sent with a delegate call",
          "senderCurrentOffer": "->"
        }
      },
      "valueForPayoff(uint160)": {
        "details": "should be used to tell user how much eth to send for payoff"
      },
      "valueForRebalance(uint160)": {
        "details": "should be used to tell user how much eth to send for rebalance"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Genesis(uint256,uint32,uint32)": {
        "notice": "Explain to an end user what this does"
      }
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Change or reaffirm the approved address for an NFT"
      },
      "burn(uint160)": {
        "notice": "burns a nugg from existance, dealing the eth worth of that share to the user"
      },
      "ethPerShare()": {
        "notice": "returns the total \"ethPerShare\" held by the contract"
      },
      "extractProtocolEth()": {
        "notice": "sends the current protocolEth to the user and resets the value to zero"
      },
      "getApproved(uint256)": {
        "notice": "Get the approved address for a single NFT"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Query if an address is an authorized operator for another address"
      },
      "loanInfo(uint160)": {
        "notice": "for a nugg's active loan: calculates the current min eth a user must send to payoff or rebalance"
      },
      "minSharePrice()": {
        "notice": "returns the minimum eth that must be added to create a new share"
      },
      "name()": {
        "notice": "A descriptive name for a collection of NFTs in this contract"
      },
      "ownerOf(uint256)": {
        "notice": "Find the owner of an NFT"
      },
      "protocolEth()": {
        "notice": "returns the amount of eth extractable by protocol"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Enable or disable approval for a third party (\"operator\") to manage  all of `msg.sender`'s assets"
      },
      "setMigrator(address)": {
        "notice": "sets the migrator contract"
      },
      "stakedEth()": {
        "notice": "returns the total amount of staked eth held by the contract"
      },
      "stakedShares()": {
        "notice": "returns the total number of staked shares held by the contract"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      },
      "symbol()": {
        "notice": "An abbreviated name for NFTs in this contract"
      },
      "tokenURI(uint256)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
      },
      "valueForDelegate(address,uint160)": {
        "notice": "calculates the minimum eth that must be sent with a delegate call"
      },
      "valueForPayoff(uint160)": {
        "notice": "\"toPayoff\" value from \"loanInfo\""
      },
      "valueForRebalance(uint160)": {
        "notice": "\"toRebalance\" value from \"loanInfo\""
      }
    },
    "notice": "deviations from ERC721 standard: 1. no verificaiton the receiver is a ERC721Reciever - on top of this being a gross waste of gas, the way the swapping logic works makes this only worth calling when a user places an offer - and we did not want to call \"onERC721Recieved\" when no token was being sent. 2.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10626,
        "contract": "src/NuggftV1.sol:NuggftV1",
        "label": "owners",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 10630,
        "contract": "src/NuggftV1.sol:NuggftV1",
        "label": "approvals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 10636,
        "contract": "src/NuggftV1.sol:NuggftV1",
        "label": "operatorApprovals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 11094,
        "contract": "src/NuggftV1.sol:NuggftV1",
        "label": "isTrusted",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7562,
        "contract": "src/NuggftV1.sol:NuggftV1",
        "label": "dotnuggV1Processor",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 7567,
        "contract": "src/NuggftV1.sol:NuggftV1",
        "label": "dotnuggV1DefaultWidth",
        "offset": 20,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 7572,
        "contract": "src/NuggftV1.sol:NuggftV1",
        "label": "dotnuggV1DefaultZoom",
        "offset": 21,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 7576,
        "contract": "src/NuggftV1.sol:NuggftV1",
        "label": "resolvers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7578,
        "contract": "src/NuggftV1.sol:NuggftV1",
        "label": "featureLengths",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 8343,
        "contract": "src/NuggftV1.sol:NuggftV1",
        "label": "proofs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint160,t_uint256)"
      },
      {
        "astId": 8348,
        "contract": "src/NuggftV1.sol:NuggftV1",
        "label": "settings",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint160,t_struct(Settings)8339_storage)"
      },
      {
        "astId": 9151,
        "contract": "src/NuggftV1.sol:NuggftV1",
        "label": "migrator",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 9153,
        "contract": "src/NuggftV1.sol:NuggftV1",
        "label": "stake",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 9547,
        "contract": "src/NuggftV1.sol:NuggftV1",
        "label": "protocolItems",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 9552,
        "contract": "src/NuggftV1.sol:NuggftV1",
        "label": "swaps",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint160,t_struct(Mapping)9527_storage)"
      },
      {
        "astId": 7960,
        "contract": "src/NuggftV1.sol:NuggftV1",
        "label": "loans",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint160,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint16,t_struct(Storage)9534_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct NuggftV1Swap.Storage)",
        "numberOfBytes": "32",
        "value": "t_struct(Storage)9534_storage"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint160,t_struct(Mapping)9527_storage)": {
        "encoding": "mapping",
        "key": "t_uint160",
        "label": "mapping(uint160 => struct NuggftV1Swap.Mapping)",
        "numberOfBytes": "32",
        "value": "t_struct(Mapping)9527_storage"
      },
      "t_mapping(t_uint160,t_struct(Settings)8339_storage)": {
        "encoding": "mapping",
        "key": "t_uint160",
        "label": "mapping(uint160 => struct NuggftV1Proof.Settings)",
        "numberOfBytes": "32",
        "value": "t_struct(Settings)8339_storage"
      },
      "t_mapping(t_uint160,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint160",
        "label": "mapping(uint160 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Mapping)9527_storage": {
        "encoding": "inplace",
        "label": "struct NuggftV1Swap.Mapping",
        "members": [
          {
            "astId": 9521,
            "contract": "src/NuggftV1.sol:NuggftV1",
            "label": "self",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Storage)9534_storage"
          },
          {
            "astId": 9526,
            "contract": "src/NuggftV1.sol:NuggftV1",
            "label": "items",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint16,t_struct(Storage)9534_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Settings)8339_storage": {
        "encoding": "inplace",
        "label": "struct NuggftV1Proof.Settings",
        "members": [
          {
            "astId": 8338,
            "contract": "src/NuggftV1.sol:NuggftV1",
            "label": "anchorOverrides",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Storage)9534_storage": {
        "encoding": "inplace",
        "label": "struct NuggftV1Swap.Storage",
        "members": [
          {
            "astId": 9529,
            "contract": "src/NuggftV1.sol:NuggftV1",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9533,
            "contract": "src/NuggftV1.sol:NuggftV1",
            "label": "offers",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint160": {
        "encoding": "inplace",
        "label": "uint160",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}