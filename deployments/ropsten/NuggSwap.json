{
  "address": "0x8E696927f4581680698C124cbE8B5143e0Cf9Dbf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IxNUGG",
          "name": "_xnugg",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "interval",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "baseblock",
          "type": "uint128"
        }
      ],
      "name": "Genesis",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapnum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "SubmitClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapnum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SubmitOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapnum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "epoch",
          "type": "uint64"
        }
      ],
      "name": "SubmitSwap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "id",
          "type": "uint64"
        }
      ],
      "name": "blocknumFromId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpochId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "res",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentSeed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "res",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blocknum",
          "type": "uint256"
        }
      ],
      "name": "epochFromBlocknum",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "id",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "startblock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endblock",
              "type": "uint256"
            },
            {
              "internalType": "enum EpochMath.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct EpochMath.Epoch",
          "name": "res",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "id",
          "type": "uint64"
        }
      ],
      "name": "epochFromId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "id",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "startblock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endblock",
              "type": "uint256"
            },
            {
              "internalType": "enum EpochMath.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct EpochMath.Epoch",
          "name": "res",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "id",
          "type": "uint64"
        }
      ],
      "name": "epochStatus",
      "outputs": [
        {
          "internalType": "enum EpochMath.Status",
          "name": "res",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "genesisBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getSeed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "res",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getSeedWithOffset",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "res",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_swapnum",
          "type": "uint256"
        }
      ],
      "name": "getSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "swapnum",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "leader",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "leaderAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "epoch",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "claimedByOwner",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "getSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "swapnum",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "leader",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "leaderAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "epoch",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "claimedByOwner",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nuggGet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nuggSet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "seedExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "res",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "submitClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "submitOffer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "requestedEpoch",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "requestedFloor",
          "type": "uint128"
        }
      ],
      "name": "submitSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xnugg",
      "outputs": [
        {
          "internalType": "contract IxNUGG",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa3c5b192db8b7e690b2c9fbb7cef73ee98b4382e2d52fa59e26d4cda2c1b8807",
  "receipt": {
    "to": null,
    "from": "0xB666C13b621568FeC210724DF161604adccfA257",
    "contractAddress": "0x8E696927f4581680698C124cbE8B5143e0Cf9Dbf",
    "transactionIndex": 12,
    "gasUsed": "2288412",
    "logsBloom": "0x
    "blockHash": "0xffa4e84855aacc409570a0ff8733c27cad4cff695dc922474cd6662d67dc21f3",
    "transactionHash": "0xa3c5b192db8b7e690b2c9fbb7cef73ee98b4382e2d52fa59e26d4cda2c1b8807",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 11433148,
        "transactionHash": "0xa3c5b192db8b7e690b2c9fbb7cef73ee98b4382e2d52fa59e26d4cda2c1b8807",
        "address": "0x8E696927f4581680698C124cbE8B5143e0Cf9Dbf",
        "topics": [
          "0xcecb518f1c86dff96ad81c15a77b8ecb21b258b40e56e199a12d856b9444667c"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000ae74bc",
        "logIndex": 2,
        "blockHash": "0xffa4e84855aacc409570a0ff8733c27cad4cff695dc922474cd6662d67dc21f3"
      }
    ],
    "blockNumber": 11433148,
    "cumulativeGasUsed": "4470517",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEa71B205D6B29224d945a905Af7A25f9E9EF4f3A"
  ],
  "solcInputHash": "88c6ca31fdeae79ad2aae7c6b1069606",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IxNUGG\",\"name\":\"_xnugg\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"interval\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"baseblock\",\"type\":\"uint128\"}],\"name\":\"Genesis\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapnum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SubmitClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapnum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SubmitOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapnum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"}],\"name\":\"SubmitSwap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"}],\"name\":\"blocknumFromId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"res\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"res\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocknum\",\"type\":\"uint256\"}],\"name\":\"epochFromBlocknum\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"startblock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endblock\",\"type\":\"uint256\"},{\"internalType\":\"enum EpochMath.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct EpochMath.Epoch\",\"name\":\"res\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"}],\"name\":\"epochFromId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"startblock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endblock\",\"type\":\"uint256\"},{\"internalType\":\"enum EpochMath.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct EpochMath.Epoch\",\"name\":\"res\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"}],\"name\":\"epochStatus\",\"outputs\":[{\"internalType\":\"enum EpochMath.Status\",\"name\":\"res\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getSeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"res\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getSeedWithOffset\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"res\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapnum\",\"type\":\"uint256\"}],\"name\":\"getSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapnum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"leader\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"leaderAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"claimedByOwner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapnum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"leader\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"leaderAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"claimedByOwner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nuggGet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nuggSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"seedExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"res\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"submitClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"submitOffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"requestedEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"requestedFloor\",\"type\":\"uint128\"}],\"name\":\"submitSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xnugg\",\"outputs\":[{\"internalType\":\"contract IxNUGG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"blocknumFromId(uint64)\":{\"details\":\"public wrapper for internal blocknumFirstFromEpoch() - to save on gas\"},\"currentEpochId()\":{\"details\":\"public wrapper for internal _currentEpoch() - to save on gas\"},\"epochFromBlocknum(uint256)\":{\"details\":\"public wrapper for internal blocknumFirstFromEpoch() - to save on gas\"},\"epochStatus(uint64)\":{\"details\":\"public wrapper for internal blocknumFirstFromEpoch() - to save on gas\"},\"genesisBlock()\":{\"details\":\"public wrapper for internal _genesisBlock - to save on gas\"},\"getSeed(uint256)\":{\"details\":\"@return\"},\"getSeedWithOffset(uint256,uint256)\":{\"details\":\"@return\"},\"interval()\":{\"details\":\"public wrapper for internal _interval - to save on gas\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"currentSeed()\":{\"notice\":\"gets unique base based on given epoch and converts encoded bytes to object that can be merged Note: by using the block hash no one knows what a nugg will look like before it's epoch. We considered making this harder to manipulate, but we decided that if someone were able to pull it off and make their own custom nugg, that would be really fucking cool.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NuggSwap.sol\":\"NuggSwap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/NuggSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './libraries/SwapLib.sol';\\nimport './interfaces/INuggSwap.sol';\\n\\nimport './interfaces/INuggSwapable.sol';\\nimport './interfaces/IxNUGG.sol';\\n\\nimport 'hardhat/console.sol';\\nimport './erc721/IERC721.sol';\\nimport './core/Epochable.sol';\\n\\nimport './common/Testable.sol';\\nimport './erc721/ERC721Holder.sol';\\n\\ncontract NuggSwap is INuggSwap, ERC721Holder, Testable, Epochable {\\n    using Address for address payable;\\n    using SwapLib for SwapLib.SwapData;\\n\\n    mapping(address => mapping(uint256 => address[])) internal _swapOwners;\\n\\n    // mapping(address => uint256) internal _registrations; // address - supports minting, supports swapping, implements mintable, implements swappable, where to send royalties, approvals\\n\\n    mapping(address => mapping(uint256 => mapping(uint256 => uint256))) internal _encodedSwapData;\\n\\n    mapping(address => mapping(uint256 => mapping(uint256 => mapping(address => uint256)))) internal _encodedOfferData;\\n\\n    IxNUGG public immutable override xnugg;\\n\\n    constructor(IxNUGG _xnugg) Epochable(25, uint128(block.number)) {\\n        xnugg = _xnugg;\\n    }\\n\\n    function getSwap(address nft, uint256 tokenid)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 swapnum,\\n            address leader,\\n            uint128 leaderAmount,\\n            uint64 epoch,\\n            bool claimedByOwner,\\n            bool exists\\n        )\\n    {\\n        swapnum = _swapOwners[nft][tokenid].length;\\n        (leader, epoch, claimedByOwner, exists) = SwapLib.decodeSwapData(_encodedSwapData[nft][tokenid][swapnum]);\\n        (leaderAmount, ) = SwapLib.decodeOfferData(_encodedOfferData[nft][tokenid][swapnum][leader]);\\n    }\\n\\n    function getSwap(\\n        address nft,\\n        uint256 tokenid,\\n        uint256 _swapnum\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 swapnum,\\n            address leader,\\n            uint128 leaderAmount,\\n            uint64 epoch,\\n            bool claimedByOwner,\\n            bool exists\\n        )\\n    {\\n        require(_swapnum <= _swapOwners[nft][tokenid].length);\\n        swapnum = _swapnum;\\n        (leader, epoch, claimedByOwner, exists) = SwapLib.decodeSwapData(_encodedSwapData[nft][tokenid][swapnum]);\\n        (leaderAmount, ) = SwapLib.decodeOfferData(_encodedOfferData[nft][tokenid][swapnum][leader]);\\n    }\\n\\n    // function registerFromCreation() external {\\n    //     // require contract in creation\\n    //     // require that nft implements the NuggSwapable interface\\n    //     // require that it is an nft (implements ERC721)\\n    // }\\n\\n    // function registerByOwner(address nft, address royaltyAddress) external {\\n    //     // require this is owner of nft\\n    //     // require that it is an nft (implements ERC721)\\n    // }\\n\\n    // function registerByTokenOwners(address nft, address royaltyAddress) external {\\n    //     // require this is owner of nft\\n    //     // require that it is an nft (implements ERC721)\\n    // }\\n\\n    function submitSwap(\\n        address nft,\\n        uint256 tokenid,\\n        uint64 requestedEpoch,\\n        uint128 requestedFloor\\n    ) external override {\\n        _submitSwap(nft, tokenid, msg_sender(), requestedEpoch, requestedFloor);\\n    }\\n\\n    function submitOffer(address nft, uint256 tokenid) external payable override {\\n        _submitOffer(nft, tokenid);\\n    }\\n\\n    function submitClaim(address nft, uint256 tokenid) external override {\\n        _submitClaim(nft, tokenid);\\n    }\\n\\n    function _submitSwap(\\n        address nft,\\n        uint256 tokenid,\\n        address account,\\n        uint64 requestedEpoch,\\n        uint128 requestedFloor\\n    ) internal {\\n        SwapLib.takeToken(IERC721(nft), tokenid, account);\\n\\n        address[] storage prevSwapOwners = _swapOwners[nft][tokenid];\\n\\n        prevSwapOwners.push(account);\\n\\n        (SwapLib.SwapData memory swap, SwapLib.OfferData memory offer) = loadData(nft, tokenid, account);\\n\\n        swap.handleSubmitSwap(offer, requestedEpoch, requestedFloor);\\n\\n        saveData(swap, offer);\\n\\n        // prevSwapOwners.push(account);\\n\\n        emit SubmitSwap(swap.nft, swap.tokenid, swap.num, offer.account, offer.amount, swap.epoch);\\n    }\\n\\n    function _submitOffer(address nft, uint256 tokenid) internal {\\n        (SwapLib.SwapData memory swap, SwapLib.OfferData memory offer) = loadData(nft, tokenid, msg_sender());\\n\\n        if (!swap.exists) mintToken(swap);\\n\\n        swap.handleSubmitOffer(offer, msg_value());\\n\\n        saveData(swap, offer);\\n\\n        uint256 increase = offer.amount - swap.leaderAmount;\\n\\n        (address royAccount, uint256 roy) = IERC2981(swap.nft).royaltyInfo(swap.tokenid, increase);\\n\\n        // todo - we need to check if they implement erc2981 - if they do not send royalties to owner - if they have no owner than no royalties\\n\\n        if (royAccount == address(xnugg)) {\\n            xnugg.onERC2981Received{value: increase}(\\n                address(this),\\n                offer.account,\\n                swap.nft,\\n                tokenid,\\n                address(0),\\n                0,\\n                ''\\n            );\\n        } else {\\n            IERC2981Receiver(royAccount).onERC2981Received{value: roy}(\\n                address(this),\\n                offer.account,\\n                swap.nft,\\n                swap.tokenid,\\n                address(0),\\n                0,\\n                ''\\n            );\\n            xnugg.onERC2981Received{value: increase - roy}(\\n                address(this),\\n                offer.account,\\n                swap.nft,\\n                tokenid,\\n                address(0),\\n                0,\\n                ''\\n            );\\n        }\\n\\n        emit SubmitOffer(swap.nft, swap.tokenid, swap.num, offer.account, offer.amount);\\n    }\\n\\n    function _submitClaim(address nft, uint256 tokenid) internal {\\n        (SwapLib.SwapData memory swap, SwapLib.OfferData memory offer) = loadData(nft, tokenid, msg_sender());\\n\\n        swap.handleSubmitClaim(offer);\\n\\n        saveData(swap, offer);\\n\\n        emit SubmitClaim(swap.nft, swap.tokenid, swap.num, offer.account);\\n    }\\n\\n    function mintToken(SwapLib.SwapData memory swap) internal {\\n        IERC721 _nft = IERC721(swap.nft);\\n\\n        require(_nft.supportsInterface(type(INuggMintable).interfaceId), 'AUC:MT:0');\\n\\n        uint256 tokenid = INuggMintable(address(swap.nft)).nuggSwapMint(swap.activeEpoch);\\n\\n        ensureActiveSeed();\\n\\n        require(tokenid == swap.tokenid, 'AUC:MT:2');\\n        require((_nft.ownerOf(swap.tokenid) == address(this)), 'AUC:MT:3');\\n\\n        swap.handleSubmitSwap(SwapLib.OfferData({account: address(0), amount: 0, claimed: false}), swap.activeEpoch, 0);\\n    }\\n\\n    function loadData(\\n        address nft,\\n        uint256 tokenid,\\n        address account\\n    ) internal view returns (SwapLib.SwapData memory swap, SwapLib.OfferData memory offer) {\\n        uint256 swapnum = _swapOwners[nft][tokenid].length;\\n\\n        (address leader, uint64 epoch, bool claimedByOwner, bool exists) = SwapLib.decodeSwapData(\\n            _encodedSwapData[nft][tokenid][swapnum]\\n        );\\n\\n        (uint128 leaderAmount, ) = SwapLib.decodeOfferData(_encodedOfferData[nft][tokenid][swapnum][leader]);\\n        console.log('yellow', swapnum);\\n        swap = SwapLib.SwapData({\\n            nft: nft,\\n            tokenid: tokenid,\\n            num: swapnum,\\n            leader: leader,\\n            leaderAmount: leaderAmount,\\n            epoch: epoch,\\n            exists: exists,\\n            claimedByOwner: claimedByOwner,\\n            owner: swapnum == 0 ? address(0) : _swapOwners[nft][tokenid][swapnum - 1],\\n            activeEpoch: currentEpochId()\\n        });\\n\\n        (uint128 amount, bool claimed) = SwapLib.decodeOfferData(_encodedOfferData[nft][tokenid][swapnum][account]);\\n\\n        offer = SwapLib.OfferData({claimed: claimed, amount: amount, account: account});\\n    }\\n\\n    function saveData(SwapLib.SwapData memory swap, SwapLib.OfferData memory offer) internal {\\n        _encodedSwapData[swap.nft][swap.tokenid][swap.num] = SwapLib.encodeSwapData(\\n            swap.leader,\\n            swap.epoch,\\n            swap.claimedByOwner,\\n            swap.exists\\n        );\\n        _encodedOfferData[swap.nft][swap.tokenid][swap.num][offer.account] = SwapLib.encodeOfferData(\\n            offer.amount,\\n            offer.claimed\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x81b59f4e51617463fa28792958b7c918098e31b0f050f0681dc45b1402a39a36\",\"license\":\"MIT\"},\"contracts/common/Testable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/Address.sol';\\n\\n/**\\n * @title Testable\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice commonly used and current exec context functions that sometimes require simple overriding in testing\\n */\\nabstract contract Testable {\\n    using Address for address payable;\\n\\n    bool inTesting = false;\\n\\n    constructor() {\\n        if (chain_id() != 1) inTesting = true;\\n    }\\n\\n    address pw;\\n\\n    function nuggSet() external {\\n        require(inTesting);\\n        pw = msg_sender();\\n    }\\n\\n    function nuggGet() external {\\n        require(inTesting && pw == msg_sender());\\n        send_eth(payable(msg_sender()), address(this).balance);\\n    }\\n\\n    function send_eth(address payable account, uint256 amount) internal virtual {\\n        account.sendValue(amount);\\n    }\\n\\n    function block_num() internal view virtual returns (uint256 res) {\\n        res = block.number;\\n    }\\n\\n    function msg_sender() internal view virtual returns (address res) {\\n        res = msg.sender;\\n    }\\n\\n    function msg_data() internal view virtual returns (bytes calldata res) {\\n        res = msg.data;\\n    }\\n\\n    function block_hash(uint256 id) internal view virtual returns (bytes32 res) {\\n        res = blockhash(id);\\n    }\\n\\n    function msg_value() internal view virtual returns (uint256 res) {\\n        res = msg.value;\\n    }\\n\\n    function chain_id() internal view virtual returns (uint256 res) {\\n        res = block.chainid;\\n    }\\n}\\n\",\"keccak256\":\"0x895de30f67246a2d03269a7011f67917dd21834fce2d5685edaa38234ee672f0\",\"license\":\"MIT\"},\"contracts/core/Epochable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\nimport '../interfaces/IEpochable.sol';\\n\\nimport '../interfaces/IEpochable.sol';\\nimport '../libraries/EpochMath.sol';\\nimport '../libraries/SeedMath.sol';\\n\\n/**\\n * @title Epochable\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice enables children contracts to break themselves into epochs based on block number\\n * @dev also enables storage of blockhash for a given epoch\\n */\\nabstract contract Epochable is IEpochable {\\n    using EpochMath for uint256;\\n\\n    mapping(uint256 => bytes32) private _seeds;\\n\\n    uint256 private _state;\\n\\n    event Genesis(uint128 interval, uint128 baseblock);\\n\\n    constructor(uint128 _interval, uint128 _baseblock) {\\n        _state = EpochMath.encodeData(_interval, _baseblock);\\n        emit Genesis(_interval, _baseblock);\\n    }\\n\\n    /**\\n     * @notice gets unique base based on given epoch and converts encoded bytes to object that can be merged\\n     * Note: by using the block hash no one knows what a nugg will look like before it's epoch.\\n     * We considered making this harder to manipulate, but we decided that if someone were able to\\n     * pull it off and make their own custom nugg, that would be really fucking cool.\\n     */\\n    function currentSeed() public view override returns (bytes32 res) {\\n        uint256 num = blocknumFromId(currentEpochId()) - 1;\\n        res = blockhash(num);\\n        require(res != 0, 'EPC:SBL');\\n        res = keccak256(abi.encodePacked(res, num));\\n    }\\n\\n    /**\\n     * @dev\\n     * @return\\n     */\\n    function getSeed(uint256 id) public view override returns (bytes32 res) {\\n        if (seedExists(id)) return _seeds[id];\\n        else if (currentEpochId() == id) return currentSeed();\\n        else require(false, 'SEED:GET:0');\\n    }\\n\\n    /**\\n     * @dev\\n     * @return\\n     */\\n    function getSeedWithOffset(uint256 id, uint256 offset) public view override returns (bytes32 res) {\\n        res = getSeed(id + offset);\\n    }\\n\\n    function seedExists(uint256 id) public view override returns (bool res) {\\n        return _seeds[id] != 0;\\n    }\\n\\n    /**\\n     * @dev\\n     * @return\\n     */\\n    function setSeed() internal {\\n        require(!seedExists(currentEpochId()), 'SEED:SET:0');\\n        _seeds[currentEpochId()] = currentSeed();\\n    }\\n\\n    /**\\n     * @dev\\n     * @return\\n     */\\n    function ensureActiveSeed() internal {\\n        if (!seedExists(currentEpochId())) {\\n            _seeds[currentEpochId()] = currentSeed();\\n        }\\n    }\\n\\n    /**\\n     * @dev public wrapper for internal _genesisBlock - to save on gas\\n     * @inheritdoc IEpochable\\n     */\\n    function genesisBlock() public view override returns (uint256 res) {\\n        res = _state.decodeGenesis();\\n    }\\n\\n    /**\\n     * @dev public wrapper for internal _interval - to save on gas\\n     * @inheritdoc IEpochable\\n     */\\n    function interval() public view override returns (uint256 res) {\\n        res = _state.decodeInterval();\\n    }\\n\\n    /**\\n     * @dev public wrapper for internal _currentEpoch() - to save on gas\\n     * @inheritdoc IEpochable\\n     */\\n    function currentEpochId() public view override returns (uint64 res) {\\n        res = _state.getIdFromBlocknum(block.number);\\n    }\\n\\n    function epochFromId(uint64 id) public view returns (EpochMath.Epoch memory res) {\\n        res = _state.getEpoch(id, block.number);\\n    }\\n\\n    /**\\n     * @dev public wrapper for internal blocknumFirstFromEpoch() - to save on gas\\n     */\\n    function epochFromBlocknum(uint256 blocknum) public view override returns (EpochMath.Epoch memory res) {\\n        res = _state.getEpoch(_state.getIdFromBlocknum(blocknum), block.number);\\n    }\\n\\n    /**\\n     * @dev public wrapper for internal blocknumFirstFromEpoch() - to save on gas\\n     */\\n    function epochStatus(uint64 id) public view returns (EpochMath.Status res) {\\n        return _state.getStatus(id, block.number);\\n    }\\n\\n    /**\\n     * @dev public wrapper for internal blocknumFirstFromEpoch() - to save on gas\\n     */\\n    function blocknumFromId(uint64 id) public view returns (uint256) {\\n        return _state.getStartBlockFromId(id);\\n    }\\n}\\n\",\"keccak256\":\"0xfd0c3667314fc43dcf649490bf6bba56595e4f06674ac80f12240fb571b769e1\",\"license\":\"MIT\"},\"contracts/erc165/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/erc20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/erc2981/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '../erc165/IERC165.sol';\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x873c1655e831f21a42146682992b786089c97444253818dcef23177b2a491706\",\"license\":\"MIT\"},\"contracts/erc2981/IERC2981Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC2981 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC2981 asset contracts.\\n */\\ninterface IERC2981Receiver {\\n    /**\\n     * @dev Whenever an {IERC2981} `tokenId` token is transferred to this contract via {IERC2981-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC2981.onERC2981Received.selector`.\\n     */\\n    function onERC2981Received(\\n        address operator,\\n        address from,\\n        address token,\\n        uint256 tokenId,\\n        address erc20,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external payable returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc15e2ee098f3954540e2b5589a4ba9dfd415d889f15c05a58d64be2b4566926a\",\"license\":\"MIT\"},\"contracts/erc721/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport './IERC721Receiver.sol';\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8cd5ce3e446f982d0d08e65326267bb4aa8cd8993b381e1090d604aad950f418\",\"license\":\"MIT\"},\"contracts/erc721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '../erc165/IERC165.sol';\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x20aac82a32a66ea9b8c9a2e22a2483538da51d92bb17ba9a37bcc4c954d91bd5\",\"license\":\"MIT\"},\"contracts/erc721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"contracts/interfaces/IEpochable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/EpochMath.sol';\\n\\n/**\\n * @title IEpochable\\n */\\n\\ninterface IEpochable {\\n    function getSeed(uint256 id) external view returns (bytes32 res);\\n\\n    function getSeedWithOffset(uint256 id, uint256 offset) external view returns (bytes32 res);\\n\\n    function seedExists(uint256 id) external view returns (bool res);\\n\\n    function currentSeed() external view returns (bytes32 res);\\n\\n    function genesisBlock() external view returns (uint256 res);\\n\\n    function interval() external view returns (uint256 res);\\n\\n    function currentEpochId() external view returns (uint64 res);\\n\\n    function epochFromBlocknum(uint256 blocknum) external view returns (EpochMath.Epoch memory res);\\n}\\n\",\"keccak256\":\"0x35114c1c2ba138383a6f58708c55bdc462b3c965d5abf48d922ab4aa3e43eb1d\",\"license\":\"MIT\"},\"contracts/interfaces/IEscrowable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../erc20/IERC20.sol';\\n\\n/**\\n * @title IEscrowable\\n * @dev interface for Escrow.sol\\n */\\ninterface IEscrowable {\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     */\\n    function tummy() external returns (address);\\n}\\n\\n/**\\n * @title IEscrow\\n * @dev interface for Escrow.sol\\n */\\ninterface IEscrow {\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     */\\n    function withdraw() external;\\n\\n    function rescueERC20(IERC20 token, uint256 amount) external;\\n\\n    function deposits() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf125ac3932e26f32c127cd3920391a04d6e7236e7bcea76ac1447bb11a00c191\",\"license\":\"MIT\"},\"contracts/interfaces/INuggMintable.sol\":{\"content\":\"pragma solidity 0.8.4;\\nimport './INuggSwapable.sol';\\n\\ninterface INuggMintable is INuggSwapable {\\n    function nuggSwapMint(uint256 currentEpochId) external returns (uint256 tokenId);\\n}\\n\",\"keccak256\":\"0x29e2a02a33411f467f761dfe330d4febfe07151e4da58a3f165ae5964830de7f\"},\"contracts/interfaces/INuggSwap.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\nimport './IxNUGG.sol';\\n\\ninterface INuggSwap {\\n    event SubmitOffer(address nft, uint256 tokenid, uint256 swapnum, address account, uint256 amount);\\n\\n    event SubmitSwap(address nft, uint256 tokenid, uint256 swapnum, address account, uint256 amount, uint64 epoch);\\n\\n    event SubmitClaim(address nft, uint256 tokenid, uint256 swapnum, address account);\\n\\n    function xnugg() external view returns (IxNUGG);\\n\\n    function submitSwap(\\n        address nft,\\n        uint256 tokenid,\\n        uint64 requestedEpoch,\\n        uint128 requestedFloor\\n    ) external;\\n\\n    function submitOffer(address nft, uint256 tokenid) external payable;\\n\\n    function submitClaim(address nft, uint256 tokenid) external;\\n\\n    function getSwap(address nft, uint256 tokenid)\\n        external\\n        view\\n        returns (\\n            uint256 swapnum,\\n            address leader,\\n            uint128 leaderAmount,\\n            uint64 epoch,\\n            bool claimedByOwner,\\n            bool exists\\n        );\\n\\n    function getSwap(\\n        address nft,\\n        uint256 tokenid,\\n        uint256 _swapnum\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 swapnum,\\n            address leader,\\n            uint128 leaderAmount,\\n            uint64 epoch,\\n            bool claimedByOwner,\\n            bool exists\\n        );\\n}\\n\",\"keccak256\":\"0x6514e4c19eb8c274f4d853a2d3a020161c0dc1a9d576da5883ecb7db2bfd6135\"},\"contracts/interfaces/INuggSwapable.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\nimport '../erc2981/IERC2981.sol';\\n\\ninterface INuggSwapable is IERC2981 {\\n    // function currentEpoch() external returns (uint32);\\n}\\n\",\"keccak256\":\"0x172a9ffd2929045ad1c3fb88416539d1ca9500172e89b55458dad08a1c31d152\"},\"contracts/interfaces/IStakeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/StakeMath.sol';\\n\\n/**\\n * @title IStakeable\\n * @dev interface for Stakeable.sol\\n */\\ninterface IStakeable {\\n    event Realize(address indexed account, address sender, uint256 amount);\\n    event ShareAdd(address indexed account, address sender, uint256 amount);\\n    event ShareSub(address indexed account, address sender, uint256 amount);\\n    event RoyaltyAdd(address indexed sender, uint256 amount);\\n\\n    /**\\n     * @dev in regards to this contract, this could just be earningsOf + sharesOf\\n     */\\n    function supplyOf(address account) external returns (uint256 res);\\n\\n    function ownershipOfX128(address account) external view returns (uint256 res);\\n\\n    function sharesOf(address account) external view returns (uint256 res);\\n\\n    /**\\n     * @notice returns user's current reward balance\\n     * @return res\\n     */\\n    function totalSupply() external view returns (uint256 res);\\n\\n    /**\\n     * @notice returns user's current reward balance\\n     * @return res\\n     */\\n\\n    function totalShares() external view returns (uint256 res);\\n}\\n\",\"keccak256\":\"0x39da417ead422749561e895160c2d2b5f2c953683567253bd82d2d1fb3dfe137\",\"license\":\"MIT\"},\"contracts/interfaces/IxNUGG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../interfaces/IStakeable.sol';\\nimport '../interfaces/IEscrowable.sol';\\nimport '../erc20/IERC20.sol';\\nimport '../erc2981/IERC2981Receiver.sol';\\n\\n/**\\n * @title ISeedable\\n * @dev interface for Seedable.sol\\n */\\ninterface IxNUGG is IERC20, IStakeable, IEscrowable, IERC2981Receiver {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function totalSupply() external view override(IERC20, IStakeable) returns (uint256 res);\\n\\n    function balanceOf(address from) external view override(IERC20) returns (uint256 res);\\n\\n    function balanceOfMinted(address from) external view returns (uint256 res);\\n\\n    function totalSupplyMinted() external view returns (uint256 res);\\n}\\n\",\"keccak256\":\"0x74d22ddf60d7e93ca10f10ad6046467a950e4823442d9c1fee4d204fa97d449c\",\"license\":\"MIT\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'Address: unable to send value, recipient may have reverted');\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x477d6c378d4e07a3171fbf5be37420d63402088e5d16af7c632d46231789a694\",\"license\":\"MIT\"},\"contracts/libraries/EpochMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nlibrary EpochMath {\\n    enum Status {\\n        OVER,\\n        ACTIVE,\\n        PENDING\\n    }\\n\\n    struct Epoch {\\n        uint64 id;\\n        uint256 startblock;\\n        uint256 endblock;\\n        Status status;\\n    }\\n\\n    function encodeData(uint128 _interval, uint128 _baseblock) internal pure returns (uint256 res) {\\n        assembly {\\n            res := or(shl(128, _baseblock), _interval)\\n        }\\n    }\\n\\n    function decodeGenesis(uint256 _state) internal pure returns (uint256 res) {\\n        assembly {\\n            res := shr(128, _state)\\n        }\\n    }\\n\\n    function decodeInterval(uint256 _state) internal pure returns (uint256 res) {\\n        assembly {\\n            res := shr(128, shl(128, _state))\\n        }\\n    }\\n\\n    function getEpoch(\\n        uint256 state,\\n        uint64 id,\\n        uint256 blocknum\\n    ) internal pure returns (EpochMath.Epoch memory res) {\\n        res = EpochMath.Epoch({\\n            id: id,\\n            startblock: getStartBlockFromId(state, id),\\n            endblock: getEndBlockFromId(state, id),\\n            status: getStatus(state, id, blocknum)\\n        });\\n    }\\n\\n    function getStatus(\\n        uint256 state,\\n        uint64 id,\\n        uint256 blocknum\\n    ) internal pure returns (Status res) {\\n        if (getIdFromBlocknum(state, blocknum) == id) res = Status.ACTIVE;\\n        else if (getEndBlockFromId(state, id) < blocknum) res = Status.OVER;\\n        else res = Status.PENDING;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     * @return res\\n     */\\n    function getStartBlockFromId(uint256 state, uint64 id) internal pure returns (uint256 res) {\\n        res = id * decodeInterval(state) + decodeGenesis(state);\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     * @return res\\n     */\\n    function getEndBlockFromId(uint256 state, uint64 id) internal pure returns (uint256 res) {\\n        res = getStartBlockFromId(state, id + 1) - 1;\\n    }\\n\\n    function getIdFromBlocknum(uint256 state, uint256 blocknum) internal pure returns (uint64 res) {\\n        res = uint64((blocknum - decodeGenesis(state)) / decodeInterval(state));\\n    }\\n}\\n\",\"keccak256\":\"0xa46d8692c74c0b6819e1d82d45aee6e48cb840718f80c2ee8bcfe9a08560faed\",\"license\":\"MIT\"},\"contracts/libraries/QuadMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title QuadMath\\n * @notice a library for performing Quadruple-precision floating-point format math operations\\n * @dev #TODO\\n */\\nlibrary QuadMath {\\n    struct Uint512 {\\n        uint256 a;\\n        uint256 b;\\n    }\\n    /**\\n     * Max Value of Quad Percion Binary 128\\n     * Equal to 340282366920938463463374607431768211456 or 2^128\\n     */\\n    // uint256 internal constant _BINARY128 = 0x100000000000000000000000000000000;\\n    uint256 internal constant _BINARY128 = 0x100000000000000000000000000000000;\\n\\n    /**\\n     * @notice #TODO\\n     * @param base_ the amount to take a percent of\\n     * @param percent_ the percent out of 100 to be taken\\n     * @return res precent_ of base_\\n     * @dev #TODO\\n     */\\n    function percent(uint256 base_, uint8 percent_) internal pure returns (uint256 res) {\\n        require(percent_ <= 100);\\n        res = mulDiv(base_, percent_ * _BINARY128, 100 * _BINARY128);\\n    }\\n\\n    function mulDivRoundingUnsafe(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) >= denominator / 2) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n\\n    function mulDivQuad(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(mulDiv(a, _BINARY128, denominator), b, _BINARY128);\\n    }\\n\\n    function mulDivQuadUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDivRoundingUp(mulDivRoundingUp(a, _BINARY128, denominator), b, _BINARY128);\\n    }\\n\\n    /**\\n     * @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @param a The multiplicand\\n     * @param b The multiplier\\n     * @param denominator The divisor\\n     * @return result The 256-bit result\\n     * @dev Credit to Uniswap under MIT license https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol\\n     */\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @param a The multiplicand\\n     * @param b The multiplier\\n     * @param denominator The divisor\\n     * @return result The 256-bit result\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     */\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        // fix for negation braking change in Solidity v8 - https://ethereum.stackexchange.com/a/96646\\n        uint256 twos = denominator & (~denominator + 1);\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n\\n        // this unchecked block is required for this to work with Solidity v8\\n        unchecked {\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x91db32f050f38f38f875b8addbd3975f4006815e4c9c366e4e1f505aba126095\",\"license\":\"MIT\"},\"contracts/libraries/SeedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nlibrary SeedMath {\\n    /**\\n     * @notice turns a seed into a unique uint256 to be used in computation\\n     * @param seed the bytes32\\n     * @dev not intended to be truly random\\n     */\\n    function toUint256(bytes32 seed) internal pure returns (uint256 res) {\\n        return uint256(keccak256(abi.encodePacked(seed)));\\n    }\\n}\\n\",\"keccak256\":\"0x1e039baa3477988bbf80dfd469634dd89d722f03a9580eaf86cc8d1d248e2d81\",\"license\":\"MIT\"},\"contracts/libraries/StakeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\nimport './QuadMath.sol';\\n\\nimport 'hardhat/console.sol';\\n\\n/**\\n * @title StakeMath\\n * @notice a library for performing staking operations\\n * @dev #TODO\\n */\\nlibrary StakeMath {\\n    using QuadMath for uint256;\\n\\n    struct Position {\\n        uint256 rOwned;\\n    }\\n\\n    struct State {\\n        uint256 tSupply;\\n        uint256 rSupply;\\n    }\\n\\n    /**\\n     * @notice #TODO\\n     * @param state the percent out of 100 to be taken\\n     * @param pos the percent out of 100 to be taken\\n     * @return res shares\\n     * @dev #TODO\\n     */\\n    function getBalance(State memory state, Position memory pos) internal pure returns (uint256 res) {\\n        return pos.rOwned > 0 ? _safeRtoT(state, pos.rOwned) : 0;\\n    }\\n\\n    /**\\n     * @notice #TODO\\n     * @param state the percent out of 100 to be taken\\n     * @param pos the percent out of 100 to be taken\\n     * @return res shares\\n     * @dev #TODO\\n     */\\n    function getOwnershipX128(State memory state, Position memory pos) internal pure returns (uint256 res) {\\n        return pos.rOwned.mulDiv(QuadMath._BINARY128, state.rSupply);\\n    }\\n\\n    function _safeRtoT(State memory state, uint256 rAmount) private pure returns (uint256) {\\n        return rAmount.mulDiv(state.tSupply, state.rSupply);\\n    }\\n\\n    function _safeTtoR(State memory state, uint256 tAmount) private pure returns (uint256) {\\n        return tAmount.mulDiv(state.rSupply, state.tSupply);\\n    }\\n\\n    function _safeRtoTRoundingUp(State memory state, uint256 rAmount) private pure returns (uint256) {\\n        return rAmount.mulDivRoundingUp(state.tSupply, state.rSupply);\\n    }\\n\\n    function _safeTtoRRoundingUp(State memory state, uint256 tAmount) private pure returns (uint256) {\\n        return tAmount.mulDivRoundingUp(state.rSupply, state.tSupply);\\n    }\\n\\n    function applyShareAdd(\\n        State memory state,\\n        Position memory pos,\\n        uint256 tAmount\\n    ) internal pure {\\n        if (state.rSupply == 0 && state.tSupply == 0) {\\n            pos.rOwned = tAmount;\\n            state.rSupply = tAmount;\\n            state.tSupply = tAmount;\\n        } else {\\n            uint256 amountR = _safeTtoR(state, tAmount);\\n            pos.rOwned += amountR;\\n            state.rSupply += amountR;\\n            state.tSupply += tAmount;\\n        }\\n    }\\n\\n    function applyShareSub(\\n        State memory state,\\n        Position memory pos,\\n        uint256 tAmount\\n    ) internal pure {\\n        uint256 amountR = _safeTtoRRoundingUp(state, tAmount);\\n        pos.rOwned -= amountR;\\n        state.rSupply -= amountR;\\n        state.tSupply -= tAmount;\\n    }\\n\\n    function applyRoyaltyAdd(State memory state, uint256 amount) internal pure {\\n        state.tSupply += amount;\\n    }\\n}\\n\",\"keccak256\":\"0xf528fe8586c905863c7b3402a7b198bc89eaa172914fecf37a6be0dd8221763c\",\"license\":\"MIT\"},\"contracts/libraries/SwapLib.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\nimport '../erc721/IERC721.sol';\\nimport '../erc2981/IERC2981Receiver.sol';\\n\\nimport './Address.sol';\\nimport '../interfaces/INuggSwapable.sol';\\nimport '../interfaces/INuggMintable.sol';\\n\\nlibrary SwapLib {\\n    using Address for address;\\n    using Address for address payable;\\n\\n    struct OfferData {\\n        bool claimed;\\n        address account;\\n        uint128 amount;\\n    }\\n\\n    struct SwapData {\\n        address nft;\\n        uint256 tokenid;\\n        uint256 num;\\n        address leader;\\n        uint128 leaderAmount;\\n        uint64 epoch;\\n        address owner;\\n        bool claimedByOwner;\\n        uint64 activeEpoch;\\n        bool exists;\\n    }\\n\\n    function decodeSwapData(uint256 _unparsed)\\n        internal\\n        pure\\n        returns (\\n            address leader,\\n            uint64 epoch,\\n            bool claimedByOwner,\\n            bool exists\\n        )\\n    {\\n        assembly {\\n            exists := shr(232, _unparsed)\\n            claimedByOwner := shr(248, shl(24, _unparsed))\\n            epoch := shr(160, _unparsed)\\n            leader := _unparsed\\n        }\\n    }\\n\\n    function encodeSwapData(\\n        address leader,\\n        uint64 epoch,\\n        bool claimedByOwner,\\n        bool exists\\n    ) internal pure returns (uint256 res) {\\n        assembly {\\n            res := or(or(or(shl(232, exists), shl(224, claimedByOwner)), shl(160, epoch)), leader)\\n        }\\n    }\\n\\n    function decodeSwapId(uint256 _unparsed)\\n        internal\\n        pure\\n        returns (\\n            address nft,\\n            uint256 tokenid,\\n            uint256 swapNum\\n        )\\n    {\\n        assembly {\\n            swapNum := shr(224, _unparsed)\\n            tokenid := shr(160, _unparsed)\\n            nft := _unparsed\\n        }\\n    }\\n\\n    function encodeSwapId(\\n        address nft,\\n        uint256 tokenid,\\n        uint256 swapNum\\n    ) internal pure returns (uint256 res) {\\n        assembly {\\n            res := or(or(shl(224, swapNum), shl(160, tokenid)), nft)\\n        }\\n    }\\n\\n    function decodeOfferData(uint256 _unparsed) internal pure returns (uint128 amount, bool claimed) {\\n        assembly {\\n            claimed := shr(128, _unparsed)\\n            amount := _unparsed\\n        }\\n    }\\n\\n    function encodeOfferData(uint128 amount, bool claimed) internal pure returns (uint256 res) {\\n        assembly {\\n            res := or(shl(128, claimed), amount)\\n        }\\n    }\\n\\n    function takeToken(\\n        IERC721 nft,\\n        uint256 tokenid,\\n        address from\\n    ) internal {\\n        require(nft.supportsInterface(type(INuggSwapable).interfaceId), 'AUC:TT:0');\\n\\n        // TODO check that royalty supports the\\n\\n        require(nft.ownerOf(tokenid) == from, 'AUC:TT:1');\\n\\n        nft.safeTransferFrom(from, address(this), tokenid);\\n\\n        require(nft.ownerOf(tokenid) == address(this), 'AUC:TT:3');\\n    }\\n\\n    function _giveToken(\\n        address nft,\\n        uint256 tokenid,\\n        address to\\n    ) internal {\\n        IERC721 _nft = IERC721(nft);\\n        require(_nft.ownerOf(tokenid) == address(this), 'AUC:TT:1');\\n\\n        _nft.safeTransferFrom(address(this), to, tokenid);\\n\\n        require(_nft.ownerOf(tokenid) == to, 'AUC:TT:3');\\n    }\\n\\n    function handleSubmitOffer(\\n        SwapData memory swap,\\n        OfferData memory offer,\\n        uint256 amount\\n    ) internal pure {\\n        require(swap.owner != offer.account, 'SL:HSO:0');\\n\\n        offer.amount += uint128(amount);\\n\\n        require(isActive(swap), 'SL:OBP:0');\\n        require(validateOfferIncrement(swap, offer), 'SL:OBP:1');\\n\\n        swap.leader = offer.account;\\n    }\\n\\n    function handleSubmitClaim(SwapData memory swap, OfferData memory offer) internal {\\n        require(swap.exists, 'SL:HBC:0');\\n        require(!offer.claimed, 'AUC:CLM:0');\\n        require(offer.amount > 0, 'AUC:CLM:1');\\n\\n        offer.claimed = true;\\n\\n        if (isOver(swap)) {\\n            if (offer.account == swap.leader) {\\n                _giveToken(swap.nft, swap.tokenid, offer.account);\\n            } else {\\n                payable(offer.account).sendValue(offer.amount);\\n            }\\n        } else {\\n            require(offer.account == swap.leader && offer.account == swap.owner, 'AUC:CLM:2');\\n            swap.claimedByOwner = true;\\n        }\\n    }\\n\\n    function handleSubmitSwap(\\n        SwapData memory swap,\\n        OfferData memory offer,\\n        uint64 epoch,\\n        uint128 floor\\n    ) internal pure {\\n        require(!swap.exists, 'AUC:IA:0');\\n\\n        swap.epoch = epoch;\\n        require(hasVaildEpoch(swap), 'AUC:IA:1');\\n\\n        swap.leader = offer.account;\\n        swap.exists = true;\\n\\n        offer.amount = floor;\\n    }\\n\\n    function validateOfferIncrement(SwapData memory swap, OfferData memory offer) internal pure returns (bool) {\\n        return offer.amount > swap.leaderAmount + ((swap.leaderAmount * 100) / 10000);\\n    }\\n\\n    function hasVaildEpoch(SwapData memory swap) internal pure returns (bool) {\\n        return swap.epoch >= swap.activeEpoch && swap.epoch - swap.activeEpoch <= 1000;\\n    }\\n\\n    function isOver(SwapData memory swap) internal pure returns (bool) {\\n        return swap.exists && (swap.activeEpoch > swap.epoch || swap.claimedByOwner);\\n    }\\n\\n    function isActive(SwapData memory swap) internal pure returns (bool) {\\n        return swap.exists && !swap.claimedByOwner && swap.activeEpoch <= swap.epoch;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param token token sending the royalties\\n     * @param tokenid uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC2981Received(\\n        address from,\\n        address to,\\n        address token,\\n        uint256 tokenid,\\n        address,\\n        uint256,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC2981Receiver(to).onERC2981Received(msg.sender, from, token, tokenid, address(0), 0, _data) returns (\\n                bytes4 retval\\n            ) {\\n                return retval == IERC2981Receiver.onERC2981Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert('ERC2981: transfer to non ERC2981Receiver implementer');\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23c5f88fef66758069ba1c34d058be8e1e2d7318c9c5cbbbf455512bce6b67f6\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526000805460ff191690553480156200001b57600080fd5b50604051620028e0380380620028e08339810160408190526200003e91620000d4565b6019434660011462000058576000805460ff191660011790555b6200006f8282620000cd60201b620008c01760201c565b600255604080516001600160801b038085168252831660208201527fcecb518f1c86dff96ad81c15a77b8ecb21b258b40e56e199a12d856b9444667c910160405180910390a1505060601b6001600160601b03191660805262000104565b60801b1790565b600060208284031215620000e6578081fd5b81516001600160a01b0381168114620000fd578182fd5b9392505050565b60805160601c6127a8620001386000396000818161043e015281816109b901528181610a480152610b9301526127a86000f3fe60806040526004361061015f5760003560e01c806377271376116100c0578063c9412c8f11610074578063e39eff8011610059578063e39eff80146104da578063eacdc5ff146104fa578063ffbc2ef41461052857600080fd5b8063c9412c8f1461048d578063e0d4ea37146104ba57600080fd5b806383220626116100a557806383220626146104175780638f4c1d4f1461042c578063947a36fb1461047857600080fd5b8063772713761461035b5780637ad920b3146103f757600080fd5b80634cdc9c631161011757806354761214116100fc57806354761214146102aa57806364ca10ce146102bf5780636cb467aa1461032e57600080fd5b80634cdc9c631461026757806350e5ddbf1461028a57600080fd5b80633beba2ee116101485780633beba2ee146101f35780633c53a37a14610208578063428a03191461022857600080fd5b8063150b7a021461016457806331350598146101de575b600080fd5b34801561017057600080fd5b506101a861017f366004612275565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b6101f16101ec36600461234e565b610548565b005b3480156101ff57600080fd5b506101f1610556565b34801561021457600080fd5b506101f16102233660046123da565b61058d565b34801561023457600080fd5b50610257610243366004612495565b600090815260016020526040902054151590565b60405190151581526020016101d5565b34801561027357600080fd5b5061027c6105a0565b6040519081526020016101d5565b34801561029657600080fd5b5061027c6102a53660046124e6565b6105b3565b3480156102b657600080fd5b506101f16105c9565b3480156102cb57600080fd5b506102df6102da3660046123a6565b610608565b604080519687526001600160a01b0390951660208701526001600160801b039093169385019390935267ffffffffffffffff1660608401529015156080830152151560a082015260c0016101d5565b34801561033a57600080fd5b5061034e6103493660046124e6565b6106bb565b6040516101d5919061258b565b34801561036757600080fd5b506102df61037636600461234e565b6001600160a01b03918216600081815260036020908152604080832085845282528083205484845260048352818420868552835281842081855283528184205494845260058352818420958452948252808320858452825280832095841683529490529290922054909260a083901c9060ff60e085901c169060e885901c90565b34801561040357600080fd5b5061034e610412366004612495565b6106f1565b34801561042357600080fd5b5061027c610734565b34801561043857600080fd5b506104607f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101d5565b34801561048457600080fd5b5061027c6107d6565b34801561049957600080fd5b506104ad6104a83660046124e6565b6107ea565b6040516101d59190612522565b3480156104c657600080fd5b5061027c6104d5366004612495565b6107fb565b3480156104e657600080fd5b5061027c6104f53660046124c5565b610890565b34801561050657600080fd5b5061050f6108a6565b60405167ffffffffffffffff90911681526020016101d5565b34801561053457600080fd5b506101f161054336600461234e565b6108b6565b61055282826108c7565b5050565b60005460ff16801561057857506000546001600160a01b036101009091041633145b61058157600080fd5b61058b3347610d12565b565b61059a8484338585610d25565b50505050565b60006105ae60025460801c90565b905090565b6002546000906105c39083610e53565b92915050565b60005460ff166105d857600080fd5b600080547fffffffffffffffffffffff0000000000000000000000000000000000000000ff163361010002179055565b6001600160a01b03831660009081526003602090815260408083208584529091528120548190819081908190819087111561064257600080fd5b505050506001600160a01b039485166000818152600460209081526040808320888452825280832087845282528083205493835260058252808320978352968152868220868352815286822097831682529690965293909420549194929350909160a084901c915060e084901c60ff169060e885901c90565b6106e36040805160808101825260008082526020820181905291810182905290606082015290565b6002546105c3908343610e86565b6107196040805160808101825260008082526020820181905291810182905290606082015290565b6002546105c39061072a9084610f1b565b6002549043610e86565b60008060016107446102a56108a6565b61074e91906126e4565b804092509050816107a65760405162461bcd60e51b815260206004820152600760248201527f4550433a53424c0000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60408051602081018490529081018290526060016040516020818303038152906040528051906020012091505090565b60006105ae6002546001600160801b031690565b6002546000906105c3908343610f45565b60008181526001602052604081205415610822575060009081526001602052604090205490565b8161082b6108a6565b67ffffffffffffffff161415610843576105c3610734565b60405162461bcd60e51b815260206004820152600a60248201527f534545443a4745543a3000000000000000000000000000000000000000000000604482015260640161079d565b919050565b600061089f6104d583856125f9565b9392505050565b6002546000906105ae9043610f1b565b6105528282610f97565b60801b1790565b6000806108d5848433611023565b915091508161012001516108ec576108ec826112ac565b6108f7828234611572565b61090182826116bb565b60008260800151826040015161091791906126bc565b6001600160801b0316905060008084600001516001600160a01b0316632a55205a8660200151856040518363ffffffff1660e01b8152600401610964929190918252602082015260400190565b604080518083038186803b15801561097b57600080fd5b505afa15801561098f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b39190612379565b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610acf5760208401518551604051632a7c771b60e11b81523060048201526001600160a01b03928316602482015290821660448201526064810188905260006084820181905260a4820181905260e060c483015260e48201527f0000000000000000000000000000000000000000000000000000000000000000909116906354f8ee36908590610104016020604051808303818588803b158015610a9057600080fd5b505af1158015610aa4573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610ac99190612455565b50610c93565b602084810151865191870151604051632a7c771b60e11b81523060048201526001600160a01b0392831660248201529282166044840152606483015260006084830181905260a4830181905260e060c484015260e48301528316906354f8ee36908390610104016020604051808303818588803b158015610b4f57600080fd5b505af1158015610b63573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610b889190612455565b506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166354f8ee36610bc283866126e4565b6020870151885160405160e085811b7fffffffff000000000000000000000000000000000000000000000000000000001682523060048301526001600160a01b039384166024830152929091166044820152606481018b905260006084820181905260a4820181905260c482019290925260e4810191909152610104016020604051808303818588803b158015610c5857600080fd5b505af1158015610c6c573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610c919190612455565b505b8451602080870151604080890151888401518983015183516001600160a01b03978816815295860194909452918401529290921660608201526001600160801b0390911660808201527f69352d1019b9f56e2f2735ceb0af7b1ce2bb2f7857851e9a4f8a7349c3f5e0c29060a00160405180910390a150505050505050565b6105526001600160a01b03831682611770565b610d30858585611889565b6001600160a01b03858116600090815260036020908152604080832088845282528220805460018101825581845291832090910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169387169390931790925580610d9e888888611023565b9092509050610daf82828787611b2e565b610db982826116bb565b8151602080840151604080860151858401518683015160a0808a015185516001600160a01b03998a16815297880196909652938601929092529490941660608401526001600160801b03909316608083015267ffffffffffffffff16918101919091527fc059d0ade625ed31c9d546bf8a2f27fdd6e3e0e5a27508c603997c662896ffd59060c00160405180910390a15050505050505050565b6000610e5f8360801c90565b610e7c6001600160801b03851667ffffffffffffffff851661269d565b61089f91906125f9565b610eae6040805160808101825260008082526020820181905291810182905290606082015290565b60405180608001604052808467ffffffffffffffff168152602001610ed38686610e53565b8152602001610ee28686611c19565b8152602001610ef2868686610f45565b6002811115610f1157634e487b7160e01b600052602160045260246000fd5b9052949350505050565b60006001600160801b038316610f318460801c90565b610f3b90846126e4565b61089f919061265a565b60008267ffffffffffffffff16610f5c8584610f1b565b67ffffffffffffffff161415610f745750600161089f565b81610f7f8585611c19565b1015610f8d5750600061089f565b5060029392505050565b600080610fa5848433611023565b9092509050610fb48282611c3a565b610fbe82826116bb565b81516020808401516040808601518584015182516001600160a01b03968716815294850193909352838201529216606082015290517f403e13c443125d36d2d3281ace4d6ae7b575d038f46f9de5b7f535c4aa39faf39181900360800190a150505050565b60408051610140810182526000808252602080830182905282840182905260608084018390526080840183905260a080850184905260c0850184905260e080860185905261010086018590526101208601859052865192830187528483528284018590528287018590526001600160a01b038a8116808752600386528887208b8852865288872054818852600487528988208c89528752898820818952875289882054918852600587528988208c895287528988208189528752898820928216885291865295889020548851808a01909952600689527f79656c6c6f770000000000000000000000000000000000000000000000000000958901959095529596929594939184901c929084901c60ff169160e885901c916111449087611e49565b6040518061014001604052808c6001600160a01b031681526020018b8152602001878152602001866001600160a01b03168152602001826001600160801b031681526020018567ffffffffffffffff16815260200187600014611207576001600160a01b038d1660009081526003602090815260408083208f845290915290206111cf60018a6126e4565b815481106111ed57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031661120a565b60005b6001600160a01b0316815260200184151581526020016112286108a6565b67ffffffffffffffff1681529215156020938401526001600160a01b039b8c1660009081526005845260408082209c82529b84528b81209781529683528a872099909b168087529882525093889020548851606081018a52608082901c15158152948501979097525050506001600160801b03909316938301939093525091929050565b80516040516301ffc9a760e01b815263aa5644f160e01b60048201526001600160a01b038216906301ffc9a79060240160206040518083038186803b1580156112f457600080fd5b505afa158015611308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132c9190612435565b6113785760405162461bcd60e51b815260206004820152600860248201527f4155433a4d543a30000000000000000000000000000000000000000000000000604482015260640161079d565b815161010083015160405163aa5644f160e01b815267ffffffffffffffff90911660048201526000916001600160a01b03169063aa5644f190602401602060405180830381600087803b1580156113ce57600080fd5b505af11580156113e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140691906124ad565b9050611410611ebc565b826020015181146114635760405162461bcd60e51b815260206004820152600860248201527f4155433a4d543a32000000000000000000000000000000000000000000000000604482015260640161079d565b60208301516040516331a9108f60e11b815230916001600160a01b03851691636352211e916114989160040190815260200190565b60206040518083038186803b1580156114b057600080fd5b505afa1580156114c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e89190612259565b6001600160a01b03161461153e5760405162461bcd60e51b815260206004820152600860248201527f4155433a4d543a33000000000000000000000000000000000000000000000000604482015260640161079d565b6040805160608101825260008082526020820181905291810182905261010085015161156d9286929190611b2e565b505050565b81602001516001600160a01b03168360c001516001600160a01b031614156115dc5760405162461bcd60e51b815260206004820152600860248201527f534c3a48534f3a30000000000000000000000000000000000000000000000000604482015260640161079d565b80826040018181516115ee91906125ce565b6001600160801b031690525061160383611f1a565b61164f5760405162461bcd60e51b815260206004820152600860248201527f534c3a4f42503a30000000000000000000000000000000000000000000000000604482015260640161079d565b6116598383611f5e565b6116a55760405162461bcd60e51b815260206004820152600860248201527f534c3a4f42503a31000000000000000000000000000000000000000000000000604482015260640161079d565b50602001516001600160a01b0316606090910152565b6116e882606001518360a001518460e0015185610120015160e81b60e09190911b1760a09190911b171790565b82516001600160a01b0316600090815260046020908152604080832082870151845282528083208187015184529091529081902091909155810151815160801b1782516001600160a01b039081166000908152600560209081526040808320828801518452825280832096810151835295815285822094810151909216815292905291902055565b804710156117c05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161079d565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461180d576040519150601f19603f3d011682016040523d82523d6000602084013e611812565b606091505b505090508061156d5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161079d565b6040516301ffc9a760e01b8152600060048201526001600160a01b038416906301ffc9a79060240160206040518083038186803b1580156118c957600080fd5b505afa1580156118dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119019190612435565b61194d5760405162461bcd60e51b815260206004820152600860248201527f4155433a54543a30000000000000000000000000000000000000000000000000604482015260640161079d565b6040516331a9108f60e11b8152600481018390526001600160a01b038083169190851690636352211e9060240160206040518083038186803b15801561199257600080fd5b505afa1580156119a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ca9190612259565b6001600160a01b031614611a0b5760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3160c01b604482015260640161079d565b604051632142170760e11b81526001600160a01b038281166004830152306024830152604482018490528416906342842e0e90606401600060405180830381600087803b158015611a5b57600080fd5b505af1158015611a6f573d6000803e3d6000fd5b50506040516331a9108f60e11b8152600481018590523092506001600160a01b0386169150636352211e9060240160206040518083038186803b158015611ab557600080fd5b505afa158015611ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aed9190612259565b6001600160a01b03161461156d5760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b604482015260640161079d565b83610120015115611b815760405162461bcd60e51b815260206004820152600860248201527f4155433a49413a30000000000000000000000000000000000000000000000000604482015260640161079d565b67ffffffffffffffff821660a0850152611b9a84611fad565b611be65760405162461bcd60e51b815260206004820152600860248201527f4155433a49413a31000000000000000000000000000000000000000000000000604482015260640161079d565b60208301516001600160a01b03166060850152600161012090940193909352506001600160801b03909116604090910152565b60006001611c3084611c2b8584612611565b610e53565b61089f91906126e4565b816101200151611c8c5760405162461bcd60e51b815260206004820152600860248201527f534c3a4842433a30000000000000000000000000000000000000000000000000604482015260640161079d565b805115611cdb5760405162461bcd60e51b815260206004820152600960248201527f4155433a434c4d3a300000000000000000000000000000000000000000000000604482015260640161079d565b600081604001516001600160801b031611611d385760405162461bcd60e51b815260206004820152600960248201527f4155433a434c4d3a310000000000000000000000000000000000000000000000604482015260640161079d565b60018152611d4582612001565b15611db05781606001516001600160a01b031681602001516001600160a01b03161415611d835761055282600001518360200151836020015161203e565b61055281604001516001600160801b031682602001516001600160a01b031661177090919063ffffffff16565b81606001516001600160a01b031681602001516001600160a01b0316148015611df257508160c001516001600160a01b031681602001516001600160a01b0316145b611e3e5760405162461bcd60e51b815260206004820152600960248201527f4155433a434c4d3a320000000000000000000000000000000000000000000000604482015260640161079d565b600160e08301525050565b6105528282604051602401611e5f929190612530565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f9710a9d000000000000000000000000000000000000000000000000000000000179052612220565b611ee5611ec76108a6565b67ffffffffffffffff16600090815260016020526040902054151590565b61058b57611ef1610734565b60016000611efd6108a6565b67ffffffffffffffff168152602081019190915260400160002055565b60008161012001518015611f3057508160e00151155b80156105c357508160a0015167ffffffffffffffff1682610100015167ffffffffffffffff16111592915050565b600061271083608001516064611f74919061266e565b611f7e9190612634565b8360800151611f8d91906125ce565b6001600160801b031682604001516001600160801b031611905092915050565b600081610100015167ffffffffffffffff168260a0015167ffffffffffffffff16101580156105c357506103e88261010001518360a00151611fef91906126fb565b67ffffffffffffffff16111592915050565b600081610120015180156105c357508160a0015167ffffffffffffffff1682610100015167ffffffffffffffff1611806105c357505060e0015190565b6040516331a9108f60e11b815260048101839052839030906001600160a01b03831690636352211e9060240160206040518083038186803b15801561208257600080fd5b505afa158015612096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ba9190612259565b6001600160a01b0316146120fb5760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3160c01b604482015260640161079d565b604051632142170760e11b81523060048201526001600160a01b038381166024830152604482018590528216906342842e0e90606401600060405180830381600087803b15801561214b57600080fd5b505af115801561215f573d6000803e3d6000fd5b50506040516331a9108f60e11b8152600481018690526001600160a01b03858116935084169150636352211e9060240160206040518083038186803b1580156121a757600080fd5b505afa1580156121bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121df9190612259565b6001600160a01b03161461059a5760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b604482015260640161079d565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b803567ffffffffffffffff8116811461088b57600080fd5b60006020828403121561226a578081fd5b815161089f8161275a565b6000806000806080858703121561228a578283fd5b84356122958161275a565b935060208501356122a58161275a565b925060408501359150606085013567ffffffffffffffff808211156122c8578283fd5b818701915087601f8301126122db578283fd5b8135818111156122ed576122ed612744565b604051601f8201601f19908116603f0116810190838211818310171561231557612315612744565b816040528281528a602084870101111561232d578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215612360578182fd5b823561236b8161275a565b946020939093013593505050565b6000806040838503121561238b578182fd5b82516123968161275a565b6020939093015192949293505050565b6000806000606084860312156123ba578283fd5b83356123c58161275a565b95602085013595506040909401359392505050565b600080600080608085870312156123ef578384fd5b84356123fa8161275a565b93506020850135925061240f60408601612241565b915060608501356001600160801b038116811461242a578182fd5b939692955090935050565b600060208284031215612446578081fd5b8151801515811461089f578182fd5b600060208284031215612466578081fd5b81517fffffffff000000000000000000000000000000000000000000000000000000008116811461089f578182fd5b6000602082840312156124a6578081fd5b5035919050565b6000602082840312156124be578081fd5b5051919050565b600080604083850312156124d7578182fd5b50508035926020909101359150565b6000602082840312156124f7578081fd5b61089f82612241565b6003811061251e57634e487b7160e01b600052602160045260246000fd5b9052565b602081016105c38284612500565b6040815260008351806040840152815b8181101561255d5760208187018101516060868401015201612540565b8181111561256e5782606083860101525b50602083019390935250601f91909101601f191601606001919050565b600060808201905067ffffffffffffffff8351168252602083015160208301526040830151604083015260608301516125c76060840182612500565b5092915050565b60006001600160801b038083168185168083038211156125f0576125f0612718565b01949350505050565b6000821982111561260c5761260c612718565b500190565b600067ffffffffffffffff8083168185168083038211156125f0576125f0612718565b60006001600160801b038084168061264e5761264e61272e565b92169190910492915050565b6000826126695761266961272e565b500490565b60006001600160801b038083168185168183048111821515161561269457612694612718565b02949350505050565b60008160001904831182151516156126b7576126b7612718565b500290565b60006001600160801b03838116908316818110156126dc576126dc612718565b039392505050565b6000828210156126f6576126f6612718565b500390565b600067ffffffffffffffff838116908316818110156126dc576126dc5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461276f57600080fd5b5056fea26469706673582212206846dc6602e0797c8a38d1d9a0abba1774fd1ffff88706ef8a932295b528839b64736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061015f5760003560e01c806377271376116100c0578063c9412c8f11610074578063e39eff8011610059578063e39eff80146104da578063eacdc5ff146104fa578063ffbc2ef41461052857600080fd5b8063c9412c8f1461048d578063e0d4ea37146104ba57600080fd5b806383220626116100a557806383220626146104175780638f4c1d4f1461042c578063947a36fb1461047857600080fd5b8063772713761461035b5780637ad920b3146103f757600080fd5b80634cdc9c631161011757806354761214116100fc57806354761214146102aa57806364ca10ce146102bf5780636cb467aa1461032e57600080fd5b80634cdc9c631461026757806350e5ddbf1461028a57600080fd5b80633beba2ee116101485780633beba2ee146101f35780633c53a37a14610208578063428a03191461022857600080fd5b8063150b7a021461016457806331350598146101de575b600080fd5b34801561017057600080fd5b506101a861017f366004612275565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b6101f16101ec36600461234e565b610548565b005b3480156101ff57600080fd5b506101f1610556565b34801561021457600080fd5b506101f16102233660046123da565b61058d565b34801561023457600080fd5b50610257610243366004612495565b600090815260016020526040902054151590565b60405190151581526020016101d5565b34801561027357600080fd5b5061027c6105a0565b6040519081526020016101d5565b34801561029657600080fd5b5061027c6102a53660046124e6565b6105b3565b3480156102b657600080fd5b506101f16105c9565b3480156102cb57600080fd5b506102df6102da3660046123a6565b610608565b604080519687526001600160a01b0390951660208701526001600160801b039093169385019390935267ffffffffffffffff1660608401529015156080830152151560a082015260c0016101d5565b34801561033a57600080fd5b5061034e6103493660046124e6565b6106bb565b6040516101d5919061258b565b34801561036757600080fd5b506102df61037636600461234e565b6001600160a01b03918216600081815260036020908152604080832085845282528083205484845260048352818420868552835281842081855283528184205494845260058352818420958452948252808320858452825280832095841683529490529290922054909260a083901c9060ff60e085901c169060e885901c90565b34801561040357600080fd5b5061034e610412366004612495565b6106f1565b34801561042357600080fd5b5061027c610734565b34801561043857600080fd5b506104607f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101d5565b34801561048457600080fd5b5061027c6107d6565b34801561049957600080fd5b506104ad6104a83660046124e6565b6107ea565b6040516101d59190612522565b3480156104c657600080fd5b5061027c6104d5366004612495565b6107fb565b3480156104e657600080fd5b5061027c6104f53660046124c5565b610890565b34801561050657600080fd5b5061050f6108a6565b60405167ffffffffffffffff90911681526020016101d5565b34801561053457600080fd5b506101f161054336600461234e565b6108b6565b61055282826108c7565b5050565b60005460ff16801561057857506000546001600160a01b036101009091041633145b61058157600080fd5b61058b3347610d12565b565b61059a8484338585610d25565b50505050565b60006105ae60025460801c90565b905090565b6002546000906105c39083610e53565b92915050565b60005460ff166105d857600080fd5b600080547fffffffffffffffffffffff0000000000000000000000000000000000000000ff163361010002179055565b6001600160a01b03831660009081526003602090815260408083208584529091528120548190819081908190819087111561064257600080fd5b505050506001600160a01b039485166000818152600460209081526040808320888452825280832087845282528083205493835260058252808320978352968152868220868352815286822097831682529690965293909420549194929350909160a084901c915060e084901c60ff169060e885901c90565b6106e36040805160808101825260008082526020820181905291810182905290606082015290565b6002546105c3908343610e86565b6107196040805160808101825260008082526020820181905291810182905290606082015290565b6002546105c39061072a9084610f1b565b6002549043610e86565b60008060016107446102a56108a6565b61074e91906126e4565b804092509050816107a65760405162461bcd60e51b815260206004820152600760248201527f4550433a53424c0000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60408051602081018490529081018290526060016040516020818303038152906040528051906020012091505090565b60006105ae6002546001600160801b031690565b6002546000906105c3908343610f45565b60008181526001602052604081205415610822575060009081526001602052604090205490565b8161082b6108a6565b67ffffffffffffffff161415610843576105c3610734565b60405162461bcd60e51b815260206004820152600a60248201527f534545443a4745543a3000000000000000000000000000000000000000000000604482015260640161079d565b919050565b600061089f6104d583856125f9565b9392505050565b6002546000906105ae9043610f1b565b6105528282610f97565b60801b1790565b6000806108d5848433611023565b915091508161012001516108ec576108ec826112ac565b6108f7828234611572565b61090182826116bb565b60008260800151826040015161091791906126bc565b6001600160801b0316905060008084600001516001600160a01b0316632a55205a8660200151856040518363ffffffff1660e01b8152600401610964929190918252602082015260400190565b604080518083038186803b15801561097b57600080fd5b505afa15801561098f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b39190612379565b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610acf5760208401518551604051632a7c771b60e11b81523060048201526001600160a01b03928316602482015290821660448201526064810188905260006084820181905260a4820181905260e060c483015260e48201527f0000000000000000000000000000000000000000000000000000000000000000909116906354f8ee36908590610104016020604051808303818588803b158015610a9057600080fd5b505af1158015610aa4573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610ac99190612455565b50610c93565b602084810151865191870151604051632a7c771b60e11b81523060048201526001600160a01b0392831660248201529282166044840152606483015260006084830181905260a4830181905260e060c484015260e48301528316906354f8ee36908390610104016020604051808303818588803b158015610b4f57600080fd5b505af1158015610b63573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610b889190612455565b506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166354f8ee36610bc283866126e4565b6020870151885160405160e085811b7fffffffff000000000000000000000000000000000000000000000000000000001682523060048301526001600160a01b039384166024830152929091166044820152606481018b905260006084820181905260a4820181905260c482019290925260e4810191909152610104016020604051808303818588803b158015610c5857600080fd5b505af1158015610c6c573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610c919190612455565b505b8451602080870151604080890151888401518983015183516001600160a01b03978816815295860194909452918401529290921660608201526001600160801b0390911660808201527f69352d1019b9f56e2f2735ceb0af7b1ce2bb2f7857851e9a4f8a7349c3f5e0c29060a00160405180910390a150505050505050565b6105526001600160a01b03831682611770565b610d30858585611889565b6001600160a01b03858116600090815260036020908152604080832088845282528220805460018101825581845291832090910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169387169390931790925580610d9e888888611023565b9092509050610daf82828787611b2e565b610db982826116bb565b8151602080840151604080860151858401518683015160a0808a015185516001600160a01b03998a16815297880196909652938601929092529490941660608401526001600160801b03909316608083015267ffffffffffffffff16918101919091527fc059d0ade625ed31c9d546bf8a2f27fdd6e3e0e5a27508c603997c662896ffd59060c00160405180910390a15050505050505050565b6000610e5f8360801c90565b610e7c6001600160801b03851667ffffffffffffffff851661269d565b61089f91906125f9565b610eae6040805160808101825260008082526020820181905291810182905290606082015290565b60405180608001604052808467ffffffffffffffff168152602001610ed38686610e53565b8152602001610ee28686611c19565b8152602001610ef2868686610f45565b6002811115610f1157634e487b7160e01b600052602160045260246000fd5b9052949350505050565b60006001600160801b038316610f318460801c90565b610f3b90846126e4565b61089f919061265a565b60008267ffffffffffffffff16610f5c8584610f1b565b67ffffffffffffffff161415610f745750600161089f565b81610f7f8585611c19565b1015610f8d5750600061089f565b5060029392505050565b600080610fa5848433611023565b9092509050610fb48282611c3a565b610fbe82826116bb565b81516020808401516040808601518584015182516001600160a01b03968716815294850193909352838201529216606082015290517f403e13c443125d36d2d3281ace4d6ae7b575d038f46f9de5b7f535c4aa39faf39181900360800190a150505050565b60408051610140810182526000808252602080830182905282840182905260608084018390526080840183905260a080850184905260c0850184905260e080860185905261010086018590526101208601859052865192830187528483528284018590528287018590526001600160a01b038a8116808752600386528887208b8852865288872054818852600487528988208c89528752898820818952875289882054918852600587528988208c895287528988208189528752898820928216885291865295889020548851808a01909952600689527f79656c6c6f770000000000000000000000000000000000000000000000000000958901959095529596929594939184901c929084901c60ff169160e885901c916111449087611e49565b6040518061014001604052808c6001600160a01b031681526020018b8152602001878152602001866001600160a01b03168152602001826001600160801b031681526020018567ffffffffffffffff16815260200187600014611207576001600160a01b038d1660009081526003602090815260408083208f845290915290206111cf60018a6126e4565b815481106111ed57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031661120a565b60005b6001600160a01b0316815260200184151581526020016112286108a6565b67ffffffffffffffff1681529215156020938401526001600160a01b039b8c1660009081526005845260408082209c82529b84528b81209781529683528a872099909b168087529882525093889020548851606081018a52608082901c15158152948501979097525050506001600160801b03909316938301939093525091929050565b80516040516301ffc9a760e01b815263aa5644f160e01b60048201526001600160a01b038216906301ffc9a79060240160206040518083038186803b1580156112f457600080fd5b505afa158015611308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132c9190612435565b6113785760405162461bcd60e51b815260206004820152600860248201527f4155433a4d543a30000000000000000000000000000000000000000000000000604482015260640161079d565b815161010083015160405163aa5644f160e01b815267ffffffffffffffff90911660048201526000916001600160a01b03169063aa5644f190602401602060405180830381600087803b1580156113ce57600080fd5b505af11580156113e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140691906124ad565b9050611410611ebc565b826020015181146114635760405162461bcd60e51b815260206004820152600860248201527f4155433a4d543a32000000000000000000000000000000000000000000000000604482015260640161079d565b60208301516040516331a9108f60e11b815230916001600160a01b03851691636352211e916114989160040190815260200190565b60206040518083038186803b1580156114b057600080fd5b505afa1580156114c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e89190612259565b6001600160a01b03161461153e5760405162461bcd60e51b815260206004820152600860248201527f4155433a4d543a33000000000000000000000000000000000000000000000000604482015260640161079d565b6040805160608101825260008082526020820181905291810182905261010085015161156d9286929190611b2e565b505050565b81602001516001600160a01b03168360c001516001600160a01b031614156115dc5760405162461bcd60e51b815260206004820152600860248201527f534c3a48534f3a30000000000000000000000000000000000000000000000000604482015260640161079d565b80826040018181516115ee91906125ce565b6001600160801b031690525061160383611f1a565b61164f5760405162461bcd60e51b815260206004820152600860248201527f534c3a4f42503a30000000000000000000000000000000000000000000000000604482015260640161079d565b6116598383611f5e565b6116a55760405162461bcd60e51b815260206004820152600860248201527f534c3a4f42503a31000000000000000000000000000000000000000000000000604482015260640161079d565b50602001516001600160a01b0316606090910152565b6116e882606001518360a001518460e0015185610120015160e81b60e09190911b1760a09190911b171790565b82516001600160a01b0316600090815260046020908152604080832082870151845282528083208187015184529091529081902091909155810151815160801b1782516001600160a01b039081166000908152600560209081526040808320828801518452825280832096810151835295815285822094810151909216815292905291902055565b804710156117c05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161079d565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461180d576040519150601f19603f3d011682016040523d82523d6000602084013e611812565b606091505b505090508061156d5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161079d565b6040516301ffc9a760e01b8152600060048201526001600160a01b038416906301ffc9a79060240160206040518083038186803b1580156118c957600080fd5b505afa1580156118dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119019190612435565b61194d5760405162461bcd60e51b815260206004820152600860248201527f4155433a54543a30000000000000000000000000000000000000000000000000604482015260640161079d565b6040516331a9108f60e11b8152600481018390526001600160a01b038083169190851690636352211e9060240160206040518083038186803b15801561199257600080fd5b505afa1580156119a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ca9190612259565b6001600160a01b031614611a0b5760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3160c01b604482015260640161079d565b604051632142170760e11b81526001600160a01b038281166004830152306024830152604482018490528416906342842e0e90606401600060405180830381600087803b158015611a5b57600080fd5b505af1158015611a6f573d6000803e3d6000fd5b50506040516331a9108f60e11b8152600481018590523092506001600160a01b0386169150636352211e9060240160206040518083038186803b158015611ab557600080fd5b505afa158015611ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aed9190612259565b6001600160a01b03161461156d5760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b604482015260640161079d565b83610120015115611b815760405162461bcd60e51b815260206004820152600860248201527f4155433a49413a30000000000000000000000000000000000000000000000000604482015260640161079d565b67ffffffffffffffff821660a0850152611b9a84611fad565b611be65760405162461bcd60e51b815260206004820152600860248201527f4155433a49413a31000000000000000000000000000000000000000000000000604482015260640161079d565b60208301516001600160a01b03166060850152600161012090940193909352506001600160801b03909116604090910152565b60006001611c3084611c2b8584612611565b610e53565b61089f91906126e4565b816101200151611c8c5760405162461bcd60e51b815260206004820152600860248201527f534c3a4842433a30000000000000000000000000000000000000000000000000604482015260640161079d565b805115611cdb5760405162461bcd60e51b815260206004820152600960248201527f4155433a434c4d3a300000000000000000000000000000000000000000000000604482015260640161079d565b600081604001516001600160801b031611611d385760405162461bcd60e51b815260206004820152600960248201527f4155433a434c4d3a310000000000000000000000000000000000000000000000604482015260640161079d565b60018152611d4582612001565b15611db05781606001516001600160a01b031681602001516001600160a01b03161415611d835761055282600001518360200151836020015161203e565b61055281604001516001600160801b031682602001516001600160a01b031661177090919063ffffffff16565b81606001516001600160a01b031681602001516001600160a01b0316148015611df257508160c001516001600160a01b031681602001516001600160a01b0316145b611e3e5760405162461bcd60e51b815260206004820152600960248201527f4155433a434c4d3a320000000000000000000000000000000000000000000000604482015260640161079d565b600160e08301525050565b6105528282604051602401611e5f929190612530565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f9710a9d000000000000000000000000000000000000000000000000000000000179052612220565b611ee5611ec76108a6565b67ffffffffffffffff16600090815260016020526040902054151590565b61058b57611ef1610734565b60016000611efd6108a6565b67ffffffffffffffff168152602081019190915260400160002055565b60008161012001518015611f3057508160e00151155b80156105c357508160a0015167ffffffffffffffff1682610100015167ffffffffffffffff16111592915050565b600061271083608001516064611f74919061266e565b611f7e9190612634565b8360800151611f8d91906125ce565b6001600160801b031682604001516001600160801b031611905092915050565b600081610100015167ffffffffffffffff168260a0015167ffffffffffffffff16101580156105c357506103e88261010001518360a00151611fef91906126fb565b67ffffffffffffffff16111592915050565b600081610120015180156105c357508160a0015167ffffffffffffffff1682610100015167ffffffffffffffff1611806105c357505060e0015190565b6040516331a9108f60e11b815260048101839052839030906001600160a01b03831690636352211e9060240160206040518083038186803b15801561208257600080fd5b505afa158015612096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ba9190612259565b6001600160a01b0316146120fb5760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3160c01b604482015260640161079d565b604051632142170760e11b81523060048201526001600160a01b038381166024830152604482018590528216906342842e0e90606401600060405180830381600087803b15801561214b57600080fd5b505af115801561215f573d6000803e3d6000fd5b50506040516331a9108f60e11b8152600481018690526001600160a01b03858116935084169150636352211e9060240160206040518083038186803b1580156121a757600080fd5b505afa1580156121bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121df9190612259565b6001600160a01b03161461059a5760405162461bcd60e51b81526020600482015260086024820152674155433a54543a3360c01b604482015260640161079d565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b803567ffffffffffffffff8116811461088b57600080fd5b60006020828403121561226a578081fd5b815161089f8161275a565b6000806000806080858703121561228a578283fd5b84356122958161275a565b935060208501356122a58161275a565b925060408501359150606085013567ffffffffffffffff808211156122c8578283fd5b818701915087601f8301126122db578283fd5b8135818111156122ed576122ed612744565b604051601f8201601f19908116603f0116810190838211818310171561231557612315612744565b816040528281528a602084870101111561232d578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215612360578182fd5b823561236b8161275a565b946020939093013593505050565b6000806040838503121561238b578182fd5b82516123968161275a565b6020939093015192949293505050565b6000806000606084860312156123ba578283fd5b83356123c58161275a565b95602085013595506040909401359392505050565b600080600080608085870312156123ef578384fd5b84356123fa8161275a565b93506020850135925061240f60408601612241565b915060608501356001600160801b038116811461242a578182fd5b939692955090935050565b600060208284031215612446578081fd5b8151801515811461089f578182fd5b600060208284031215612466578081fd5b81517fffffffff000000000000000000000000000000000000000000000000000000008116811461089f578182fd5b6000602082840312156124a6578081fd5b5035919050565b6000602082840312156124be578081fd5b5051919050565b600080604083850312156124d7578182fd5b50508035926020909101359150565b6000602082840312156124f7578081fd5b61089f82612241565b6003811061251e57634e487b7160e01b600052602160045260246000fd5b9052565b602081016105c38284612500565b6040815260008351806040840152815b8181101561255d5760208187018101516060868401015201612540565b8181111561256e5782606083860101525b50602083019390935250601f91909101601f191601606001919050565b600060808201905067ffffffffffffffff8351168252602083015160208301526040830151604083015260608301516125c76060840182612500565b5092915050565b60006001600160801b038083168185168083038211156125f0576125f0612718565b01949350505050565b6000821982111561260c5761260c612718565b500190565b600067ffffffffffffffff8083168185168083038211156125f0576125f0612718565b60006001600160801b038084168061264e5761264e61272e565b92169190910492915050565b6000826126695761266961272e565b500490565b60006001600160801b038083168185168183048111821515161561269457612694612718565b02949350505050565b60008160001904831182151516156126b7576126b7612718565b500290565b60006001600160801b03838116908316818110156126dc576126dc612718565b039392505050565b6000828210156126f6576126f6612718565b500390565b600067ffffffffffffffff838116908316818110156126dc576126dc5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461276f57600080fd5b5056fea26469706673582212206846dc6602e0797c8a38d1d9a0abba1774fd1ffff88706ef8a932295b528839b64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "blocknumFromId(uint64)": {
        "details": "public wrapper for internal blocknumFirstFromEpoch() - to save on gas"
      },
      "currentEpochId()": {
        "details": "public wrapper for internal _currentEpoch() - to save on gas"
      },
      "epochFromBlocknum(uint256)": {
        "details": "public wrapper for internal blocknumFirstFromEpoch() - to save on gas"
      },
      "epochStatus(uint64)": {
        "details": "public wrapper for internal blocknumFirstFromEpoch() - to save on gas"
      },
      "genesisBlock()": {
        "details": "public wrapper for internal _genesisBlock - to save on gas"
      },
      "getSeed(uint256)": {
        "details": "@return"
      },
      "getSeedWithOffset(uint256,uint256)": {
        "details": "@return"
      },
      "interval()": {
        "details": "public wrapper for internal _interval - to save on gas"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "currentSeed()": {
        "notice": "gets unique base based on given epoch and converts encoded bytes to object that can be merged Note: by using the block hash no one knows what a nugg will look like before it's epoch. We considered making this harder to manipulate, but we decided that if someone were able to pull it off and make their own custom nugg, that would be really fucking cool."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1479,
        "contract": "contracts/NuggSwap.sol:NuggSwap",
        "label": "inTesting",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1494,
        "contract": "contracts/NuggSwap.sol:NuggSwap",
        "label": "pw",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1633,
        "contract": "contracts/NuggSwap.sol:NuggSwap",
        "label": "_seeds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 1635,
        "contract": "contracts/NuggSwap.sol:NuggSwap",
        "label": "_state",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 411,
        "contract": "contracts/NuggSwap.sol:NuggSwap",
        "label": "_swapOwners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 419,
        "contract": "contracts/NuggSwap.sol:NuggSwap",
        "label": "_encodedSwapData",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))"
      },
      {
        "astId": 429,
        "contract": "contracts/NuggSwap.sol:NuggSwap",
        "label": "_encodedOfferData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_uint256))))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_uint256))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => mapping(address => uint256))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}