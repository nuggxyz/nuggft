{
  "address": "0x42069Ef09ACae8fdD6b29Bf2a0F7f9794bF9a155",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AuctionInit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IExchangeable.Currency",
          "name": "currency",
          "type": "uint8"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        }
      ],
      "name": "Launched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IExchangeable.Currency",
          "name": "currency",
          "type": "uint8"
        }
      ],
      "name": "NormalClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WinningClaim",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "blocknumFromId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateCurrentSeed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "res",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "enum IExchangeable.Currency",
          "name": "currency",
          "type": "uint8"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentAuction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "init",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "id",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "claimed",
                  "type": "bool"
                },
                {
                  "internalType": "enum IExchangeable.Currency",
                  "name": "currency",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "bidnum",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "first",
                  "type": "bool"
                }
              ],
              "internalType": "struct IAuctionable.Bid",
              "name": "top",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "id",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "claimed",
                  "type": "bool"
                },
                {
                  "internalType": "enum IExchangeable.Currency",
                  "name": "currency",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "bidnum",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "first",
                  "type": "bool"
                }
              ],
              "internalType": "struct IAuctionable.Bid",
              "name": "last",
              "type": "tuple"
            }
          ],
          "internalType": "struct IAuctionable.Auction",
          "name": "res",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpoch",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startblock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endblock",
              "type": "uint256"
            },
            {
              "internalType": "enum EpochMath.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct EpochMath.Epoch",
          "name": "res",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blocknum",
          "type": "uint256"
        }
      ],
      "name": "epochFromBlocknum",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startblock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endblock",
              "type": "uint256"
            },
            {
              "internalType": "enum EpochMath.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct EpochMath.Epoch",
          "name": "res",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "epochFromId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startblock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endblock",
              "type": "uint256"
            },
            {
              "internalType": "enum EpochMath.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct EpochMath.Epoch",
          "name": "res",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "epochStatus",
      "outputs": [
        {
          "internalType": "enum EpochMath.Status",
          "name": "res",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "genesisBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "getAuction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "init",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "id",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "claimed",
                  "type": "bool"
                },
                {
                  "internalType": "enum IExchangeable.Currency",
                  "name": "currency",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "bidnum",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "first",
                  "type": "bool"
                }
              ],
              "internalType": "struct IAuctionable.Bid",
              "name": "top",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "id",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "claimed",
                  "type": "bool"
                },
                {
                  "internalType": "enum IExchangeable.Currency",
                  "name": "currency",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "bidnum",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "first",
                  "type": "bool"
                }
              ],
              "internalType": "struct IAuctionable.Bid",
              "name": "last",
              "type": "tuple"
            }
          ],
          "internalType": "struct IAuctionable.Auction",
          "name": "res",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBid",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "enum IExchangeable.Currency",
              "name": "currency",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "bidnum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "first",
              "type": "bool"
            }
          ],
          "internalType": "struct IAuctionable.Bid",
          "name": "res",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getSeed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "res",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "launch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launched",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nuggGet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nuggSet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum IExchangeable.Currency",
          "name": "currency",
          "type": "uint8"
        }
      ],
      "name": "placeBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "seedExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "res",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "seeds",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "res",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x60f7d6f06b29015ec0fdfeee1e1072ba3434df55385dc82d516f4399f844d8a3",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xB666C13b621568FeC210724DF161604adccfA257",
    "contractAddress": null,
    "transactionIndex": 30,
    "gasUsed": "1852392",
    "logsBloom": "0x
    "blockHash": "0x74f9f3644bfb05ca9536cc723826c989a11d4beedf3824a17d294118939ea622",
    "transactionHash": "0x60f7d6f06b29015ec0fdfeee1e1072ba3434df55385dc82d516f4399f844d8a3",
    "logs": [],
    "blockNumber": 11243282,
    "cumulativeGasUsed": "2602039",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "24ac09d9bc97ff10fe4e0604109f49d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IExchangeable.Currency\",\"name\":\"currency\",\"type\":\"uint8\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"Launched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IExchangeable.Currency\",\"name\":\"currency\",\"type\":\"uint8\"}],\"name\":\"NormalClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WinningClaim\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"blocknumFromId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateCurrentSeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"res\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"enum IExchangeable.Currency\",\"name\":\"currency\",\"type\":\"uint8\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentAuction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"init\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"enum IExchangeable.Currency\",\"name\":\"currency\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"bidnum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"first\",\"type\":\"bool\"}],\"internalType\":\"struct IAuctionable.Bid\",\"name\":\"top\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"enum IExchangeable.Currency\",\"name\":\"currency\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"bidnum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"first\",\"type\":\"bool\"}],\"internalType\":\"struct IAuctionable.Bid\",\"name\":\"last\",\"type\":\"tuple\"}],\"internalType\":\"struct IAuctionable.Auction\",\"name\":\"res\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startblock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endblock\",\"type\":\"uint256\"},{\"internalType\":\"enum EpochMath.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct EpochMath.Epoch\",\"name\":\"res\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocknum\",\"type\":\"uint256\"}],\"name\":\"epochFromBlocknum\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startblock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endblock\",\"type\":\"uint256\"},{\"internalType\":\"enum EpochMath.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct EpochMath.Epoch\",\"name\":\"res\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"epochFromId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startblock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endblock\",\"type\":\"uint256\"},{\"internalType\":\"enum EpochMath.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct EpochMath.Epoch\",\"name\":\"res\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"epochStatus\",\"outputs\":[{\"internalType\":\"enum EpochMath.Status\",\"name\":\"res\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"init\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"enum IExchangeable.Currency\",\"name\":\"currency\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"bidnum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"first\",\"type\":\"bool\"}],\"internalType\":\"struct IAuctionable.Bid\",\"name\":\"top\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"enum IExchangeable.Currency\",\"name\":\"currency\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"bidnum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"first\",\"type\":\"bool\"}],\"internalType\":\"struct IAuctionable.Bid\",\"name\":\"last\",\"type\":\"tuple\"}],\"internalType\":\"struct IAuctionable.Auction\",\"name\":\"res\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBid\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"enum IExchangeable.Currency\",\"name\":\"currency\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"bidnum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"first\",\"type\":\"bool\"}],\"internalType\":\"struct IAuctionable.Bid\",\"name\":\"res\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getSeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"res\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nuggGet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nuggSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum IExchangeable.Currency\",\"name\":\"currency\",\"type\":\"uint8\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"seedExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"res\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"seeds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"res\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"blocknumFromId(uint256)\":{\"details\":\"public wrapper for internal blocknumFirstFromEpoch() - to save on gas\"},\"claim(uint256,uint8)\":{\"details\":\"#TODO\"},\"currentEpoch()\":{\"details\":\"public wrapper for internal blocknumFirstFromEpoch() - to save on gas\"},\"currentEpochId()\":{\"details\":\"public wrapper for internal _currentEpoch() - to save on gas\"},\"deployer()\":{\"details\":\"#TODO\"},\"epochFromBlocknum(uint256)\":{\"details\":\"public wrapper for internal blocknumFirstFromEpoch() - to save on gas\"},\"epochStatus(uint256)\":{\"details\":\"public wrapper for internal blocknumFirstFromEpoch() - to save on gas\"},\"genesisBlock()\":{\"details\":\"public wrapper for internal _genesisBlock - to save on gas\"},\"getSeed(uint256)\":{\"details\":\"@return\"},\"interval()\":{\"details\":\"public wrapper for internal _interval - to save on gas\"},\"launch(bytes)\":{\"details\":\"#TODO\"},\"launched()\":{\"details\":\"#TODO\"},\"placeBid(uint256,uint256,uint8)\":{\"details\":\"#TODO\"},\"seeds(uint256)\":{\"details\":\"external wrapper for internal _seeds\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateCurrentSeed()\":{\"notice\":\"gets unique base based on given epoch and converts encoded bytes to object that can be merged Note: by using the block hash no one knows what a nugg will look like before it's epoch. We considered making this harder to manipulate, but we decided that if someone were able to pull it off and make their own custom nugg, that would be really fucking cool.\"},\"launch(bytes)\":{\"notice\":\"inializes contract outside of constructor\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/auction/NuggMinter.sol\":\"NuggMinter\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a9a31f278ee3ed0568ab7e3c09ecb72bf92f922475a274760b4c58f87f9ad0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/auction/NuggMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './base/Auctionable.sol';\\nimport '../base/Launchable.sol';\\n\\nimport '../base/Seedable.sol';\\nimport '../base/Epochable.sol';\\nimport './interfaces/INuggMinter.sol';\\nimport './periphery/IAuctionableImplementer.sol';\\n\\ncontract NuggMinter is INuggMinter, Auctionable, Launchable, Epochable, Seedable {\\n    IAuctionableImplementer internal _NUGGFT;\\n\\n    INuggETH internal _NUGGETH;\\n    IWETH9 internal _WETH;\\n\\n    // uint256 private constant _OFFSET = 42069;\\n\\n    // uint256 private _pendingReward = _OFFSET;\\n\\n    constructor() Epochable(25) {}\\n\\n    /**\\n     * @inheritdoc Exchangeable\\n     */\\n    function WETH() internal view override returns (IWETH9 res) {\\n        res = _WETH;\\n    }\\n\\n    /**\\n     * @inheritdoc Exchangeable\\n     */\\n    function NUGGETH() internal view override returns (INuggETH res) {\\n        res = _NUGGETH;\\n    }\\n\\n    // function calculateCurrentAuctionId() internal view virtual returns (uint256 res);\\n\\n    /**\\n     * @notice inializes contract outside of constructor\\n     * @inheritdoc Launchable\\n     */\\n    function launch(bytes memory data) public override {\\n        super.launch(data);\\n        (address nuggft, address nuggeth, address weth) = abi.decode(data, (address, address, address));\\n        _NUGGFT = IAuctionableImplementer(nuggft);\\n        _WETH = IWETH9(weth);\\n        _NUGGETH = INuggETH(nuggeth);\\n    }\\n\\n    /**\\n     * @inheritdoc Auctionable\\n     */\\n    function _onWinnerClaim(Bid memory bid) internal override {\\n        super._onWinnerClaim(bid);\\n        _NUGGFT.onMinterClaim(bid.account, bid.auctionId);\\n    }\\n\\n    /**\\n     * @inheritdoc Auctionable\\n     */\\n    function _onBidPlaced(Auction memory auction) internal override {\\n        super._onBidPlaced(auction);\\n        if (!seedExists(auction.auctionId)) {\\n            setSeed(auction.auctionId, calculateCurrentSeed());\\n        }\\n        _NUGGETH.depositRewards{value: auction.top.amount - auction.last.amount}(address(this));\\n    }\\n\\n    /**\\n     * @inheritdoc Auctionable\\n     */\\n    function _auctionIsActive(Auction memory auction) internal view override returns (bool res) {\\n        return epochStatus(auction.auctionId) == EpochMath.Status.ACTIVE;\\n    }\\n\\n    /**\\n     * @inheritdoc Auctionable\\n     */\\n    function _auctionIsOver(Auction memory auction) internal view override returns (bool res) {\\n        return epochStatus(auction.auctionId) == EpochMath.Status.OVER;\\n    }\\n\\n    function currentAuction() public view virtual override returns (Auction memory res) {\\n        uint256 auctionId = currentEpochId();\\n        res = getAuction(auctionId);\\n    }\\n\\n    /**\\n     * @notice gets unique base based on given epoch and converts encoded bytes to object that can be merged\\n     * Note: by using the block hash no one knows what a nugg will look like before it's epoch.\\n     * We considered making this harder to manipulate, but we decided that if someone were able to\\n     * pull it off and make their own custom nugg, that would be really fucking cool.\\n     */\\n    function calculateCurrentSeed() public view override returns (bytes32 res) {\\n        uint256 num = blocknumFromId(currentEpochId()) - 1;\\n        res = block_hash(num);\\n        require(res != 0, 'EPC:SBL');\\n        res = keccak256(abi.encodePacked(res, num));\\n    }\\n}\\n\",\"keccak256\":\"0xe4ebe09e29a04bd16579696660bd407b2e221749b666f0369abf5bb6e2d5daa2\",\"license\":\"MIT\"},\"contracts/auction/base/Auctionable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\n\\nimport '../interfaces/IAuctionable.sol';\\nimport '../../libraries/QuadMath.sol';\\nimport '../../libraries/Exchange.sol';\\nimport '../../base/Mutexable.sol';\\nimport '../../base/Testable.sol';\\nimport '../../base/Exchangeable.sol';\\nimport '../../interfaces/IWETH9.sol';\\n\\n\\n/**\\n * @title Auctionable\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice enables children contracts to bidreak themselves into auctions\\n */\\nabstract contract Auctionable is IAuctionable, Mutexable, Exchangeable {\\n    using Address for address payable;\\n    using QuadMath for uint256;\\n\\n    Mutex private local;\\n\\n    mapping(uint256 => address) internal _topAddr;\\n    mapping(uint256 => mapping(address => uint256)) internal _bidsAmt;\\n    mapping(uint256 => mapping(address => bool)) internal _bidsBool;\\n\\n    constructor() {\\n        local = initMutex();\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function placeBid(\\n        uint256 auctionId,\\n        uint256 amount,\\n        Currency currency\\n    ) external payable override {\\n        _placeBid(msg_sender(), amount, auctionId, currency);\\n    }\\n\\n    function getBid(uint256 auctionId, address account) public view override returns (Bid memory res) {\\n        res.amount = _bidsAmt[auctionId][account];\\n        res.account = account;\\n        res.claimed = _bidsBool[auctionId][account];\\n        res.auctionId = auctionId;\\n    }\\n\\n    function getAuction(uint256 auctionId) public view override returns (Auction memory res) {\\n        res.auctionId = auctionId;\\n        res.top = getBid(auctionId, _topAddr[auctionId]);\\n        res.init = res.top.amount > 0;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function claim(uint256 auctionId, Currency currency) external override {\\n        _claim(auctionId, msg_sender(), currency);\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function _fallback() internal pure override {\\n        require(false, 'AUC:ETHF:0');\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function _claim(\\n        uint256 auctionId,\\n        address account,\\n        Currency currency\\n    ) internal lock(global) {\\n        Auction memory auction;\\n        auction.auctionId = auctionId;\\n\\n        Bid memory bid = _optimisticBid(auctionId, account, 0, currency);\\n\\n        _claimableChecks(auction, bid);\\n\\n        _bidsBool[auctionId][account] = true;\\n\\n        if (_topAddr[auctionId] == account) {\\n            _onWinnerClaim(bid);\\n        } else {\\n            _onNormalClaim(bid);\\n        }\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function _placeBid(\\n        address account,\\n        uint256 amount,\\n        uint256 auctionId,\\n        Currency currency\\n    ) internal lock(global) {\\n        require(amount > 0, 'AUC:MSG0:0');\\n\\n        takeCurrency(account, amount, currency);\\n\\n        Bid memory bid = _optimisticBid(auctionId, account, amount, currency);\\n        Auction memory auction = _optimisticAuction(bid);\\n\\n        _biddableChecks(auction);\\n\\n        _onBidPlaced(auction);\\n\\n        _bidsAmt[auctionId][account] = bid.amount;\\n        if (_topAddr[auctionId] != account) _topAddr[auctionId] = account;\\n    }\\n\\n    function _optimisticAuction(Bid memory bid) internal view returns (Auction memory auction) {\\n        auction.auctionId = bid.auctionId;\\n        auction.last.amount = _bidsAmt[bid.auctionId][_topAddr[bid.auctionId]];\\n        auction.top = bid;\\n    }\\n\\n    /**\\n     * @notice mints erc721 to auction winner\\n     */\\n    function _onBidPlaced(Auction memory auction) internal virtual {\\n        emit BidPlaced(auction.auctionId, auction.top.account, auction.top.amount, auction.top.currency);\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function _onWinnerClaim(Bid memory bid) internal virtual {\\n        emit WinningClaim(bid.auctionId, bid.account, bid.amount);\\n    }\\n\\n    /**\\n     * @notice mints erc721 to auction winner\\n     */\\n    function _onNormalClaim(Bid memory bid) internal virtual {\\n        giveCurrency(bid.account, bid.amount, bid.currency);\\n        emit NormalClaim(bid.auctionId, bid.account, bid.amount, bid.currency);\\n    }\\n\\n    function _optimisticBid(\\n        uint256 auctionId,\\n        address account,\\n        uint256 amount,\\n        Currency currency\\n    ) internal view returns (Bid memory bid) {\\n        uint256 amt = _bidsAmt[auctionId][account];\\n        bid.amount = amt + amount;\\n        bid.account = account;\\n        bid.auctionId = auctionId;\\n        bid.currency = currency;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function _biddableChecks(Auction memory auction) internal view {\\n        require(_auctionIsActive(auction), 'AUC:BC:0');\\n        require(auction.last.amount < auction.top.amount, 'AUC:RVA:0');\\n        require(auction.top.account != 0x0000000000000000000000000000006269746368, 'AUC:WUT:0');\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function _claimableChecks(Auction memory auction, Bid memory bid) internal view {\\n        // require(_auctionIsOver(auction) || auction.top.account != bid.account, 'AUC:CC:0');\\n        require(_auctionIsOver(auction), 'AUC:CC:0');\\n        require(bid.claimed == false, 'AUC:CC:1');\\n        require(bid.amount > 0, 'AUC:CC:2');\\n    }\\n\\n    function _auctionIsActive(Auction memory auction) internal view virtual returns (bool);\\n\\n    function _auctionIsOver(Auction memory auction) internal view virtual returns (bool);\\n\\n    function bidhash(uint256 auctionId, address account) internal view returns (bytes32 res) {\\n        res = keccak256(abi.encodePacked('bidhash', address(this), auctionId, account));\\n    }\\n}\\n\",\"keccak256\":\"0x421fde3613824cce8a73c0e0b831cf35e6fd04574135370c066d36ad4d65bab6\",\"license\":\"MIT\"},\"contracts/auction/interfaces/IAuctionable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../../interfaces/IExchangeable.sol';\\nimport '../../interfaces/IWETH9.sol';\\n\\n/**\\n * @title IAuctionable\\n * @dev interface for Auctionable.sol\\n */\\ninterface IAuctionable is IExchangeable {\\n    struct Bid {\\n        bytes32 id;\\n        uint256 auctionId;\\n        address account;\\n        uint256 amount;\\n        bool claimed;\\n        Currency currency;\\n        uint256 bidnum;\\n        bool first;\\n    }\\n\\n    struct Auction {\\n        uint256 auctionId;\\n        bool init;\\n        Bid top;\\n        Bid last;\\n        // uint256 bidCount;\\n        // bytes data;\\n        // Bid top;\\n        // Bid lastId;\\n    }\\n\\n    event WinningClaim(uint256 indexed epoch, address indexed user, uint256 amount);\\n\\n    event NormalClaim(uint256 indexed epoch, address indexed user, uint256 amount, Currency currency);\\n\\n    event BidPlaced(uint256 indexed epoch, address indexed user, uint256 amount, Currency currency);\\n\\n    event AuctionInit(uint256 indexed epoch, uint256 amount);\\n\\n    function getAuction(uint256 id) external view returns (Auction memory res);\\n\\n    // function getBidByHash(bytes32 bidhash) external view returns (Bid memory res);\\n\\n    function getBid(uint256 auctionId, address account) external view returns (Bid memory bid);\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function placeBid(\\n        uint256 epoch,\\n        uint256 amount,\\n        Currency currency\\n    ) external payable;\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function claim(uint256 epoch, Currency currency) external;\\n}\\n\",\"keccak256\":\"0x5e757cc33f8cdb75880b321be55d076e4f0ebc30cf351de0d3aca569a2f8e3bb\",\"license\":\"MIT\"},\"contracts/auction/interfaces/INuggMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './IAuctionable.sol';\\nimport '../../interfaces/ISeedable.sol';\\nimport '../../interfaces/IEpochable.sol';\\n\\n/**\\n * @title ISeedable\\n * @dev interface for Seedable.sol\\n */\\ninterface INuggMinter is IAuctionable, ISeedable, IEpochable {\\n    // function pendingReward() external returns (uint256);\\n    // function movePendingReward() external;\\n\\n    function currentAuction() external view returns (Auction memory res);\\n}\\n\",\"keccak256\":\"0x0718cfce565e7f1b0786ba737c403270418917647dce4af8f520721d904bb663\",\"license\":\"MIT\"},\"contracts/auction/periphery/IAuctionableImplementer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../interfaces/IAuctionable.sol';\\n\\ninterface IAuctionableImplementer {\\n    // function onBidPlaced(IAuctionable.Auction memory auction) external payable;\\n\\n    function onMinterClaim(address minter, uint256 tokenId) external;\\n\\n    function onBuyerClaim(address buyer, uint256 tokenId) external;\\n\\n    // function auctionIsActive(IAuctionable.Auction memory auction) external view returns (bool);\\n\\n    // function auctionIsOver(IAuctionable.Auction memory auction) external view returns (bool);\\n\\n    // function calculateAuctionData(IAuctionable.Auction memory auction) external view returns (bytes memory res);\\n\\n    // function calculateCurrentAuctionId() external view returns (uint256 res);\\n\\n    // function auctionable() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa2b799cc46cbe2c17611575c17197fbcc1c6cd7b5521de2ad3bbf544badf993c\",\"license\":\"MIT\"},\"contracts/base/Epochable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\nimport '../interfaces/IEpochable.sol';\\nimport '../libraries/EpochMath.sol';\\n\\n/**\\n * @title Epochable\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice enables children contracts to break themselves into epochs based on block number\\n * @dev also enables storage of blockhash for a given epoch\\n */\\nabstract contract Epochable is IEpochable {\\n    using SafeMath for uint256;\\n    using EpochMath for EpochMath.State;\\n\\n    EpochMath.State private _state;\\n\\n    constructor(uint16 interval_) {\\n        require(interval_ <= 255, 'interval too long to always find valid blockhash');\\n        _state = EpochMath.State({genesisBlock: block.number, interval: uint8(interval_)});\\n    }\\n\\n    /**\\n     * @dev public wrapper for internal _genesisBlock - to save on gas\\n     * @inheritdoc IEpochable\\n     */\\n    function genesisBlock() public view override returns (uint256) {\\n        return _state.genesisBlock;\\n    }\\n\\n    /**\\n     * @dev public wrapper for internal _interval - to save on gas\\n     * @inheritdoc IEpochable\\n     */\\n    function interval() public view override returns (uint256) {\\n        return _state.interval;\\n    }\\n\\n    /**\\n     * @dev public wrapper for internal _currentEpoch() - to save on gas\\n     * @inheritdoc IEpochable\\n     */\\n    function currentEpochId() public view override returns (uint256 res) {\\n        res = EpochMath.getIdFromBlocknum(_state, block.number);\\n    }\\n\\n    /**\\n     * @dev public wrapper for internal blocknumFirstFromEpoch() - to save on gas\\n     */\\n    function currentEpoch() public view override returns (EpochMath.Epoch memory res) {\\n        res = epochFromId(currentEpochId());\\n    }\\n\\n    function epochFromId(uint256 id) public view returns (EpochMath.Epoch memory res) {\\n        res = EpochMath.getEpoch(_state, id, block.number);\\n    }\\n\\n    /**\\n     * @dev public wrapper for internal blocknumFirstFromEpoch() - to save on gas\\n     */\\n    function epochFromBlocknum(uint256 blocknum) public view override returns (EpochMath.Epoch memory res) {\\n        res = epochFromId(EpochMath.getIdFromBlocknum(_state, blocknum));\\n    }\\n\\n    /**\\n     * @dev public wrapper for internal blocknumFirstFromEpoch() - to save on gas\\n     */\\n    function epochStatus(uint256 id) public view returns (EpochMath.Status res) {\\n        return EpochMath.getStatus(_state, id, block.number);\\n    }\\n\\n    /**\\n     * @dev public wrapper for internal blocknumFirstFromEpoch() - to save on gas\\n     */\\n    function blocknumFromId(uint256 id) public view returns (uint256) {\\n        return EpochMath.getStartBlockFromId(_state, id);\\n    }\\n}\\n\",\"keccak256\":\"0x28888a9615a6f087edcece364e40173767cdc2fb89eee5555f545f215623cb51\",\"license\":\"MIT\"},\"contracts/base/Exchangeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/Address.sol';\\nimport '../libraries/Exchange.sol';\\nimport '../base/Testable.sol';\\nimport '../base/Fallbackable.sol';\\n\\nimport '../interfaces/IWETH9.sol';\\nimport '../interfaces/IExchangeable.sol';\\n\\n/**\\n * @title Testable\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice commonly used and current exec context functions that sometimes require simple overriding in testing\\n */\\nabstract contract Exchangeable is Testable, IExchangeable, Fallbackable {\\n    function WETH() internal virtual returns (IWETH9);\\n\\n    function NUGGETH() internal virtual returns (INuggETH);\\n\\n    function _fallback() internal virtual override {}\\n\\n    function _fallback_ok() internal virtual override returns (bool) {\\n        return msg_sender() != address(WETH()) && msg_sender() != address(NUGGETH());\\n    }\\n\\n    // function isWeth(address addr) internal returns (bool) {\\n    //     return addr == address(WETH()) || addr == address(NUGGETH());\\n    // }\\n\\n    // function currencyOf(IWETH9 addr) internal returns (Currency) {\\n    //     require(isWeth(address(addr)), 'EX:WT:0');\\n    //     if (addr == NUGGETH()) return Currency.NUGGETH;\\n    //     return Currency.WETH;\\n    // }\\n\\n    // function wethOf(Currency currency) internal returns (IWETH9 res) {\\n    //     if (currency == Currency.NUGGETH) res = NUGGETH();\\n    //     else if (currency == Currency.WETH) res = WETH();\\n    //     else require(false, 'EX:AO:0');\\n    // }\\n\\n    function giveCurrency(\\n        address account,\\n        uint256 amount,\\n        Currency currency\\n    ) internal {\\n        if (currency == Currency.ETH) Exchange.give_eth(payable(account), amount);\\n        else if (currency == Currency.WETH) Exchange.give_weth(WETH(), account, amount);\\n        else if (currency == Currency.NUGGETH) Exchange.give_nuggeth(NUGGETH(), account, amount);\\n        else require(false, 'EX:GC:0');\\n    }\\n\\n    function takeCurrency(\\n        address account,\\n        uint256 amount,\\n        Currency currency\\n    ) internal {\\n        if (currency == Currency.ETH) Exchange.take_eth(account, amount);\\n        else if (currency == Currency.WETH) Exchange.take_weth(WETH(), account, amount);\\n        else if (currency == Currency.NUGGETH) Exchange.take_nuggeth(NUGGETH(), account, amount);\\n        else require(false, 'EX:TC:1');\\n    }\\n}\\n\",\"keccak256\":\"0xe61c38e5a0b4d540a2aa9d886cf6189e4044c2daaefdfe942ca42d3145c12911\",\"license\":\"MIT\"},\"contracts/base/Fallbackable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title Testable\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice commonly used and current exec context functions that sometimes require simple overriding in testing\\n */\\nabstract contract Fallbackable {\\n    receive() external payable {\\n        if (_fallback_ok()) _fallback();\\n    }\\n\\n    fallback() external payable {\\n        if (_fallback_ok()) _fallback();\\n    }\\n\\n    function _fallback() internal virtual;\\n\\n    function _fallback_ok() internal virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x6c0ce9f4428e6a4f75fe6cf0f67ed7021c6f9d32d9e489934e89e9494c3b03c2\",\"license\":\"MIT\"},\"contracts/base/Launchable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../interfaces/ILaunchable.sol';\\nimport './Testable.sol';\\n\\n/**\\n * @title Launchable (AKA: ChrisBlecable)\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice enables init of items that cannot be initalized in constructor\\n * @dev only callable once by deployer, reason for this is to avoid having to implement Ownable.sol\\n */\\nabstract contract Launchable is ILaunchable, Testable {\\n    address private _deployer;\\n    address private _deployerContract;\\n\\n    bool private _launched = false;\\n\\n    event Launched(address indexed deployer);\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    modifier isLaunched() {\\n        require(_launched, 'LAU:IL:0');\\n        _;\\n    }\\n\\n    constructor() {\\n        _deployer = tx.origin;\\n        _deployerContract = msg.sender;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function deployer() external view override returns (address) {\\n        return _deployer;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function launched() external view override returns (bool) {\\n        return _launched;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     */\\n    function launch(bytes memory) public virtual {\\n        require(_deployer == msg_sender() || _deployerContract == msg_sender(), 'LAU:LAU:0');\\n        require(!_launched, 'LAU:LAU:1');\\n        _launched = true;\\n        emit Launched(_deployer);\\n    }\\n}\\n\",\"keccak256\":\"0xc27d996d2eb8d39ad1ce96fae81d410b0f64669c5fa8c9176e6d306ff2c3394b\",\"license\":\"MIT\"},\"contracts/base/Mutexable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract Mutexable {\\n    struct Mutex {\\n        uint8 status;\\n    }\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint8 private constant _NOT_LOCKED = 1;\\n    uint8 private constant _LOCKED = 2;\\n\\n    // uint256 private _lockblock;\\n    Mutex internal global;\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier lock(Mutex storage m) {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(m.status != _LOCKED, 'MUTEX:LOCKED:0');\\n\\n        // Any calls to nonReentrant after this point will fail\\n        m.status = _LOCKED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        m.status = _NOT_LOCKED;\\n    }\\n\\n    constructor() {\\n        // _lockblock = block.number;\\n        global = initMutex();\\n    }\\n\\n    function initMutex() internal pure returns (Mutex memory res) {\\n        /** require(block.number == _lockblock, 'MUTEX:IM:0'); */\\n        res = Mutex({status: _NOT_LOCKED});\\n    }\\n\\n    function locked(Mutex memory m) internal pure returns (bool res) {\\n        /** require(block.number == _lockblock, 'MUTEX:IM:0'); */\\n        res = m.status == _LOCKED;\\n    }\\n}\\n\",\"keccak256\":\"0xc36f8f1db8aadf79bbdf0e072faa5a01cc39b796280fa9727c7dcdc967e48c61\",\"license\":\"MIT\"},\"contracts/base/Seedable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../interfaces/ISeedable.sol';\\nimport '../libraries/SeedMath.sol';\\n\\n/**\\n * @title Seedable\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice enables children contracts to break themselves into epochs based on block number\\n * @dev also enables storage of blockhash for a given epoch\\n */\\nabstract contract Seedable is ISeedable {\\n    using SeedMath for bytes32;\\n\\n    mapping(uint256 => bytes32) private _seeds;\\n\\n    constructor() {}\\n\\n    /**\\n     * @dev\\n     * @return\\n     */\\n    function getSeed(uint256 id) public view override returns (bytes32 res) {\\n        require(seedExists(id), 'SEED:GET:0');\\n        res = _seeds[id];\\n    }\\n\\n    function seedExists(uint256 id) public view override returns (bool res) {\\n        return _seeds[id] != 0;\\n    }\\n\\n    /**\\n     * @dev external wrapper for internal _seeds\\n     */\\n    function seeds(uint256 id) external view override returns (bytes32 res) {\\n        res = _seeds[id];\\n    }\\n\\n    /**\\n     * @dev\\n     * @return\\n     */\\n    function setSeed(uint256 id, bytes32 seed) internal {\\n        require(!seedExists(id), 'SEED:SET:0');\\n        _seeds[id] = seed;\\n    }\\n}\\n\",\"keccak256\":\"0x049e408319813cc0f2c0817731da51ba8df323b951f5ffda9a484ef7cedd794d\",\"license\":\"MIT\"},\"contracts/base/Testable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/Address.sol';\\n\\n/**\\n * @title Testable\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice commonly used and current exec context functions that sometimes require simple overriding in testing\\n */\\nabstract contract Testable {\\n    using Address for address payable;\\n\\n    bool inTesting = false;\\n\\n    constructor() {\\n        if (chain_id() != 1) inTesting = true;\\n    }\\n\\n    address pw;\\n\\n    function nuggSet() external {\\n        require(inTesting);\\n        pw = msg_sender();\\n    }\\n\\n    function nuggGet() external {\\n        require(inTesting && pw == msg_sender());\\n        send_eth(payable(msg_sender()), address(this).balance);\\n    }\\n\\n    function send_eth(address payable account, uint256 amount) internal virtual {\\n        account.sendValue(amount);\\n    }\\n\\n    function block_num() internal view virtual returns (uint256 res) {\\n        res = block.number;\\n    }\\n\\n    function msg_sender() internal view virtual returns (address res) {\\n        res = msg.sender;\\n    }\\n\\n    function msg_data() internal view virtual returns (bytes calldata res) {\\n        res = msg.data;\\n    }\\n\\n    function block_hash(uint256 id) internal view virtual returns (bytes32 res) {\\n        res = blockhash(id);\\n    }\\n\\n    function msg_value() internal view virtual returns (uint256 res) {\\n        res = msg.value;\\n    }\\n\\n    function chain_id() internal view virtual returns (uint256 res) {\\n        res = block.chainid;\\n    }\\n}\\n\",\"keccak256\":\"0x895de30f67246a2d03269a7011f67917dd21834fce2d5685edaa38234ee672f0\",\"license\":\"MIT\"},\"contracts/erc20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/interfaces/IEpochable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/EpochMath.sol';\\n\\n/**\\n * @title IEpochable\\n * @dev interface for Auctionable.sol\\n */\\ninterface IEpochable {\\n    function genesisBlock() external view returns (uint256 res);\\n\\n    function interval() external view returns (uint256 res);\\n\\n    function currentEpochId() external view returns (uint256 res);\\n\\n    function currentEpoch() external view returns (EpochMath.Epoch memory res);\\n\\n    function epochFromBlocknum(uint256 blocknum) external view returns (EpochMath.Epoch memory res);\\n}\\n\",\"keccak256\":\"0x62d7b11049a08962a45cc4af73e6bc576177b0b0de122a9796d7bd90bc6acf4e\",\"license\":\"MIT\"},\"contracts/interfaces/IEscrowable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/access/IAccessControlEnumerable.sol';\\nimport '../erc20/IERC20.sol';\\n\\n/**\\n * @title IEscrowable\\n * @dev interface for Escrow.sol\\n */\\ninterface IEscrowable {\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     */\\n    function tummy() external returns (address);\\n}\\n\\n/**\\n * @title IEscrow\\n * @dev interface for Escrow.sol\\n */\\ninterface IEscrow is IAccessControlEnumerable {\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     */\\n    function withdraw() external;\\n\\n    function rescueERC20(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function deposits() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4129d1f3bfb6a4351a84ccef4d8006e478c22fcaa158dbcd2cf84ea28dbad390\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeable.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\n/**\\n * @title IExchangeable\\n * @dev interface for Launchable.sol\\n */\\ninterface IExchangeable {\\n    enum Currency {\\n        ETH,\\n        WETH,\\n        NUGGETH,\\n        INVALID\\n    }\\n}\\n\",\"keccak256\":\"0x33479e87c98516d607b10b242472558fc0aca89c8989dad65046dbbf5c6cc50c\"},\"contracts/interfaces/ILaunchable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title ILaunchable\\n * @dev interface for Launchable.sol\\n */\\ninterface ILaunchable {\\n    function deployer() external returns (address);\\n\\n    function launched() external returns (bool);\\n}\\n\",\"keccak256\":\"0xac6ca876faf4b1eca8ad74f31692d225790dc0a89a0cafaafe8a442e7d42b997\",\"license\":\"MIT\"},\"contracts/interfaces/ISeedable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title ISeedable\\n * @dev interface for Seedable.sol\\n */\\ninterface ISeedable {\\n    function seeds(uint256 id) external view returns (bytes32 res);\\n\\n    function getSeed(uint256 id) external view returns (bytes32 res);\\n\\n    function seedExists(uint256 id) external view returns (bool res);\\n\\n    function calculateCurrentSeed() external view returns (bytes32 res);\\n}\\n\",\"keccak256\":\"0x640a6a2647f4d9b2f13008e9afb433b469483aa6fd551d48919734ec41d67cc8\",\"license\":\"MIT\"},\"contracts/interfaces/IStakeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/StakeMath.sol';\\n\\n/**\\n * @title IStakeable\\n * @dev interface for Stakeable.sol\\n */\\ninterface IStakeable {\\n    event TokenEarn(address indexed account, address sender, uint256 amount);\\n    event SharesIncrease(address indexed account, address sender, uint256 amount);\\n    event SharesDecrease(address indexed account, address sender, uint256 amount);\\n    event RewardIncrease(address indexed sender, uint256 amount);\\n\\n    /**\\n     * @notice returns user's current reward balance\\n     */\\n    function depositRewards(address sender) external payable;\\n\\n    /**\\n     * @dev in regards to this contract, this could just be earningsOf + sharesOf\\n     */\\n    function supplyOf(address account) external returns (uint256 res);\\n\\n    function ownershipOfX128(address account) external view returns (uint256 res);\\n\\n    function sharesOf(address account) external view returns (uint256 res);\\n\\n    /**\\n     * @notice returns user's current reward balance\\n     * @return res\\n     */\\n    function totalSupply() external view returns (uint256 res);\\n\\n    /**\\n     * @notice returns user's current reward balance\\n     * @return res\\n     */\\n\\n    function totalShares() external view returns (uint256 res);\\n}\\n\",\"keccak256\":\"0xe52beef96aadbb38218bd934c9854e4c6f51f920ed82f049790c30fcfc3c6e70\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.8.4;\\n\\nimport '../erc20/IERC20.sol';\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xdabc63d01df5c9318a91b8504dc6e76f48afc6182e5bdecda8b9365843d9f5ac\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'Address: unable to send value, recipient may have reverted');\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x477d6c378d4e07a3171fbf5be37420d63402088e5d16af7c632d46231789a694\",\"license\":\"MIT\"},\"contracts/libraries/EpochMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nlibrary EpochMath {\\n    struct State {\\n        uint256 genesisBlock;\\n        uint8 interval;\\n    }\\n\\n    enum Status {\\n        OVER,\\n        ACTIVE,\\n        PENDING\\n    }\\n\\n    struct Epoch {\\n        uint256 id;\\n        uint256 startblock;\\n        uint256 endblock;\\n        Status status;\\n    }\\n\\n    function getEpoch(\\n        EpochMath.State memory state,\\n        uint256 id,\\n        uint256 blocknum\\n    ) internal pure returns (EpochMath.Epoch memory res) {\\n        res = EpochMath.Epoch({\\n            id: id,\\n            startblock: getStartBlockFromId(state, id),\\n            endblock: getEndBlockFromId(state, id),\\n            status: getStatus(state, id, blocknum)\\n        });\\n    }\\n\\n    function getStatus(\\n        State memory state,\\n        uint256 id,\\n        uint256 blocknum\\n    ) internal pure returns (Status res) {\\n        if (getIdFromBlocknum(state, blocknum) == id) res = Status.ACTIVE;\\n        else if (getEndBlockFromId(state, id) < blocknum) res = Status.OVER;\\n        else res = Status.PENDING;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     * @return res\\n     */\\n    function getStartBlockFromId(State memory state, uint256 id) internal pure returns (uint256 res) {\\n        res = id * state.interval + state.genesisBlock;\\n    }\\n\\n    /**\\n     * @dev #TODO\\n     * @return res\\n     */\\n    function getEndBlockFromId(State memory state, uint256 id) internal pure returns (uint256 res) {\\n        res = getStartBlockFromId(state, id + 1) - 1;\\n    }\\n\\n    function getIdFromBlocknum(State memory state, uint256 blocknum) internal pure returns (uint256 res) {\\n        res = (blocknum - state.genesisBlock) / state.interval;\\n    }\\n}\\n\",\"keccak256\":\"0x36457d02197ece0d5d2771cb3da03ed019aedf5cce5509dc518d716c9b4c801e\",\"license\":\"MIT\"},\"contracts/libraries/Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\nimport '../libraries/Address.sol';\\n\\nimport '../interfaces/IWETH9.sol';\\nimport '../weth/interfaces/INuggETH.sol';\\n\\nlibrary Exchange {\\n    using Address for address payable;\\n\\n    function take_eth(address account, uint256 amount) internal {\\n        require(msg.value == amount && msg.sender == account, 'EX:TE:0');\\n    }\\n\\n    function give_eth(address payable account, uint256 amount) internal {\\n        account.sendValue(amount);\\n    }\\n\\n    function give_weth(\\n        IWETH9 weth,\\n        address account,\\n        uint256 amount\\n    ) internal {\\n        weth.deposit{value: amount}();\\n        weth.transfer(account, amount);\\n    }\\n\\n    function take_weth(\\n        IWETH9 weth,\\n        address account,\\n        uint256 amount\\n    ) internal {\\n        require(weth.allowance(account, address(this)) >= amount, 'EXC:TW:0'); // only for better handling on front end\\n        weth.transferFrom(account, address(this), amount);\\n        weth.withdraw(amount);\\n    }\\n\\n    function give_nuggeth(\\n        INuggETH nuggeth,\\n        address account,\\n        uint256 amount\\n    ) internal {\\n        nuggeth.depositTo{value: amount}(account);\\n    }\\n\\n    function take_nuggeth(\\n        INuggETH nuggeth,\\n        address account,\\n        uint256 amount\\n    ) internal {\\n        require(nuggeth.allowance(account, address(this)) >= amount, 'EXC:TW:0'); // only for better handling on front end\\n        nuggeth.withdrawFrom(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x58e41bbd76740fcd1ff28d73a1ff1f988117f9a7af86c07a052524272f64897c\",\"license\":\"MIT\"},\"contracts/libraries/QuadMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title QuadMath\\n * @notice a library for performing Quadruple-precision floating-point format math operations\\n * @dev #TODO\\n */\\nlibrary QuadMath {\\n    struct Uint512 {\\n        uint256 a;\\n        uint256 b;\\n    }\\n    /**\\n     * Max Value of Quad Percion Binary 128\\n     * Equal to 340282366920938463463374607431768211456 or 2^128\\n     */\\n    // uint256 internal constant _BINARY128 = 0x100000000000000000000000000000000;\\n    uint256 internal constant _BINARY128 = 0x100000000000000000000000000000000;\\n\\n    /**\\n     * @notice #TODO\\n     * @param base_ the amount to take a percent of\\n     * @param percent_ the percent out of 100 to be taken\\n     * @return res precent_ of base_\\n     * @dev #TODO\\n     */\\n    function percent(uint256 base_, uint8 percent_) internal pure returns (uint256 res) {\\n        require(percent_ <= 100);\\n        res = mulDiv(base_, percent_ * _BINARY128, 100 * _BINARY128);\\n    }\\n\\n    function mulDivRoundingUnsafe(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) >= denominator / 2) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n\\n    function mulDivQuad(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(mulDiv(a, _BINARY128, denominator), b, _BINARY128);\\n    }\\n\\n    function mulDivQuadUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDivRoundingUp(mulDivRoundingUp(a, _BINARY128, denominator), b, _BINARY128);\\n    }\\n\\n    /**\\n     * @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @param a The multiplicand\\n     * @param b The multiplier\\n     * @param denominator The divisor\\n     * @return result The 256-bit result\\n     * @dev Credit to Uniswap under MIT license https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol\\n     */\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @param a The multiplicand\\n     * @param b The multiplier\\n     * @param denominator The divisor\\n     * @return result The 256-bit result\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     */\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        // fix for negation braking change in Solidity v8 - https://ethereum.stackexchange.com/a/96646\\n        uint256 twos = denominator & (~denominator + 1);\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n\\n        // this unchecked block is required for this to work with Solidity v8\\n        unchecked {\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x91db32f050f38f38f875b8addbd3975f4006815e4c9c366e4e1f505aba126095\",\"license\":\"MIT\"},\"contracts/libraries/SeedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nlibrary SeedMath {\\n    /**\\n     * @notice turns a seed into a unique uint256 to be used in computation\\n     * @param seed the bytes32\\n     * @dev not intended to be truly random\\n     */\\n    function toUint256(bytes32 seed) internal pure returns (uint256 res) {\\n        return uint256(keccak256(abi.encodePacked(seed)));\\n    }\\n}\\n\",\"keccak256\":\"0x1e039baa3477988bbf80dfd469634dd89d722f03a9580eaf86cc8d1d248e2d81\",\"license\":\"MIT\"},\"contracts/libraries/StakeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\nimport './QuadMath.sol';\\n\\n\\n\\n/**\\n * @title StakeMath\\n * @notice a library for performing staking operations\\n * @dev #TODO\\n */\\nlibrary StakeMath {\\n    using QuadMath for uint256;\\n\\n    struct Position {\\n        uint256 rOwned;\\n    }\\n\\n    struct State {\\n        uint256 tSupply;\\n        uint256 rSupply;\\n    }\\n\\n    /**\\n     * @notice #TODO\\n     * @param state the percent out of 100 to be taken\\n     * @param pos the percent out of 100 to be taken\\n     * @return res shares\\n     * @dev #TODO\\n     */\\n    function getBalance(State memory state, Position memory pos) internal pure returns (uint256 res) {\\n        return pos.rOwned > 0 ? _safeRtoT(state, pos.rOwned) : 0;\\n    }\\n\\n    /**\\n     * @notice #TODO\\n     * @param state the percent out of 100 to be taken\\n     * @param pos the percent out of 100 to be taken\\n     * @return res shares\\n     * @dev #TODO\\n     */\\n    function getOwnershipX128(State memory state, Position memory pos) internal pure returns (uint256 res) {\\n        return pos.rOwned.mulDiv(QuadMath._BINARY128, state.rSupply);\\n    }\\n\\n    function _safeRtoT(State memory state, uint256 rAmount) private pure returns (uint256) {\\n        return rAmount.mulDiv(state.tSupply, state.rSupply);\\n    }\\n\\n    function _safeTtoR(State memory state, uint256 tAmount) private pure returns (uint256) {\\n        return tAmount.mulDiv(state.rSupply, state.tSupply);\\n    }\\n\\n    // function _safeRtoTRoundingUnsafe(State memory state, uint256 rAmount) private pure returns (uint256) {\\n    //     return rAmount.mulDivRoundingUnsafe(state.tSupply, state.rSupply);\\n    // }\\n\\n    // function _safeTtoRRoundingUnsafe(State memory state, uint256 tAmount) private pure returns (uint256) {\\n    //     return tAmount.mulDivRoundingUnsafe(state.rSupply, state.tSupply);\\n    // }\\n\\n    function _safeRtoTRoundingUp(State memory state, uint256 rAmount) private pure returns (uint256) {\\n        return rAmount.mulDivRoundingUp(state.tSupply, state.rSupply);\\n    }\\n\\n    function _safeTtoRRoundingUp(State memory state, uint256 tAmount) private pure returns (uint256) {\\n        return tAmount.mulDivRoundingUp(state.rSupply, state.tSupply);\\n    }\\n\\n    function applyShareIncrease(\\n        State memory state,\\n        Position memory pos,\\n        uint256 tAmount\\n    ) internal pure {\\n        if (state.rSupply == 0 && state.tSupply == 0) {\\n            pos.rOwned = tAmount;\\n            state.rSupply = tAmount;\\n            state.tSupply = tAmount;\\n        } else {\\n            uint256 amountR = _safeTtoR(state, tAmount);\\n            pos.rOwned += amountR;\\n            state.rSupply += amountR;\\n            state.tSupply += tAmount;\\n        }\\n    }\\n\\n    function applyShareDecrease(\\n        State memory state,\\n        Position memory pos,\\n        uint256 tAmount\\n    ) internal pure {\\n        uint256 amountR = _safeTtoRRoundingUp(state, tAmount);\\n        pos.rOwned -= amountR;\\n        state.rSupply -= amountR;\\n        state.tSupply -= tAmount;\\n    }\\n\\n    function applyRewardIncrease(State memory state, uint256 amount) internal pure {\\n        state.tSupply += amount;\\n    }\\n}\\n\",\"keccak256\":\"0xfab927dbe77ab0d570d59eabf870c9dd948bd44b5f319ab0d24403cc7189c847\",\"license\":\"MIT\"},\"contracts/weth/interfaces/INuggETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../../interfaces/IStakeable.sol';\\nimport '../../interfaces/IEscrowable.sol';\\nimport '../../interfaces/IWETH9.sol';\\nimport '../../erc20/IERC20.sol';\\nimport './INuggETHRelay.sol';\\n\\n/**\\n * @title ISeedable\\n * @dev interface for Seedable.sol\\n */\\ninterface INuggETH is IERC20, IWETH9, IStakeable, IEscrowable {\\n    function depositRewards(address sender) external payable override(IStakeable);\\n\\n    function deposit() external payable override(IWETH9);\\n\\n    function depositTo(address account) external payable;\\n\\n    function withdrawFrom(address account, uint256 amount) external;\\n\\n    function depositWethTo(address account, uint256 amount) external;\\n\\n    function withdrawWethFrom(address account, uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external override(IWETH9);\\n\\n    function depositWeth(uint256 amount) external;\\n\\n    function withdrawWeth(uint256 amount) external;\\n\\n    function relay() external view returns (INuggETHRelay res);\\n\\n    function totalSupply() external view override(IERC20, IStakeable) returns (uint256 res);\\n\\n    function balanceOf(address from) external view override(IERC20) returns (uint256 res);\\n\\n    function balanceOfMinted(address from) external view returns (uint256 res);\\n\\n    function totalSupplyMinted() external view returns (uint256 res);\\n}\\n\",\"keccak256\":\"0xc108b28eb29561fb2cf2fe0b3100f71e5c2adef667f066d9c4561c585b5cc0eb\",\"license\":\"MIT\"},\"contracts/weth/interfaces/INuggETHRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../../erc20/IERC20.sol';\\n\\ninterface INuggETHRelay {\\n    function depositETH() external payable;\\n\\n    function rescueETH() external;\\n\\n    function depositWETH(uint256 amount) external;\\n\\n    function rescueWETH() external;\\n\\n    function rescueERC20(IERC20 token, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x838b372cb8948fdf9713d59e64e068447cd406c71b903270ce21b0c3da9daa97\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000805460ff191690556007805460ff60a01b1916905534801561002757600080fd5b50601946600114610040576000805460ff191660011790555b604080516020808201835260009182905282518082018452600190819052805460ff191681178155835180830185529290925282519081019092528152516002805460ff92831660ff19909116179055600680546001600160a01b03199081163217909155600780549091163317905561ffff821611156101205760405162461bcd60e51b815260206004820152603060248201527f696e74657276616c20746f6f206c6f6e6720746f20616c776179732066696e6460448201526f040ecc2d8d2c840c4d8dec6d6d0c2e6d60831b606482015260840160405180910390fd5b604080518082019091524380825260ff90921660209091018190526008919091556009805460ff19169091179055611d948061015d6000396000f3fe6080604052600436106101195760003560e01c80639b44f8ee1161009b5780639b44f8ee146102a5578063c415f759146102c5578063c7608b22146102e5578063c8b69d77146102fa578063d5f394881461031a578063e0d4ea3714610340578063e1fcc94114610360578063eacdc5ff14610373578063eba1b60b14610388578063f0503e80146103b5578063f9aa6e0f146103e257610135565b80632faf3ea61461013d5780633beba2ee1461015d578063428a031914610172578063496a698d146101b65780634cdc9c63146101d857806354761214146101f7578063766718081461020c57806378bd79351461022e5780637ad920b31461024e5780638091f3bf1461026e578063947a36fb1461028d57610135565b366101355761012661040f565b1561013357610133610454565b005b61012661040f565b34801561014957600080fd5b50610133610158366004611a7c565b610490565b34801561016957600080fd5b5061013361049f565b34801561017e57600080fd5b506101a161018d366004611a1d565b6000908152600a6020526040902054151590565b60405190151581526020015b60405180910390f35b3480156101c257600080fd5b506101cb6104d4565b6040516101ad9190611bfe565b3480156101e457600080fd5b506008545b6040519081526020016101ad565b34801561020357600080fd5b506101336104f7565b34801561021857600080fd5b5061022161051f565b6040516101ad9190611c53565b34801561023a57600080fd5b506101cb610249366004611a1d565b610532565b34801561025a57600080fd5b50610221610269366004611a1d565b610577565b34801561027a57600080fd5b50600754600160a01b900460ff166101a1565b34801561029957600080fd5b5060095460ff166101e9565b3480156102b157600080fd5b506101e96102c0366004611a1d565b6105ad565b3480156102d157600080fd5b506101336102e0366004611973565b6105d4565b3480156102f157600080fd5b506101e9610639565b34801561030657600080fd5b50610221610315366004611a1d565b6106c0565b34801561032657600080fd5b506006546001600160a01b03166040516101ad9190611b5f565b34801561034c57600080fd5b506101e961035b366004611a1d565b6106ed565b61013361036e366004611aa7565b610748565b34801561037f57600080fd5b506101e9610759565b34801561039457600080fd5b506103a86103a3366004611a4d565b610780565b6040516101ad9190611c44565b3480156103c157600080fd5b506101e96103d0366004611a1d565b6000908152600a602052604090205490565b3480156103ee57600080fd5b506104026103fd366004611a1d565b6107e1565b6040516101ad9190611ba6565b6000610423600d546001600160a01b031690565b6001600160a01b0316336001600160a01b03161415801561044f5750600c546001600160a01b03163314155b905090565b60405162461bcd60e51b815260206004820152600a60248201526904155433a455448463a360b41b60448201526064015b60405180910390fd5b565b61049b823383610809565b5050565b60005460ff1680156104c157506000546001600160a01b036101009091041633145b6104ca57600080fd5b61048e33476108cb565b6104dc61183c565b60006104e6610759565b90506104f181610532565b91505090565b60005460ff1661050657600080fd5b60008054610100600160a81b0319163361010002179055565b61052761186d565b61044f610315610759565b61053a61183c565b8181526000828152600360205260409020546105609083906001600160a01b0316610780565b604082018190526060015115156020820152919050565b61057f61186d565b60408051808201909152600854815260095460ff1660208201526105a79061031590846108de565b92915050565b60408051808201909152600854815260095460ff1660208201526000906105a79083610907565b6105dd81610929565b6000806000838060200190518101906105f69190611907565b600b80546001600160a01b03199081166001600160a01b0395861617909155600d8054821692851692909217909155600c80549091169190921617905550505050565b60008060016106496102c0610759565b6106539190611cf0565b905080409150816106905760405162461bcd60e51b8152602060048201526007602482015266115410ce94d09360ca1b6044820152606401610485565b60408051602081018490529081018290526060016040516020818303038152906040528051906020012091505090565b6106c861186d565b60408051808201909152600854815260095460ff1660208201526105a7908343610a18565b6000818152600a60205260408120546107355760405162461bcd60e51b815260206004820152600a6024820152690534545443a4745543a360b41b6044820152606401610485565b506000908152600a602052604090205490565b61075433838584610a83565b505050565b60408051808201909152600854815260095460ff16602082015260009061044f90436108de565b6107886118ae565b60008381526004602090815260408083206001600160a01b03909516808452948252808320546060850152838101859052858352600582528083209483529381529290205460ff16151560808201529081019190915290565b60408051808201909152600854815260095460ff1660208201526000906105a7908343610ba6565b6001805460ff16600214156108305760405162461bcd60e51b815260040161048590611bb4565b805460ff1916600217815561084361183c565b848152600061085486868387610be4565b90506108608282610c86565b60008681526005602090815260408083206001600160a01b03808a16808652918452828520805460ff191660011790558a855260039093529220541614156108b0576108ab81610d42565b6108b9565b6108b981610db9565b5050805460ff19166001179055505050565b61049b6001600160a01b03831682610e27565b6020820151825160009160ff16906108f69084611cf0565b6109009190611cb1565b9392505050565b815160208301516000919061091f9060ff1684611cd1565b6109009190611c99565b6006546001600160a01b031633148061094c57506007546001600160a01b031633145b6109845760405162461bcd60e51b815260206004820152600960248201526804c41553a4c41553a360bc1b6044820152606401610485565b600754600160a01b900460ff16156109ca5760405162461bcd60e51b81526020600482015260096024820152684c41553a4c41553a3160b81b6044820152606401610485565b6007805460ff60a01b1916600160a01b1790556006546040516001600160a01b03909116907fb900795bb40f8a7bc484866009ca19ebf7b277001a839428e1b8e1a21d8e216c90600090a250565b610a2061186d565b6040518060800160405280848152602001610a3b8686610907565b8152602001610a4a8686610f3d565b8152602001610a5a868686610ba6565b6002811115610a7957634e487b7160e01b600052602160045260246000fd5b9052949350505050565b6001805460ff1660021415610aaa5760405162461bcd60e51b815260040161048590611bb4565b805460ff1916600217815583610aef5760405162461bcd60e51b815260206004820152600a60248201526904155433a4d5347303a360b41b6044820152606401610485565b610afa858584610f5e565b6000610b0884878786610be4565b90506000610b158261104a565b9050610b208161109c565b610b2981611185565b606082015160008681526004602090815260408083206001600160a01b03808d168086529184528285209590955589845260039092529091205490911614610b9357600085815260036020526040902080546001600160a01b0319166001600160a01b0389161790555b5050805460ff1916600117905550505050565b600082610bb385846108de565b1415610bc157506001610900565b81610bcc8585610f3d565b1015610bda57506000610900565b5060029392505050565b610bec6118ae565b60008581526004602090815260408083206001600160a01b0388168452909152902054610c198482611c99565b60608301526001600160a01b03851660408301526020820186905260a08201836003811115610c5857634e487b7160e01b600052602160045260246000fd5b90816003811115610c7957634e487b7160e01b600052602160045260246000fd5b8152505050949350505050565b610c8f82611238565b610cc65760405162461bcd60e51b815260206004820152600860248201526704155433a43433a360c41b6044820152606401610485565b608081015115610d035760405162461bcd60e51b81526020600482015260086024820152674155433a43433a3160c01b6044820152606401610485565b600081606001511161049b5760405162461bcd60e51b815260206004820152600860248201526720aaa19d21a19d1960c11b6044820152606401610485565b610d4b8161126d565b600b546040808301516020840151915163779fbab960e01b81526001600160a01b039093169263779fbab992610d849291600401611b8d565b600060405180830381600087803b158015610d9e57600080fd5b505af1158015610db2573d6000803e3d6000fd5b5050505050565b610dd0816040015182606001518360a001516112b5565b80604001516001600160a01b031681602001517f52eee732299f5bc11bd9fce7920cdeb1449eb75c699ef14e8b967ac48e3820da83606001518460a00151604051610e1c929190611c85565b60405180910390a350565b80471015610e775760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610485565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610ec4576040519150601f19603f3d011682016040523d82523d6000602084013e610ec9565b606091505b50509050806107545760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610485565b60006001610f5484610f4f8584611c99565b610907565b6109009190611cf0565b6000816003811115610f8057634e487b7160e01b600052602160045260246000fd5b1415610f905761075483836113a1565b6001816003811115610fb257634e487b7160e01b600052602160045260246000fd5b1415610fd457610754610fcd600d546001600160a01b031690565b84846113ee565b6002816003811115610ff657634e487b7160e01b600052602160045260246000fd5b141561101857610754611011600c546001600160a01b031690565b8484611575565b60405162461bcd60e51b815260206004820152600760248201526645583a54433a3160c81b6044820152606401610485565b61105261183c565b602080830180518352805160009081526004835260408082209251825260038452808220546001600160a01b03168252919092529081902054606080840151015281019190915290565b6110a581611641565b6110dc5760405162461bcd60e51b815260206004820152600860248201526704155433a42433a360c41b6044820152606401610485565b806040015160600151816060015160600151106111275760405162461bcd60e51b815260206004820152600960248201526804155433a5256413a360bc1b6044820152606401610485565b8060400151604001516001600160a01b03166462697463686001600160a01b031614156111825760405162461bcd60e51b815260206004820152600960248201526804155433a5755543a360bc1b6044820152606401610485565b50565b61118e8161164a565b80516000908152600a60205260409020546111b65780516111b6906111b1610639565b6116a2565b600c546060808301518101516040840151909101516001600160a01b0390921691633febada7916111e691611cf0565b306040518363ffffffff1660e01b81526004016112039190611b5f565b6000604051808303818588803b15801561121c57600080fd5b505af1158015611230573d6000803e3d6000fd5b505050505050565b6000805b8251611247906107e1565b600281111561126657634e487b7160e01b600052602160045260246000fd5b1492915050565b80604001516001600160a01b031681602001517f113c62160471f10f7d5abc32b3ab9a54d62c819d18796e533a2a1b320a74da708360600151604051610e1c91815260200190565b60008160038111156112d757634e487b7160e01b600052602160045260246000fd5b14156112e75761075483836108cb565b600181600381111561130957634e487b7160e01b600052602160045260246000fd5b141561132b57610754611324600d546001600160a01b031690565b84846116fd565b600281600381111561134d57634e487b7160e01b600052602160045260246000fd5b141561136f57610754611368600c546001600160a01b031690565b84846117d7565b60405162461bcd60e51b8152602060048201526007602482015266045583a47433a360cc1b6044820152606401610485565b80341480156113b85750336001600160a01b038316145b61049b5760405162461bcd60e51b8152602060048201526007602482015266045583a54453a360cc1b6044820152606401610485565b604051636eb1769f60e11b815281906001600160a01b0385169063dd62ed3e9061141e9086903090600401611b73565b60206040518083038186803b15801561143657600080fd5b505afa15801561144a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146e9190611a35565b101561148c5760405162461bcd60e51b815260040161048590611bdc565b6040516323b872dd60e01b81526001600160a01b038381166004830152306024830152604482018390528416906323b872dd90606401602060405180830381600087803b1580156114dc57600080fd5b505af11580156114f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115149190611953565b50604051632e1a7d4d60e01b8152600481018290526001600160a01b03841690632e1a7d4d906024015b600060405180830381600087803b15801561155857600080fd5b505af115801561156c573d6000803e3d6000fd5b50505050505050565b604051636eb1769f60e11b815281906001600160a01b0385169063dd62ed3e906115a59086903090600401611b73565b60206040518083038186803b1580156115bd57600080fd5b505afa1580156115d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f59190611a35565b10156116135760405162461bcd60e51b815260040161048590611bdc565b604051639470b0bd60e01b81526001600160a01b03841690639470b0bd9061153e9085908590600401611b8d565b6000600161123c565b8060400151604001516001600160a01b031681600001517ff2adf7b58bf6f84c47a0d36351eb2f4ea4368a86f22908824e22f4446ea92258836040015160600151846040015160a00151604051610e1c929190611c85565b6000828152600a6020526040902054156116eb5760405162461bcd60e51b815260206004820152600a6024820152690534545443a5345543a360b41b6044820152606401610485565b6000918252600a602052604090912055565b826001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561173857600080fd5b505af115801561174c573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038716935063a9059cbb925061177f915085908590600401611b8d565b602060405180830381600087803b15801561179957600080fd5b505af11580156117ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d19190611953565b50505050565b60405163b760faf960e01b81526001600160a01b0384169063b760faf9908390611805908690600401611b5f565b6000604051808303818588803b15801561181e57600080fd5b505af1158015611832573d6000803e3d6000fd5b5050505050505050565b604080516080810182526000808252602082015290810161185b6118ae565b81526020016118686118ae565b905290565b60405180608001604052806000815260200160008152602001600081526020016000600281111561186857634e487b7160e01b600052602160045260246000fd5b604080516101008101825260008082526020820181905291810182905260608101829052608081018290529060a0820190815260006020820181905260409091015290565b80356004811061190257600080fd5b919050565b60008060006060848603121561191b578283fd5b835161192681611d49565b602085015190935061193781611d49565b604085015190925061194881611d49565b809150509250925092565b600060208284031215611964578081fd5b81518015158114610900578182fd5b600060208284031215611984578081fd5b813567ffffffffffffffff8082111561199b578283fd5b818401915084601f8301126119ae578283fd5b8135818111156119c0576119c0611d33565b604051601f8201601f19908116603f011681019083821181831017156119e8576119e8611d33565b81604052828152876020848701011115611a00578586fd5b826020860160208301379182016020019490945295945050505050565b600060208284031215611a2e578081fd5b5035919050565b600060208284031215611a46578081fd5b5051919050565b60008060408385031215611a5f578182fd5b823591506020830135611a7181611d49565b809150509250929050565b60008060408385031215611a8e578182fd5b82359150611a9e602084016118f3565b90509250929050565b600080600060608486031215611abb578283fd5b8335925060208401359150611ad2604085016118f3565b90509250925092565b60048110611aeb57611aeb611d1d565b9052565b60038110611aeb57611aeb611d1d565b805182526020810151602083015260018060a01b0360408201511660408301526060810151606083015260808101511515608083015260a0810151611b4760a0840182611adb565b5060c0818101519083015260e0908101511515910152565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b602081016105a78284611aef565b6020808252600e908201526d04d555445583a4c4f434b45443a360941b604082015260600190565b60208082526008908201526704558433a54573a360c41b604082015260600190565b600061024082019050825182526020830151151560208301526040830151611c296040840182611aff565b506060830151611c3d610140840182611aff565b5092915050565b61010081016105a78284611aff565b60006080820190508251825260208301516020830152604083015160408301526060830151611c3d6060840182611aef565b828152604081016109006020830184611adb565b60008219821115611cac57611cac611d07565b500190565b600082611ccc57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611ceb57611ceb611d07565b500290565b600082821015611d0257611d02611d07565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461118257600080fdfea26469706673582212205e8d634c0da02bcb79aadd2cdcd4520ad03d215af228b00baaf2c427e2f4324164736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101195760003560e01c80639b44f8ee1161009b5780639b44f8ee146102a5578063c415f759146102c5578063c7608b22146102e5578063c8b69d77146102fa578063d5f394881461031a578063e0d4ea3714610340578063e1fcc94114610360578063eacdc5ff14610373578063eba1b60b14610388578063f0503e80146103b5578063f9aa6e0f146103e257610135565b80632faf3ea61461013d5780633beba2ee1461015d578063428a031914610172578063496a698d146101b65780634cdc9c63146101d857806354761214146101f7578063766718081461020c57806378bd79351461022e5780637ad920b31461024e5780638091f3bf1461026e578063947a36fb1461028d57610135565b366101355761012661040f565b1561013357610133610454565b005b61012661040f565b34801561014957600080fd5b50610133610158366004611a7c565b610490565b34801561016957600080fd5b5061013361049f565b34801561017e57600080fd5b506101a161018d366004611a1d565b6000908152600a6020526040902054151590565b60405190151581526020015b60405180910390f35b3480156101c257600080fd5b506101cb6104d4565b6040516101ad9190611bfe565b3480156101e457600080fd5b506008545b6040519081526020016101ad565b34801561020357600080fd5b506101336104f7565b34801561021857600080fd5b5061022161051f565b6040516101ad9190611c53565b34801561023a57600080fd5b506101cb610249366004611a1d565b610532565b34801561025a57600080fd5b50610221610269366004611a1d565b610577565b34801561027a57600080fd5b50600754600160a01b900460ff166101a1565b34801561029957600080fd5b5060095460ff166101e9565b3480156102b157600080fd5b506101e96102c0366004611a1d565b6105ad565b3480156102d157600080fd5b506101336102e0366004611973565b6105d4565b3480156102f157600080fd5b506101e9610639565b34801561030657600080fd5b50610221610315366004611a1d565b6106c0565b34801561032657600080fd5b506006546001600160a01b03166040516101ad9190611b5f565b34801561034c57600080fd5b506101e961035b366004611a1d565b6106ed565b61013361036e366004611aa7565b610748565b34801561037f57600080fd5b506101e9610759565b34801561039457600080fd5b506103a86103a3366004611a4d565b610780565b6040516101ad9190611c44565b3480156103c157600080fd5b506101e96103d0366004611a1d565b6000908152600a602052604090205490565b3480156103ee57600080fd5b506104026103fd366004611a1d565b6107e1565b6040516101ad9190611ba6565b6000610423600d546001600160a01b031690565b6001600160a01b0316336001600160a01b03161415801561044f5750600c546001600160a01b03163314155b905090565b60405162461bcd60e51b815260206004820152600a60248201526904155433a455448463a360b41b60448201526064015b60405180910390fd5b565b61049b823383610809565b5050565b60005460ff1680156104c157506000546001600160a01b036101009091041633145b6104ca57600080fd5b61048e33476108cb565b6104dc61183c565b60006104e6610759565b90506104f181610532565b91505090565b60005460ff1661050657600080fd5b60008054610100600160a81b0319163361010002179055565b61052761186d565b61044f610315610759565b61053a61183c565b8181526000828152600360205260409020546105609083906001600160a01b0316610780565b604082018190526060015115156020820152919050565b61057f61186d565b60408051808201909152600854815260095460ff1660208201526105a79061031590846108de565b92915050565b60408051808201909152600854815260095460ff1660208201526000906105a79083610907565b6105dd81610929565b6000806000838060200190518101906105f69190611907565b600b80546001600160a01b03199081166001600160a01b0395861617909155600d8054821692851692909217909155600c80549091169190921617905550505050565b60008060016106496102c0610759565b6106539190611cf0565b905080409150816106905760405162461bcd60e51b8152602060048201526007602482015266115410ce94d09360ca1b6044820152606401610485565b60408051602081018490529081018290526060016040516020818303038152906040528051906020012091505090565b6106c861186d565b60408051808201909152600854815260095460ff1660208201526105a7908343610a18565b6000818152600a60205260408120546107355760405162461bcd60e51b815260206004820152600a6024820152690534545443a4745543a360b41b6044820152606401610485565b506000908152600a602052604090205490565b61075433838584610a83565b505050565b60408051808201909152600854815260095460ff16602082015260009061044f90436108de565b6107886118ae565b60008381526004602090815260408083206001600160a01b03909516808452948252808320546060850152838101859052858352600582528083209483529381529290205460ff16151560808201529081019190915290565b60408051808201909152600854815260095460ff1660208201526000906105a7908343610ba6565b6001805460ff16600214156108305760405162461bcd60e51b815260040161048590611bb4565b805460ff1916600217815561084361183c565b848152600061085486868387610be4565b90506108608282610c86565b60008681526005602090815260408083206001600160a01b03808a16808652918452828520805460ff191660011790558a855260039093529220541614156108b0576108ab81610d42565b6108b9565b6108b981610db9565b5050805460ff19166001179055505050565b61049b6001600160a01b03831682610e27565b6020820151825160009160ff16906108f69084611cf0565b6109009190611cb1565b9392505050565b815160208301516000919061091f9060ff1684611cd1565b6109009190611c99565b6006546001600160a01b031633148061094c57506007546001600160a01b031633145b6109845760405162461bcd60e51b815260206004820152600960248201526804c41553a4c41553a360bc1b6044820152606401610485565b600754600160a01b900460ff16156109ca5760405162461bcd60e51b81526020600482015260096024820152684c41553a4c41553a3160b81b6044820152606401610485565b6007805460ff60a01b1916600160a01b1790556006546040516001600160a01b03909116907fb900795bb40f8a7bc484866009ca19ebf7b277001a839428e1b8e1a21d8e216c90600090a250565b610a2061186d565b6040518060800160405280848152602001610a3b8686610907565b8152602001610a4a8686610f3d565b8152602001610a5a868686610ba6565b6002811115610a7957634e487b7160e01b600052602160045260246000fd5b9052949350505050565b6001805460ff1660021415610aaa5760405162461bcd60e51b815260040161048590611bb4565b805460ff1916600217815583610aef5760405162461bcd60e51b815260206004820152600a60248201526904155433a4d5347303a360b41b6044820152606401610485565b610afa858584610f5e565b6000610b0884878786610be4565b90506000610b158261104a565b9050610b208161109c565b610b2981611185565b606082015160008681526004602090815260408083206001600160a01b03808d168086529184528285209590955589845260039092529091205490911614610b9357600085815260036020526040902080546001600160a01b0319166001600160a01b0389161790555b5050805460ff1916600117905550505050565b600082610bb385846108de565b1415610bc157506001610900565b81610bcc8585610f3d565b1015610bda57506000610900565b5060029392505050565b610bec6118ae565b60008581526004602090815260408083206001600160a01b0388168452909152902054610c198482611c99565b60608301526001600160a01b03851660408301526020820186905260a08201836003811115610c5857634e487b7160e01b600052602160045260246000fd5b90816003811115610c7957634e487b7160e01b600052602160045260246000fd5b8152505050949350505050565b610c8f82611238565b610cc65760405162461bcd60e51b815260206004820152600860248201526704155433a43433a360c41b6044820152606401610485565b608081015115610d035760405162461bcd60e51b81526020600482015260086024820152674155433a43433a3160c01b6044820152606401610485565b600081606001511161049b5760405162461bcd60e51b815260206004820152600860248201526720aaa19d21a19d1960c11b6044820152606401610485565b610d4b8161126d565b600b546040808301516020840151915163779fbab960e01b81526001600160a01b039093169263779fbab992610d849291600401611b8d565b600060405180830381600087803b158015610d9e57600080fd5b505af1158015610db2573d6000803e3d6000fd5b5050505050565b610dd0816040015182606001518360a001516112b5565b80604001516001600160a01b031681602001517f52eee732299f5bc11bd9fce7920cdeb1449eb75c699ef14e8b967ac48e3820da83606001518460a00151604051610e1c929190611c85565b60405180910390a350565b80471015610e775760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610485565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610ec4576040519150601f19603f3d011682016040523d82523d6000602084013e610ec9565b606091505b50509050806107545760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610485565b60006001610f5484610f4f8584611c99565b610907565b6109009190611cf0565b6000816003811115610f8057634e487b7160e01b600052602160045260246000fd5b1415610f905761075483836113a1565b6001816003811115610fb257634e487b7160e01b600052602160045260246000fd5b1415610fd457610754610fcd600d546001600160a01b031690565b84846113ee565b6002816003811115610ff657634e487b7160e01b600052602160045260246000fd5b141561101857610754611011600c546001600160a01b031690565b8484611575565b60405162461bcd60e51b815260206004820152600760248201526645583a54433a3160c81b6044820152606401610485565b61105261183c565b602080830180518352805160009081526004835260408082209251825260038452808220546001600160a01b03168252919092529081902054606080840151015281019190915290565b6110a581611641565b6110dc5760405162461bcd60e51b815260206004820152600860248201526704155433a42433a360c41b6044820152606401610485565b806040015160600151816060015160600151106111275760405162461bcd60e51b815260206004820152600960248201526804155433a5256413a360bc1b6044820152606401610485565b8060400151604001516001600160a01b03166462697463686001600160a01b031614156111825760405162461bcd60e51b815260206004820152600960248201526804155433a5755543a360bc1b6044820152606401610485565b50565b61118e8161164a565b80516000908152600a60205260409020546111b65780516111b6906111b1610639565b6116a2565b600c546060808301518101516040840151909101516001600160a01b0390921691633febada7916111e691611cf0565b306040518363ffffffff1660e01b81526004016112039190611b5f565b6000604051808303818588803b15801561121c57600080fd5b505af1158015611230573d6000803e3d6000fd5b505050505050565b6000805b8251611247906107e1565b600281111561126657634e487b7160e01b600052602160045260246000fd5b1492915050565b80604001516001600160a01b031681602001517f113c62160471f10f7d5abc32b3ab9a54d62c819d18796e533a2a1b320a74da708360600151604051610e1c91815260200190565b60008160038111156112d757634e487b7160e01b600052602160045260246000fd5b14156112e75761075483836108cb565b600181600381111561130957634e487b7160e01b600052602160045260246000fd5b141561132b57610754611324600d546001600160a01b031690565b84846116fd565b600281600381111561134d57634e487b7160e01b600052602160045260246000fd5b141561136f57610754611368600c546001600160a01b031690565b84846117d7565b60405162461bcd60e51b8152602060048201526007602482015266045583a47433a360cc1b6044820152606401610485565b80341480156113b85750336001600160a01b038316145b61049b5760405162461bcd60e51b8152602060048201526007602482015266045583a54453a360cc1b6044820152606401610485565b604051636eb1769f60e11b815281906001600160a01b0385169063dd62ed3e9061141e9086903090600401611b73565b60206040518083038186803b15801561143657600080fd5b505afa15801561144a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146e9190611a35565b101561148c5760405162461bcd60e51b815260040161048590611bdc565b6040516323b872dd60e01b81526001600160a01b038381166004830152306024830152604482018390528416906323b872dd90606401602060405180830381600087803b1580156114dc57600080fd5b505af11580156114f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115149190611953565b50604051632e1a7d4d60e01b8152600481018290526001600160a01b03841690632e1a7d4d906024015b600060405180830381600087803b15801561155857600080fd5b505af115801561156c573d6000803e3d6000fd5b50505050505050565b604051636eb1769f60e11b815281906001600160a01b0385169063dd62ed3e906115a59086903090600401611b73565b60206040518083038186803b1580156115bd57600080fd5b505afa1580156115d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f59190611a35565b10156116135760405162461bcd60e51b815260040161048590611bdc565b604051639470b0bd60e01b81526001600160a01b03841690639470b0bd9061153e9085908590600401611b8d565b6000600161123c565b8060400151604001516001600160a01b031681600001517ff2adf7b58bf6f84c47a0d36351eb2f4ea4368a86f22908824e22f4446ea92258836040015160600151846040015160a00151604051610e1c929190611c85565b6000828152600a6020526040902054156116eb5760405162461bcd60e51b815260206004820152600a6024820152690534545443a5345543a360b41b6044820152606401610485565b6000918252600a602052604090912055565b826001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561173857600080fd5b505af115801561174c573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038716935063a9059cbb925061177f915085908590600401611b8d565b602060405180830381600087803b15801561179957600080fd5b505af11580156117ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d19190611953565b50505050565b60405163b760faf960e01b81526001600160a01b0384169063b760faf9908390611805908690600401611b5f565b6000604051808303818588803b15801561181e57600080fd5b505af1158015611832573d6000803e3d6000fd5b5050505050505050565b604080516080810182526000808252602082015290810161185b6118ae565b81526020016118686118ae565b905290565b60405180608001604052806000815260200160008152602001600081526020016000600281111561186857634e487b7160e01b600052602160045260246000fd5b604080516101008101825260008082526020820181905291810182905260608101829052608081018290529060a0820190815260006020820181905260409091015290565b80356004811061190257600080fd5b919050565b60008060006060848603121561191b578283fd5b835161192681611d49565b602085015190935061193781611d49565b604085015190925061194881611d49565b809150509250925092565b600060208284031215611964578081fd5b81518015158114610900578182fd5b600060208284031215611984578081fd5b813567ffffffffffffffff8082111561199b578283fd5b818401915084601f8301126119ae578283fd5b8135818111156119c0576119c0611d33565b604051601f8201601f19908116603f011681019083821181831017156119e8576119e8611d33565b81604052828152876020848701011115611a00578586fd5b826020860160208301379182016020019490945295945050505050565b600060208284031215611a2e578081fd5b5035919050565b600060208284031215611a46578081fd5b5051919050565b60008060408385031215611a5f578182fd5b823591506020830135611a7181611d49565b809150509250929050565b60008060408385031215611a8e578182fd5b82359150611a9e602084016118f3565b90509250929050565b600080600060608486031215611abb578283fd5b8335925060208401359150611ad2604085016118f3565b90509250925092565b60048110611aeb57611aeb611d1d565b9052565b60038110611aeb57611aeb611d1d565b805182526020810151602083015260018060a01b0360408201511660408301526060810151606083015260808101511515608083015260a0810151611b4760a0840182611adb565b5060c0818101519083015260e0908101511515910152565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b602081016105a78284611aef565b6020808252600e908201526d04d555445583a4c4f434b45443a360941b604082015260600190565b60208082526008908201526704558433a54573a360c41b604082015260600190565b600061024082019050825182526020830151151560208301526040830151611c296040840182611aff565b506060830151611c3d610140840182611aff565b5092915050565b61010081016105a78284611aff565b60006080820190508251825260208301516020830152604083015160408301526060830151611c3d6060840182611aef565b828152604081016109006020830184611adb565b60008219821115611cac57611cac611d07565b500190565b600082611ccc57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611ceb57611ceb611d07565b500290565b600082821015611d0257611d02611d07565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461118257600080fdfea26469706673582212205e8d634c0da02bcb79aadd2cdcd4520ad03d215af228b00baaf2c427e2f4324164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "blocknumFromId(uint256)": {
        "details": "public wrapper for internal blocknumFirstFromEpoch() - to save on gas"
      },
      "claim(uint256,uint8)": {
        "details": "#TODO"
      },
      "currentEpoch()": {
        "details": "public wrapper for internal blocknumFirstFromEpoch() - to save on gas"
      },
      "currentEpochId()": {
        "details": "public wrapper for internal _currentEpoch() - to save on gas"
      },
      "deployer()": {
        "details": "#TODO"
      },
      "epochFromBlocknum(uint256)": {
        "details": "public wrapper for internal blocknumFirstFromEpoch() - to save on gas"
      },
      "epochStatus(uint256)": {
        "details": "public wrapper for internal blocknumFirstFromEpoch() - to save on gas"
      },
      "genesisBlock()": {
        "details": "public wrapper for internal _genesisBlock - to save on gas"
      },
      "getSeed(uint256)": {
        "details": "@return"
      },
      "interval()": {
        "details": "public wrapper for internal _interval - to save on gas"
      },
      "launch(bytes)": {
        "details": "#TODO"
      },
      "launched()": {
        "details": "#TODO"
      },
      "placeBid(uint256,uint256,uint8)": {
        "details": "#TODO"
      },
      "seeds(uint256)": {
        "details": "external wrapper for internal _seeds"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateCurrentSeed()": {
        "notice": "gets unique base based on given epoch and converts encoded bytes to object that can be merged Note: by using the block hash no one knows what a nugg will look like before it's epoch. We considered making this harder to manipulate, but we decided that if someone were able to pull it off and make their own custom nugg, that would be really fucking cool."
      },
      "launch(bytes)": {
        "notice": "inializes contract outside of constructor"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5341,
        "contract": "contracts/auction/NuggMinter.sol:NuggMinter",
        "label": "inTesting",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5356,
        "contract": "contracts/auction/NuggMinter.sol:NuggMinter",
        "label": "pw",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4767,
        "contract": "contracts/auction/NuggMinter.sol:NuggMinter",
        "label": "global",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Mutex)4758_storage"
      },
      {
        "astId": 3345,
        "contract": "contracts/auction/NuggMinter.sol:NuggMinter",
        "label": "local",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Mutex)4758_storage"
      },
      {
        "astId": 3349,
        "contract": "contracts/auction/NuggMinter.sol:NuggMinter",
        "label": "_topAddr",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3355,
        "contract": "contracts/auction/NuggMinter.sol:NuggMinter",
        "label": "_bidsAmt",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3361,
        "contract": "contracts/auction/NuggMinter.sol:NuggMinter",
        "label": "_bidsBool",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4664,
        "contract": "contracts/auction/NuggMinter.sol:NuggMinter",
        "label": "_deployer",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4666,
        "contract": "contracts/auction/NuggMinter.sol:NuggMinter",
        "label": "_deployerContract",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4669,
        "contract": "contracts/auction/NuggMinter.sol:NuggMinter",
        "label": "_launched",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 4119,
        "contract": "contracts/auction/NuggMinter.sol:NuggMinter",
        "label": "_state",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(State)14251_storage"
      },
      {
        "astId": 4848,
        "contract": "contracts/auction/NuggMinter.sol:NuggMinter",
        "label": "_seeds",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 2538,
        "contract": "contracts/auction/NuggMinter.sol:NuggMinter",
        "label": "_NUGGFT",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IAuctionableImplementer)4101"
      },
      {
        "astId": 2541,
        "contract": "contracts/auction/NuggMinter.sol:NuggMinter",
        "label": "_NUGGETH",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(INuggETH)17387"
      },
      {
        "astId": 2544,
        "contract": "contracts/auction/NuggMinter.sol:NuggMinter",
        "label": "_WETH",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IWETH9)14068"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAuctionableImplementer)4101": {
        "encoding": "inplace",
        "label": "contract IAuctionableImplementer",
        "numberOfBytes": "20"
      },
      "t_contract(INuggETH)17387": {
        "encoding": "inplace",
        "label": "contract INuggETH",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH9)14068": {
        "encoding": "inplace",
        "label": "contract IWETH9",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_struct(Mutex)4758_storage": {
        "encoding": "inplace",
        "label": "struct Mutexable.Mutex",
        "members": [
          {
            "astId": 4757,
            "contract": "contracts/auction/NuggMinter.sol:NuggMinter",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(State)14251_storage": {
        "encoding": "inplace",
        "label": "struct EpochMath.State",
        "members": [
          {
            "astId": 14248,
            "contract": "contracts/auction/NuggMinter.sol:NuggMinter",
            "label": "genesisBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14250,
            "contract": "contracts/auction/NuggMinter.sol:NuggMinter",
            "label": "interval",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}