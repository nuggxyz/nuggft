// SPDX-License-Identifier: MIT

pragma solidity 0.8.4;

import '@openzeppelin/contracts/token/ERC721/ERC721.sol';
import '../src/interfaces/INuggSwap.sol';

// import '../src/interfaces/IERC721Nuggable.sol';

/**
 * @title Nugg Labs NFT Collection 0 - "NuggFT"
 * @author Nugg Labs - @danny7even & @dub6ix - 2021
 * @notice entrily onchain generative NFT
 * @dev this is art
 *
 * Note: epochs correlate directly to tokenIDs
 * Note: no images are stored in their final form - they are generated by view/pure functions at query time completly onchain
 * Note: the block hash corresponding to the start of an epoch is used as the "random" seed
 * Note: epochs are 256 blocks long as block hashes only exist for 256 blocks
 */
contract MockERC721Mintable is ERC721 {
    address public immutable nuggswap;

    // address public owner;

    constructor(address _nuggswap) ERC721('Mock ERC721 Mintable', 'MockERC721Mintable') {
        nuggswap = _nuggswap;
    }

    // function ownerOf(uint256 tokenId) public view virtual override returns (address res) {
    //     bool tmp = _exists(tokenId);
    //     if (tmp) return super. else {

    //     }
    //     if (res == address(0)) {
    //         if (msg.sender == nuggswap) return nuggswap;
    //         require(false, 'ERC721: owner query for nonexistent token');
    //     }
    // }

    function _isApprovedOrOwner(address sender, uint256 tokenId) internal view override returns (bool) {
        // require(_exists(tokenId), 'ERC721: operator query for nonexistent token');
        return sender == nuggswap;
    }

    function _beforeTokenTransfer(
        address,
        address,
        uint256
    ) internal view override {
        require(msg.sender == nuggswap, 'NFT:BTT:0');
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public override {
        if (!_exists(tokenId) && msg.sender == nuggswap) _safeMint(to, tokenId);
        else super.safeTransferFrom(from, to, tokenId, _data);
    }

    /**
     * @inheritdoc ERC721
     */
    function tokenURI(uint256 tokenId) public view override returns (string memory res) {}
}
