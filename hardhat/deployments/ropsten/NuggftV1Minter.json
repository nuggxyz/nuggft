{
  "address": "0x2716a39754B7B9cFc0bDe9df373037e2d5e839D5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "byebye",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nuggftv1",
          "type": "address"
        },
        {
          "internalType": "uint160",
          "name": "amount",
          "type": "uint160"
        }
      ],
      "name": "claimHelper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nuggftv1",
          "type": "address"
        },
        {
          "internalType": "uint160",
          "name": "amount",
          "type": "uint160"
        }
      ],
      "name": "claimSelf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nuggftv1",
          "type": "address"
        },
        {
          "internalType": "uint160",
          "name": "start",
          "type": "uint160"
        },
        {
          "internalType": "uint160",
          "name": "amount",
          "type": "uint160"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nuggftv1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "trustMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x78995ff5a66a7704ef5e5e8a5918b5a280d9631fa8871871072fe147c00ead16",
  "receipt": {
    "to": null,
    "from": "0x9B0E2b16F57648C7bAF28EDD7772a815Af266E77",
    "contractAddress": "0x2716a39754B7B9cFc0bDe9df373037e2d5e839D5",
    "transactionIndex": 2,
    "gasUsed": "989481",
    "logsBloom": "0x
    "blockHash": "0x55be2dace72f640309f2021c1b270605ff89ac79cf47d9c19c424cafd04e46cc",
    "transactionHash": "0x78995ff5a66a7704ef5e5e8a5918b5a280d9631fa8871871072fe147c00ead16",
    "logs": [],
    "blockNumber": 11778235,
    "cumulativeGasUsed": "1031481",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a7abc84c8da5c104f5fda3ab8fb7b8ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"byebye\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nuggftv1\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"}],\"name\":\"claimHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nuggftv1\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"}],\"name\":\"claimSelf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nuggftv1\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"start\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nuggftv1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"trustMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/_test/dev/Minter.sol\":\"NuggftV1Minter\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"src/_test/dev/Minter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '../../interfaces/nuggftv1/INuggftV1.sol';\\n\\ncontract NuggftV1MinterHelper {\\n    function delegateem(address nuggftv1, uint160 id) external payable {\\n        INuggftV1(nuggftv1).delegate{value: msg.value}(id);\\n\\n        // payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function claimem(address nuggftv1, uint160 id) external {\\n        INuggftV1(nuggftv1).claim(id);\\n\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n}\\n\\ncontract NuggftV1Minter {\\n    address immutable minterHelper;\\n    address immutable deployer;\\n\\n    uint160[] toClaimFromHelper;\\n    uint160[] toClaim;\\n\\n    uint256 claimedIndex;\\n    uint256 claimedFromHelperIndex;\\n\\n    constructor() {\\n        minterHelper = address(new NuggftV1MinterHelper());\\n        deployer = msg.sender;\\n    }\\n\\n    function trustMint(\\n        address nuggftv1,\\n        address to,\\n        uint256 start,\\n        uint256 amount\\n    ) external payable {\\n        for (uint256 i = start; i < start + amount; i++) {\\n            INuggftV1(nuggftv1).trustedMint{value: INuggftV1(nuggftv1).minSharePrice()}(uint160(i), to);\\n        }\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function mint(\\n        address nuggftv1,\\n        uint160 start,\\n        uint160 amount\\n    ) external payable {\\n        for (uint160 i = start; i < start + amount; i++) {\\n            INuggftV1(nuggftv1).mint{value: INuggftV1(nuggftv1).minSharePrice()}(uint160(i));\\n            uint96 floor = INuggftV1(nuggftv1).ethPerShare() * 3;\\n            INuggftV1(nuggftv1).approve(nuggftv1, uint160(i));\\n\\n            INuggftV1(nuggftv1).swap(uint160(i), floor);\\n\\n            (, uint96 amt, ) = INuggftV1(nuggftv1).valueForDelegate(minterHelper, uint160(i));\\n\\n            if (i % 2 == 0) {\\n                NuggftV1MinterHelper(minterHelper).delegateem{value: amt}(nuggftv1, i);\\n                toClaimFromHelper.push(i);\\n            } else {\\n                toClaim.push(i);\\n            }\\n        }\\n\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function claimHelper(address nuggftv1, uint160 amount) external {\\n        uint256 i = claimedIndex;\\n        uint256 start = i;\\n        for (; i < start + amount; i++) {\\n            NuggftV1MinterHelper(minterHelper).claimem(nuggftv1, toClaim[claimedIndex]);\\n        }\\n        claimedIndex = i;\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function claimSelf(address nuggftv1, uint160 amount) external {\\n        uint256 i = claimedIndex;\\n        uint256 start = i;\\n        for (; i < start + amount; i++) {\\n            INuggftV1(nuggftv1).claim(toClaim[claimedIndex]);\\n        }\\n        claimedIndex = i;\\n\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function byebye() external {\\n        require(msg.sender == deployer);\\n        selfdestruct(payable(msg.sender));\\n    }\\n}\\n\",\"keccak256\":\"0x9b7eeea42e793d3be9e9131e09711d26ddbd28291fcaef50edc0db83d25f9a35\",\"license\":\"MIT\"},\"src/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\\n/// @title ERC-721 Non-Fungible Token Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 is IERC165 {\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\n    ///  may be created and assigned without emitting Transfer. At the time of\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when the approved address for an NFT is changed or\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\n    ///  When a Transfer event emits, this also indicates that the approved\\n    ///  address for that NFT (if any) is reset to none.\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\n    ///  The operator can manage all NFTs of the owner.\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n    /// @notice Count all NFTs assigned to an owner\\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\\n    ///  function throws for queries about the zero address.\\n    /// @param _owner An address for whom to query the balance\\n    /// @return The number of NFTs owned by `_owner`, possibly zero\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Find the owner of an NFT\\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\\n    ///  about them do throw.\\n    /// @param _tokenId The identifier for an NFT\\n    /// @return The address of the owner of the NFT\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n    ///  `onERC721Received` on `_to` and throws if the return value is not\\n    ///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes memory data\\n    ) external payable;\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev This works identically to the other function with an extra data parameter,\\n    ///  except this function just sets data to \\\"\\\".\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external payable;\\n\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n    ///  THEY MAY BE PERMANENTLY LOST\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external payable;\\n\\n    /// @notice Change or reaffirm the approved address for an NFT\\n    /// @dev The zero address indicates there is no approved address.\\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\n    ///  operator of the current owner.\\n    /// @param _approved The new approved NFT controller\\n    /// @param _tokenId The NFT to approve\\n    function approve(address _approved, uint256 _tokenId) external payable;\\n\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\n    ///  all of `msg.sender`'s assets\\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\\n    ///  multiple operators per owner.\\n    /// @param _operator Address to add to the set of authorized operators\\n    /// @param _approved True if the operator is approved, false to revoke approval\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /// @notice Get the approved address for a single NFT\\n    /// @dev Throws if `_tokenId` is not a valid NFT.\\n    /// @param _tokenId The NFT to find the approved address for\\n    /// @return The approved address for this NFT, or the zero address if there is none\\n    function getApproved(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Query if an address is an authorized operator for another address\\n    /// @param _owner The address that owns the NFTs\\n    /// @param _operator The address that acts on behalf of the owner\\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata is IERC721 {\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\n    function name() external view returns (string memory _name);\\n\\n    /// @notice An abbreviated name for NFTs in this contract\\n    function symbol() external view returns (string memory _symbol);\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe2d5f8f2ad6b005a82fe8370c7685b7c20d5d23788d7efd83e6ec347dbe48d87\",\"license\":\"MIT\"},\"src/interfaces/dotnuggv1/IDotnuggV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata as Metadata} from './IDotnuggV1Metadata.sol';\\nimport {IDotnuggV1File as File} from './IDotnuggV1File.sol';\\nimport {IDotnuggV1StorageProxy} from './IDotnuggV1StorageProxy.sol';\\n\\ninterface IDotnuggV1 {\\n    function register() external returns (IDotnuggV1StorageProxy proxy);\\n\\n    function proxyOf(address implementer) external view returns (IDotnuggV1StorageProxy proxy);\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                core processors\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function raw(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        bytes calldata data\\n    ) external view returns (File.Raw memory res);\\n\\n    function proc(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        bytes calldata data\\n    ) external view returns (File.Processed memory res);\\n\\n    function comp(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        bytes calldata data\\n    ) external view returns (File.Compressed memory res);\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            complex resolved processors\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n    function dat(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        string memory name,\\n        string memory desc,\\n        bool base64,\\n        bytes calldata data\\n    ) external view returns (string memory res);\\n\\n    function img(\\n        address implementer,\\n        uint256 id,\\n        address resolver,\\n        bool rekt,\\n        bool background,\\n        bool base64,\\n        bool stats,\\n        bytes calldata data\\n    ) external view returns (string memory res);\\n}\\n\",\"keccak256\":\"0x97af143d39a686434d0758dab3b417a2ec86eeac5f6f8973cfd637e619ce37fd\",\"license\":\"MIT\"},\"src/interfaces/dotnuggv1/IDotnuggV1File.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata as Metadata} from './IDotnuggV1Metadata.sol';\\n\\ninterface IDotnuggV1File {\\n    struct Raw {\\n        uint256[][] file;\\n        Metadata.Memory metadata;\\n    }\\n\\n    struct Processed {\\n        uint256[] file;\\n        Metadata.Memory metadata;\\n    }\\n\\n    struct Compressed {\\n        uint256[] file;\\n        Metadata.Memory metadata;\\n    }\\n}\\n\",\"keccak256\":\"0x0dddef068fc65fc4f0d6849f65d4669e960725087d361caa023e947cdce21537\",\"license\":\"MIT\"},\"src/interfaces/dotnuggv1/IDotnuggV1Implementer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata} from './IDotnuggV1Metadata.sol';\\nimport {IDotnuggV1StorageProxy} from './IDotnuggV1StorageProxy.sol';\\n\\ninterface IDotnuggV1Implementer {\\n    event DotnuggV1ConfigUpdated(uint256 indexed artifactId);\\n\\n    function dotnuggV1ImplementerCallback(uint256 artifactId) external view returns (IDotnuggV1Metadata.Memory memory data);\\n\\n    function dotnuggV1StoreCallback(\\n        address caller,\\n        uint8 feature,\\n        uint8 amount,\\n        address storagePointer\\n    ) external returns (bool ok);\\n\\n    function dotnuggV1StorageProxy() external returns (IDotnuggV1StorageProxy res);\\n}\\n\",\"keccak256\":\"0x1865523e448b3d3c75fd772d2b54760154a34e1e690572dc6d0963d8ce686e63\",\"license\":\"MIT\"},\"src/interfaces/dotnuggv1/IDotnuggV1Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IDotnuggV1Metadata {\\n    struct Memory {\\n        uint8[] ids;\\n        uint8[] xovers;\\n        uint8[] yovers;\\n        uint256 version;\\n        address implementer;\\n        uint256 artifactId;\\n        string[] labels;\\n        string[] styles;\\n        string background;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0x87228718e37d0c24c240eb5d3a09192a708cbfd7293b5b4f1a03bc9ede33e712\",\"license\":\"MIT\"},\"src/interfaces/dotnuggv1/IDotnuggV1StorageProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IDotnuggV1StorageProxy {\\n    function stored(uint8 feature) external view returns (uint8);\\n\\n    function store(uint8 feature, uint256[][] calldata data) external returns (uint8 amount);\\n\\n    function unsafeBulkStore(uint256[][][] calldata data) external;\\n\\n    function init(address _implementer) external;\\n\\n    function getBatch(uint8[] memory ids) external view returns (uint256[][] memory data);\\n\\n    function get(uint8 feature, uint8 pos) external view returns (uint256[] memory data);\\n}\\n\",\"keccak256\":\"0xe7cdc2f164e14c96a1ccd18fea1d90e086065d55e8a7889dbc8272918497ac40\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggftV1Token} from './INuggftV1Token.sol';\\nimport {INuggftV1Stake} from './INuggftV1Stake.sol';\\nimport {INuggftV1Proof} from './INuggftV1Proof.sol';\\nimport {INuggftV1Dotnugg} from './INuggftV1Dotnugg.sol';\\nimport {INuggftV1Swap} from './INuggftV1Swap.sol';\\nimport {INuggftV1Loan} from './INuggftV1Loan.sol';\\nimport {INuggftV1Epoch} from './INuggftV1Epoch.sol';\\n\\nimport {IERC721Metadata} from '../IERC721.sol';\\n\\ninterface INuggftV1 is\\n    IERC721Metadata,\\n    INuggftV1Token,\\n    INuggftV1Stake,\\n    INuggftV1Proof,\\n    INuggftV1Dotnugg,\\n    INuggftV1Swap,\\n    INuggftV1Loan,\\n    INuggftV1Epoch\\n{}\\n\",\"keccak256\":\"0xc9fcd03f3fc8de3ac97bca0d64c7cbdcddb48d464789a0ba1cf7b72b4634c2a4\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Dotnugg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Implementer} from '../dotnuggv1/IDotnuggV1Implementer.sol';\\nimport {IDotnuggV1} from '../dotnuggv1/IDotnuggV1.sol';\\n\\ninterface INuggftV1Dotnugg is IDotnuggV1Implementer {\\n    function setDotnuggV1Resolver(uint256 tokenId, address to) external;\\n\\n    function dotnuggV1ResolverOf(uint256 tokenId) external view returns (address resolver);\\n\\n    function dotnuggV1() external returns (IDotnuggV1);\\n\\n    function dotnuggV1StoreFiles(uint256[][] calldata data, uint8 feature) external;\\n\\n    function setDotnuggV1AnchorOverrides(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        uint256 x,\\n        uint256 y\\n    ) external;\\n\\n    function setDotnuggV1Background(uint160 tokenId, string memory s) external;\\n\\n    function setDotnuggV1Style(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        string memory s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3a59d138be94dca5f3d10b407d3b810303b6b7a1fa9df93eb807798d0e8fd681\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Epoch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Epoch {\\n    /// @notice Explain to an end user what this does\\n    /// @dev Explain to a developer any extra details\\n    event Genesis(uint256 blocknum, uint32 interval, uint24 offset);\\n\\n    function epoch() external view returns (uint24 res);\\n}\\n\",\"keccak256\":\"0xb2f2ea0581b58ceb3b8c703233027f0a6c88eff27635b153295c1c2097c5defc\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Loan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Loan {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event Loan(uint160 indexed tokenId, uint96 value);\\n\\n    event Rebalance(uint160 indexed tokenId, uint96 value);\\n\\n    event Liquidate(uint160 indexed tokenId, uint96 value, address user);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function rebalance(uint160 tokenId) external payable;\\n\\n    function loan(uint160 tokenId) external;\\n\\n    function liquidate(uint160 tokenId) external payable;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @notice for a nugg's active loan: calculates the current min eth a user must send to liquidate or rebalance\\n    /// @dev contract ->\\n    /// @dev frontend -> used to set the amount of eth for user\\n    /// @param tokenId the token who's current loan to check\\n    /// @return toLiquidate ->  the current amount loaned out, plus the final rebalance fee\\n    /// @return toRebalance ->  the fee a user must pay to rebalance (and extend) the loan on their nugg\\n    /// @return earned -> the amount of eth the minSharePrice has increased since loan was last rebalanced\\n    /// @return epochDue -> the final epoch a user is safe from liquidation (inclusive)\\n    /// @return loaner -> the user responsable for the loan\\n    function loanInfo(uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 toLiquidate,\\n            uint96 toRebalance,\\n            uint96 earned,\\n            uint24 epochDue,\\n            address loaner\\n        );\\n\\n    /// @notice \\\"toLiquidate\\\" value from \\\"loanInfo\\\"\\n    /// @dev should be used to tell user how much eth to send for liquidate\\n    function valueForLiquidate(uint160 tokenId) external view returns (uint96 res);\\n\\n    /// @notice \\\"toRebalance\\\" value from \\\"loanInfo\\\"\\n    /// @dev should be used to tell user how much eth to send for rebalance\\n    function valueForRebalance(uint160 tokenId) external view returns (uint96 res);\\n}\\n\",\"keccak256\":\"0x95d78159337e2b9e2baca91aa65e979dbd65f59bbb41e441d6f650a7ab3c80b3\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Proof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Proof {\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                             STATE CHANGING\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function rotate(\\n        uint160 tokenId,\\n        uint8 index0,\\n        uint8 index1\\n    ) external;\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                               VIEW FUNCTIONS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function proofOf(uint160 tokenId) external view returns (uint256);\\n\\n    function proofToDotnuggMetadata(uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            uint256 proof,\\n            uint8[] memory defaultIds,\\n            uint8[] memory overxs,\\n            uint8[] memory overys,\\n            string[] memory styles,\\n            string memory background\\n        );\\n}\\n\",\"keccak256\":\"0x24c5185492b6889e0c7425226b457460ab089f79f730c8a6f8996b0bb63b4611\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Stake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Stake {\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    event ProtocolEthExtracted(uint96 eth);\\n    event MigratorV1Updated(address migrator);\\n    event MigrateV1Sent(address v2, uint160 tokenId, uint256 proof, address owner, uint96 eth);\\n    event Burn(uint160 tokenId, address owner, uint96 ethOwed);\\n    event Stake(uint256 stake);\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function migrate(uint160 tokenId) external;\\n\\n    /// @notice burns a nugg from existance, dealing the eth worth of that share to the user\\n    /// @dev should only be called directly\\n    /// @param tokenId the id of the nugg being burned\\n    function burn(uint160 tokenId) external;\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @notice returns the minimum eth that must be added to create a new share\\n    /// @dev premium here is used to push against dillution of supply through ensuring the price always increases\\n    /// @dev used by the front end\\n    /// @return res -> premium + protcolFee + ethPerShare\\n    function minSharePrice() external view returns (uint96 res);\\n\\n    /// @notice returns the amount of eth extractable by protocol\\n    /// @dev this will be\\n    /// @return res -> (PROTOCOL_FEE_BPS * [all eth staked] / 10000) - [all previously extracted eth]\\n    function protocolEth() external view returns (uint96);\\n\\n    /// @notice returns the total number of staked shares held by the contract\\n    /// @dev this is equivilent to the amount of nuggs in existance\\n    function stakedShares() external view returns (uint64);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice returns the total amount of staked eth held by the contract\\n    /// @dev can be used as the market-cap or tvl of all nuggft v1\\n    /// @dev not equivilent to the balance of eth the contract holds, which also hs protocolEth and\\n    /// unclaimed eth from unsuccessful swaps\\n    function stakedEth() external view returns (uint96);\\n\\n    /// @notice returns the total \\\"ethPerShare\\\" held by the contract\\n    /// @dev this value not always equivilent to the \\\"floor\\\" price which can consist of perceived value.\\n    /// can be looked at as an \\\"intrinsic floor\\\"\\n    /// @dev this is the value that users will receive when their either burn or loan out nuggs\\n    /// @return res -> [current staked eth] / [current staked shares]\\n    function ethPerShare() external view returns (uint96);\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TRUSTED\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @notice sends the current protocolEth to the user and resets the value to zero\\n    /// @dev caller must be a trusted user\\n    function extractProtocolEth() external;\\n\\n    /// @notice sets the migrator contract\\n    /// @dev caller must be a trusted user\\n    /// @param migrator the address to set as the migrator contract\\n    function setMigrator(address migrator) external;\\n}\\n\",\"keccak256\":\"0xfb2b6e366fe68573409586140b55b64323afdab0d4d14e0652ccfa8e368b2731\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Swap {\\n    event Delegate(uint160 indexed tokenId, address user, uint96 lead);\\n    event DelegateItem(uint176 indexed sellingItemId, uint160 nugg, uint96 lead);\\n    event Claim(uint160 indexed tokenId, address user);\\n    event ClaimItem(uint176 indexed sellingItemId, uint160 nugg);\\n    event Swap(uint160 indexed tokenId, uint96 floor);\\n    event SwapItem(uint176 indexed sellingItemId, uint96 floor);\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function delegate(uint160 tokenId) external payable;\\n\\n    function delegateItem(\\n        uint160 buyerTokenId,\\n        uint160 sellerTokenId,\\n        uint16 itemId\\n    ) external payable;\\n\\n    function claim(uint160 tokenId) external;\\n\\n    function claimItem(\\n        uint160 buyerTokenId,\\n        uint160 sellerTokenId,\\n        uint16 itemid\\n    ) external;\\n\\n    function swap(uint160 tokenId, uint96 floor) external;\\n\\n    function swapItem(\\n        uint160 sellerTokenId,\\n        uint16 itemid,\\n        uint96 floor\\n    ) external;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @notice calculates the minimum eth that must be sent with a delegate call\\n    /// @dev returns 0 if no delegate can be made for this oken\\n    /// @param tokenId -> the token to be delegated to\\n    /// @param sender -> the address of the user who will be delegating\\n    /// @return canDelegate -> instead of reverting this function will return false\\n    /// @return nextOfferAmount -> the minimum value that must be sent with a delegate call\\n    /// @return senderCurrentOffer ->\\n    function valueForDelegate(address sender, uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            bool canDelegate,\\n            uint96 nextOfferAmount,\\n            uint96 senderCurrentOffer\\n        );\\n}\\n\",\"keccak256\":\"0x09221f91767c4bc3b278ec9f87e69b0b2604a5933738e8a2c188be39ea8401e0\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721} from '../IERC721.sol';\\n\\ninterface INuggftV1Token is IERC721 {\\n    event Mint(uint160 tokenId, uint96 value);\\n\\n    function mint(uint160 tokenId) external payable;\\n\\n    function trustedMint(uint160 tokenId, address to) external payable;\\n}\\n\",\"keccak256\":\"0x33c9c6dac596e805db87bfedeca661f03f433941108bb9be9a418328ef1c8cc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161001d9061004f565b604051809103906000f080158015610039573d6000803e3d6000fd5b506001600160a01b03166080523360a05261005c565b61025180610ece83390190565b60805160a051610e3f61008f60003960006109bd01526000818161042a0152818161053001526108800152610e3f6000f3fe60806040526004361061005a5760003560e01c8063933a1a3a11610043578063933a1a3a14610087578063a01ffdff146100a7578063e1e443c8146100bc57600080fd5b8063407679101461005f5780638b9f9e8614610074575b600080fd5b61007261006d366004610b09565b6100dc565b005b610072610082366004610b54565b6106c7565b34801561009357600080fd5b506100726100a2366004610b9a565b610852565b3480156100b357600080fd5b506100726109a5565b3480156100c857600080fd5b506100726100d7366004610b9a565b6109ea565b815b6100e88284610c02565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161015610694578373ffffffffffffffffffffffffffffffffffffffff1663750656f68573ffffffffffffffffffffffffffffffffffffffff16639531b94d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561017d57600080fd5b505afa158015610191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b59190610c5b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff851660048201526bffffffffffffffffffffffff91909116906024016000604051808303818588803b15801561022b57600080fd5b505af115801561023f573d6000803e3d6000fd5b505050505060008473ffffffffffffffffffffffffffffffffffffffff1663f71d09046040518163ffffffff1660e01b815260040160206040518083038186803b15801561028c57600080fd5b505afa1580156102a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c49190610c5b565b6102cf906003610c7d565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301819052908516602483015291925063095ea7b390604401600060405180830381600087803b15801561034257600080fd5b505af1158015610356573d6000803e3d6000fd5b50506040517fc5c8beeb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526bffffffffffffffffffffffff851660248301528816925063c5c8beeb9150604401600060405180830381600087803b1580156103d757600080fd5b505af11580156103eb573d6000803e3d6000fd5b50506040517f99081a2600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152858116602483015260009350881691506399081a269060440160606040518083038186803b15801561048157600080fd5b505afa158015610495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b99190610cb1565b5091506104c99050600284610cfb565b73ffffffffffffffffffffffffffffffffffffffff1661060f576040517fa59d071900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015284811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063a59d0719906bffffffffffffffffffffffff8416906044016000604051808303818588803b15801561058357600080fd5b505af1158015610597573d6000803e3d6000fd5b5050600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff88161790555061067f915050565b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790555b5050808061068c90610d55565b9150506100de565b5060405133904780156108fc02916000818181858888f193505050501580156106c1573d6000803e3d6000fd5b50505050565b815b6106d38284610d89565b81101561081e578473ffffffffffffffffffffffffffffffffffffffff1663beace31f8673ffffffffffffffffffffffffffffffffffffffff16639531b94d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561073c57600080fd5b505afa158015610750573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107749190610c5b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff8086166004830152881660248201526bffffffffffffffffffffffff91909116906044016000604051808303818588803b1580156107f257600080fd5b505af1158015610806573d6000803e3d6000fd5b5050505050808061081690610da1565b9150506106c9565b5060405133904780156108fc02916000818181858888f1935050505015801561084b573d6000803e3d6000fd5b5050505050565b600254805b61087773ffffffffffffffffffffffffffffffffffffffff841682610d89565b821015610974577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d6b2f315856001600254815481106108d0576108d0610dda565b60009182526020909120015460405160e084901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff928316600482015291166024820152604401600060405180830381600087803b15801561094957600080fd5b505af115801561095d573d6000803e3d6000fd5b50505050818061096c90610da1565b925050610857565b600282905560405133904780156108fc02916000818181858888f1935050505015801561084b573d6000803e3d6000fd5b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146109e757600080fd5b33ff5b600254805b610a0f73ffffffffffffffffffffffffffffffffffffffff841682610d89565b821015610974578373ffffffffffffffffffffffffffffffffffffffff1663665557c8600160025481548110610a4757610a47610dda565b60009182526020909120015460405160e083901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401600060405180830381600087803b158015610ab957600080fd5b505af1158015610acd573d6000803e3d6000fd5b505050508180610adc90610da1565b9250506109ef565b73ffffffffffffffffffffffffffffffffffffffff81168114610b0657600080fd5b50565b600080600060608486031215610b1e57600080fd5b8335610b2981610ae4565b92506020840135610b3981610ae4565b91506040840135610b4981610ae4565b809150509250925092565b60008060008060808587031215610b6a57600080fd5b8435610b7581610ae4565b93506020850135610b8581610ae4565b93969395505050506040820135916060013590565b60008060408385031215610bad57600080fd5b8235610bb881610ae4565b91506020830135610bc881610ae4565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff808316818516808303821115610c3157610c31610bd3565b01949350505050565b80516bffffffffffffffffffffffff81168114610c5657600080fd5b919050565b600060208284031215610c6d57600080fd5b610c7682610c3a565b9392505050565b60006bffffffffffffffffffffffff80831681851681830481118215151615610ca857610ca8610bd3565b02949350505050565b600080600060608486031215610cc657600080fd5b83518015158114610cd657600080fd5b9250610ce460208501610c3a565b9150610cf260408501610c3a565b90509250925092565b600073ffffffffffffffffffffffffffffffffffffffff80841680610d49577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b92169190910692915050565b600073ffffffffffffffffffffffffffffffffffffffff80831681811415610d7f57610d7f610bd3565b6001019392505050565b60008219821115610d9c57610d9c610bd3565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610dd357610dd3610bd3565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212206f1adf0e3e7f6d150115b99da5e97024e633770d1bd8ff36fcf54af39b5ed7f464736f6c63430008090033608060405234801561001057600080fd5b50610231806100206000396000f3fe6080604052600436106100295760003560e01c8063a59d07191461002e578063d6b2f31514610043575b600080fd5b61004161003c3660046101c2565b610063565b005b34801561004f57600080fd5b5061004161005e3660046101c2565b6100ea565b6040517f099afa1700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015283169063099afa179034906024016000604051808303818588803b1580156100cd57600080fd5b505af11580156100e1573d6000803e3d6000fd5b50505050505050565b6040517f665557c800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015283169063665557c890602401600060405180830381600087803b15801561015357600080fd5b505af1158015610167573d6000803e3d6000fd5b50506040513392504780156108fc029250906000818181858888f19350505050158015610198573d6000803e3d6000fd5b505050565b73ffffffffffffffffffffffffffffffffffffffff811681146101bf57600080fd5b50565b600080604083850312156101d557600080fd5b82356101e08161019d565b915060208301356101f08161019d565b80915050925092905056fea2646970667358221220e427c6d46c686923f737aacaa9b584043582a2f211dce3d5fe8336029a6c99f964736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061005a5760003560e01c8063933a1a3a11610043578063933a1a3a14610087578063a01ffdff146100a7578063e1e443c8146100bc57600080fd5b8063407679101461005f5780638b9f9e8614610074575b600080fd5b61007261006d366004610b09565b6100dc565b005b610072610082366004610b54565b6106c7565b34801561009357600080fd5b506100726100a2366004610b9a565b610852565b3480156100b357600080fd5b506100726109a5565b3480156100c857600080fd5b506100726100d7366004610b9a565b6109ea565b815b6100e88284610c02565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161015610694578373ffffffffffffffffffffffffffffffffffffffff1663750656f68573ffffffffffffffffffffffffffffffffffffffff16639531b94d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561017d57600080fd5b505afa158015610191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b59190610c5b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff851660048201526bffffffffffffffffffffffff91909116906024016000604051808303818588803b15801561022b57600080fd5b505af115801561023f573d6000803e3d6000fd5b505050505060008473ffffffffffffffffffffffffffffffffffffffff1663f71d09046040518163ffffffff1660e01b815260040160206040518083038186803b15801561028c57600080fd5b505afa1580156102a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c49190610c5b565b6102cf906003610c7d565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301819052908516602483015291925063095ea7b390604401600060405180830381600087803b15801561034257600080fd5b505af1158015610356573d6000803e3d6000fd5b50506040517fc5c8beeb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526bffffffffffffffffffffffff851660248301528816925063c5c8beeb9150604401600060405180830381600087803b1580156103d757600080fd5b505af11580156103eb573d6000803e3d6000fd5b50506040517f99081a2600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152858116602483015260009350881691506399081a269060440160606040518083038186803b15801561048157600080fd5b505afa158015610495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b99190610cb1565b5091506104c99050600284610cfb565b73ffffffffffffffffffffffffffffffffffffffff1661060f576040517fa59d071900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015284811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063a59d0719906bffffffffffffffffffffffff8416906044016000604051808303818588803b15801561058357600080fd5b505af1158015610597573d6000803e3d6000fd5b5050600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff88161790555061067f915050565b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790555b5050808061068c90610d55565b9150506100de565b5060405133904780156108fc02916000818181858888f193505050501580156106c1573d6000803e3d6000fd5b50505050565b815b6106d38284610d89565b81101561081e578473ffffffffffffffffffffffffffffffffffffffff1663beace31f8673ffffffffffffffffffffffffffffffffffffffff16639531b94d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561073c57600080fd5b505afa158015610750573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107749190610c5b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff8086166004830152881660248201526bffffffffffffffffffffffff91909116906044016000604051808303818588803b1580156107f257600080fd5b505af1158015610806573d6000803e3d6000fd5b5050505050808061081690610da1565b9150506106c9565b5060405133904780156108fc02916000818181858888f1935050505015801561084b573d6000803e3d6000fd5b5050505050565b600254805b61087773ffffffffffffffffffffffffffffffffffffffff841682610d89565b821015610974577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d6b2f315856001600254815481106108d0576108d0610dda565b60009182526020909120015460405160e084901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff928316600482015291166024820152604401600060405180830381600087803b15801561094957600080fd5b505af115801561095d573d6000803e3d6000fd5b50505050818061096c90610da1565b925050610857565b600282905560405133904780156108fc02916000818181858888f1935050505015801561084b573d6000803e3d6000fd5b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146109e757600080fd5b33ff5b600254805b610a0f73ffffffffffffffffffffffffffffffffffffffff841682610d89565b821015610974578373ffffffffffffffffffffffffffffffffffffffff1663665557c8600160025481548110610a4757610a47610dda565b60009182526020909120015460405160e083901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401600060405180830381600087803b158015610ab957600080fd5b505af1158015610acd573d6000803e3d6000fd5b505050508180610adc90610da1565b9250506109ef565b73ffffffffffffffffffffffffffffffffffffffff81168114610b0657600080fd5b50565b600080600060608486031215610b1e57600080fd5b8335610b2981610ae4565b92506020840135610b3981610ae4565b91506040840135610b4981610ae4565b809150509250925092565b60008060008060808587031215610b6a57600080fd5b8435610b7581610ae4565b93506020850135610b8581610ae4565b93969395505050506040820135916060013590565b60008060408385031215610bad57600080fd5b8235610bb881610ae4565b91506020830135610bc881610ae4565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff808316818516808303821115610c3157610c31610bd3565b01949350505050565b80516bffffffffffffffffffffffff81168114610c5657600080fd5b919050565b600060208284031215610c6d57600080fd5b610c7682610c3a565b9392505050565b60006bffffffffffffffffffffffff80831681851681830481118215151615610ca857610ca8610bd3565b02949350505050565b600080600060608486031215610cc657600080fd5b83518015158114610cd657600080fd5b9250610ce460208501610c3a565b9150610cf260408501610c3a565b90509250925092565b600073ffffffffffffffffffffffffffffffffffffffff80841680610d49577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b92169190910692915050565b600073ffffffffffffffffffffffffffffffffffffffff80831681811415610d7f57610d7f610bd3565b6001019392505050565b60008219821115610d9c57610d9c610bd3565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610dd357610dd3610bd3565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212206f1adf0e3e7f6d150115b99da5e97024e633770d1bd8ff36fcf54af39b5ed7f464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4041,
        "contract": "src/_test/dev/Minter.sol:NuggftV1Minter",
        "label": "toClaimFromHelper",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint160)dyn_storage"
      },
      {
        "astId": 4044,
        "contract": "src/_test/dev/Minter.sol:NuggftV1Minter",
        "label": "toClaim",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint160)dyn_storage"
      },
      {
        "astId": 4046,
        "contract": "src/_test/dev/Minter.sol:NuggftV1Minter",
        "label": "claimedIndex",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4048,
        "contract": "src/_test/dev/Minter.sol:NuggftV1Minter",
        "label": "claimedFromHelperIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_array(t_uint160)dyn_storage": {
        "base": "t_uint160",
        "encoding": "dynamic_array",
        "label": "uint160[]",
        "numberOfBytes": "32"
      },
      "t_uint160": {
        "encoding": "inplace",
        "label": "uint160",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}