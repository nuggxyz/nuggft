{
  "0xe45fd6fdbf589e9e41cd5a110b2f4e7a4562b7d2aca7b664b922f7826205d397": {
    "name": "NuggftV1Deployer",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "NuggftV1Deployer",
      "sourceName": "src/_deployment/NuggftV1Deployer.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "address[]",
              "name": "trusted",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "dotnugg",
              "type": "address"
            },
            {
              "internalType": "uint256[][][]",
              "name": "nuggs",
              "type": "uint256[][][]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "nuggft",
          "outputs": [
            {
              "internalType": "contract NuggftV1",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "bytecode": "",
      "deployedBytecode": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c8063f55a30ee14602d575b600080fd5b600054604c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f3fea2646970667358221220cc264bd90cf8cb68cfbdffee6d14ca168ceccfbc2d796b75a6141acbf7ff033464736f6c63430008090033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_2336": {
              "entryPoint": null,
              "id": 2336,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "abi_decode_address_fromMemory": {
              "entryPoint": 820,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_array_array_array_uint256_dyn_dyn_dyn_fromMemory": {
              "entryPoint": 838,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes32t_array$_t_address_$dyn_memory_ptrt_addresst_array$_t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr_$dyn_memory_ptr_fromMemory": {
              "entryPoint": 1223,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_contract$_IDotnuggV1StorageProxy_$22277_fromMemory": {
              "entryPoint": 1558,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_bool__to_t_address_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_address__to_t_array$_t_address_$dyn_memory_ptr_t_address__fromStack_reversed": {
              "entryPoint": 1463,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_array$_t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr_$dyn_memory_ptr__to_t_array$_t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr_$dyn_memory_ptr__fromStack_reversed": {
              "entryPoint": 1597,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint160_t_address__to_t_uint160_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "allocate_memory": {
              "entryPoint": 706,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_allocation_size_array_address_dyn": {
              "entryPoint": 757,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "increment_t_uint160": {
              "entryPoint": 1827,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x32": {
              "entryPoint": 1805,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 684,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "validator_revert_address": {
              "entryPoint": 795,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:8670:49",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:49",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "46:95:49",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "63:1:49",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "70:3:49",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "75:10:49",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "66:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "66:20:49"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "56:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "56:31:49"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "56:31:49"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "103:1:49",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "106:4:49",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "96:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "96:15:49"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "96:15:49"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "127:1:49",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "130:4:49",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "120:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "120:15:49"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "120:15:49"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "14:127:49"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "191:230:49",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "201:19:49",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "217:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "211:5:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "211:9:49"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "201:6:49"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "229:58:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "251:6:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "size",
                                        "nodeType": "YulIdentifier",
                                        "src": "267:4:49"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "273:2:49",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "263:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "263:13:49"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "282:2:49",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "278:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "278:7:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "259:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "259:27:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "247:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "247:40:49"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "233:10:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "362:22:49",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "364:16:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "364:18:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "364:18:49"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "305:10:49"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "325:2:49",
                                            "type": "",
                                            "value": "64"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "329:1:49",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "321:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "321:10:49"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "333:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "317:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "317:18:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "302:2:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "302:34:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "341:10:49"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "353:6:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "338:2:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "338:22:49"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "299:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "299:62:49"
                          },
                          "nodeType": "YulIf",
                          "src": "296:88:49"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "400:2:49",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "404:10:49"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "393:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "393:22:49"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "393:22:49"
                        }
                      ]
                    },
                    "name": "allocate_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "171:4:49",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "180:6:49",
                        "type": ""
                      }
                    ],
                    "src": "146:275:49"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "495:114:49",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "539:22:49",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "541:16:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "541:18:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "541:18:49"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "511:6:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "527:2:49",
                                        "type": "",
                                        "value": "64"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "531:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "523:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "523:10:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "535:1:49",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "519:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "519:18:49"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "508:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "508:30:49"
                          },
                          "nodeType": "YulIf",
                          "src": "505:56:49"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "570:33:49",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "586:1:49",
                                    "type": "",
                                    "value": "5"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "589:6:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "582:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "582:14:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "598:4:49",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "578:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "578:25:49"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "570:4:49"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_array_address_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "475:6:49",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "486:4:49",
                        "type": ""
                      }
                    ],
                    "src": "426:183:49"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "659:86:49",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "723:16:49",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "732:1:49",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "735:1:49",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "725:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "725:12:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "725:12:49"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "682:5:49"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "693:5:49"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "708:3:49",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "713:1:49",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "704:3:49"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "704:11:49"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "717:1:49",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "700:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "700:19:49"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "689:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "689:31:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "679:2:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "679:42:49"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "672:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "672:50:49"
                          },
                          "nodeType": "YulIf",
                          "src": "669:70:49"
                        }
                      ]
                    },
                    "name": "validator_revert_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "648:5:49",
                        "type": ""
                      }
                    ],
                    "src": "614:131:49"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "810:78:49",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "820:22:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "835:6:49"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "829:5:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "829:13:49"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "820:5:49"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "876:5:49"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "851:24:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "851:31:49"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "851:31:49"
                        }
                      ]
                    },
                    "name": "abi_decode_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "789:6:49",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "800:5:49",
                        "type": ""
                      }
                    ],
                    "src": "750:138:49"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "988:2179:49",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1037:16:49",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1046:1:49",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1049:1:49",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1039:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1039:12:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1039:12:49"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "1016:6:49"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1024:4:49",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1012:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1012:17:49"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "1031:3:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1008:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1008:27:49"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1001:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1001:35:49"
                          },
                          "nodeType": "YulIf",
                          "src": "998:55:49"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1062:23:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1078:6:49"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1072:5:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1072:13:49"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1066:2:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1094:71:49",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1161:2:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_array_address_dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "1121:39:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1121:43:49"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "1105:15:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1105:60:49"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "1098:3:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1174:16:49",
                          "value": {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "1187:3:49"
                          },
                          "variables": [
                            {
                              "name": "dst_1",
                              "nodeType": "YulTypedName",
                              "src": "1178:5:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "1206:3:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1211:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1199:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1199:15:49"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1199:15:49"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1223:21:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "1234:3:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1239:4:49",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1230:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1230:14:49"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "1223:3:49"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1253:48:49",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1275:6:49"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1287:1:49",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "1290:2:49"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "1283:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1283:10:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1271:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1271:23:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1296:4:49",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1267:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1267:34:49"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nodeType": "YulTypedName",
                              "src": "1257:6:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1329:16:49",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1338:1:49",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1341:1:49",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1331:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1331:12:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1331:12:49"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1316:6:49"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "1324:3:49"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1313:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1313:15:49"
                          },
                          "nodeType": "YulIf",
                          "src": "1310:35:49"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1354:28:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1369:6:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1377:4:49",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1365:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1365:17:49"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "1358:3:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1449:1689:49",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1463:29:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "1488:3:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "1482:5:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1482:10:49"
                                },
                                "variables": [
                                  {
                                    "name": "innerOffset",
                                    "nodeType": "YulTypedName",
                                    "src": "1467:11:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "1544:16:49",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1553:1:49",
                                            "type": "",
                                            "value": "0"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1556:1:49",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "revert",
                                          "nodeType": "YulIdentifier",
                                          "src": "1546:6:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1546:12:49"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "1546:12:49"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "innerOffset",
                                      "nodeType": "YulIdentifier",
                                      "src": "1511:11:49"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "1532:2:49",
                                              "type": "",
                                              "value": "64"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "1536:1:49",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "1528:3:49"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1528:10:49"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1540:1:49",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sub",
                                        "nodeType": "YulIdentifier",
                                        "src": "1524:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1524:18:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nodeType": "YulIdentifier",
                                    "src": "1508:2:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1508:35:49"
                                },
                                "nodeType": "YulIf",
                                "src": "1505:55:49"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1573:34:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "offset",
                                      "nodeType": "YulIdentifier",
                                      "src": "1587:6:49"
                                    },
                                    {
                                      "name": "innerOffset",
                                      "nodeType": "YulIdentifier",
                                      "src": "1595:11:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1583:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1583:24:49"
                                },
                                "variables": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulTypedName",
                                    "src": "1577:2:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "1653:16:49",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1662:1:49",
                                            "type": "",
                                            "value": "0"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1665:1:49",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "revert",
                                          "nodeType": "YulIdentifier",
                                          "src": "1655:6:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1655:12:49"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "1655:12:49"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "1638:2:49"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "1642:2:49",
                                              "type": "",
                                              "value": "63"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "1634:3:49"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1634:11:49"
                                        },
                                        {
                                          "name": "end",
                                          "nodeType": "YulIdentifier",
                                          "src": "1647:3:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "slt",
                                        "nodeType": "YulIdentifier",
                                        "src": "1630:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1630:21:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "iszero",
                                    "nodeType": "YulIdentifier",
                                    "src": "1623:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1623:29:49"
                                },
                                "nodeType": "YulIf",
                                "src": "1620:49:49"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1682:30:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "1702:2:49"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1706:4:49",
                                          "type": "",
                                          "value": "0x20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1698:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1698:13:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "1692:5:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1692:20:49"
                                },
                                "variables": [
                                  {
                                    "name": "_3",
                                    "nodeType": "YulTypedName",
                                    "src": "1686:2:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1725:73:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "_3",
                                          "nodeType": "YulIdentifier",
                                          "src": "1794:2:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_allocation_size_array_address_dyn",
                                        "nodeType": "YulIdentifier",
                                        "src": "1754:39:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1754:43:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "allocate_memory",
                                    "nodeType": "YulIdentifier",
                                    "src": "1738:15:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1738:60:49"
                                },
                                "variables": [
                                  {
                                    "name": "dst_2",
                                    "nodeType": "YulTypedName",
                                    "src": "1729:5:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1811:18:49",
                                "value": {
                                  "name": "dst_2",
                                  "nodeType": "YulIdentifier",
                                  "src": "1824:5:49"
                                },
                                "variables": [
                                  {
                                    "name": "dst_3",
                                    "nodeType": "YulTypedName",
                                    "src": "1815:5:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "1849:5:49"
                                    },
                                    {
                                      "name": "_3",
                                      "nodeType": "YulIdentifier",
                                      "src": "1856:2:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "1842:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1842:17:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1842:17:49"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "1872:25:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "1885:5:49"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1892:4:49",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1881:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1881:16:49"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "1872:5:49"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1910:44:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "1934:2:49"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "1942:1:49",
                                              "type": "",
                                              "value": "5"
                                            },
                                            {
                                              "name": "_3",
                                              "nodeType": "YulIdentifier",
                                              "src": "1945:2:49"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "1938:3:49"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1938:10:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1930:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1930:19:49"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1951:2:49",
                                      "type": "",
                                      "value": "64"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1926:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1926:28:49"
                                },
                                "variables": [
                                  {
                                    "name": "srcEnd_1",
                                    "nodeType": "YulTypedName",
                                    "src": "1914:8:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "1988:16:49",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1997:1:49",
                                            "type": "",
                                            "value": "0"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2000:1:49",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "revert",
                                          "nodeType": "YulIdentifier",
                                          "src": "1990:6:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1990:12:49"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "1990:12:49"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "srcEnd_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1973:8:49"
                                    },
                                    {
                                      "name": "end",
                                      "nodeType": "YulIdentifier",
                                      "src": "1983:3:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nodeType": "YulIdentifier",
                                    "src": "1970:2:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1970:17:49"
                                },
                                "nodeType": "YulIf",
                                "src": "1967:37:49"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "2017:24:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "2034:2:49"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2038:2:49",
                                      "type": "",
                                      "value": "64"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2030:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2030:11:49"
                                },
                                "variables": [
                                  {
                                    "name": "src_1",
                                    "nodeType": "YulTypedName",
                                    "src": "2021:5:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "2124:939:49",
                                  "statements": [
                                    {
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "2142:33:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "src_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "2169:5:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mload",
                                          "nodeType": "YulIdentifier",
                                          "src": "2163:5:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2163:12:49"
                                      },
                                      "variables": [
                                        {
                                          "name": "innerOffset_1",
                                          "nodeType": "YulTypedName",
                                          "src": "2146:13:49",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "body": {
                                        "nodeType": "YulBlock",
                                        "src": "2233:16:49",
                                        "statements": [
                                          {
                                            "expression": {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2242:1:49",
                                                  "type": "",
                                                  "value": "0"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2245:1:49",
                                                  "type": "",
                                                  "value": "0"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "revert",
                                                "nodeType": "YulIdentifier",
                                                "src": "2235:6:49"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2235:12:49"
                                            },
                                            "nodeType": "YulExpressionStatement",
                                            "src": "2235:12:49"
                                          }
                                        ]
                                      },
                                      "condition": {
                                        "arguments": [
                                          {
                                            "name": "innerOffset_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "2198:13:49"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "2221:2:49",
                                                    "type": "",
                                                    "value": "64"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "2225:1:49",
                                                    "type": "",
                                                    "value": "1"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "shl",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2217:3:49"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2217:10:49"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2229:1:49",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sub",
                                              "nodeType": "YulIdentifier",
                                              "src": "2213:3:49"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2213:18:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "gt",
                                          "nodeType": "YulIdentifier",
                                          "src": "2195:2:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2195:37:49"
                                      },
                                      "nodeType": "YulIf",
                                      "src": "2192:57:49"
                                    },
                                    {
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "2266:32:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "_2",
                                            "nodeType": "YulIdentifier",
                                            "src": "2280:2:49"
                                          },
                                          {
                                            "name": "innerOffset_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "2284:13:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2276:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2276:22:49"
                                      },
                                      "variables": [
                                        {
                                          "name": "_4",
                                          "nodeType": "YulTypedName",
                                          "src": "2270:2:49",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "body": {
                                        "nodeType": "YulBlock",
                                        "src": "2348:16:49",
                                        "statements": [
                                          {
                                            "expression": {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2357:1:49",
                                                  "type": "",
                                                  "value": "0"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2360:1:49",
                                                  "type": "",
                                                  "value": "0"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "revert",
                                                "nodeType": "YulIdentifier",
                                                "src": "2350:6:49"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2350:12:49"
                                            },
                                            "nodeType": "YulExpressionStatement",
                                            "src": "2350:12:49"
                                          }
                                        ]
                                      },
                                      "condition": {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "_4",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2333:2:49"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "2337:2:49",
                                                    "type": "",
                                                    "value": "95"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2329:3:49"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2329:11:49"
                                              },
                                              {
                                                "name": "end",
                                                "nodeType": "YulIdentifier",
                                                "src": "2342:3:49"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "slt",
                                              "nodeType": "YulIdentifier",
                                              "src": "2325:3:49"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2325:21:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "2318:6:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2318:29:49"
                                      },
                                      "nodeType": "YulIf",
                                      "src": "2315:49:49"
                                    },
                                    {
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "2381:28:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "_4",
                                                "nodeType": "YulIdentifier",
                                                "src": "2401:2:49"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2405:2:49",
                                                "type": "",
                                                "value": "64"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "2397:3:49"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2397:11:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mload",
                                          "nodeType": "YulIdentifier",
                                          "src": "2391:5:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2391:18:49"
                                      },
                                      "variables": [
                                        {
                                          "name": "_5",
                                          "nodeType": "YulTypedName",
                                          "src": "2385:2:49",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "2426:73:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "_5",
                                                "nodeType": "YulIdentifier",
                                                "src": "2495:2:49"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "array_allocation_size_array_address_dyn",
                                              "nodeType": "YulIdentifier",
                                              "src": "2455:39:49"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2455:43:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "allocate_memory",
                                          "nodeType": "YulIdentifier",
                                          "src": "2439:15:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2439:60:49"
                                      },
                                      "variables": [
                                        {
                                          "name": "dst_4",
                                          "nodeType": "YulTypedName",
                                          "src": "2430:5:49",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "2516:18:49",
                                      "value": {
                                        "name": "dst_4",
                                        "nodeType": "YulIdentifier",
                                        "src": "2529:5:49"
                                      },
                                      "variables": [
                                        {
                                          "name": "dst_5",
                                          "nodeType": "YulTypedName",
                                          "src": "2520:5:49",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "dst_4",
                                            "nodeType": "YulIdentifier",
                                            "src": "2558:5:49"
                                          },
                                          {
                                            "name": "_5",
                                            "nodeType": "YulIdentifier",
                                            "src": "2565:2:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "2551:6:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2551:17:49"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "2551:17:49"
                                    },
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "2585:25:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "dst_4",
                                            "nodeType": "YulIdentifier",
                                            "src": "2598:5:49"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2605:4:49",
                                            "type": "",
                                            "value": "0x20"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2594:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2594:16:49"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "dst_4",
                                          "nodeType": "YulIdentifier",
                                          "src": "2585:5:49"
                                        }
                                      ]
                                    },
                                    {
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "2627:44:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "_4",
                                                "nodeType": "YulIdentifier",
                                                "src": "2651:2:49"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "2659:1:49",
                                                    "type": "",
                                                    "value": "5"
                                                  },
                                                  {
                                                    "name": "_5",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2662:2:49"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "shl",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2655:3:49"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2655:10:49"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "2647:3:49"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2647:19:49"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2668:2:49",
                                            "type": "",
                                            "value": "96"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2643:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2643:28:49"
                                      },
                                      "variables": [
                                        {
                                          "name": "srcEnd_2",
                                          "nodeType": "YulTypedName",
                                          "src": "2631:8:49",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "body": {
                                        "nodeType": "YulBlock",
                                        "src": "2709:16:49",
                                        "statements": [
                                          {
                                            "expression": {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2718:1:49",
                                                  "type": "",
                                                  "value": "0"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2721:1:49",
                                                  "type": "",
                                                  "value": "0"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "revert",
                                                "nodeType": "YulIdentifier",
                                                "src": "2711:6:49"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2711:12:49"
                                            },
                                            "nodeType": "YulExpressionStatement",
                                            "src": "2711:12:49"
                                          }
                                        ]
                                      },
                                      "condition": {
                                        "arguments": [
                                          {
                                            "name": "srcEnd_2",
                                            "nodeType": "YulIdentifier",
                                            "src": "2694:8:49"
                                          },
                                          {
                                            "name": "end",
                                            "nodeType": "YulIdentifier",
                                            "src": "2704:3:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "gt",
                                          "nodeType": "YulIdentifier",
                                          "src": "2691:2:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2691:17:49"
                                      },
                                      "nodeType": "YulIf",
                                      "src": "2688:37:49"
                                    },
                                    {
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "2742:24:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "_4",
                                            "nodeType": "YulIdentifier",
                                            "src": "2759:2:49"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2763:2:49",
                                            "type": "",
                                            "value": "96"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2755:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2755:11:49"
                                      },
                                      "variables": [
                                        {
                                          "name": "src_2",
                                          "nodeType": "YulTypedName",
                                          "src": "2746:5:49",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "body": {
                                        "nodeType": "YulBlock",
                                        "src": "2857:113:49",
                                        "statements": [
                                          {
                                            "expression": {
                                              "arguments": [
                                                {
                                                  "name": "dst_4",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2886:5:49"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "name": "src_2",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2899:5:49"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "mload",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2893:5:49"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "2893:12:49"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "mstore",
                                                "nodeType": "YulIdentifier",
                                                "src": "2879:6:49"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2879:27:49"
                                            },
                                            "nodeType": "YulExpressionStatement",
                                            "src": "2879:27:49"
                                          },
                                          {
                                            "nodeType": "YulAssignment",
                                            "src": "2927:25:49",
                                            "value": {
                                              "arguments": [
                                                {
                                                  "name": "dst_4",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2940:5:49"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2947:4:49",
                                                  "type": "",
                                                  "value": "0x20"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "2936:3:49"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2936:16:49"
                                            },
                                            "variableNames": [
                                              {
                                                "name": "dst_4",
                                                "nodeType": "YulIdentifier",
                                                "src": "2927:5:49"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      "condition": {
                                        "arguments": [
                                          {
                                            "name": "src_2",
                                            "nodeType": "YulIdentifier",
                                            "src": "2794:5:49"
                                          },
                                          {
                                            "name": "srcEnd_2",
                                            "nodeType": "YulIdentifier",
                                            "src": "2801:8:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "lt",
                                          "nodeType": "YulIdentifier",
                                          "src": "2791:2:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2791:19:49"
                                      },
                                      "nodeType": "YulForLoop",
                                      "post": {
                                        "nodeType": "YulBlock",
                                        "src": "2811:29:49",
                                        "statements": [
                                          {
                                            "nodeType": "YulAssignment",
                                            "src": "2813:25:49",
                                            "value": {
                                              "arguments": [
                                                {
                                                  "name": "src_2",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2826:5:49"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2833:4:49",
                                                  "type": "",
                                                  "value": "0x20"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "2822:3:49"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2822:16:49"
                                            },
                                            "variableNames": [
                                              {
                                                "name": "src_2",
                                                "nodeType": "YulIdentifier",
                                                "src": "2813:5:49"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      "pre": {
                                        "nodeType": "YulBlock",
                                        "src": "2787:3:49",
                                        "statements": []
                                      },
                                      "src": "2783:187:49"
                                    },
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "dst_2",
                                            "nodeType": "YulIdentifier",
                                            "src": "2994:5:49"
                                          },
                                          {
                                            "name": "dst_5",
                                            "nodeType": "YulIdentifier",
                                            "src": "3001:5:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "2987:6:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2987:20:49"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "2987:20:49"
                                    },
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "3024:25:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "dst_2",
                                            "nodeType": "YulIdentifier",
                                            "src": "3037:5:49"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3044:4:49",
                                            "type": "",
                                            "value": "0x20"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "3033:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3033:16:49"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "dst_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "3024:5:49"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "src_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2065:5:49"
                                    },
                                    {
                                      "name": "srcEnd_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2072:8:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "2062:2:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2062:19:49"
                                },
                                "nodeType": "YulForLoop",
                                "post": {
                                  "nodeType": "YulBlock",
                                  "src": "2082:29:49",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "2084:25:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "src_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "2097:5:49"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2104:4:49",
                                            "type": "",
                                            "value": "0x20"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2093:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2093:16:49"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "src_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "2084:5:49"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "pre": {
                                  "nodeType": "YulBlock",
                                  "src": "2058:3:49",
                                  "statements": []
                                },
                                "src": "2054:1009:49"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "3083:3:49"
                                    },
                                    {
                                      "name": "dst_3",
                                      "nodeType": "YulIdentifier",
                                      "src": "3088:5:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3076:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3076:18:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3076:18:49"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "3107:21:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "3118:3:49"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3123:4:49",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "3114:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3114:14:49"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "3107:3:49"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "1402:3:49"
                              },
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1407:6:49"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "1399:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1399:15:49"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "1415:25:49",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "1417:21:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "1428:3:49"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1433:4:49",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1424:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1424:14:49"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "1417:3:49"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "1395:3:49",
                            "statements": []
                          },
                          "src": "1391:1747:49"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3147:14:49",
                          "value": {
                            "name": "dst_1",
                            "nodeType": "YulIdentifier",
                            "src": "3156:5:49"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "3147:5:49"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_array_array_array_uint256_dyn_dyn_dyn_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "962:6:49",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "970:3:49",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "978:5:49",
                        "type": ""
                      }
                    ],
                    "src": "893:2274:49"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3404:1192:49",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3451:16:49",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3460:1:49",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3463:1:49",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3453:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3453:12:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3453:12:49"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3425:7:49"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3434:9:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3421:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3421:23:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3446:3:49",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3417:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3417:33:49"
                          },
                          "nodeType": "YulIf",
                          "src": "3414:53:49"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3476:26:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3492:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3486:5:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3486:16:49"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3476:6:49"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3511:12:49",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3521:2:49",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "3515:2:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3532:39:49",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3556:9:49"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3567:2:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3552:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3552:18:49"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3546:5:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3546:25:49"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "3536:6:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3580:28:49",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3598:2:49",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3602:1:49",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "3594:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3594:10:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3606:1:49",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3590:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3590:18:49"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "3584:2:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3635:16:49",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3644:1:49",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3647:1:49",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3637:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3637:12:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3637:12:49"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3623:6:49"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "3631:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3620:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3620:14:49"
                          },
                          "nodeType": "YulIf",
                          "src": "3617:34:49"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3660:32:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3674:9:49"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3685:6:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3670:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3670:22:49"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "3664:2:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3740:16:49",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3749:1:49",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3752:1:49",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3742:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3742:12:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3742:12:49"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "3719:2:49"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3723:4:49",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3715:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3715:13:49"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3730:7:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3711:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3711:27:49"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3704:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3704:35:49"
                          },
                          "nodeType": "YulIf",
                          "src": "3701:55:49"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3765:19:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "3781:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3775:5:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3775:9:49"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "3769:2:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3793:71:49",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "3860:2:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_array_address_dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "3820:39:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3820:43:49"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "3804:15:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3804:60:49"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "3797:3:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3873:16:49",
                          "value": {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "3886:3:49"
                          },
                          "variables": [
                            {
                              "name": "dst_1",
                              "nodeType": "YulTypedName",
                              "src": "3877:5:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "3905:3:49"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "3910:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3898:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3898:15:49"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3898:15:49"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3922:19:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "3933:3:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3938:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3929:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3929:12:49"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "3922:3:49"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3950:42:49",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "3972:2:49"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3980:1:49",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "_4",
                                        "nodeType": "YulIdentifier",
                                        "src": "3983:2:49"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "3976:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3976:10:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3968:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3968:19:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3989:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3964:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3964:28:49"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nodeType": "YulTypedName",
                              "src": "3954:6:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4024:16:49",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4033:1:49",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4036:1:49",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4026:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4026:12:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4026:12:49"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4007:6:49"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4015:7:49"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4004:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4004:19:49"
                          },
                          "nodeType": "YulIf",
                          "src": "4001:39:49"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4049:22:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "4064:2:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4068:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4060:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4060:11:49"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "4053:3:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4136:154:49",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "4150:23:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "4169:3:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "4163:5:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4163:10:49"
                                },
                                "variables": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulTypedName",
                                    "src": "4154:5:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "4211:5:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "validator_revert_address",
                                    "nodeType": "YulIdentifier",
                                    "src": "4186:24:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4186:31:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4186:31:49"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "4237:3:49"
                                    },
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "4242:5:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "4230:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4230:18:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4230:18:49"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "4261:19:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "4272:3:49"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "4277:2:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "4268:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4268:12:49"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "4261:3:49"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "4091:3:49"
                              },
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4096:6:49"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "4088:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4088:15:49"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "4104:23:49",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "4106:19:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "4117:3:49"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "4122:2:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "4113:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4113:12:49"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "4106:3:49"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "4084:3:49",
                            "statements": []
                          },
                          "src": "4080:210:49"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4299:15:49",
                          "value": {
                            "name": "dst_1",
                            "nodeType": "YulIdentifier",
                            "src": "4309:5:49"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "4299:6:49"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4323:59:49",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4367:9:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4378:2:49",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4363:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4363:18:49"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "4333:29:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4333:49:49"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "4323:6:49"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4391:41:49",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4417:9:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4428:2:49",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4413:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4413:18:49"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4407:5:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4407:25:49"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "4395:8:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4461:16:49",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4470:1:49",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4473:1:49",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4463:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4463:12:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4463:12:49"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "4447:8:49"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "4457:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4444:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4444:16:49"
                          },
                          "nodeType": "YulIf",
                          "src": "4441:36:49"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4486:104:49",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4560:9:49"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4571:8:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4556:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4556:24:49"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4582:7:49"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_array_array_uint256_dyn_dyn_dyn_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "4496:59:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4496:94:49"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "4486:6:49"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32t_array$_t_address_$dyn_memory_ptrt_addresst_array$_t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr_$dyn_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3346:9:49",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3357:7:49",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3369:6:49",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3377:6:49",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "3385:6:49",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "3393:6:49",
                        "type": ""
                      }
                    ],
                    "src": "3172:1424:49"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4780:578:49",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4790:32:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4808:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4819:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4804:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4804:18:49"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "4794:6:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4838:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4849:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4831:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4831:21:49"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4831:21:49"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4861:17:49",
                          "value": {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "4872:6:49"
                          },
                          "variables": [
                            {
                              "name": "pos",
                              "nodeType": "YulTypedName",
                              "src": "4865:3:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4887:27:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4907:6:49"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4901:5:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4901:13:49"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "4891:6:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "4930:6:49"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "4938:6:49"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4923:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4923:22:49"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4923:22:49"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4954:25:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4965:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4976:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4961:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4961:18:49"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "4954:3:49"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4988:14:49",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4998:4:49",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "4992:2:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5011:29:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "5029:6:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5037:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5025:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5025:15:49"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "5015:6:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5049:10:49",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5058:1:49",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "5053:1:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5117:146:49",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "5138:3:49"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "srcPtr",
                                              "nodeType": "YulIdentifier",
                                              "src": "5153:6:49"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "5147:5:49"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "5147:13:49"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "5170:3:49",
                                                  "type": "",
                                                  "value": "160"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "5175:1:49",
                                                  "type": "",
                                                  "value": "1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "5166:3:49"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "5166:11:49"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "5179:1:49",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sub",
                                            "nodeType": "YulIdentifier",
                                            "src": "5162:3:49"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "5162:19:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "5143:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5143:39:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "5131:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5131:52:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5131:52:49"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "5196:19:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "5207:3:49"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "5212:2:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5203:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5203:12:49"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "5196:3:49"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "5228:25:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "5242:6:49"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "5250:2:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5238:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5238:15:49"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "5228:6:49"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "5079:1:49"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5082:6:49"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "5076:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5076:13:49"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "5090:18:49",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "5092:14:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "5101:1:49"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5104:1:49",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5097:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5097:9:49"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "5092:1:49"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "5072:3:49",
                            "statements": []
                          },
                          "src": "5068:195:49"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5272:11:49",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "5280:3:49"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5272:4:49"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5303:9:49"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5314:2:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5299:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5299:18:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5323:6:49"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5339:3:49",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5344:1:49",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "5335:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5335:11:49"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5348:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "5331:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5331:19:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "5319:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5319:32:49"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5292:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5292:60:49"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5292:60:49"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_address__to_t_array$_t_address_$dyn_memory_ptr_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4741:9:49",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4752:6:49",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4760:6:49",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4771:4:49",
                        "type": ""
                      }
                    ],
                    "src": "4601:757:49"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5476:170:49",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5522:16:49",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5531:1:49",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5534:1:49",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5524:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5524:12:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5524:12:49"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5497:7:49"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5506:9:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5493:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5493:23:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5518:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5489:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5489:32:49"
                          },
                          "nodeType": "YulIf",
                          "src": "5486:52:49"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5547:29:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5566:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "5560:5:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5560:16:49"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "5551:5:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "5610:5:49"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "5585:24:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5585:31:49"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5585:31:49"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5625:15:49",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "5635:5:49"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5625:6:49"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_IDotnuggV1StorageProxy_$22277_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5442:9:49",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5453:7:49",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5465:6:49",
                        "type": ""
                      }
                    ],
                    "src": "5363:283:49"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5902:1723:49",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5912:12:49",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5922:2:49",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "5916:2:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5933:32:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5951:9:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5962:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5947:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5947:18:49"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "5937:6:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5981:9:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5992:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5974:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5974:21:49"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5974:21:49"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6004:17:49",
                          "value": {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "6015:6:49"
                          },
                          "variables": [
                            {
                              "name": "pos",
                              "nodeType": "YulTypedName",
                              "src": "6008:3:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6030:27:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6050:6:49"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "6044:5:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6044:13:49"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "6034:6:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "6073:6:49"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "6081:6:49"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6066:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6066:22:49"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6066:22:49"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6097:25:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6108:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6119:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6104:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6104:18:49"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "6097:3:49"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6131:11:49",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6141:1:49",
                            "type": "",
                            "value": "5"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "6135:2:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6151:54:49",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6173:9:49"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "6188:2:49"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "6192:6:49"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "6184:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6184:15:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6169:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6169:31:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6202:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6165:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6165:40:49"
                          },
                          "variables": [
                            {
                              "name": "tail_2",
                              "nodeType": "YulTypedName",
                              "src": "6155:6:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6214:29:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6232:6:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "6240:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6228:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6228:15:49"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "6218:6:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6252:10:49",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6261:1:49",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "6256:1:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6320:1276:49",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "6341:3:49"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "tail_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "6354:6:49"
                                            },
                                            {
                                              "name": "headStart",
                                              "nodeType": "YulIdentifier",
                                              "src": "6362:9:49"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sub",
                                            "nodeType": "YulIdentifier",
                                            "src": "6350:3:49"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "6350:22:49"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "6378:2:49",
                                              "type": "",
                                              "value": "63"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nodeType": "YulIdentifier",
                                            "src": "6374:3:49"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "6374:7:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "6346:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6346:36:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "6334:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6334:49:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6334:49:49"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "6396:23:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "6412:6:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "6406:5:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6406:13:49"
                                },
                                "variables": [
                                  {
                                    "name": "_3",
                                    "nodeType": "YulTypedName",
                                    "src": "6400:2:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "6432:19:49",
                                "value": {
                                  "name": "tail_2",
                                  "nodeType": "YulIdentifier",
                                  "src": "6445:6:49"
                                },
                                "variables": [
                                  {
                                    "name": "pos_1",
                                    "nodeType": "YulTypedName",
                                    "src": "6436:5:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "6464:25:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "_3",
                                      "nodeType": "YulIdentifier",
                                      "src": "6486:2:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "6480:5:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6480:9:49"
                                },
                                "variables": [
                                  {
                                    "name": "length_1",
                                    "nodeType": "YulTypedName",
                                    "src": "6468:8:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "tail_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "6509:6:49"
                                    },
                                    {
                                      "name": "length_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "6517:8:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "6502:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6502:24:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6502:24:49"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "6539:24:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "tail_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "6552:6:49"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "6560:2:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "6548:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6548:15:49"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6539:5:49"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "6576:53:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "tail_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "6598:6:49"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "6610:2:49"
                                            },
                                            {
                                              "name": "length_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "6614:8:49"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "6606:3:49"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "6606:17:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "6594:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6594:30:49"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "6626:2:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "6590:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6590:39:49"
                                },
                                "variables": [
                                  {
                                    "name": "tail_3",
                                    "nodeType": "YulTypedName",
                                    "src": "6580:6:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "6642:27:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "_3",
                                      "nodeType": "YulIdentifier",
                                      "src": "6662:2:49"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "6666:2:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "6658:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6658:11:49"
                                },
                                "variables": [
                                  {
                                    "name": "srcPtr_1",
                                    "nodeType": "YulTypedName",
                                    "src": "6646:8:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "6682:12:49",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6693:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "i_1",
                                    "nodeType": "YulTypedName",
                                    "src": "6686:3:49",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "6768:719:49",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "pos_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "6793:5:49"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "tail_3",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "6808:6:49"
                                                  },
                                                  {
                                                    "name": "tail_2",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "6816:6:49"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "sub",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "6804:3:49"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "6804:19:49"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "6829:2:49",
                                                    "type": "",
                                                    "value": "31"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "not",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "6825:3:49"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "6825:7:49"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "6800:3:49"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "6800:33:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "6786:6:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6786:48:49"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "6786:48:49"
                                    },
                                    {
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "6851:25:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "srcPtr_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "6867:8:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mload",
                                          "nodeType": "YulIdentifier",
                                          "src": "6861:5:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6861:15:49"
                                      },
                                      "variables": [
                                        {
                                          "name": "_4",
                                          "nodeType": "YulTypedName",
                                          "src": "6855:2:49",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "6893:19:49",
                                      "value": {
                                        "name": "tail_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "6906:6:49"
                                      },
                                      "variables": [
                                        {
                                          "name": "pos_2",
                                          "nodeType": "YulTypedName",
                                          "src": "6897:5:49",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "6929:25:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "_4",
                                            "nodeType": "YulIdentifier",
                                            "src": "6951:2:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mload",
                                          "nodeType": "YulIdentifier",
                                          "src": "6945:5:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6945:9:49"
                                      },
                                      "variables": [
                                        {
                                          "name": "length_2",
                                          "nodeType": "YulTypedName",
                                          "src": "6933:8:49",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "tail_3",
                                            "nodeType": "YulIdentifier",
                                            "src": "6978:6:49"
                                          },
                                          {
                                            "name": "length_2",
                                            "nodeType": "YulIdentifier",
                                            "src": "6986:8:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "6971:6:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6971:24:49"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "6971:24:49"
                                    },
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "7012:24:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "tail_3",
                                            "nodeType": "YulIdentifier",
                                            "src": "7025:6:49"
                                          },
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "7033:2:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "7021:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7021:15:49"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "pos_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "7012:5:49"
                                        }
                                      ]
                                    },
                                    {
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "7053:27:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "_4",
                                            "nodeType": "YulIdentifier",
                                            "src": "7073:2:49"
                                          },
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "7077:2:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "7069:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7069:11:49"
                                      },
                                      "variables": [
                                        {
                                          "name": "srcPtr_2",
                                          "nodeType": "YulTypedName",
                                          "src": "7057:8:49",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "7097:12:49",
                                      "value": {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7108:1:49",
                                        "type": "",
                                        "value": "0"
                                      },
                                      "variables": [
                                        {
                                          "name": "i_2",
                                          "nodeType": "YulTypedName",
                                          "src": "7101:3:49",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "body": {
                                        "nodeType": "YulBlock",
                                        "src": "7191:164:49",
                                        "statements": [
                                          {
                                            "expression": {
                                              "arguments": [
                                                {
                                                  "name": "pos_2",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "7220:5:49"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "name": "srcPtr_2",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "7233:8:49"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "mload",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "7227:5:49"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "7227:15:49"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "mstore",
                                                "nodeType": "YulIdentifier",
                                                "src": "7213:6:49"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "7213:30:49"
                                            },
                                            "nodeType": "YulExpressionStatement",
                                            "src": "7213:30:49"
                                          },
                                          {
                                            "nodeType": "YulAssignment",
                                            "src": "7264:23:49",
                                            "value": {
                                              "arguments": [
                                                {
                                                  "name": "pos_2",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "7277:5:49"
                                                },
                                                {
                                                  "name": "_1",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "7284:2:49"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "7273:3:49"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "7273:14:49"
                                            },
                                            "variableNames": [
                                              {
                                                "name": "pos_2",
                                                "nodeType": "YulIdentifier",
                                                "src": "7264:5:49"
                                              }
                                            ]
                                          },
                                          {
                                            "nodeType": "YulAssignment",
                                            "src": "7308:29:49",
                                            "value": {
                                              "arguments": [
                                                {
                                                  "name": "srcPtr_2",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "7324:8:49"
                                                },
                                                {
                                                  "name": "_1",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "7334:2:49"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "7320:3:49"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "7320:17:49"
                                            },
                                            "variableNames": [
                                              {
                                                "name": "srcPtr_2",
                                                "nodeType": "YulIdentifier",
                                                "src": "7308:8:49"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      "condition": {
                                        "arguments": [
                                          {
                                            "name": "i_2",
                                            "nodeType": "YulIdentifier",
                                            "src": "7137:3:49"
                                          },
                                          {
                                            "name": "length_2",
                                            "nodeType": "YulIdentifier",
                                            "src": "7142:8:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "lt",
                                          "nodeType": "YulIdentifier",
                                          "src": "7134:2:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7134:17:49"
                                      },
                                      "nodeType": "YulForLoop",
                                      "post": {
                                        "nodeType": "YulBlock",
                                        "src": "7152:22:49",
                                        "statements": [
                                          {
                                            "nodeType": "YulAssignment",
                                            "src": "7154:18:49",
                                            "value": {
                                              "arguments": [
                                                {
                                                  "name": "i_2",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "7165:3:49"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "7170:1:49",
                                                  "type": "",
                                                  "value": "1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "7161:3:49"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "7161:11:49"
                                            },
                                            "variableNames": [
                                              {
                                                "name": "i_2",
                                                "nodeType": "YulIdentifier",
                                                "src": "7154:3:49"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      "pre": {
                                        "nodeType": "YulBlock",
                                        "src": "7130:3:49",
                                        "statements": []
                                      },
                                      "src": "7126:229:49"
                                    },
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "7372:15:49",
                                      "value": {
                                        "name": "pos_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "7382:5:49"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "tail_3",
                                          "nodeType": "YulIdentifier",
                                          "src": "7372:6:49"
                                        }
                                      ]
                                    },
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "7404:29:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "srcPtr_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "7420:8:49"
                                          },
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "7430:2:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "7416:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7416:17:49"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "srcPtr_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "7404:8:49"
                                        }
                                      ]
                                    },
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "7450:23:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "pos_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "7463:5:49"
                                          },
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "7470:2:49"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "7459:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7459:14:49"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "pos_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "7450:5:49"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "i_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "6718:3:49"
                                    },
                                    {
                                      "name": "length_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "6723:8:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "6715:2:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6715:17:49"
                                },
                                "nodeType": "YulForLoop",
                                "post": {
                                  "nodeType": "YulBlock",
                                  "src": "6733:22:49",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "6735:18:49",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "i_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "6746:3:49"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6751:1:49",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "6742:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6742:11:49"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "i_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "6735:3:49"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "pre": {
                                  "nodeType": "YulBlock",
                                  "src": "6711:3:49",
                                  "statements": []
                                },
                                "src": "6707:780:49"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "7500:16:49",
                                "value": {
                                  "name": "tail_3",
                                  "nodeType": "YulIdentifier",
                                  "src": "7510:6:49"
                                },
                                "variableNames": [
                                  {
                                    "name": "tail_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "7500:6:49"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "7529:25:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "7543:6:49"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7551:2:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "7539:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7539:15:49"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "7529:6:49"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "7567:19:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "7578:3:49"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7583:2:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "7574:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7574:12:49"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "7567:3:49"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "6282:1:49"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "6285:6:49"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "6279:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6279:13:49"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "6293:18:49",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "6295:14:49",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "6304:1:49"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6307:1:49",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "6300:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6300:9:49"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "6295:1:49"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "6275:3:49",
                            "statements": []
                          },
                          "src": "6271:1325:49"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7605:14:49",
                          "value": {
                            "name": "tail_2",
                            "nodeType": "YulIdentifier",
                            "src": "7613:6:49"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7605:4:49"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_array$_t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr_$dyn_memory_ptr__to_t_array$_t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr_$dyn_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5871:9:49",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5882:6:49",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5893:4:49",
                        "type": ""
                      }
                    ],
                    "src": "5651:1974:49"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7662:95:49",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7679:1:49",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7686:3:49",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7691:10:49",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "7682:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7682:20:49"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7672:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7672:31:49"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7672:31:49"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7719:1:49",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7722:4:49",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7712:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7712:15:49"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7712:15:49"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7743:1:49",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7746:4:49",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "7736:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7736:15:49"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7736:15:49"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "7630:127:49"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7891:175:49",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7901:26:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7913:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7924:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7909:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7909:18:49"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7901:4:49"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7936:29:49",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7954:3:49",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7959:1:49",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "7950:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7950:11:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7963:1:49",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "7946:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7946:19:49"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "7940:2:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7981:9:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7996:6:49"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8004:2:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7992:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7992:15:49"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7974:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7974:34:49"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7974:34:49"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8028:9:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8039:2:49",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8024:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8024:18:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8048:6:49"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8056:2:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8044:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8044:15:49"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8017:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8017:43:49"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8017:43:49"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint160_t_address__to_t_uint160_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7852:9:49",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7863:6:49",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7871:6:49",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7882:4:49",
                        "type": ""
                      }
                    ],
                    "src": "7762:304:49"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8118:261:49",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8128:29:49",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8146:3:49",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8151:1:49",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "8142:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8142:11:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8155:1:49",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "8138:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8138:19:49"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "8132:2:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8166:29:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "8185:5:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8192:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "8181:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8181:14:49"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "8170:7:49",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8231:111:49",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8252:1:49",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "8259:3:49",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "8264:10:49",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "8255:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8255:20:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "8245:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8245:31:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8245:31:49"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8296:1:49",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8299:4:49",
                                      "type": "",
                                      "value": "0x11"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "8289:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8289:15:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8289:15:49"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8324:1:49",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8327:4:49",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8317:6:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8317:15:49"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8317:15:49"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "8210:7:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8219:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "8207:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8207:15:49"
                          },
                          "nodeType": "YulIf",
                          "src": "8204:138:49"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8351:22:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "8362:7:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8371:1:49",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8358:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8358:15:49"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "8351:3:49"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint160",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "8100:5:49",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "8110:3:49",
                        "type": ""
                      }
                    ],
                    "src": "8071:308:49"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8507:161:49",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8517:26:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8529:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8540:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8525:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8525:18:49"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8517:4:49"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8559:9:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "8574:6:49"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "8590:3:49",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "8595:1:49",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "8586:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "8586:11:49"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8599:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "8582:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8582:19:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8570:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8570:32:49"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8552:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8552:51:49"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8552:51:49"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8623:9:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8634:2:49",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8619:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8619:18:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "8653:6:49"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "8646:6:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8646:14:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "8639:6:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8639:22:49"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8612:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8612:50:49"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8612:50:49"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_bool__to_t_address_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8468:9:49",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8479:6:49",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8487:6:49",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8498:4:49",
                        "type": ""
                      }
                    ],
                    "src": "8384:284:49"
                  }
                ]
              },
              "contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_address_dyn(length) -> size\n    {\n        if gt(length, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_address(value)\n    }\n    function abi_decode_array_array_array_uint256_dyn_dyn_dyn_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, 0x20)\n        let srcEnd := add(add(offset, shl(5, _1)), 0x20)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, 0x20)\n        for { } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n            let innerOffset := mload(src)\n            if gt(innerOffset, sub(shl(64, 1), 1)) { revert(0, 0) }\n            let _2 := add(offset, innerOffset)\n            if iszero(slt(add(_2, 63), end)) { revert(0, 0) }\n            let _3 := mload(add(_2, 0x20))\n            let dst_2 := allocate_memory(array_allocation_size_array_address_dyn(_3))\n            let dst_3 := dst_2\n            mstore(dst_2, _3)\n            dst_2 := add(dst_2, 0x20)\n            let srcEnd_1 := add(add(_2, shl(5, _3)), 64)\n            if gt(srcEnd_1, end) { revert(0, 0) }\n            let src_1 := add(_2, 64)\n            for { } lt(src_1, srcEnd_1) { src_1 := add(src_1, 0x20) }\n            {\n                let innerOffset_1 := mload(src_1)\n                if gt(innerOffset_1, sub(shl(64, 1), 1)) { revert(0, 0) }\n                let _4 := add(_2, innerOffset_1)\n                if iszero(slt(add(_4, 95), end)) { revert(0, 0) }\n                let _5 := mload(add(_4, 64))\n                let dst_4 := allocate_memory(array_allocation_size_array_address_dyn(_5))\n                let dst_5 := dst_4\n                mstore(dst_4, _5)\n                dst_4 := add(dst_4, 0x20)\n                let srcEnd_2 := add(add(_4, shl(5, _5)), 96)\n                if gt(srcEnd_2, end) { revert(0, 0) }\n                let src_2 := add(_4, 96)\n                for { } lt(src_2, srcEnd_2) { src_2 := add(src_2, 0x20) }\n                {\n                    mstore(dst_4, mload(src_2))\n                    dst_4 := add(dst_4, 0x20)\n                }\n                mstore(dst_2, dst_5)\n                dst_2 := add(dst_2, 0x20)\n            }\n            mstore(dst, dst_3)\n            dst := add(dst, 0x20)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_bytes32t_array$_t_address_$dyn_memory_ptrt_addresst_array$_t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := mload(headStart)\n        let _1 := 32\n        let offset := mload(add(headStart, _1))\n        let _2 := sub(shl(64, 1), 1)\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := mload(_3)\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_4))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_3, shl(5, _4)), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            let value := mload(src)\n            validator_revert_address(value)\n            mstore(dst, value)\n            dst := add(dst, _1)\n        }\n        value1 := dst_1\n        value2 := abi_decode_address_fromMemory(add(headStart, 64))\n        let offset_1 := mload(add(headStart, 96))\n        if gt(offset_1, _2) { revert(0, 0) }\n        value3 := abi_decode_array_array_array_uint256_dyn_dyn_dyn_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_address__to_t_array$_t_address_$dyn_memory_ptr_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        let tail_1 := add(headStart, 64)\n        mstore(headStart, 64)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 96)\n        let _1 := 0x20\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n        mstore(add(headStart, _1), and(value1, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_contract$_IDotnuggV1StorageProxy_$22277_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_array$_t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr_$dyn_memory_ptr__to_t_array$_t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let _2 := 5\n        let tail_2 := add(add(headStart, shl(_2, length)), 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            let _3 := mload(srcPtr)\n            let pos_1 := tail_2\n            let length_1 := mload(_3)\n            mstore(tail_2, length_1)\n            pos_1 := add(tail_2, _1)\n            let tail_3 := add(add(tail_2, shl(_2, length_1)), _1)\n            let srcPtr_1 := add(_3, _1)\n            let i_1 := 0\n            for { } lt(i_1, length_1) { i_1 := add(i_1, 1) }\n            {\n                mstore(pos_1, add(sub(tail_3, tail_2), not(31)))\n                let _4 := mload(srcPtr_1)\n                let pos_2 := tail_3\n                let length_2 := mload(_4)\n                mstore(tail_3, length_2)\n                pos_2 := add(tail_3, _1)\n                let srcPtr_2 := add(_4, _1)\n                let i_2 := 0\n                for { } lt(i_2, length_2) { i_2 := add(i_2, 1) }\n                {\n                    mstore(pos_2, mload(srcPtr_2))\n                    pos_2 := add(pos_2, _1)\n                    srcPtr_2 := add(srcPtr_2, _1)\n                }\n                tail_3 := pos_2\n                srcPtr_1 := add(srcPtr_1, _1)\n                pos_1 := add(pos_1, _1)\n            }\n            tail_2 := tail_3\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_uint160_t_address__to_t_uint160_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function increment_t_uint160(value) -> ret\n    {\n        let _1 := sub(shl(160, 1), 1)\n        let value_1 := and(value, _1)\n        if eq(value_1, _1)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value_1, 1)\n    }\n    function abi_encode_tuple_t_address_t_bool__to_t_address_t_bool__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n    }\n}",
              "id": 49,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x676B CODESIZE SUB DUP1 PUSH3 0x676B DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x4C7 JUMP JUMPDEST DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH3 0x45 SWAP1 PUSH3 0x29E JUMP JUMPDEST PUSH3 0x52 SWAP3 SWAP2 SWAP1 PUSH3 0x5B7 JUMP JUMPDEST DUP2 SWAP1 PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE2 SWAP1 POP DUP1 ISZERO DUP1 ISZERO PUSH3 0x73 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0xB91B6CBF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH4 0xB91B6CBF SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xDF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x105 SWAP2 SWAP1 PUSH3 0x616 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x87AE7031 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x132 SWAP2 SWAP1 PUSH3 0x63D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x14D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x162 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 SWAP3 POP POP POP JUMPDEST PUSH1 0xC8 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT ISZERO PUSH3 0x22D JUMPI PUSH1 0x0 DUP1 SLOAD DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0xBEACE31F SWAP2 DUP5 SWAP2 DUP9 SWAP2 PUSH3 0x1A8 JUMPI PUSH3 0x1A8 PUSH3 0x70D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x1E3 SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x213 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 DUP1 PUSH3 0x224 SWAP1 PUSH3 0x723 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x16A JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x9C9C8B5 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1393916A SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x27B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x290 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP PUSH3 0x759 JUMP JUMPDEST PUSH2 0x5F58 DUP1 PUSH3 0x813 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x2ED JUMPI PUSH3 0x2ED PUSH3 0x2AC JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH3 0x311 JUMPI PUSH3 0x311 PUSH3 0x2AC JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x331 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST DUP1 MLOAD PUSH3 0x341 DUP2 PUSH3 0x31B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x358 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x36F PUSH3 0x369 DUP3 PUSH3 0x2F5 JUMP JUMPDEST PUSH3 0x2C2 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP4 PUSH1 0x5 SHL DUP7 ADD ADD SWAP3 POP DUP6 DUP4 GT ISZERO PUSH3 0x392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP6 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x4BD JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x3B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH1 0x3F DUP2 ADD DUP9 SGT PUSH3 0x3C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH3 0x3DD PUSH3 0x369 DUP3 PUSH3 0x2F5 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD PUSH1 0x40 ADD SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 DUP11 DUP4 GT ISZERO PUSH3 0x3FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP5 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x4A6 JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x424 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x5F DUP2 ADD DUP14 SGT PUSH3 0x436 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH3 0x44A PUSH3 0x369 DUP3 PUSH3 0x2F5 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD PUSH1 0x60 ADD SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 DUP16 DUP4 GT ISZERO PUSH3 0x46C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP5 ADD SWAP4 POP JUMPDEST DUP3 DUP5 LT ISZERO PUSH3 0x490 JUMPI DUP4 MLOAD DUP3 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH3 0x473 JUMP JUMPDEST DUP7 MSTORE POP POP PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP1 POP PUSH3 0x404 JUMP JUMPDEST POP DUP7 MSTORE POP POP PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP1 POP PUSH3 0x397 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x4DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD PUSH1 0x20 DUP1 DUP8 ADD MLOAD SWAP2 SWAP6 POP SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x500 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x515 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x526 PUSH3 0x369 DUP3 PUSH3 0x2F5 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP12 DUP4 GT ISZERO PUSH3 0x546 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH3 0x571 JUMPI DUP5 MLOAD PUSH3 0x561 DUP2 PUSH3 0x31B JUMP JUMPDEST DUP3 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP1 DUP6 ADD SWAP1 PUSH3 0x54B JUMP JUMPDEST SWAP8 POP PUSH3 0x584 SWAP2 POP POP PUSH1 0x40 DUP10 ADD PUSH3 0x334 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD MLOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH3 0x59B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH3 0x5AB DUP8 DUP3 DUP9 ADD PUSH3 0x346 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP4 MLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x20 SWAP1 PUSH1 0x60 DUP5 ADD SWAP1 DUP3 DUP8 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x5FB JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x5D4 JUMP JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x629 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x636 DUP2 PUSH3 0x31B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x5 SWAP3 POP PUSH1 0x40 DUP2 DUP5 SHL DUP8 ADD ADD DUP5 DUP9 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x6FF JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP1 DUP6 MSTORE SWAP1 DUP9 ADD SWAP1 DUP9 DUP6 ADD SWAP1 DUP1 DUP10 SHL DUP7 ADD DUP11 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x6E8 JUMPI DUP8 DUP3 SUB PUSH1 0x1F NOT ADD DUP5 MSTORE DUP5 MLOAD DUP1 MLOAD DUP1 DUP5 MSTORE SWAP1 DUP14 ADD SWAP1 DUP14 DUP5 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x6D2 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP16 ADD SWAP3 SWAP2 DUP16 ADD SWAP2 PUSH1 0x1 ADD PUSH3 0x6B4 JUMP JUMPDEST POP POP SWAP6 DUP14 ADD SWAP6 SWAP5 DUP14 ADD SWAP5 SWAP3 POP POP PUSH1 0x1 ADD PUSH3 0x690 JUMP JUMPDEST POP SWAP8 DUP11 ADD SWAP8 SWAP6 POP POP POP SWAP2 DUP8 ADD SWAP2 POP PUSH1 0x1 ADD PUSH3 0x665 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND DUP1 DUP3 EQ ISZERO PUSH3 0x74F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xAB DUP1 PUSH3 0x768 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xF55A30EE EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x4C SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0x26 0x4B 0xD9 0xC 0xF8 0xCB PUSH9 0xCFBDFFEE6D14CA168C 0xEC 0xCF 0xBC 0x2D PUSH26 0x6B75A6141ACBF7FF033464736F6C6343000809003360A0604052 CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x5F58 CODESIZE SUB DUP1 PUSH3 0x5F58 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x29D JUMP JUMPDEST NUMBER PUSH1 0x80 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x45 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xBB8 DUP3 DUP3 ADD MSTORE MLOAD DUP3 SWAP2 DUP5 SWAP2 PUSH32 0x88EA8C578FE7AED8AB10316120DA68D9A7D194322DF00CF43852EAD6E4B55EAF SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH3 0x15D JUMPI PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0xA6 JUMPI PUSH3 0xA6 PUSH3 0x383 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH3 0xFA JUMPI PUSH3 0xFA PUSH3 0x383 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xE95AEC380CAE16330D146D5499EF7DB6F3657E477104A733E771BC09E500D986 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH3 0x140 SWAP2 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH3 0x154 DUP2 PUSH3 0x399 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x81 JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x1A0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x118E8D PUSH1 0xEA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0x3547401 PUSH1 0xE3 SHL DUP2 MSTORE SWAP1 MLOAD PUSH4 0x1AA3A008 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x20C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x232 SWAP2 SWAP1 PUSH3 0x3C3 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0x3EA SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x288 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST DUP1 MLOAD PUSH3 0x298 DUP2 PUSH3 0x272 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x2B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x2C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x2DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH3 0x2F5 JUMPI PUSH3 0x2F5 PUSH3 0x25C JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP7 DUP3 GT OR ISZERO PUSH3 0x31D JUMPI PUSH3 0x31D PUSH3 0x25C JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP3 DUP4 MSTORE DUP2 DUP4 ADD SWAP4 POP DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP10 DUP5 GT ISZERO PUSH3 0x33C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH3 0x365 JUMPI PUSH3 0x355 DUP7 PUSH3 0x28B JUMP JUMPDEST DUP6 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP4 DUP3 ADD SWAP4 PUSH3 0x341 JUMP JUMPDEST SWAP7 POP PUSH3 0x376 SWAP1 POP DUP8 DUP3 ADD PUSH3 0x28B JUMP JUMPDEST SWAP5 POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH3 0x3BC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x3D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x3E3 DUP2 PUSH3 0x272 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x5B21 PUSH3 0x437 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x74A ADD MSTORE DUP2 DUP2 PUSH2 0x951 ADD MSTORE DUP2 DUP2 PUSH2 0xD53 ADD MSTORE DUP2 DUP2 PUSH2 0x162D ADD MSTORE DUP2 DUP2 PUSH2 0x29D7 ADD MSTORE DUP2 DUP2 PUSH2 0x484A ADD MSTORE DUP2 DUP2 PUSH2 0x4AB1 ADD MSTORE PUSH2 0x4CB9 ADD MSTORE PUSH2 0x5B21 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x900CF0CF GT PUSH2 0x1DC JUMPI DUP1 PUSH4 0xB91B6CBF GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xE985E9C5 GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xF71D0904 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xF71D0904 EQ PUSH2 0xB3C JUMPI DUP1 PUSH4 0xFB306B0F EQ PUSH2 0xB51 JUMPI DUP1 PUSH4 0xFB774EB8 EQ PUSH2 0xB71 JUMPI DUP1 PUSH4 0xFCA840AE EQ PUSH2 0xB91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0xAD2 JUMPI DUP1 PUSH4 0xEE0CA989 EQ PUSH2 0xAF2 JUMPI DUP1 PUSH4 0xF2589A63 EQ PUSH2 0xB07 JUMPI DUP1 PUSH4 0xF666B9A6 EQ PUSH2 0xB27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC5C8BEEB GT PUSH2 0xDC JUMPI DUP1 PUSH4 0xC5C8BEEB EQ PUSH2 0xA07 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0xA27 JUMPI DUP1 PUSH4 0xD7DC6819 EQ PUSH2 0xA47 JUMPI DUP1 PUSH4 0xE1623752 EQ PUSH2 0xAB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB91B6CBF EQ PUSH2 0x9C1 JUMPI DUP1 PUSH4 0xBEACE31F EQ PUSH2 0x9E1 JUMPI DUP1 PUSH4 0xC06C822F EQ PUSH2 0x9F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x998A0491 GT PUSH2 0x17A JUMPI DUP1 PUSH4 0xA7F0B3DE GT PUSH2 0x149 JUMPI DUP1 PUSH4 0xA7F0B3DE EQ PUSH2 0x93F JUMPI DUP1 PUSH4 0xAFCDE308 EQ PUSH2 0x973 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x993 JUMPI DUP1 PUSH4 0xB88EA014 EQ PUSH2 0x9A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x998A0491 EQ PUSH2 0x8A0 JUMPI DUP1 PUSH4 0x9B917352 EQ PUSH2 0x8D2 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x8FF JUMPI DUP1 PUSH4 0xA4D0B441 EQ PUSH2 0x91F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9531B94D GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x9531B94D EQ PUSH2 0x7C9 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x7DE JUMPI DUP1 PUSH4 0x96D64879 EQ PUSH2 0x824 JUMPI DUP1 PUSH4 0x99081A26 EQ PUSH2 0x854 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x900CF0CF EQ PUSH2 0x732 JUMPI DUP1 PUSH4 0x90A577EF EQ PUSH2 0x77B JUMPI DUP1 PUSH4 0x939F4130 EQ PUSH2 0x7A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5558E4E2 GT PUSH2 0x2C1 JUMPI DUP1 PUSH4 0x70A08231 GT PUSH2 0x25F JUMPI DUP1 PUSH4 0x7CD07E47 GT PUSH2 0x22E JUMPI DUP1 PUSH4 0x7CD07E47 EQ PUSH2 0x6B2 JUMPI DUP1 PUSH4 0x81DCEBCF EQ PUSH2 0x6D2 JUMPI DUP1 PUSH4 0x8307FA5B EQ PUSH2 0x6F2 JUMPI DUP1 PUSH4 0x8E3B3A6B EQ PUSH2 0x712 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x62C JUMPI DUP1 PUSH4 0x72B1C758 EQ PUSH2 0x64D JUMPI DUP1 PUSH4 0x750656F6 EQ PUSH2 0x67F JUMPI DUP1 PUSH4 0x76DF8314 EQ PUSH2 0x692 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x608CCEB0 GT PUSH2 0x29B JUMPI DUP1 PUSH4 0x608CCEB0 EQ PUSH2 0x5AC JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x5CC JUMPI DUP1 PUSH4 0x64D350BD EQ PUSH2 0x5EC JUMPI DUP1 PUSH4 0x665557C8 EQ PUSH2 0x60C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5558E4E2 EQ PUSH2 0x564 JUMPI DUP1 PUSH4 0x570F67AD EQ PUSH2 0x584 JUMPI DUP1 PUSH4 0x58FF027F EQ PUSH2 0x599 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1056B9D5 GT PUSH2 0x32E JUMPI DUP1 PUSH4 0x23B872DD GT PUSH2 0x308 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x500 JUMPI DUP1 PUSH4 0x23CF3118 EQ PUSH2 0x50E JUMPI DUP1 PUSH4 0x3853D8A1 EQ PUSH2 0x52E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x500 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1056B9D5 EQ PUSH2 0x4AA JUMPI DUP1 PUSH4 0x1393916A EQ PUSH2 0x4BD JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x4DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 GT PUSH2 0x36A JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x3FD JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x44C JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x484 JUMPI DUP1 PUSH4 0x99AFA17 EQ PUSH2 0x497 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0x251F62C EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0x6BD17D5 EQ PUSH2 0x3E8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B1 PUSH2 0x3AC CALLDATASIZE PUSH1 0x4 PUSH2 0x4E15 JUMP JUMPDEST PUSH2 0xBB1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E6 PUSH2 0x3E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E6C JUMP JUMPDEST PUSH2 0xCE2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E6 PUSH2 0xE2C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x16 DUP2 MSTORE PUSH32 0x4E7567672046756E6769626C6520546F6B656E20563100000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3BD SWAP2 SWAP1 PUSH2 0x4F03 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x458 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x46C PUSH2 0x467 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F16 JUMP JUMPDEST PUSH2 0xE38 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3BD JUMP JUMPDEST PUSH2 0x3E6 PUSH2 0x492 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F2F JUMP JUMPDEST PUSH2 0xE4B JUMP JUMPDEST PUSH2 0x3E6 PUSH2 0x4A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E6C JUMP JUMPDEST PUSH2 0xF24 JUMP JUMPDEST PUSH2 0x3E6 PUSH2 0x4B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F6D JUMP JUMPDEST PUSH2 0x11A5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E6 PUSH2 0x4D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FB4 JUMP JUMPDEST PUSH2 0x1409 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F2 PUSH2 0x148E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3BD JUMP JUMPDEST PUSH2 0x3E6 PUSH2 0x38C CALLDATASIZE PUSH1 0x4 PUSH2 0x4FF2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E6 PUSH2 0x529 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E6C JUMP JUMPDEST PUSH2 0x14A7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x547 PUSH5 0x2540BE400 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3BD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x570 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x46C PUSH2 0x57F CALLDATASIZE PUSH1 0x4 PUSH2 0x4F16 JUMP JUMPDEST PUSH2 0x151C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x590 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E6 PUSH2 0x154E JUMP JUMPDEST PUSH2 0x3E6 PUSH2 0x5A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E6C JUMP JUMPDEST PUSH2 0x15C8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x547 PUSH2 0x5C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E6C JUMP JUMPDEST PUSH2 0x17D0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x46C PUSH2 0x5E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F16 JUMP JUMPDEST PUSH2 0x17E6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B1 PUSH2 0x607 CALLDATASIZE PUSH1 0x4 PUSH2 0x5044 JUMP JUMPDEST PUSH2 0x17F4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x618 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E6 PUSH2 0x627 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E6C JUMP JUMPDEST PUSH2 0x18D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x638 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F2 PUSH2 0x647 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E6C JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x659 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x66D PUSH2 0x668 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E6C JUMP JUMPDEST PUSH2 0x197A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3BD SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x512F JUMP JUMPDEST PUSH2 0x3E6 PUSH2 0x68D CALLDATASIZE PUSH1 0x4 PUSH2 0x4E6C JUMP JUMPDEST PUSH2 0x1D6A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x69E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E6 PUSH2 0x6AD CALLDATASIZE PUSH1 0x4 PUSH2 0x51A3 JUMP JUMPDEST PUSH2 0x1E54 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xA SLOAD PUSH2 0x46C SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E6 PUSH2 0x6ED CALLDATASIZE PUSH1 0x4 PUSH2 0x4E6C JUMP JUMPDEST PUSH2 0x1E99 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E6 PUSH2 0x70D CALLDATASIZE PUSH1 0x4 PUSH2 0x51DF JUMP JUMPDEST PUSH2 0x2014 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x71E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 SLOAD PUSH2 0x46C SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xFFFFFF PUSH1 0x45 PUSH32 0x0 NUMBER SUB DIV PUSH2 0xBB8 ADD AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3BD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x787 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x790 PUSH2 0x20E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3BD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E6 PUSH2 0x7C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E6C JUMP JUMPDEST PUSH2 0x20EF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x547 PUSH2 0x2172 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x6 DUP2 MSTORE PUSH32 0x4E55474746540000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x43F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x830 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B1 PUSH2 0x83F CALLDATASIZE PUSH1 0x4 PUSH2 0x4E6C JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x860 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x874 PUSH2 0x86F CALLDATASIZE PUSH1 0x4 PUSH2 0x5204 JUMP JUMPDEST PUSH2 0x2188 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 ISZERO ISZERO DUP5 MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x3BD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8C0 PUSH2 0x8BB CALLDATASIZE PUSH1 0x4 PUSH2 0x5232 JUMP JUMPDEST PUSH2 0x22A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3BD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8F2 PUSH2 0x8ED CALLDATASIZE PUSH1 0x4 PUSH2 0x4F16 JUMP JUMPDEST PUSH2 0x22B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3BD SWAP2 SWAP1 PUSH2 0x524D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x90B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E6 PUSH2 0x91A CALLDATASIZE PUSH1 0x4 PUSH2 0x4FB4 JUMP JUMPDEST PUSH2 0x2643 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x92B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E6 PUSH2 0x93A CALLDATASIZE PUSH1 0x4 PUSH2 0x5498 JUMP JUMPDEST PUSH2 0x26CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x94B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F2 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x97F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E6 PUSH2 0x98E CALLDATASIZE PUSH1 0x4 PUSH2 0x54F8 JUMP JUMPDEST PUSH2 0x274A JUMP JUMPDEST PUSH2 0x3E6 PUSH2 0x38C CALLDATASIZE PUSH1 0x4 PUSH2 0x5548 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F2 PUSH2 0x9BC CALLDATASIZE PUSH1 0x4 PUSH2 0x4E6C JUMP JUMPDEST PUSH2 0x27BD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x5 SLOAD PUSH2 0x46C SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x3E6 PUSH2 0x9EF CALLDATASIZE PUSH1 0x4 PUSH2 0x5204 JUMP JUMPDEST PUSH2 0x2839 JUMP JUMPDEST PUSH2 0x3E6 PUSH2 0xA02 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E6C JUMP JUMPDEST PUSH2 0x2918 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E6 PUSH2 0xA22 CALLDATASIZE PUSH1 0x4 PUSH2 0x55E4 JUMP JUMPDEST PUSH2 0x2A81 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x43F PUSH2 0xA42 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F16 JUMP JUMPDEST PUSH2 0x2C17 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA67 PUSH2 0xA62 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E6C JUMP JUMPDEST PUSH2 0x2D4F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND DUP2 MSTORE SWAP5 DUP7 AND PUSH1 0x20 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP5 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH3 0xFFFFFF AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0x3BD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xABE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E6 PUSH2 0xACD CALLDATASIZE PUSH1 0x4 PUSH2 0x5610 JUMP JUMPDEST PUSH2 0x2E54 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xADE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B1 PUSH2 0xAED CALLDATASIZE PUSH1 0x4 PUSH2 0x5204 JUMP JUMPDEST PUSH2 0x2F17 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x547 PUSH2 0x2F23 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x547 PUSH2 0xB22 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E6C JUMP JUMPDEST PUSH2 0x2F2E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x547 PUSH2 0x2F44 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x547 PUSH2 0x2F52 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E6 PUSH2 0xB6C CALLDATASIZE PUSH1 0x4 PUSH2 0x5654 JUMP JUMPDEST PUSH2 0x2F5F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E6 PUSH2 0xB8C CALLDATASIZE PUSH1 0x4 PUSH2 0x4F6D JUMP JUMPDEST PUSH2 0x2F6C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E6 PUSH2 0xBAC CALLDATASIZE PUSH1 0x4 PUSH2 0x56CF JUMP JUMPDEST PUSH2 0x3130 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x46594F5000000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0xC44 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0xC90 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0xCDC JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH2 0xCEC DUP3 PUSH2 0x3279 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xD47 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C3A300000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xD86 PUSH2 0xBB8 PUSH1 0x45 PUSH32 0x0 NUMBER SUB DIV ADD CALLER PUSH2 0xD7F PUSH2 0x2F52 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE SWAP1 POP PUSH2 0xDAC DUP3 PUSH2 0x3349 JUMP JUMPDEST PUSH4 0x3B9ACA00 PUSH1 0xA0 DUP3 SWAP1 SHR PUSH9 0x3FFFFFFFFFFFFFFFFF AND MUL PUSH2 0xDDA CALLER PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x341A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH32 0x329014C0969CFE0727BC4E8B103AA6EE8CBCFA982E51A35292749C83A79C2B9E SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0xE36 CALLER SELFBALANCE PUSH2 0x341A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCDC PUSH2 0xE46 DUP4 PUSH2 0x3475 JUMP JUMPDEST PUSH2 0x348F JUMP JUMPDEST CALLER PUSH2 0xE5D PUSH2 0xE58 DUP4 PUSH2 0x3475 JUMP JUMPDEST PUSH2 0x3279 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xEB3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5A3A310000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 SWAP3 CALLER SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xF31 DUP4 CALLER PUSH2 0x3505 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH3 0xFFFFFF AND EQ DUP1 ISZERO PUSH2 0xF57 JUMPI POP DUP2 MLOAD ISZERO JUMPDEST ISZERO PUSH2 0x1009 JUMPI PUSH5 0x2540BE400 CALLVALUE LT ISZERO PUSH2 0xFB1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x533A310000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD ISZERO PUSH2 0xFC3 JUMPI PUSH2 0xFC3 PUSH2 0x570B JUMP JUMPDEST PUSH2 0xFCC CALLVALUE PUSH2 0x3551 JUMP JUMPDEST SWAP1 POP PUSH2 0xFE3 DUP3 PUSH1 0x40 ADD MLOAD DUP4 PUSH1 0x60 ADD MLOAD DUP4 PUSH1 0x0 PUSH2 0x32FD JUMP JUMPDEST DUP4 SSTORE PUSH2 0xFEF PUSH1 0x0 PUSH2 0x356C JUMP JUMPDEST PUSH2 0xFF8 DUP5 PUSH2 0x36A6 JUMP JUMPDEST PUSH2 0x1004 PUSH1 0x0 ADDRESS DUP7 PUSH2 0x3794 JUMP JUMPDEST PUSH2 0x114D JUMP JUMPDEST DUP2 MLOAD PUSH2 0x1057 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x533A340000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD ISZERO PUSH2 0x1125 JUMPI DUP2 PUSH1 0x40 ADD MLOAD PUSH3 0xFFFFFF AND PUSH2 0x1078 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x37E3 JUMP JUMPDEST PUSH3 0xFFFFFF AND LT ISZERO PUSH2 0x10CB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x533A520000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0xFF SHR PUSH1 0x1 EQ ISZERO PUSH2 0x1125 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD3E SWAP1 PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x4 SWAP1 DUP3 ADD MSTORE PUSH32 0x4E4F504500000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0xFF SHR PUSH1 0x1 EQ PUSH2 0x1140 JUMPI PUSH2 0x113B DUP4 DUP4 PUSH2 0x37F4 JUMP JUMPDEST PUSH2 0x114A JUMP JUMPDEST PUSH2 0x114A DUP4 DUP4 PUSH2 0x3921 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH32 0x972A7CF16C1AEEC2CE89FF255260049C0C525F15B74116B8FE61993CDA32F99A SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST CALLER PUSH2 0x11AF DUP5 PUSH2 0x3279 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1205 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x533A360000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1213 DUP5 DUP5 DUP8 PUSH2 0x3AD9 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0x1266 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x533A530000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD ISZERO PUSH2 0x1334 JUMPI DUP1 PUSH1 0x40 ADD MLOAD PUSH3 0xFFFFFF AND PUSH2 0x1287 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x37E3 JUMP JUMPDEST PUSH3 0xFFFFFF AND LT ISZERO PUSH2 0x12DA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x533A370000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0xFF SHR PUSH1 0x1 EQ ISZERO PUSH2 0x1334 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD3E SWAP1 PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x4 SWAP1 DUP3 ADD MSTORE PUSH32 0x4E4F504500000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x0 EQ DUP1 ISZERO PUSH2 0x134E JUMPI POP DUP2 MLOAD PUSH1 0xFF SHR PUSH1 0x1 EQ JUMPDEST PUSH2 0x1361 JUMPI PUSH2 0x135C DUP4 DUP4 PUSH2 0x37F4 JUMP JUMPDEST PUSH2 0x136B JUMP JUMPDEST PUSH2 0x136B DUP4 DUP4 PUSH2 0x3921 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0xA0 DUP6 SWAP1 SHL PUSH22 0xFFFF0000000000000000000000000000000000000000 AND OR PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP2 MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH22 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH32 0x33060AF8AE34FC0F32BE3607DBC145E3272347F98EDE9556CCB9374FD0AB43D8 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1411 PUSH2 0x3B35 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xE95AEC380CAE16330D146D5499EF7DB6F3657E477104A733E771BC09E500D986 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1498 PUSH2 0x20E1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x14AF PUSH2 0x3B35 JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xC97E86A927B4A897832650767255FD568E377E7FBE9586C81D26B77A2C3FFC8B SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 PUSH2 0x152B DUP5 PUSH2 0x3475 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1556 PUSH2 0x3B35 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x1572 CALLER DUP3 JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x341A JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP2 AND SWAP1 POP PUSH32 0x227A473B70D2F893CC7659219575C030A63B5743024FE1E0C1A680E708B1525A DUP2 PUSH1 0x40 MLOAD PUSH2 0x1511 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x15D9 DUP7 PUSH2 0x2D4F JUMP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP PUSH2 0x15EC DUP7 PUSH2 0x3279 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x160C JUMPI PUSH2 0x160C PUSH2 0x570B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE CALLER PUSH2 0xBB8 PUSH1 0x45 PUSH32 0x0 NUMBER SUB DIV ADD PUSH3 0xFFFFFF AND DUP4 PUSH3 0xFFFFFF AND LT PUSH2 0x16B9 JUMPI PUSH2 0x166A CALLER DUP4 PUSH2 0x3B94 JUMP JUMPDEST PUSH2 0x16B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C3A310000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST POP DUP1 JUMPDEST PUSH1 0x0 PUSH2 0x16C4 CALLVALUE PUSH2 0x3551 JUMP JUMPDEST SWAP1 POP DUP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x1732 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C3A320000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x173E DUP9 DUP4 PUSH2 0x5769 JUMP JUMPDEST SWAP1 POP PUSH2 0x1752 PUSH2 0x174D DUP3 DUP10 PUSH2 0x5796 JUMP JUMPDEST PUSH2 0x3BE1 JUMP JUMPDEST PUSH2 0x176A DUP4 DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x341A JUMP JUMPDEST PUSH2 0x1774 DUP4 DUP11 PUSH2 0x3CB1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND SWAP2 PUSH32 0xD39832526202186065FC0DCDD28B38F6468549C094305337B697319814FAE337 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17DB DUP3 PUSH2 0x2D4F JUMP JUMPDEST POP SWAP2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCDC PUSH2 0xE58 DUP4 PUSH2 0x3475 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1851 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x443A300000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 PUSH2 0x187B JUMPI POP PUSH1 0x0 PUSH2 0x18CC JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x0 DUP5 PUSH2 0x188B DUP4 DUP9 PUSH2 0x3D66 JUMP JUMPDEST PUSH2 0x1895 SWAP2 SWAP1 PUSH2 0x57C6 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH2 0x18C6 DUP3 PUSH1 0x8 PUSH2 0x18AA DUP10 DUP3 PUSH2 0x57EB JUMP JUMPDEST DUP5 DUP2 SHL PUSH1 0x1 SWAP1 SWAP3 SHL PUSH1 0x0 NOT ADD PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND SHL NOT SWAP2 SWAP1 SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH1 0x8 SSTORE POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x18E1 DUP4 CALLER PUSH2 0x3505 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x1901 DUP2 PUSH2 0x3D88 JUMP JUMPDEST ISZERO PUSH2 0x1919 JUMPI PUSH1 0x0 DUP3 SSTORE PUSH2 0x1914 CALLER DUP5 PUSH2 0x3CB1 JUMP JUMPDEST PUSH2 0x193F JUMP JUMPDEST PUSH2 0x193F CALLER PUSH2 0x155F DUP4 PUSH1 0x20 ADD MLOAD PUSH4 0x3B9ACA00 PUSH1 0xA0 SWAP2 SWAP1 SWAP2 SHR PUSH9 0x3FFFFFFFFFFFFFFFFF AND MUL SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH32 0x938187AD30D2557F8EB68B094A2305A858EC4F65C86A957B4BC26D9C0A496FEF SWAP1 PUSH1 0x20 ADD PUSH2 0xE1F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x198D DUP8 PUSH2 0x27BD JUMP JUMPDEST SWAP6 POP DUP6 PUSH2 0x1A05 JUMPI PUSH2 0x19B6 PUSH2 0x19B1 PUSH2 0x19AC DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3E74 JUMP JUMPDEST PUSH2 0x3E97 JUMP JUMPDEST PUSH2 0x3EA2 JUMP JUMPDEST SWAP6 POP DUP6 PUSH2 0x1A05 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x503A4C0000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x8 DUP1 DUP3 MSTORE PUSH2 0x120 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD PUSH2 0x100 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x8 DUP1 DUP3 MSTORE PUSH2 0x120 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP3 SWAP8 POP SWAP1 POP PUSH1 0x20 DUP3 ADD PUSH2 0x100 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x8 DUP1 DUP3 MSTORE PUSH2 0x120 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP3 SWAP7 POP SWAP1 POP PUSH1 0x20 DUP3 ADD PUSH2 0x100 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x8 DUP1 DUP3 MSTORE PUSH2 0x120 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP5 POP DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1A85 JUMPI SWAP1 POP POP SWAP2 POP DUP6 PUSH1 0x3 AND DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1AB3 JUMPI PUSH2 0x1AB3 PUSH2 0x5814 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0xFF AND SWAP1 DUP2 PUSH1 0xFF AND DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST PUSH1 0x7 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x1CBA JUMPI PUSH1 0x0 PUSH2 0x1AE2 DUP9 DUP4 PUSH2 0x40FD JUMP JUMPDEST SWAP1 POP PUSH2 0xFFFF DUP2 AND PUSH2 0x1AF3 JUMPI POP PUSH2 0x1CA8 JUMP JUMPDEST DUP7 MLOAD PUSH1 0xFF PUSH1 0x8 DUP4 SWAP1 SHR DUP2 AND SWAP2 SWAP1 DUP4 AND SWAP1 DUP10 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x1B15 JUMPI PUSH2 0x1B15 PUSH2 0x5814 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xFF AND PUSH1 0x0 EQ ISZERO PUSH2 0x1CA4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP8 MLOAD PUSH1 0x6 DUP3 SWAP1 SHR SWAP1 DUP10 SWAP1 PUSH1 0xFF DUP7 AND SWAP1 DUP2 LT PUSH2 0x1B6D JUMPI PUSH2 0x1B6D PUSH2 0x5814 JUMP JUMPDEST PUSH1 0xFF SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x3F DUP2 AND DUP10 DUP5 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1B98 JUMPI PUSH2 0x1B98 PUSH2 0x5814 JUMP JUMPDEST PUSH1 0xFF SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 DUP3 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH2 0xFFFF DUP9 AND DUP4 MSTORE PUSH1 0x1 ADD SWAP1 SWAP3 MSTORE KECCAK256 DUP1 SLOAD PUSH2 0x1BDA SWAP1 PUSH2 0x5843 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1C06 SWAP1 PUSH2 0x5843 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1C53 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1C28 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1C53 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1C36 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP8 DUP5 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1C6D JUMPI PUSH2 0x1C6D PUSH2 0x5814 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP2 DUP11 DUP5 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1C8E JUMPI PUSH2 0x1C8E PUSH2 0x5814 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0xFF AND SWAP1 DUP2 PUSH1 0xFF AND DUP2 MSTORE POP POP POP JUMPDEST POP POP POP JUMPDEST DUP1 PUSH2 0x1CB2 DUP2 PUSH2 0x5897 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1ACA JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0x1CE1 SWAP1 PUSH2 0x5843 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1D0D SWAP1 PUSH2 0x5843 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1D5A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1D2F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1D5A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1D3D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP4 SWAP6 POP SWAP2 SWAP4 SWAP6 JUMP JUMPDEST PUSH2 0x1D78 PUSH2 0x1F4 PUSH2 0x2710 PUSH2 0x58B7 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP1 ISZERO PUSH2 0x1D9F JUMPI POP PUSH2 0x1F4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND GT JUMPDEST PUSH2 0x1DEB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x473A310000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH2 0x1DF5 PUSH1 0x0 PUSH2 0x356C JUMP JUMPDEST PUSH2 0x1DFE DUP2 PUSH2 0x411A JUMP JUMPDEST PUSH2 0x1E08 CALLER DUP3 PUSH2 0x4234 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF CALLVALUE AND PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x7FA02EA2ADDB9A3AE24BB783F3817CBEBD2AAA24AF58C5EEE6FAF5B776797F95 SWAP2 ADD PUSH2 0x1511 JUMP JUMPDEST PUSH2 0x1E5E CALLER DUP5 PUSH2 0x42A7 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x1E6A DUP5 PUSH2 0x27BD JUMP JUMPDEST SWAP1 POP PUSH2 0x1E77 DUP2 DUP5 DUP5 PUSH2 0x430A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1EF1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x543A340000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EFC DUP3 PUSH2 0x27BD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1F09 DUP4 PUSH2 0x4342 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH32 0x80011AA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP7 SWAP1 MSTORE CALLER PUSH1 0x44 DUP4 ADD MSTORE SWAP3 SWAP4 POP SWAP2 AND SWAP1 PUSH4 0x80011AA7 SWAP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1F9B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0xA SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP9 AND PUSH1 0x20 DUP4 ADD MSTORE DUP2 ADD DUP7 SWAP1 MSTORE CALLER PUSH1 0x60 DUP3 ADD MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0x58CA548C1FD63F641DFB02F79DF36D4F29BD995F0733D2ED3595B6CFDE7DB4E1 SWAP4 POP PUSH1 0xA0 ADD SWAP2 POP PUSH2 0x2007 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x2026 CALLER PUSH2 0x2021 DUP5 PUSH2 0x3475 JUMP JUMPDEST PUSH2 0x450B JUMP JUMPDEST PUSH2 0x2072 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x463A350000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND OR SWAP1 SSTORE MLOAD DUP4 SWAP2 PUSH32 0xB0F631A5014E4A5B1BB62AE2778AE0CE4D19AE55FBDB59B1D39F58F39190FE60 SWAP2 LOG2 POP POP JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20DC PUSH1 0xB SLOAD PUSH1 0xC0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20FA DUP3 PUSH2 0x4342 JUMP JUMPDEST SWAP1 POP PUSH2 0x2114 CALLER DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x341A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x6866BAB9E57B1B8D6E867BB41DC78EC6F8FCBDCA05D8F065E3353DF689741FF2 SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x217F PUSH1 0xB SLOAD PUSH2 0x451F JUMP JUMPDEST POP SWAP2 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 DUP1 PUSH2 0x2198 DUP6 DUP8 PUSH2 0x3505 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP3 POP ISZERO ISZERO SWAP1 POP PUSH2 0x21E7 JUMPI DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x40 ADD MLOAD PUSH3 0xFFFFFF AND EQ ISZERO PUSH2 0x21D6 JUMPI PUSH2 0x21CF PUSH2 0x21CA PUSH2 0x2172 JUMP JUMPDEST PUSH2 0x4586 JUMP JUMPDEST SWAP3 POP PUSH2 0x226D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP4 POP SWAP4 POP SWAP4 POP POP PUSH2 0x229B JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0xFF SHR PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x2202 JUMPI POP DUP1 MLOAD PUSH1 0xFF SHR PUSH1 0x1 EQ JUMPDEST ISZERO PUSH2 0x220C JUMPI PUSH1 0x0 SWAP4 POP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD PUSH1 0xA0 SWAP1 DUP2 SHR PUSH9 0x3FFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH4 0x3B9ACA00 SWAP1 DUP2 MUL SWAP7 POP SWAP3 SWAP1 SWAP2 SHR AND MUL SWAP2 POP PUSH2 0x223F PUSH2 0x2F52 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x226D JUMPI PUSH2 0x226A PUSH2 0x2F52 JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x228D JUMPI PUSH5 0x2540BE400 SWAP3 POP PUSH2 0x2299 JUMP JUMPDEST PUSH2 0x2296 DUP4 PUSH2 0x45C0 JUMP JUMPDEST SWAP3 POP JUMPDEST POP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCDC PUSH1 0x8 SLOAD DUP4 PUSH2 0x3D66 JUMP JUMPDEST PUSH2 0x230F PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x231B PUSH2 0x668 DUP4 PUSH2 0x3475 JUMP JUMPDEST PUSH2 0x100 DUP8 ADD MSTORE PUSH1 0xE0 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x20 DUP5 ADD MSTORE DUP3 MSTORE POP PUSH1 0x8 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2368 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2353 JUMPI SWAP1 POP JUMPDEST POP PUSH1 0xC0 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD DUP4 SWAP1 MSTORE ADDRESS PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0x4241534500000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x23CB JUMPI PUSH2 0x23CB PUSH2 0x5814 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4559455300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0xC0 ADD MLOAD PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2423 JUMPI PUSH2 0x2423 PUSH2 0x5814 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D4F555448000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0xC0 ADD MLOAD PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x247B JUMPI PUSH2 0x247B PUSH2 0x5814 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4841495200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0xC0 ADD MLOAD PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH2 0x24D3 JUMPI PUSH2 0x24D3 PUSH2 0x5814 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4841540000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0xC0 ADD MLOAD PUSH1 0x4 DUP2 MLOAD DUP2 LT PUSH2 0x252B JUMPI PUSH2 0x252B PUSH2 0x5814 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4241434B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0xC0 ADD MLOAD PUSH1 0x5 DUP2 MLOAD DUP2 LT PUSH2 0x2583 JUMPI PUSH2 0x2583 PUSH2 0x5814 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4E45434B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0xC0 ADD MLOAD PUSH1 0x6 DUP2 MLOAD DUP2 LT PUSH2 0x25DB JUMPI PUSH2 0x25DB PUSH2 0x5814 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x484F4C4400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0xC0 ADD MLOAD PUSH1 0x7 DUP2 MLOAD DUP2 LT PUSH2 0x2633 JUMPI PUSH2 0x2633 PUSH2 0x5814 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x26D7 CALLER DUP5 PUSH2 0x42A7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP7 AND DUP5 MSTORE PUSH1 0x1 ADD DUP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP3 MLOAD PUSH2 0x2710 SWAP3 DUP5 ADD SWAP1 PUSH2 0x4D85 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH32 0xB0F631A5014E4A5B1BB62AE2778AE0CE4D19AE55FBDB59B1D39F58F39190FE60 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0x2754 CALLER DUP4 PUSH2 0x42A7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP3 MLOAD PUSH2 0x2784 SWAP3 PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 DUP5 ADD SWAP1 PUSH2 0x4D85 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xB0F631A5014E4A5B1BB62AE2778AE0CE4D19AE55FBDB59B1D39F58F39190FE60 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO PUSH2 0x27F7 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2804 PUSH2 0x45D9 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 EQ DUP1 ISZERO PUSH2 0x2821 JUMPI POP DUP3 ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x282E JUMPI SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x2841 PUSH2 0x3B35 JUMP JUMPDEST PUSH2 0x1F4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT DUP1 ISZERO PUSH2 0x2863 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST PUSH2 0x28AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x473A310000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH2 0x28B9 PUSH1 0x0 PUSH2 0x356C JUMP JUMPDEST PUSH2 0x28C2 DUP3 PUSH2 0x411A JUMP JUMPDEST PUSH2 0x28CC DUP2 DUP4 PUSH2 0x4234 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF CALLVALUE AND PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x7FA02EA2ADDB9A3AE24BB783F3817CBEBD2AAA24AF58C5EEE6FAF5B776797F95 SWAP2 ADD PUSH2 0x2166 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2926 DUP5 PUSH2 0x2D4F JUMP JUMPDEST SWAP5 POP POP SWAP4 POP SWAP4 POP POP PUSH2 0x2937 DUP5 PUSH2 0x3279 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2957 JUMPI PUSH2 0x2957 PUSH2 0x570B JUMP JUMPDEST CALLVALUE DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x29B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C3A330000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29C0 CALLVALUE PUSH2 0x3551 JUMP JUMPDEST SWAP1 POP PUSH2 0x29CB DUP2 PUSH2 0x3BE1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A03 PUSH2 0xBB8 PUSH1 0x45 PUSH32 0x0 NUMBER SUB DIV ADD DUP5 PUSH2 0xD7F PUSH2 0x2F52 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE SWAP1 POP PUSH2 0x2A38 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH2 0x341A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH32 0x5062495ABF7EA897BB9561849F52ADA09E05B75474D32015EE99C964570E7FFA SWAP1 PUSH1 0x20 ADD PUSH2 0x13F9 JUMP JUMPDEST CALLER PUSH2 0x2A8B DUP4 PUSH2 0x3279 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2AE1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x533A410000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH2 0x2AE9 PUSH2 0x2F52 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x2B54 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x533A420000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH2 0x2B5D DUP3 PUSH2 0x3349 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2B6A DUP5 CALLER PUSH2 0x3505 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP4 POP SWAP2 POP ISZERO PUSH2 0x2BBE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F504532000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH2 0x2BCC PUSH1 0x0 CALLER DUP6 PUSH1 0x1 PUSH2 0x32FD JUMP JUMPDEST DUP3 SSTORE PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH32 0xBDDCAAA7EEE060454ED44E36DE17B53F71B5DE19112296CFCE9D61C8A4DE8783 SWAP1 PUSH1 0x20 ADD PUSH2 0x1197 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2C24 DUP4 PUSH2 0x3475 JUMP JUMPDEST PUSH1 0x6 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 PUSH4 0x448E347F SWAP1 ADDRESS SWAP1 DUP7 SWAP1 PUSH2 0x2C4B SWAP1 DUP7 AND PUSH2 0x151C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x6 DUP2 MSTORE PUSH32 0x4E55474746540000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x16 DUP2 MSTORE PUSH32 0x4E7567672046756E6769626C6520546F6B656E20563100000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2CD6 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x58D6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2CEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2D02 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2D48 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x593D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH2 0x2D79 DUP2 PUSH2 0x4600 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2DD1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C3A340000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH4 0x3B9ACA00 PUSH1 0xA0 DUP3 SWAP1 SHR PUSH9 0x3FFFFFFFFFFFFFFFFF AND MUL PUSH1 0x0 PUSH2 0x2DF1 PUSH2 0x2F52 JUMP JUMPDEST PUSH2 0x2710 PUSH1 0x64 DUP5 MUL DIV SWAP8 POP SWAP1 POP PUSH2 0x2E07 DUP8 DUP4 PUSH2 0x5796 JUMP JUMPDEST SWAP8 POP DUP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x2E35 JUMPI DUP8 DUP2 SUB PUSH2 0x2E38 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP6 POP PUSH1 0x2 PUSH2 0x2E45 DUP5 PUSH2 0x37E3 JUMP JUMPDEST ADD SWAP5 POP POP POP POP SWAP2 SWAP4 SWAP6 SWAP1 SWAP3 SWAP5 POP JUMP JUMPDEST PUSH1 0x40 DUP3 LT DUP1 ISZERO PUSH2 0x2E64 JUMPI POP PUSH1 0x40 DUP2 LT JUMPDEST PUSH2 0x2EB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x554E544545535445443A31000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH2 0x2EBA CALLER DUP6 PUSH2 0x42A7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 PUSH1 0x6 DUP6 SWAP1 SHL DUP7 OR SWAP1 SSTORE MLOAD PUSH32 0xB0F631A5014E4A5B1BB62AE2778AE0CE4D19AE55FBDB59B1D39F58F39190FE60 SWAP2 SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D48 DUP3 DUP5 PUSH2 0x3B94 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20DC PUSH1 0xB SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F39 DUP3 PUSH2 0x2D4F JUMP JUMPDEST POP SWAP3 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20DC PUSH1 0xB SLOAD PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20DC PUSH1 0xB SLOAD PUSH2 0x4611 JUMP JUMPDEST PUSH2 0x2F67 PUSH2 0x3B35 JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLER PUSH2 0x2F76 DUP5 PUSH2 0x3279 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2FCC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x533A390000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2FDA DUP5 DUP5 DUP8 PUSH2 0x3AD9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x3003 DUP2 PUSH2 0x3D88 JUMP JUMPDEST ISZERO PUSH2 0x309D JUMPI PUSH1 0x0 DUP1 DUP4 SSTORE PUSH2 0xFFFF DUP5 AND DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x306A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x503A330000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH2 0x3074 DUP6 DUP5 PUSH2 0x4654 JUMP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP2 PUSH2 0x3093 DUP4 PUSH2 0x59AB JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0x30CA JUMP JUMPDEST PUSH2 0x30CA PUSH2 0x30A9 DUP7 PUSH2 0x3279 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH9 0x3FFFFFFFFFFFFFFFFF PUSH1 0xA0 SWAP2 SWAP1 SWAP2 SHR AND PUSH4 0x3B9ACA00 MUL PUSH2 0x155F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0xA0 DUP6 SWAP1 SHL PUSH22 0xFFFF0000000000000000000000000000000000000000 AND OR SWAP1 PUSH32 0x7A0576B9EDC37A53C7E05AE220B6A871CF584AE6724A63F704609BAEC1E72853 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST CALLER PUSH2 0x313A DUP5 PUSH2 0x3279 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3190 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x533A430000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH2 0x319A DUP4 DUP4 PUSH2 0x4685 JUMP JUMPDEST PUSH2 0xFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP2 PUSH2 0x31B9 DUP4 PUSH2 0x59C2 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH1 0x0 DUP1 PUSH2 0x31CC DUP6 DUP6 DUP8 PUSH2 0x3AD9 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP4 POP SWAP2 POP ISZERO PUSH2 0x3220 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x533A440000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH2 0x322E PUSH1 0x0 DUP7 DUP6 PUSH1 0x1 PUSH2 0x32FD JUMP JUMPDEST DUP3 SSTORE PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH32 0xBDDCAAA7EEE060454ED44E36DE17B53F71B5DE19112296CFCE9D61C8A4DE8783 SWAP1 PUSH1 0x20 ADD PUSH2 0x3121 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3284 DUP3 PUSH2 0x46B6 JUMP JUMPDEST PUSH2 0x32D0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x543A393A32000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND DUP1 PUSH2 0x32F8 JUMPI POP ADDRESS SWAP2 SWAP1 POP JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3309 DUP2 DUP7 PUSH2 0x46C9 JUMP JUMPDEST SWAP1 POP PUSH2 0x3315 DUP2 DUP6 PUSH2 0x471B JUMP JUMPDEST SWAP1 POP DUP2 ISZERO PUSH2 0x332B JUMPI PUSH2 0x3328 DUP2 PUSH1 0x1 PUSH2 0x4750 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x3335 DUP2 DUP5 PUSH2 0x4787 JUMP JUMPDEST SWAP1 POP PUSH2 0x3340 DUP2 PUSH2 0x47E0 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3353 CALLER DUP3 PUSH2 0x450B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x336F JUMPI POP ADDRESS PUSH2 0x3364 DUP3 PUSH2 0x348F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x33BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E3A310000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH2 0x3417 CALLER ADDRESS DUP4 PUSH2 0x3794 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP8 GAS CALL SWAP1 POP DUP1 PUSH2 0x2F67 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5A3A300000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 GT ISZERO PUSH2 0x348B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x349A DUP3 PUSH2 0x46B6 JUMP JUMPDEST PUSH2 0x34E6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x543A393A31000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP3 DUP5 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE PUSH1 0xD SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP1 PUSH2 0x3548 DUP3 DUP5 PUSH2 0x482C JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x348B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x3578 CALLVALUE PUSH2 0x3551 JUMP JUMPDEST PUSH2 0x3582 SWAP2 SWAP1 PUSH2 0x5769 JUMP JUMPDEST PUSH1 0xB SLOAD SWAP1 SWAP2 POP PUSH1 0x0 DUP1 PUSH2 0x3594 DUP4 PUSH2 0x451F JUMP JUMPDEST POP SWAP3 POP POP SWAP2 POP DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x3606 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x543A310000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3612 DUP4 DUP7 PUSH2 0x5769 JUMP JUMPDEST SWAP1 POP PUSH2 0x3634 PUSH2 0x2710 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x3E8 MUL DIV DUP4 PUSH2 0x5796 JUMP JUMPDEST SWAP2 POP PUSH2 0x3641 DUP5 PUSH1 0x1 PUSH2 0x48E0 JUMP JUMPDEST SWAP4 POP PUSH2 0x3657 PUSH2 0x3650 DUP4 DUP8 PUSH2 0x5769 JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x4940 JUMP JUMPDEST SWAP4 POP PUSH2 0x3663 DUP5 DUP4 PUSH2 0x49A0 JUMP JUMPDEST PUSH1 0xB DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE SWAP1 SWAP5 POP PUSH32 0x227A473B70D2F893CC7659219575C030A63B5743024FE1E0C1A680E708B1525A SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x370C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x503A360000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3717 PUSH2 0x45D9 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 EQ PUSH2 0x3774 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x503A370000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xFFFFFF PUSH1 0xE6 DUP4 SWAP1 SHR AND PUSH2 0xCDC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3803 DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x37E3 JUMP JUMPDEST PUSH3 0xFFFFFF AND DUP3 PUSH1 0x40 ADD MLOAD PUSH3 0xFFFFFF AND GT ISZERO PUSH2 0x3860 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x533A460000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST DUP2 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x387B DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x4600 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x38B5 JUMPI DUP2 MLOAD PUSH1 0x1 DUP5 ADD PUSH1 0x0 PUSH2 0x389A DUP4 PUSH2 0x4600 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SSTORE JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH2 0x38EF SWAP1 PUSH2 0x38C9 DUP2 PUSH2 0x37E3 JUMP JUMPDEST PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x20 DUP9 ADD MLOAD PUSH9 0x3FFFFFFFFFFFFFFFFF PUSH1 0xA0 SWAP2 SWAP1 SWAP2 SHR AND PUSH4 0x3B9ACA00 MUL PUSH2 0x49E6 JUMP JUMPDEST DUP2 DUP8 SSTORE SWAP1 SWAP3 POP SWAP1 POP PUSH9 0x3FFFFFFFFFFFFFFFFF PUSH1 0xA0 DUP4 SWAP1 SHR AND PUSH4 0x3B9ACA00 MUL JUMPDEST SWAP3 POP PUSH2 0x3919 DUP2 PUSH2 0x3BE1 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x392B PUSH2 0x2F52 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND CALLVALUE LT ISZERO PUSH2 0x3988 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x533A350000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD ISZERO DUP1 ISZERO PUSH2 0x399A JUMPI POP DUP2 MLOAD ISZERO ISZERO JUMPDEST PUSH2 0x39E6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F504533000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST DUP2 MLOAD PUSH1 0xFF SHR PUSH1 0x1 EQ PUSH2 0x3A3A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F504534000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3A62 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH2 0x3A56 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST DUP7 PUSH1 0x60 ADD MLOAD PUSH1 0x0 PUSH2 0x49E6 JUMP JUMPDEST DUP2 DUP8 SSTORE PUSH1 0x40 DUP7 ADD MLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0x3A91 SWAP1 PUSH2 0x3A7E SWAP1 PUSH1 0x1 PUSH2 0x59DD JUMP JUMPDEST DUP6 MLOAD PUSH2 0x3A8B SWAP1 PUSH1 0x0 PUSH2 0x4750 JUMP JUMPDEST SWAP1 PUSH2 0x46C9 JUMP JUMPDEST DUP6 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x3AA4 DUP8 PUSH1 0x0 ADD MLOAD PUSH2 0x4600 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SSTORE PUSH9 0x3FFFFFFFFFFFFFFFFF PUSH1 0xA0 DUP4 SWAP1 SHR AND PUSH4 0x3B9ACA00 MUL PUSH2 0x390E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP3 DUP5 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 MSTORE PUSH1 0xD DUP2 MSTORE DUP4 DUP3 KECCAK256 PUSH2 0xFFFF DUP8 AND DUP4 MSTORE PUSH1 0x2 ADD SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP1 PUSH2 0x3B2B DUP3 DUP5 PUSH2 0x482C JUMP JUMPDEST SWAP1 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xE36 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x554E545255535445440000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x2D48 JUMPI POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP4 AND DUP3 MSTORE SWAP3 SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST DUP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND CALLVALUE LT ISZERO PUSH2 0x3C3F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x543A320000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x2710 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x3E8 MUL DIV PUSH2 0x3C6D PUSH2 0x3C66 DUP3 DUP6 PUSH2 0x5769 JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x4940 JUMP JUMPDEST SWAP2 POP PUSH2 0x3C79 DUP3 DUP3 PUSH2 0x49A0 JUMP JUMPDEST PUSH1 0xB DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE SWAP1 SWAP3 POP PUSH32 0x227A473B70D2F893CC7659219575C030A63B5743024FE1E0C1A680E708B1525A SWAP1 PUSH1 0x20 ADD PUSH2 0x2007 JUMP JUMPDEST ADDRESS PUSH2 0x3CBB DUP3 PUSH2 0x3279 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3D11 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E3A300000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP5 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x3D62 ADDRESS DUP4 DUP4 PUSH2 0x3794 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D48 DUP4 PUSH1 0x8 PUSH2 0x3D78 DUP6 DUP3 PUSH2 0x57EB JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP2 SHL PUSH1 0x0 NOT ADD SWAP2 SWAP1 SHR AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3DDF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x533A450000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DEE DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x37E3 JUMP JUMPDEST PUSH3 0xFFFFFF AND DUP4 PUSH1 0x40 ADD MLOAD PUSH3 0xFFFFFF AND GT SWAP1 POP PUSH1 0x0 PUSH2 0x3E0F DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x4600 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3E25 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x4600 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP1 POP PUSH1 0x0 PUSH2 0x3E47 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0xFF SWAP2 SWAP1 SWAP2 SHR EQ SWAP1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3E5A JUMPI POP PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0xFF SHR PUSH1 0x1 EQ JUMPDEST SWAP1 POP DUP2 DUP1 ISZERO PUSH2 0x3340 JUMPI POP DUP1 DUP1 PUSH2 0x3340 JUMPI POP SWAP2 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFF DUP3 GT ISZERO PUSH2 0x3E85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 PUSH3 0xFFFFFF DUP2 GT ISZERO PUSH2 0x348B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xCDC DUP3 PUSH2 0x4AAD JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x3EF1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x503A380000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x3F0B PUSH1 0xFF DUP5 AND PUSH2 0x3F06 DUP4 PUSH1 0x0 PUSH2 0x3D66 JUMP JUMPDEST PUSH2 0x4BDC JUMP JUMPDEST PUSH2 0x3F16 SWAP1 PUSH1 0x1 PUSH2 0x59FB JUMP JUMPDEST DUP3 OR SWAP2 POP PUSH1 0x3 PUSH2 0x3F27 DUP3 PUSH1 0x1 PUSH2 0x3D66 JUMP JUMPDEST PUSH2 0x3F32 SWAP1 PUSH1 0xFF PUSH2 0x5A13 JUMP JUMPDEST PUSH1 0x8 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x3F49 SWAP1 DUP6 AND PUSH1 0xFF AND PUSH1 0x1 PUSH2 0x59FB JUMP JUMPDEST PUSH2 0x100 OR SWAP1 SHL DUP3 OR SWAP2 POP PUSH1 0xE PUSH2 0x3F60 DUP3 PUSH1 0x2 PUSH2 0x3D66 JUMP JUMPDEST PUSH2 0x3F6B SWAP1 PUSH1 0xFF PUSH2 0x5A13 JUMP JUMPDEST PUSH1 0x8 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x3F82 SWAP1 DUP6 AND PUSH1 0xFF AND PUSH1 0x1 PUSH2 0x59FB JUMP JUMPDEST PUSH1 0x8 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x200 OR SWAP1 SHL SWAP2 SWAP1 SWAP2 OR SWAP1 PUSH1 0xFF DUP4 AND PUSH1 0x80 DUP2 LT PUSH2 0x3FA7 JUMPI PUSH1 0x4 PUSH2 0x3FAA JUMP JUMPDEST PUSH1 0x3 JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x19 PUSH2 0x3FC9 PUSH1 0x8 DUP7 SWAP1 SHR SWAP6 POP DUP6 PUSH1 0xFF AND PUSH2 0x3F06 DUP6 DUP6 PUSH2 0x3D66 JUMP JUMPDEST PUSH2 0x3FD4 SWAP1 PUSH1 0x1 PUSH2 0x59FB JUMP JUMPDEST PUSH1 0x8 SWAP6 DUP7 SHR SWAP6 DUP4 SWAP1 SHL OR SWAP1 SHL SWAP3 SWAP1 SWAP3 OR SWAP2 PUSH1 0xFF DUP5 AND PUSH1 0x1E DUP2 LT PUSH2 0x4016 JUMPI PUSH1 0x37 DUP2 LT PUSH2 0x400F JUMPI PUSH1 0x4B DUP2 LT PUSH2 0x4008 JUMPI PUSH1 0x0 PUSH2 0x4019 JUMP JUMPDEST PUSH1 0x7 PUSH2 0x4019 JUMP JUMPDEST PUSH1 0x6 PUSH2 0x4019 JUMP JUMPDEST PUSH1 0x5 JUMPDEST PUSH1 0xFF AND SWAP1 POP DUP1 ISZERO PUSH2 0x4056 JUMPI PUSH1 0x24 PUSH2 0x403E PUSH1 0x8 DUP8 SWAP1 SHR SWAP7 POP DUP7 PUSH1 0xFF AND PUSH2 0x3F06 DUP7 DUP6 PUSH2 0x3D66 JUMP JUMPDEST PUSH2 0x4049 SWAP1 PUSH1 0x1 PUSH2 0x59FB JUMP JUMPDEST PUSH1 0x8 DUP4 SWAP1 SHL OR SWAP1 SHL DUP5 OR SWAP4 POP JUMPDEST PUSH1 0x8 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH1 0xFF DUP6 AND PUSH1 0x1E DUP2 LT PUSH2 0x40BB JUMPI PUSH1 0x37 DUP2 LT PUSH2 0x40B4 JUMPI PUSH1 0x4B DUP2 LT PUSH2 0x40AD JUMPI PUSH1 0x73 DUP2 LT PUSH2 0x40A6 JUMPI PUSH1 0x9B DUP2 LT PUSH2 0x409F JUMPI PUSH1 0xCD DUP2 LT PUSH2 0x4098 JUMPI PUSH1 0x1 PUSH2 0x40BE JUMP JUMPDEST PUSH1 0x2 PUSH2 0x40BE JUMP JUMPDEST PUSH1 0x3 PUSH2 0x40BE JUMP JUMPDEST PUSH1 0x4 PUSH2 0x40BE JUMP JUMPDEST PUSH1 0x7 PUSH2 0x40BE JUMP JUMPDEST PUSH1 0x6 PUSH2 0x40BE JUMP JUMPDEST PUSH1 0x5 JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x50 PUSH2 0x40DD PUSH1 0x8 DUP9 SWAP1 SHR SWAP8 POP DUP8 PUSH1 0xFF AND PUSH2 0x3F06 DUP8 DUP6 PUSH2 0x3D66 JUMP JUMPDEST PUSH2 0x40E8 SWAP1 PUSH1 0x1 PUSH2 0x59FB JUMP JUMPDEST PUSH1 0x8 DUP4 SWAP1 SHL OR SWAP1 SHL DUP6 OR SWAP5 POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D48 DUP4 PUSH1 0xB PUSH2 0x410F DUP6 DUP3 PUSH2 0x57EB JUMP JUMPDEST PUSH2 0x3D78 SWAP1 PUSH1 0x3 PUSH2 0x57C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x4180 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x503A350000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x418E PUSH1 0x1 NUMBER PUSH2 0x5A5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x4206900000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 SWAP3 SWAP1 SWAP3 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x23 DUP4 ADD MSTORE BLOCKHASH PUSH1 0x37 DUP3 ADD MSTORE PUSH1 0x57 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP PUSH1 0x0 PUSH2 0x4213 DUP3 PUSH2 0x3EA2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP5 DUP8 AND SWAP5 DUP6 OR SWAP1 SSTORE MLOAD SWAP2 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42B2 DUP3 PUSH2 0x3279 JUMP JUMPDEST SWAP1 POP PUSH2 0x42BE DUP4 DUP3 PUSH2 0x3B94 JUMP JUMPDEST PUSH2 0xCDC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x503A420000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4317 DUP6 DUP6 PUSH2 0x40FD JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 POP PUSH2 0x4335 DUP6 DUP6 PUSH2 0x432C DUP9 DUP8 PUSH2 0x40FD JUMP JUMPDEST PUSH2 0xFFFF AND PUSH2 0x4C4C JUMP JUMPDEST SWAP2 POP PUSH2 0x3340 DUP6 DUP5 DUP4 PUSH2 0x4C4C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x434E DUP4 PUSH2 0x3279 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH2 0x435A DUP5 PUSH2 0x348F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x4378 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ JUMPDEST PUSH2 0x43C4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x543A330000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP1 SLOAD DUP3 AND SWAP1 SSTORE PUSH1 0xD DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0xE DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x9 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x7 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH2 0x444E SWAP1 DUP4 SWAP1 DUP7 PUSH2 0x3794 JUMP JUMPDEST PUSH2 0x4457 DUP2 PUSH2 0x4611 JUMP JUMPDEST SWAP3 POP PUSH1 0x1 PUSH2 0x4465 DUP3 PUSH1 0xC0 SHR SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x447D JUMPI PUSH2 0x447D PUSH2 0x570B JUMP JUMPDEST DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4496 DUP3 PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x44B2 JUMPI PUSH2 0x44B2 PUSH2 0x570B JUMP JUMPDEST PUSH2 0x44BD DUP2 PUSH1 0x1 PUSH2 0x4C85 JUMP JUMPDEST SWAP1 POP PUSH2 0x44C9 DUP2 DUP5 PUSH2 0x4C9C JUMP JUMPDEST PUSH1 0xB DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE SWAP1 SWAP2 POP PUSH32 0x227A473B70D2F893CC7659219575C030A63B5743024FE1E0C1A680E708B1525A SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D48 DUP4 PUSH2 0x451A DUP5 PUSH2 0x3279 JUMP JUMPDEST PUSH2 0x3B94 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x452E DUP6 PUSH2 0x4611 JUMP JUMPDEST SWAP3 POP PUSH2 0x2710 PUSH2 0x3E8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND MUL DIV SWAP2 POP PUSH2 0x4553 DUP6 PUSH1 0xC0 SHR SWAP1 JUMP JUMPDEST PUSH2 0x2710 PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP5 MUL DIV SWAP1 POP DUP1 PUSH2 0x4573 DUP4 DUP6 PUSH2 0x5796 JUMP JUMPDEST PUSH2 0x457D SWAP2 SWAP1 PUSH2 0x5796 JUMP JUMPDEST SWAP4 POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH4 0x3B9ACA00 DUP2 MOD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x45B2 JUMPI POP PUSH1 0x1 PUSH4 0x3B9ACA00 SWAP2 DUP3 SWAP1 DIV ADD MUL SWAP1 JUMP JUMPDEST PUSH4 0x3B9ACA00 DUP1 DUP4 DIV MUL PUSH2 0xCDC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x45CE DUP3 PUSH2 0x27D8 PUSH2 0x5A73 JUMP JUMPDEST PUSH2 0x2710 SWAP1 DIV SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x45E6 PUSH2 0x4CB3 JUMP JUMPDEST SWAP1 SWAP4 POP PUSH3 0xFFFFFF AND SWAP2 POP PUSH2 0x45F9 DUP4 PUSH2 0x3EA2 JUMP JUMPDEST SWAP1 POP SWAP1 SWAP2 SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xCDC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x461D DUP3 PUSH1 0xC0 SHR SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH2 0x4636 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4640 DUP3 PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DIV SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x465E CALLER DUP4 PUSH2 0x42A7 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x466A DUP4 PUSH2 0x27BD JUMP JUMPDEST SWAP1 POP PUSH2 0x4213 DUP2 PUSH2 0x467B DUP4 PUSH1 0x0 PUSH2 0x4CEE JUMP JUMPDEST DUP5 PUSH2 0xFFFF AND PUSH2 0x4C4C JUMP JUMPDEST PUSH2 0x468F CALLER DUP4 PUSH2 0x42A7 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x469B DUP4 PUSH2 0x27BD JUMP JUMPDEST SWAP1 POP PUSH2 0x4213 DUP2 PUSH2 0x46AF DUP4 DUP6 PUSH2 0xFFFF AND PUSH2 0x4CEE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C4C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x46C1 DUP3 PUSH2 0x27BD JUMP JUMPDEST ISZERO ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xC000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH32 0x3FFFFFC000000000000000000000000000000000000000000000000000000000 PUSH1 0xE6 DUP5 SWAP1 SHL AND OR PUSH2 0x2D48 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR PUSH2 0x2D48 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D48 DUP4 PUSH1 0x1 PUSH1 0xFF DUP6 PUSH2 0x4766 JUMPI PUSH1 0x0 PUSH2 0x4769 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND DUP2 SHL PUSH1 0x1 SWAP1 SWAP3 SHL PUSH1 0x0 NOT ADD PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND SHL NOT SWAP2 SWAP1 SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH4 0x3B9ACA00 SWAP1 DIV PUSH1 0x0 PUSH32 0xFFFFFFC00000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 PUSH1 0xA0 DUP5 SWAP1 SHL AND OR PUSH2 0x2D48 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH32 0x4000000000000000000000000000000000000000000000000000000000000000 OR PUSH2 0xCDC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP4 SLOAD DUP1 DUP3 MSTORE PUSH3 0xFFFFFF PUSH1 0x45 PUSH32 0x0 NUMBER SUB DIV PUSH2 0xBB8 ADD AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x60 DUP3 ADD MSTORE SWAP1 PUSH2 0x4891 DUP2 PUSH2 0x4600 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x48B6 JUMPI PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x48D9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP6 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 DUP4 ADD MSTORE JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x48EC DUP4 PUSH1 0xC0 SHR SWAP1 JUMP JUMPDEST PUSH2 0x48F6 SWAP1 DUP4 PUSH2 0x5AA7 JUMP JUMPDEST SWAP2 POP PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0xC0 DUP4 SWAP1 SHL PUSH32 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 AND OR PUSH2 0x2D48 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x494C DUP4 PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST PUSH2 0x4956 SWAP1 DUP4 PUSH2 0x5796 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFF000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x60 DUP4 SWAP1 SHL PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND OR PUSH2 0x2D48 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x49AC DUP4 DUP4 PUSH2 0x5796 JUMP JUMPDEST SWAP2 POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP5 AND OR PUSH2 0x2D48 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH4 0x3B9ACA00 PUSH1 0xA0 DUP8 SWAP1 SHR PUSH9 0x3FFFFFFFFFFFFFFFFF AND MUL PUSH2 0x4A08 CALLVALUE PUSH2 0x3551 JUMP JUMPDEST PUSH2 0x4A12 SWAP1 DUP6 PUSH2 0x5796 JUMP JUMPDEST SWAP4 POP DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4A2C DUP3 PUSH2 0x45C0 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x4A88 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x533A470000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH2 0x4A95 DUP7 DUP7 DUP7 PUSH1 0x0 PUSH2 0x32FD JUMP JUMPDEST SWAP3 POP PUSH2 0x4AA1 DUP2 DUP6 PUSH2 0x5769 JUMP JUMPDEST SWAP2 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF448 DUP4 ADD PUSH1 0x45 MUL ADD DUP2 PUSH2 0x4B0A PUSH2 0x4B06 PUSH1 0x2 DUP5 PUSH2 0x5A5C JUMP JUMPDEST BLOCKHASH SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x4B59 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x453A300000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xE8 SWAP6 SWAP1 SWAP6 SHL PUSH32 0xFFFFFF0000000000000000000000000000000000000000000000000000000000 AND DUP6 DUP3 ADD MSTORE ADDRESS PUSH1 0x60 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x43 DUP7 ADD MSTORE DUP1 MLOAD PUSH1 0x37 DUP2 DUP8 SUB ADD DUP2 MSTORE PUSH1 0x57 SWAP1 SWAP6 ADD SWAP1 MSTORE DUP4 MLOAD SWAP4 ADD SWAP3 SWAP1 SWAP3 KECCAK256 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH2 0x4C2E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x503A390000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST DUP2 PUSH2 0x4C38 DUP5 PUSH2 0x4D75 JUMP JUMPDEST PUSH2 0x4C42 SWAP2 SWAP1 PUSH2 0x5A13 JUMP JUMPDEST PUSH1 0xFF AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18CC DUP5 PUSH1 0xB PUSH2 0x4C5E DUP7 DUP3 PUSH2 0x57EB JUMP JUMPDEST PUSH2 0x4C69 SWAP1 PUSH1 0x3 PUSH2 0x57C6 JUMP JUMPDEST DUP6 DUP2 SHL PUSH1 0x1 SWAP1 SWAP3 SHL PUSH1 0x0 NOT ADD PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND SHL NOT SWAP2 SWAP1 SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x4C92 DUP5 PUSH1 0xC0 SHR SWAP1 JUMP JUMPDEST PUSH2 0x48F6 SWAP2 SWAP1 PUSH2 0x5ACA JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x4CA9 DUP5 PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST PUSH2 0x4956 SWAP2 SWAP1 PUSH2 0x5769 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x45 PUSH32 0x0 NUMBER SUB DIV PUSH2 0xBB8 ADD PUSH2 0x4CE8 DUP2 PUSH2 0x4AAD JUMP JUMPDEST SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP4 SWAP1 SHR SWAP3 POP JUMPDEST DUP2 DUP4 PUSH1 0xB AND EQ ISZERO PUSH2 0x4D08 JUMPI PUSH2 0xCDC JUMP JUMPDEST DUP1 PUSH2 0x4D12 DUP2 PUSH2 0x5897 JUMP JUMPDEST PUSH1 0xB SWAP5 SWAP1 SWAP5 SHR SWAP4 SWAP2 POP POP DUP3 PUSH2 0x4CF8 JUMPI DUP1 PUSH1 0xFF AND PUSH1 0x16 EQ ISZERO PUSH2 0xCDC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x554E544553544544000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 GT ISZERO PUSH2 0x348B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x4D91 SWAP1 PUSH2 0x5843 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x4DB3 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x4DF9 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x4DCC JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x4DF9 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x4DF9 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x4DF9 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x4DDE JUMP JUMPDEST POP PUSH2 0x348B SWAP3 SWAP2 POP JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x348B JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x4E01 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4E27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x2D48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x3417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4E7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2D48 DUP2 PUSH2 0x4E57 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4EA4 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x4E8C JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x4EB3 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x4ED1 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x4E89 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2D48 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4EB9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4F28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4F42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4F4D DUP2 PUSH2 0x4E57 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x32F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4F82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x4F8D DUP2 PUSH2 0x4E57 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x4F9D DUP2 PUSH2 0x4E57 JUMP JUMPDEST SWAP2 POP PUSH2 0x4FAB PUSH1 0x40 DUP6 ADD PUSH2 0x4F5B JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4FC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4FD2 DUP2 PUSH2 0x4E57 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x4FE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5007 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x5012 DUP2 PUSH2 0x4E57 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x5022 DUP2 PUSH2 0x4E57 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x32F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x505A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x5065 DUP2 PUSH2 0x4E57 JUMP JUMPDEST SWAP4 POP PUSH2 0x5073 PUSH1 0x20 DUP7 ADD PUSH2 0x5033 JUMP JUMPDEST SWAP3 POP PUSH2 0x5081 PUSH1 0x40 DUP7 ADD PUSH2 0x5033 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x5091 DUP2 PUSH2 0x4E57 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x50CF JUMPI DUP2 MLOAD PUSH1 0xFF AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x50B0 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD DUP1 DUP2 SWAP7 POP DUP4 PUSH1 0x5 SHL DUP2 ADD SWAP2 POP DUP3 DUP7 ADD PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x5122 JUMPI DUP3 DUP5 SUB DUP10 MSTORE PUSH2 0x5110 DUP5 DUP4 MLOAD PUSH2 0x4EB9 JUMP JUMPDEST SWAP9 DUP6 ADD SWAP9 SWAP4 POP SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x50F8 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP7 DUP2 MSTORE PUSH1 0xC0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x5148 PUSH1 0xC0 DUP4 ADD DUP9 PUSH2 0x509C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x515A DUP2 DUP9 PUSH2 0x509C JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x516E DUP2 DUP8 PUSH2 0x509C JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x5182 DUP2 DUP7 PUSH2 0x50DA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xA0 DUP5 ADD MSTORE PUSH2 0x5196 DUP2 DUP6 PUSH2 0x4EB9 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x51B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x51C3 DUP2 PUSH2 0x4E57 JUMP JUMPDEST SWAP3 POP PUSH2 0x51D1 PUSH1 0x20 DUP6 ADD PUSH2 0x5033 JUMP JUMPDEST SWAP2 POP PUSH2 0x4FAB PUSH1 0x40 DUP6 ADD PUSH2 0x5033 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x51F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x4FE7 DUP2 PUSH2 0x4E57 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x5222 DUP2 PUSH2 0x4E57 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x4FE7 DUP2 PUSH2 0x4E57 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5244 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D48 DUP3 PUSH2 0x5033 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x140 DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x526C PUSH2 0x160 DUP6 ADD DUP4 PUSH2 0x509C JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP6 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP1 DUP7 DUP6 SUB ADD PUSH1 0x40 DUP8 ADD MSTORE PUSH2 0x52A8 DUP5 DUP4 PUSH2 0x509C JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP8 ADD MLOAD SWAP2 POP DUP1 DUP7 DUP6 SUB ADD PUSH1 0x60 DUP8 ADD MSTORE PUSH2 0x52C5 DUP5 DUP4 PUSH2 0x509C JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 DUP8 ADD MSTORE PUSH1 0x80 DUP8 ADD MLOAD SWAP2 POP PUSH2 0x52ED PUSH1 0xA0 DUP8 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xA0 DUP8 ADD MLOAD PUSH1 0xC0 DUP8 ADD MSTORE PUSH1 0xC0 DUP8 ADD MLOAD SWAP2 POP DUP1 DUP7 DUP6 SUB ADD PUSH1 0xE0 DUP8 ADD MSTORE PUSH2 0x5312 DUP5 DUP4 PUSH2 0x50DA JUMP JUMPDEST SWAP4 POP PUSH1 0xE0 DUP8 ADD MLOAD SWAP2 POP PUSH2 0x100 DUP2 DUP8 DUP7 SUB ADD DUP2 DUP9 ADD MSTORE PUSH2 0x5331 DUP6 DUP5 PUSH2 0x50DA JUMP JUMPDEST SWAP5 POP DUP1 DUP9 ADD MLOAD SWAP3 POP POP PUSH2 0x120 DUP2 DUP8 DUP7 SUB ADD DUP2 DUP9 ADD MSTORE PUSH2 0x5350 DUP6 DUP5 PUSH2 0x4EB9 JUMP JUMPDEST SWAP1 DUP9 ADD MLOAD DUP8 DUP3 SUB SWAP1 SWAP3 ADD DUP5 DUP9 ADD MSTORE SWAP4 POP SWAP1 POP PUSH2 0x536C DUP4 DUP3 PUSH2 0x4EB9 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x53EC JUMPI PUSH2 0x53EC PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x540E JUMPI PUSH2 0x540E PUSH2 0x5376 JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x544D PUSH2 0x5448 DUP5 PUSH2 0x53F4 JUMP JUMPDEST PUSH2 0x53A5 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x5461 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5489 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D48 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x543A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x54AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x54B8 DUP2 PUSH2 0x4E57 JUMP JUMPDEST SWAP3 POP PUSH2 0x54C6 PUSH1 0x20 DUP6 ADD PUSH2 0x4F5B JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x54E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x54EE DUP7 DUP3 DUP8 ADD PUSH2 0x5478 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x550B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x5516 DUP2 PUSH2 0x4E57 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5532 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x553E DUP6 DUP3 DUP7 ADD PUSH2 0x5478 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x555E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x5569 DUP2 PUSH2 0x4E57 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x5579 DUP2 PUSH2 0x4E57 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x559C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x55AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x55BC DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x543A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x32F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x55F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x5602 DUP2 PUSH2 0x4E57 JUMP JUMPDEST SWAP2 POP PUSH2 0x3548 PUSH1 0x20 DUP5 ADD PUSH2 0x55C8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x5626 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x5631 DUP2 PUSH2 0x4E57 JUMP JUMPDEST SWAP4 POP PUSH2 0x563F PUSH1 0x20 DUP7 ADD PUSH2 0x4F5B JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5669 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x5681 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5695 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x56A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x56B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP6 POP SWAP4 POP PUSH2 0x4FAB SWAP2 DUP7 ADD SWAP1 POP PUSH2 0x5033 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x56E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x56EF DUP2 PUSH2 0x4E57 JUMP JUMPDEST SWAP3 POP PUSH2 0x56FD PUSH1 0x20 DUP6 ADD PUSH2 0x4F5B JUMP JUMPDEST SWAP2 POP PUSH2 0x4FAB PUSH1 0x40 DUP6 ADD PUSH2 0x55C8 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP1 DUP4 AND DUP2 DUP2 LT ISZERO PUSH2 0x578E JUMPI PUSH2 0x578E PUSH2 0x573A JUMP JUMPDEST SUB SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x57BD JUMPI PUSH2 0x57BD PUSH2 0x573A JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP5 AND DUP1 PUSH1 0xFF SUB DUP3 GT ISZERO PUSH2 0x57E3 JUMPI PUSH2 0x57E3 PUSH2 0x573A JUMP JUMPDEST ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP5 AND DUP2 PUSH1 0xFF DIV DUP2 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x580C JUMPI PUSH2 0x580C PUSH2 0x573A JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x5857 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x5891 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 EQ ISZERO PUSH2 0x58AE JUMPI PUSH2 0x58AE PUSH2 0x573A JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x57BD JUMPI PUSH2 0x57BD PUSH2 0x573A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND DUP4 MSTORE DUP8 PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP8 AND PUSH1 0x40 DUP5 ADD MSTORE POP PUSH1 0xE0 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x5908 PUSH1 0xE0 DUP4 ADD DUP7 PUSH2 0x4EB9 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x591A DUP2 DUP7 PUSH2 0x4EB9 JUMP JUMPDEST SWAP4 ISZERO ISZERO PUSH1 0xA0 DUP5 ADD MSTORE POP POP DUP1 DUP3 SUB PUSH1 0xC0 SWAP1 SWAP2 ADD MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x594F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5966 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x5977 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x5985 PUSH2 0x5448 DUP3 PUSH2 0x53F4 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x599A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3340 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x4E89 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x59BA JUMPI PUSH2 0x59BA PUSH2 0x573A JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x59D6 JUMPI PUSH2 0x59D6 PUSH2 0x573A JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0xFFFFFF DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x57BD JUMPI PUSH2 0x57BD PUSH2 0x573A JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x5A0E JUMPI PUSH2 0x5A0E PUSH2 0x573A JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP4 AND DUP1 PUSH2 0x5A4D JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 PUSH1 0xFF DUP5 AND MOD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x5A6E JUMPI PUSH2 0x5A6E PUSH2 0x573A JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND DUP2 DUP6 AND DUP2 DUP4 DIV DUP2 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x5A9E JUMPI PUSH2 0x5A9E PUSH2 0x573A JUMP JUMPDEST MUL SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x57BD JUMPI PUSH2 0x57BD PUSH2 0x573A JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP1 DUP4 AND DUP2 DUP2 LT ISZERO PUSH2 0x578E JUMPI PUSH2 0x578E PUSH2 0x573A JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC6 JUMPI 0xE1 MOD 0xFC PUSH8 0x6514C056405D155C SWAP9 0xD0 MOD 0xC0 PUSH17 0xA5821BAAAD5D117A2C8DD12AC664736F6C PUSH4 0x43000809 STOP CALLER ",
          "sourceMap": "100:484:2:-:0;;;161:421;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;334:4;340:7;349;315:42;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;306:6:2;:51;;-1:-1:-1;;;;;;306:51:2;-1:-1:-1;;;;;306:51:2;;;;;;;;;368:30;;;-1:-1:-1;;;368:30:2;;;;:28;;:30;;;;;;;;;;;;;;;306:51;368:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;368:46:2;;415:5;368:53;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;449:1:2;;-1:-1:-1;;;432:92:2;456:3;452:1;-1:-1:-1;;;;;452:7:2;;432:92;;;480:6;;;502:10;;-1:-1:-1;;;;;480:6:2;;;;:18;;499:1;;502:7;;:10;;;;:::i;:::-;;;;;;;480:33;;;;;;;;;;;;;;;-1:-1:-1;;;;;7992:15:49;;;7974:34;;8044:15;;8039:2;8024:18;;8017:43;7924:2;7909:18;;7762:304;480:33:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;461:3;;;;;:::i;:::-;;;;432:92;;;-1:-1:-1;534:6:2;;;:41;;-1:-1:-1;;;534:41:2;;562:4;534:41;;;8552:51:49;8619:18;;;8612:50;;;;-1:-1:-1;;;;;534:6:2;;:19;;8525:18:49;;534:41:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;161:421;;;;100:484;;;;;;;;;;:::o;14:127:49:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:275;217:2;211:9;282:2;263:13;;-1:-1:-1;;259:27:49;247:40;;-1:-1:-1;;;;;302:34:49;;338:22;;;299:62;296:88;;;364:18;;:::i;:::-;400:2;393:22;146:275;;-1:-1:-1;146:275:49:o;426:183::-;486:4;-1:-1:-1;;;;;508:30:49;;505:56;;;541:18;;:::i;:::-;-1:-1:-1;586:1:49;582:14;598:4;578:25;;426:183::o;614:131::-;-1:-1:-1;;;;;689:31:49;;679:42;;669:70;;735:1;732;725:12;669:70;614:131;:::o;750:138::-;829:13;;851:31;829:13;851:31;:::i;:::-;750:138;;;:::o;893:2274::-;978:5;1031:3;1024:4;1016:6;1012:17;1008:27;998:55;;1049:1;1046;1039:12;998:55;1078:6;1072:13;1105:60;1121:43;1161:2;1121:43;:::i;:::-;1105:60;:::i;:::-;1187:3;1211:2;1206:3;1199:15;1239:4;1234:3;1230:14;1223:21;;1296:4;1290:2;1287:1;1283:10;1275:6;1271:23;1267:34;1253:48;;1324:3;1316:6;1313:15;1310:35;;;1341:1;1338;1331:12;1310:35;1377:4;1369:6;1365:17;1391:1747;1407:6;1402:3;1399:15;1391:1747;;;1482:10;;-1:-1:-1;;;;;1508:35:49;;1505:55;;;1556:1;1553;1546:12;1505:55;1583:24;;1642:2;1634:11;;1630:21;-1:-1:-1;1620:49:49;;1665:1;1662;1655:12;1620:49;1706:4;1702:2;1698:13;1692:20;1738:60;1754:43;1794:2;1754:43;:::i;1738:60::-;1842:17;;;1942:1;1938:10;;;;1930:19;;1951:2;1926:28;;1892:4;1881:16;;;1970:17;;;1967:37;;;2000:1;1997;1990:12;1967:37;2038:2;2034;2030:11;2054:1009;2072:8;2065:5;2062:19;2054:1009;;;2163:12;;-1:-1:-1;;;;;2195:37:49;;2192:57;;;2245:1;2242;2235:12;2192:57;2276:22;;2337:2;2329:11;;2325:21;-1:-1:-1;2315:49:49;;2360:1;2357;2350:12;2315:49;2405:2;2401;2397:11;2391:18;2439:60;2455:43;2495:2;2455:43;:::i;2439:60::-;2551:17;;;2659:1;2655:10;;;;2647:19;;2668:2;2643:28;;2605:4;2594:16;;;2691:17;;;2688:37;;;2721:1;2718;2711:12;2688:37;2763:2;2759;2755:11;2742:24;;2783:187;2801:8;2794:5;2791:19;2783:187;;;2893:12;;2879:27;;2947:4;2822:16;;;;2936;;;;2783:187;;;2987:20;;-1:-1:-1;;3044:4:49;3033:16;;;;2093;;;;;-1:-1:-1;2054:1009:49;;;-1:-1:-1;3076:18:49;;-1:-1:-1;;3123:4:49;3114:14;;;;1424;;;;;-1:-1:-1;1391:1747:49;;;-1:-1:-1;3156:5:49;893:2274;-1:-1:-1;;;;;893:2274:49:o;3172:1424::-;3369:6;3377;3385;3393;3446:3;3434:9;3425:7;3421:23;3417:33;3414:53;;;3463:1;3460;3453:12;3414:53;3486:16;;3521:2;3552:18;;;3546:25;3486:16;;-1:-1:-1;3521:2:49;-1:-1:-1;;;;;3620:14:49;;;3617:34;;;3647:1;3644;3637:12;3617:34;3685:6;3674:9;3670:22;3660:32;;3730:7;3723:4;3719:2;3715:13;3711:27;3701:55;;3752:1;3749;3742:12;3701:55;3781:2;3775:9;3804:60;3820:43;3860:2;3820:43;:::i;3804:60::-;3898:15;;;3980:1;3976:10;;;;3968:19;;3964:28;;;3929:12;;;;4004:19;;;4001:39;;;4036:1;4033;4026:12;4001:39;4060:11;;;;4080:210;4096:6;4091:3;4088:15;4080:210;;;4169:3;4163:10;4186:31;4211:5;4186:31;:::i;:::-;4230:18;;4113:12;;;;4268;;;;4080:210;;;4309:5;-1:-1:-1;4333:49:49;;-1:-1:-1;;4378:2:49;4363:18;;4333:49;:::i;:::-;4323:59;;4428:2;4417:9;4413:18;4407:25;4391:41;;4457:2;4447:8;4444:16;4441:36;;;4473:1;4470;4463:12;4441:36;;;4496:94;4582:7;4571:8;4560:9;4556:24;4496:94;:::i;:::-;4486:104;;;3172:1424;;;;;;;:::o;4601:757::-;4819:2;4831:21;;;4901:13;;4804:18;;;4923:22;;;4771:4;;4998;;4976:2;4961:18;;;5025:15;;;4771:4;5068:195;5082:6;5079:1;5076:13;5068:195;;;5147:13;;-1:-1:-1;;;;;5143:39:49;5131:52;;5203:12;;;;5238:15;;;;5179:1;5097:9;5068:195;;;-1:-1:-1;;;;;;;;5319:32:49;;;;5299:18;;5292:60;;;;-1:-1:-1;5280:3:49;4601:757;-1:-1:-1;4601:757:49:o;5363:283::-;5465:6;5518:2;5506:9;5497:7;5493:23;5489:32;5486:52;;;5534:1;5531;5524:12;5486:52;5566:9;5560:16;5585:31;5610:5;5585:31;:::i;:::-;5635:5;5363:283;-1:-1:-1;;;5363:283:49:o;5651:1974::-;5893:4;5922:2;5962;5951:9;5947:18;5992:2;5981:9;5974:21;6015:6;6050;6044:13;6081:6;6073;6066:22;6119:2;6108:9;6104:18;6097:25;;6141:1;6131:11;;6202:2;6192:6;6188:2;6184:15;6173:9;6169:31;6165:40;6240:2;6232:6;6228:15;6261:1;6271:1325;6285:6;6282:1;6279:13;6271:1325;;;6350:22;;;-1:-1:-1;;6346:36:49;6334:49;;6406:13;;6480:9;;6502:24;;;6658:11;;;;6548:15;;;;6606:17;;;6594:30;;6590:39;;6693:1;6707:780;6723:8;6718:3;6715:17;6707:780;;;6804:19;;;-1:-1:-1;;6800:33:49;6786:48;;6861:15;;6945:9;;6971:24;;;7069:11;;;;7021:15;;;;7108:1;7126:229;7142:8;7137:3;7134:17;7126:229;;;7227:15;;7213:30;;7320:17;;;;7273:14;;;;7170:1;7161:11;7126:229;;;-1:-1:-1;;7416:17:49;;;;7459:14;;;;7382:5;-1:-1:-1;;6751:1:49;6742:11;6707:780;;;-1:-1:-1;7574:12:49;;;;7510:6;-1:-1:-1;;;7539:15:49;;;;-1:-1:-1;6307:1:49;6300:9;6271:1325;;;-1:-1:-1;7613:6:49;;5651:1974;-1:-1:-1;;;;;;;;5651:1974:49:o;7630:127::-;7691:10;7686:3;7682:20;7679:1;7672:31;7722:4;7719:1;7712:15;7746:4;7743:1;7736:15;8071:308;8110:3;-1:-1:-1;;;;;8181:14:49;;;8207:15;;;8204:138;;;8264:10;8259:3;8255:20;8252:1;8245:31;8299:4;8296:1;8289:15;8327:4;8324:1;8317:15;8204:138;8371:1;8358:15;;8071:308;-1:-1:-1;;;8071:308:49:o;8384:284::-;100:484:2;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@nuggft_2270": {
              "entryPoint": null,
              "id": 2270,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "abi_encode_tuple_t_contract$_NuggftV1_$2263__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:259:49",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:49",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "132:125:49",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "142:26:49",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "154:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "165:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "150:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "150:18:49"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "142:4:49"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "184:9:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "199:6:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "207:42:49",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "195:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "195:55:49"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "177:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "177:74:49"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "177:74:49"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_NuggftV1_$2263__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "101:9:49",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "112:6:49",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "123:4:49",
                        "type": ""
                      }
                    ],
                    "src": "14:243:49"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_encode_tuple_t_contract$_NuggftV1_$2263__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n}",
              "id": 49,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "6080604052348015600f57600080fd5b506004361060285760003560e01c8063f55a30ee14602d575b600080fd5b600054604c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f3fea2646970667358221220cc264bd90cf8cb68cfbdffee6d14ca168ceccfbc2d796b75a6141acbf7ff033464736f6c63430008090033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xF55A30EE EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x4C SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0x26 0x4B 0xD9 0xC 0xF8 0xCB PUSH9 0xCFBDFFEE6D14CA168C 0xEC 0xCF 0xBC 0x2D PUSH26 0x6B75A6141ACBF7FF033464736F6C634300080900330000000000 ",
          "sourceMap": "100:484:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;132:22;;;;;;;;;;;;207:42:49;195:55;;;177:74;;165:2;150:18;132:22:2;;;;;;"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "34200",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "nuggft()": "2279"
          }
        },
        "methodIdentifiers": {
          "nuggft()": "f55a30ee"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"trusted\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"dotnugg\",\"type\":\"address\"},{\"internalType\":\"uint256[][][]\",\"name\":\"nuggs\",\"type\":\"uint256[][][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"nuggft\",\"outputs\":[{\"internalType\":\"contract NuggftV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/_deployment/NuggftV1Deployer.sol\":\"NuggftV1Deployer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"src/NuggftV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721, IERC165, IERC721Metadata} from './interfaces/IERC721.sol';\\n\\nimport {NuggftV1Loan} from './core/NuggftV1Loan.sol';\\nimport {NuggftV1Dotnugg} from './core/NuggftV1Dotnugg.sol';\\nimport {Trust} from './core/Trust.sol';\\n\\nimport {INuggftV1Migrator} from './interfaces/nuggftv1/INuggftV1Migrator.sol';\\nimport {IDotnuggV1Metadata} from './interfaces/dotnuggv1/IDotnuggV1Metadata.sol';\\nimport {IDotnuggV1Implementer} from './interfaces/dotnuggv1/IDotnuggV1Implementer.sol';\\nimport {IDotnuggV1} from './interfaces/dotnuggv1/IDotnuggV1.sol';\\n\\nimport {INuggftV1Token} from './interfaces/nuggftv1/INuggftV1Token.sol';\\nimport {INuggftV1Stake} from './interfaces/nuggftv1/INuggftV1Stake.sol';\\n\\nimport {INuggftV1} from './interfaces/nuggftv1/INuggftV1.sol';\\n\\nimport {SafeTransferLib} from './libraries/SafeTransferLib.sol';\\nimport {SafeCastLib} from './libraries/SafeCastLib.sol';\\nimport {ShiftLib} from './libraries/ShiftLib.sol';\\n\\nimport {NuggftV1StakeType} from './types/NuggftV1StakeType.sol';\\nimport {NuggftV1ProofType} from './types/NuggftV1ProofType.sol';\\n\\n/// @title NuggFT V1\\n/// @author nugg.xyz - danny7even & dub6ix\\n/// @notice Explain to an end user what this does\\n/// @dev Explain to a developer any extra details\\n/// @dev the words \\\"share\\\" and \\\"nugg\\\" are used interchangably throughout\\n\\n/// deviations from ERC721 standard:\\n/// 1. no verificaiton the receiver is a ERC721Reciever - on top of this being a gross waste of gas,\\n/// the way the swapping logic works makes this only worth calling when a user places an offer - and\\n/// we did not want to call \\\"onERC721Recieved\\\" when no token was being sent.\\n/// 2.\\ncontract NuggftV1 is IERC721Metadata, NuggftV1Loan {\\n    using SafeCastLib for uint256;\\n\\n    using NuggftV1StakeType for uint256;\\n\\n    constructor(address[] memory trusted, address _defaultResolver) NuggftV1Dotnugg(_defaultResolver) Trust(trusted) {}\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IDotnuggV1Implementer).interfaceId ||\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n\\n    function name() public pure override returns (string memory) {\\n        return 'Nugg Fungible Token V1';\\n    }\\n\\n    function symbol() public pure override returns (string memory) {\\n        return 'NUGGFT';\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory res) {\\n        uint160 safeTokenId = tokenId.safe160();\\n\\n        res = dotnuggV1.dat(address(this), tokenId, dotnuggV1ResolverOf(safeTokenId), symbol(), name(), true, '');\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                CORE\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function dotnuggV1ImplementerCallback(uint256 tokenId) public view override returns (IDotnuggV1Metadata.Memory memory data) {\\n        (\\n            ,\\n            data.ids, //\\n            data.xovers,\\n            data.yovers,\\n            data.styles,\\n            data.background\\n        ) = proofToDotnuggMetadata(tokenId.safe160());\\n\\n        data.labels = new string[](8);\\n        data.version = 1;\\n        data.artifactId = tokenId;\\n        data.implementer = address(this);\\n\\n        data.labels[0] = 'BASE';\\n        data.labels[1] = 'EYES';\\n        data.labels[2] = 'MOUTH';\\n        data.labels[3] = 'HAIR';\\n        data.labels[4] = 'HAT';\\n        data.labels[5] = 'BACK';\\n        data.labels[6] = 'NECK';\\n        data.labels[7] = 'HOLD';\\n\\n        return data;\\n    }\\n\\n    /// @inheritdoc INuggftV1Token\\n    function trustedMint(uint160 tokenId, address to) external payable override requiresTrust {\\n        require(tokenId < TRUSTED_MINT_TOKENS && tokenId != 0, 'G:1');\\n\\n        addStakedShareFromMsgValue(0);\\n\\n        setProof(tokenId);\\n\\n        _mintTo(to, tokenId);\\n\\n        emit Mint(tokenId, uint96(msg.value));\\n    }\\n\\n    // modifier haha() {\\n    //     uint256 price = gasleft();\\n\\n    //     _;\\n    //     uint256 price2 = gasleft();\\n    //     // console.log(price, price2, price - price2);\\n    //     assert(price < 90000 && price - price2 < 58000);\\n    // }\\n\\n    /// @inheritdoc INuggftV1Token\\n    function mint(uint160 tokenId) public payable override {\\n        require(tokenId < UNTRUSTED_MINT_TOKENS + TRUSTED_MINT_TOKENS && tokenId > TRUSTED_MINT_TOKENS, 'G:1');\\n\\n        addStakedShareFromMsgValue(0);\\n\\n        setProof(tokenId);\\n\\n        _mintTo(msg.sender, tokenId);\\n\\n        emit Mint(tokenId, uint96(msg.value));\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                BURN/MIGRATE\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function burn(uint160 tokenId) external {\\n        uint96 ethOwed = subStakedShare(tokenId);\\n\\n        SafeTransferLib.safeTransferETH(msg.sender, ethOwed);\\n\\n        emit Burn(tokenId, msg.sender, ethOwed);\\n    }\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function migrate(uint160 tokenId) external {\\n        require(migrator != address(0), 'T:4');\\n\\n        // stores the proof before deleting the nugg\\n        uint256 proof = proofOf(tokenId);\\n\\n        uint96 ethOwed = subStakedShare(tokenId);\\n\\n        INuggftV1Migrator(migrator).nuggftMigrateFromV1{value: ethOwed}(tokenId, proof, msg.sender);\\n\\n        emit MigrateV1Sent(migrator, tokenId, proof, msg.sender, ethOwed);\\n    }\\n\\n    function testnet__exploit() external {\\n        SafeTransferLib.safeTransferETH(msg.sender, address(this).balance);\\n    }\\n\\n    /// @notice removes a staked share from the contract,\\n    /// @dev this is the only way to remove a share\\n    /// @dev caculcates but does not handle dealing the eth - which is handled by the two helpers above\\n    /// @dev ensures the user is the owner of the nugg\\n    /// @param tokenId the id of the nugg being unstaked\\n    /// @return ethOwed -> the amount of eth owed to the unstaking user - equivilent to \\\"ethPerShare\\\"\\n    function subStakedShare(uint160 tokenId) internal returns (uint96 ethOwed) {\\n        // reverts if token does not exist\\n        address owner = _ownerOf(tokenId);\\n\\n        require(_getApproved(tokenId) == address(this) && owner == msg.sender, 'T:3');\\n\\n        uint256 cache = stake;\\n\\n        // hanles all logic not related to staking the nugg\\n        delete owners[tokenId];\\n        delete approvals[tokenId];\\n\\n        delete swaps[tokenId];\\n        delete loans[tokenId];\\n        delete proofs[tokenId];\\n        delete resolvers[tokenId];\\n\\n        emitTransferEvent(owner, address(0), tokenId);\\n\\n        ethOwed = calculateEthPerShare(cache);\\n\\n        /// TODO - test migration\\n        assert(cache.shares() >= 1);\\n        assert(cache.staked() >= ethOwed);\\n\\n        cache = cache.subShares(1);\\n        cache = cache.subStaked(ethOwed);\\n\\n        stake = cache;\\n\\n        emit Stake(cache);\\n    }\\n}\\n\",\"keccak256\":\"0xb6c82029df263b68b806b87a7b166a7bd0142d71efe65fe6d7c9413e4798ff7b\",\"license\":\"MIT\"},\"src/_deployment/NuggftV1Deployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {NuggftV1} from '../NuggftV1.sol';\\n\\ncontract NuggftV1Deployer {\\n    NuggftV1 public nuggft;\\n\\n    constructor(\\n        bytes32 salt,\\n        address[] memory trusted,\\n        address dotnugg,\\n        uint256[][][] memory nuggs\\n    ) {\\n        nuggft = new NuggftV1{salt: salt}(trusted, dotnugg);\\n\\n        nuggft.dotnuggV1StorageProxy().unsafeBulkStore(nuggs);\\n\\n        for (uint160 i = 1; i < 200; i++) {\\n            nuggft.trustedMint(i, trusted[0]);\\n        }\\n\\n        nuggft.setIsTrusted(address(this), false);\\n    }\\n}\\n\",\"keccak256\":\"0x39b76206e58f669de463a5744698cbe26de23c17efadda63fe80c810fc913600\",\"license\":\"MIT\"},\"src/_test/utils/console.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function logb(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes32)', p0));\\n    }\\n\\n    function logb(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes32)', bytes32(p0)));\\n    }\\n\\n    function logb(string memory p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bytes32)', p0, bytes32(p1)));\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log()'));\\n    }\\n\\n    function logInt(int256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(int)', p0));\\n    }\\n\\n    function logUint(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint)', p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string)', p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool)', p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address)', p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes)', p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes1)', p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes2)', p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes3)', p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes4)', p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes5)', p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes6)', p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes7)', p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes8)', p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes9)', p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes10)', p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes11)', p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes12)', p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes13)', p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes14)', p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes15)', p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes16)', p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes17)', p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes18)', p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes19)', p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes20)', p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes21)', p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes22)', p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes23)', p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes24)', p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes25)', p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes26)', p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes27)', p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes28)', p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes29)', p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes30)', p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes31)', p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes32)', p0));\\n    }\\n\\n    function log(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint)', p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string)', p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool)', p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address)', p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint)', p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string)', p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool)', p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address)', p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint)', p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string)', p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool)', p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address)', p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint)', p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string)', p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool)', p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address)', p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint)', p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string)', p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool)', p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address)', p0, p1));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,address)', p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0x7a390be5a3164dc42f3291c7a7cd725606eca9f6351f128412d65edc68515f3c\",\"license\":\"MIT\"},\"src/core/NuggftV1Dotnugg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1StorageProxy} from '../interfaces/dotnuggv1/IDotnuggV1StorageProxy.sol';\\n\\nimport {IDotnuggV1} from '../interfaces/dotnuggv1/IDotnuggV1.sol';\\nimport {IDotnuggV1Metadata} from '../interfaces/dotnuggv1/IDotnuggV1Metadata.sol';\\nimport {IDotnuggV1Resolver} from '../interfaces/dotnuggv1/IDotnuggV1Resolver.sol';\\nimport {IDotnuggV1Implementer} from '../interfaces/dotnuggv1/IDotnuggV1Implementer.sol';\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\nimport {INuggftV1Dotnugg} from '../interfaces/nuggftv1/INuggftV1Dotnugg.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {NuggftV1Token} from './NuggftV1Token.sol';\\n\\nimport {Trust} from './Trust.sol';\\n\\nabstract contract NuggftV1Dotnugg is INuggftV1Dotnugg, NuggftV1Token, Trust {\\n    using SafeCastLib for uint256;\\n    using SafeCastLib for uint16;\\n\\n    struct Settings {\\n        mapping(uint256 => uint256) anchorOverrides;\\n        mapping(uint256 => string) styles;\\n        string background;\\n    }\\n\\n    mapping(uint160 => Settings) settings;\\n\\n    /// @inheritdoc IDotnuggV1Implementer\\n    IDotnuggV1StorageProxy public override dotnuggV1StorageProxy;\\n\\n    /// @inheritdoc INuggftV1Dotnugg\\n    IDotnuggV1 public override dotnuggV1;\\n\\n    mapping(uint256 => address) resolvers;\\n\\n    uint256 internal featureLengths;\\n\\n    constructor(address _dotnuggV1) {\\n        require(_dotnuggV1 != address(0), 'F:4');\\n        dotnuggV1 = IDotnuggV1(_dotnuggV1);\\n        dotnuggV1StorageProxy = dotnuggV1.register();\\n    }\\n\\n    /// @inheritdoc IDotnuggV1Implementer\\n    function dotnuggV1StoreCallback(\\n        address caller,\\n        uint8 feature,\\n        uint8 amount,\\n        address\\n    ) external override(IDotnuggV1Implementer) returns (bool ok) {\\n        require(msg.sender == address(dotnuggV1StorageProxy), 'D:0');\\n\\n        ok = isTrusted[caller];\\n\\n        if (!ok) return false;\\n\\n        uint256 cache = featureLengths;\\n\\n        uint256 newLen = _lengthOf(cache, feature) + amount;\\n\\n        featureLengths = ShiftLib.set(cache, 8, feature * 8, newLen);\\n    }\\n\\n    /// @inheritdoc INuggftV1Dotnugg\\n    function dotnuggV1StoreFiles(uint256[][] calldata data, uint8 feature) external requiresTrust {\\n        // uint8 len = dotnuggV1StorageProxy.store(feature, data);\\n        // uint256 cache = featureLengths;\\n        // uint256 newLen = _lengthOf(cache, feature) + len;\\n        // featureLengths = ShiftLib.set(cache, 8, feature * 8, newLen);\\n    }\\n\\n    function lengthOf(uint8 feature) external view returns (uint8) {\\n        return _lengthOf(featureLengths, feature);\\n    }\\n\\n    function _lengthOf(uint256 cache, uint8 feature) internal pure returns (uint8) {\\n        return uint8(ShiftLib.get(cache, 8, feature * 8));\\n    }\\n\\n    /// @inheritdoc INuggftV1Dotnugg\\n    function setDotnuggV1Resolver(uint256 tokenId, address to) public virtual override {\\n        require(_isOperatorForOwner(msg.sender, tokenId.safe160()), 'F:5');\\n\\n        resolvers[tokenId] = to;\\n\\n        emit DotnuggV1ConfigUpdated(tokenId);\\n    }\\n\\n    /// @inheritdoc INuggftV1Dotnugg\\n    function dotnuggV1ResolverOf(uint256 tokenId) public view virtual override returns (address) {\\n        return resolvers[tokenId.safe160()];\\n    }\\n\\n    /// @inheritdoc INuggftV1Dotnugg\\n    function setDotnuggV1AnchorOverrides(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        uint256 x,\\n        uint256 y\\n    ) external override {\\n        require(x < 64 && y < 64, 'UNTEESTED:1');\\n\\n        ensureOperatorForOwner(msg.sender, tokenId);\\n\\n        settings[tokenId].anchorOverrides[itemId] = x | (y << 6);\\n\\n        emit DotnuggV1ConfigUpdated(tokenId);\\n    }\\n\\n    /// @inheritdoc INuggftV1Dotnugg\\n    function setDotnuggV1Background(uint160 tokenId, string memory s) external override {\\n        ensureOperatorForOwner(msg.sender, tokenId);\\n\\n        settings[tokenId].background = s;\\n\\n        emit DotnuggV1ConfigUpdated(tokenId);\\n    }\\n\\n    /// @inheritdoc INuggftV1Dotnugg\\n    function setDotnuggV1Style(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        string memory s\\n    ) external override {\\n        ensureOperatorForOwner(msg.sender, tokenId);\\n\\n        settings[tokenId].styles[itemId] = s;\\n\\n        emit DotnuggV1ConfigUpdated(tokenId);\\n    }\\n\\n    function hasResolver(uint160 tokenId) internal view returns (bool) {\\n        return resolvers[tokenId] != address(0);\\n    }\\n}\\n\",\"keccak256\":\"0xa0b7f76dbbaca346f57d6eb7ee6aec344f1042289f29588a8462baa34ba5cae8\",\"license\":\"MIT\"},\"src/core/NuggftV1Epoch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggftV1Epoch} from '../interfaces/nuggftv1/INuggftV1Epoch.sol';\\n\\nabstract contract NuggftV1Epoch is INuggftV1Epoch {\\n    uint256 public immutable genesis;\\n\\n    uint16 constant INTERVAL = 69;\\n    uint24 constant OFFSET = 3000;\\n\\n    constructor() {\\n        genesis = block.number;\\n        emit Genesis(block.number, INTERVAL, OFFSET);\\n    }\\n\\n    /// @inheritdoc INuggftV1Epoch\\n    function epoch() public view override returns (uint24 res) {\\n        res = toEpoch(block.number, genesis);\\n    }\\n\\n    function calculateSeed() internal view returns (uint256 res, uint24 _epoch) {\\n        _epoch = epoch();\\n        res = calculateSeed(_epoch);\\n    }\\n\\n    function tryCalculateSeed(uint24 _epoch) internal view returns (uint256 res) {\\n        res = calculateSeed(_epoch);\\n    }\\n\\n    /// @notice calculates a random-enough seed that will stay the\\n    function calculateSeed(uint24 _epoch) internal view returns (uint256 res) {\\n        uint256 startblock = toStartBlock(_epoch, genesis);\\n        bytes32 bhash = getBlockHash(startblock - 2);\\n        require(bhash != 0, 'E:0');\\n        res = uint256(keccak256(abi.encodePacked(bhash, _epoch, address(this))));\\n    }\\n\\n    function getBlockHash(uint256 blocknum) internal view virtual returns (bytes32 res) {\\n        return blockhash(blocknum);\\n    }\\n\\n    function toStartBlock(uint24 _epoch, uint256 gen) internal pure returns (uint256 res) {\\n        assembly {\\n            res := add(mul(sub(_epoch, OFFSET), INTERVAL), gen)\\n        }\\n    }\\n\\n    function toEpoch(uint256 blocknum, uint256 gen) internal pure returns (uint24 res) {\\n        assembly {\\n            res := add(div(sub(blocknum, gen), INTERVAL), OFFSET)\\n        }\\n    }\\n\\n    function toEndBlock(uint24 _epoch, uint256 gen) internal pure returns (uint256 res) {\\n        unchecked {\\n            res = toStartBlock(_epoch + 1, gen) - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1723a738e0ed0f27e411824c057126305963c3b6b8d5ea3b48f9ffeabcd88e3b\",\"license\":\"MIT\"},\"src/core/NuggftV1Loan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggftV1Loan} from '../interfaces/nuggftv1/INuggftV1Loan.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {NuggftV1AgentType} from '../types/NuggftV1AgentType.sol';\\n\\nimport {NuggftV1Swap} from './NuggftV1Swap.sol';\\n\\nabstract contract NuggftV1Loan is INuggftV1Loan, NuggftV1Swap {\\n    using SafeCastLib for uint256;\\n\\n    using NuggftV1AgentType for uint256;\\n\\n    mapping(uint160 => uint256) loans;\\n\\n    uint24 constant LIQUIDATION_PERIOD = 2;\\n\\n    uint96 constant REBALANCE_FEE_BPS = 100;\\n\\n    /// @inheritdoc INuggftV1Loan\\n    function loan(uint160 tokenId) external override {\\n        require(_ownerOf(tokenId) == msg.sender, 'L:0');\\n\\n        uint256 loanData = NuggftV1AgentType.newAgentType(epoch(), msg.sender, ethPerShare(), false);\\n\\n        loans[tokenId] = loanData; // starting swap data\\n\\n        approvedTransferToSelf(tokenId);\\n\\n        uint96 value = loanData.eth();\\n\\n        SafeTransferLib.safeTransferETH(msg.sender, value);\\n\\n        emit Loan(tokenId, value);\\n    }\\n\\n    /// @inheritdoc INuggftV1Loan\\n    function liquidate(uint160 tokenId) external payable override {\\n        (uint96 toLiquidate, uint96 toRebalance, uint96 owed, uint24 epochDue, address loaner) = loanInfo(tokenId);\\n\\n        assert(address(this) == _ownerOf(tokenId)); // should always be true - should revert in loanInfo\\n\\n        delete loans[tokenId];\\n\\n        address benif = msg.sender;\\n\\n        if (epochDue >= epoch()) {\\n            // if liquidaton deadline has not passed - check perrmission\\n            require(_isOperatorFor(msg.sender, loaner), 'L:1');\\n            benif = loaner;\\n        }\\n\\n        uint96 value = msg.value.safe96();\\n\\n        require(toLiquidate <= value, 'L:2');\\n\\n        uint96 overpayment = value - toLiquidate;\\n\\n        addStakedEth(toRebalance + overpayment);\\n\\n        SafeTransferLib.safeTransferETH(benif, owed);\\n\\n        checkedTransferFromSelf(benif, tokenId);\\n\\n        emit Liquidate(tokenId, value, msg.sender);\\n    }\\n\\n    /// @inheritdoc INuggftV1Loan\\n    function rebalance(uint160 tokenId) external payable override {\\n        (, uint96 toRebalance, uint96 earned, , address loaner) = loanInfo(tokenId);\\n\\n        assert(address(this) == _ownerOf(tokenId)); // should always be true - should revert in loanInfo\\n\\n        require(toRebalance <= msg.value, 'L:3');\\n\\n        uint96 value = msg.value.safe96();\\n\\n        // must be done before new principal is calculated\\n        addStakedEth(value);\\n\\n        uint256 res = NuggftV1AgentType.newAgentType(epoch(), loaner, ethPerShare(), false);\\n\\n        loans[tokenId] = res;\\n\\n        SafeTransferLib.safeTransferETH(loaner, earned);\\n\\n        emit Rebalance(tokenId, value);\\n    }\\n\\n    /// @inheritdoc INuggftV1Loan\\n    function valueForLiquidate(uint160 tokenId) external view returns (uint96 res) {\\n        (res, , , , ) = loanInfo(tokenId);\\n    }\\n\\n    /// @inheritdoc INuggftV1Loan\\n    function valueForRebalance(uint160 tokenId) external view returns (uint96 res) {\\n        (, res, , , ) = loanInfo(tokenId);\\n    }\\n\\n    /// @inheritdoc INuggftV1Loan\\n    function loanInfo(uint160 tokenId)\\n        public\\n        view\\n        override\\n        returns (\\n            uint96 toLiquidate,\\n            uint96 toRebalance,\\n            uint96 earned,\\n            uint24 epochDue,\\n            address loaner\\n        )\\n    {\\n        uint256 cache = loans[tokenId];\\n\\n        loaner = cache.account();\\n\\n        require(loaner != address(0), 'L:4');\\n\\n        // the amount of eth currently loanded by user\\n        uint96 curr = cache.eth();\\n\\n        uint96 activeEps = ethPerShare();\\n\\n        assembly {\\n            toRebalance := div(mul(curr, REBALANCE_FEE_BPS), 10000)\\n        }\\n\\n        toLiquidate = curr + toRebalance;\\n\\n        unchecked {\\n            // value earned while lone was taken out\\n            earned = toLiquidate >= activeEps ? 0 : activeEps - toLiquidate;\\n\\n            epochDue = cache.epoch() + LIQUIDATION_PERIOD;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f583db585d4ba12db6b4d13459b55071faca14362941c8f53e74acdf237607e\",\"license\":\"MIT\"},\"src/core/NuggftV1Proof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggftV1Proof} from '../interfaces/nuggftv1/INuggftV1Proof.sol';\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport {NuggftV1Dotnugg} from './NuggftV1Dotnugg.sol';\\n\\nimport {NuggftV1ProofType} from '../types/NuggftV1ProofType.sol';\\n\\nabstract contract NuggftV1Proof is INuggftV1Proof, NuggftV1Dotnugg {\\n    using SafeCastLib for uint160;\\n    using SafeCastLib for uint256;\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                state\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    mapping(uint160 => uint256) proofs;\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                           external functions\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @inheritdoc INuggftV1Proof\\n    function rotate(\\n        uint160 tokenId,\\n        uint8 index0,\\n        uint8 index1\\n    ) external override {\\n        ensureOperatorForOwner(msg.sender, tokenId);\\n\\n        uint256 working = proofOf(tokenId);\\n\\n        working = NuggftV1ProofType.swapIndexs(working, index0, index1);\\n\\n        proofs[tokenId] = working;\\n    }\\n\\n    /// @inheritdoc INuggftV1Proof\\n    function proofOf(uint160 tokenId) public view virtual override returns (uint256) {\\n        if (proofs[tokenId] != 0) return proofs[tokenId];\\n\\n        (uint256 seed, uint256 epoch, uint256 proof) = pendingProof();\\n\\n        if (epoch == tokenId && seed != 0) return proof;\\n        else return 0;\\n    }\\n\\n    /// @inheritdoc INuggftV1Proof\\n    function proofToDotnuggMetadata(uint160 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint256 proof,\\n            uint8[] memory defaultIds,\\n            uint8[] memory overxs,\\n            uint8[] memory overys,\\n            string[] memory styles,\\n            string memory background\\n        )\\n    {\\n        proof = proofOf(tokenId);\\n\\n        if (proof == 0) {\\n            proof = initFromSeed(tryCalculateSeed(tokenId.safe24()));\\n            require(proof != 0, 'P:L');\\n        }\\n\\n        defaultIds = new uint8[](8);\\n        overxs = new uint8[](8);\\n        overys = new uint8[](8);\\n        styles = new string[](8);\\n\\n        defaultIds[0] = uint8(proof & 0x3);\\n\\n        for (uint8 i = 0; i < 7; i++) {\\n            uint16 item = NuggftV1ProofType.getIndex(proof, i);\\n\\n            if (item == 0) continue;\\n\\n            (uint8 feature, uint8 pos) = NuggftV1ProofType.parseItemId(item);\\n\\n            if (defaultIds[feature] == 0) {\\n                uint256 overrides = settings[tokenId].anchorOverrides[item];\\n                overys[feature] = uint8(overrides >> 6);\\n                overxs[feature] = uint8(overrides & ShiftLib.mask(6));\\n                styles[feature] = settings[tokenId].styles[item];\\n\\n                defaultIds[feature] = pos;\\n            }\\n        }\\n\\n        background = settings[tokenId].background;\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                             internal functions\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function exists(uint160 tokenId) internal view override returns (bool) {\\n        return proofOf(tokenId) != 0;\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            SWAP MANAGEMENT\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function addItem(uint160 tokenId, uint16 itemId) internal {\\n        ensureOperatorForOwner(msg.sender, tokenId);\\n\\n        uint256 working = proofOf(tokenId);\\n\\n        working = NuggftV1ProofType.setIndex(working, NuggftV1ProofType.search(working, 0), itemId);\\n\\n        proofs[tokenId] = working;\\n    }\\n\\n    function removeItem(uint160 tokenId, uint16 itemId) internal {\\n        ensureOperatorForOwner(msg.sender, tokenId);\\n\\n        uint256 working = proofOf(tokenId);\\n\\n        working = NuggftV1ProofType.setIndex(working, NuggftV1ProofType.search(working, itemId), 0);\\n\\n        proofs[tokenId] = working;\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            INITIALIZATION\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function setProof(uint160 tokenId) internal {\\n        require(proofs[tokenId] == 0, 'P:5');\\n\\n        uint256 randomEnoughSeed = uint256(keccak256(abi.encodePacked(hex'420690', tokenId, blockhash(block.number - 1))));\\n\\n        uint256 res = initFromSeed(randomEnoughSeed);\\n\\n        proofs[tokenId] = res;\\n    }\\n\\n    function setProofFromEpoch(uint160 tokenId) internal {\\n        require(proofs[tokenId] == 0, 'P:6');\\n\\n        (, uint256 epoch, uint256 res) = pendingProof();\\n\\n        require(epoch == tokenId, 'P:7');\\n\\n        proofs[tokenId] = res;\\n    }\\n\\n    // TODO TO BE TESTED\\n    function initFromSeed(uint256 seed) internal view returns (uint256 res) {\\n        require(seed != 0, 'P:8');\\n\\n        uint256 l = featureLengths;\\n\\n        res |= ((safeMod(seed & 0xff, _lengthOf(l, 0))) + 1);\\n        res |= ((1 << 8) | ((((seed >>= 8) & 0xff % _lengthOf(l, 1))) + 1)) << 3;\\n        res |= ((2 << 8) | ((((seed >>= 8) & 0xff % _lengthOf(l, 2))) + 1)) << (3 + 11);\\n\\n        uint256 selA = (seed >>= 8) & 0xff;\\n\\n        selA = selA < 128 ? 3 : 4;\\n\\n        res |= ((selA << 8) | ((safeMod((seed >>= 8) & 0xff, _lengthOf(l, uint8(selA)))) + 1)) << (3 + 22);\\n\\n        uint256 selB = (seed >>= 8) & 0xff;\\n\\n        selB = selB < 30 //\\n            ? 5\\n            : selB < 55\\n            ? 6\\n            : selB < 75\\n            ? 7\\n            : 0;\\n\\n        if (selB != 0) {\\n            res |= ((selB << 8) | ((safeMod((seed >>= 8) & 0xff, _lengthOf(l, uint8(selB)))) + 1)) << (3 + 33);\\n        }\\n\\n        uint256 selC = (seed >>= 8) & 0xff;\\n\\n        selC = selC < 30 //\\n            ? 5\\n            : selC < 55\\n            ? 6\\n            : selC < 75\\n            ? 7\\n            : selC < 115\\n            ? 4\\n            : selC < 155\\n            ? 3\\n            : selC < 205\\n            ? 2\\n            : 1;\\n\\n        res |= ((selC << 8) | ((safeMod((seed >>= 8) & 0xff, _lengthOf(l, uint8(selC)))) + 1)) << (3 + 77);\\n    }\\n\\n    function safeMod(uint256 value, uint8 modder) internal pure returns (uint256) {\\n        require(modder != 0, 'P:9');\\n        return value.safe8() % modder;\\n    }\\n\\n    function pendingProof()\\n        internal\\n        view\\n        returns (\\n            uint256 seed,\\n            uint256 epoch,\\n            uint256 proof\\n        )\\n    {\\n        (seed, epoch) = calculateSeed();\\n\\n        proof = initFromSeed(seed);\\n    }\\n}\\n\",\"keccak256\":\"0x0e35096a851516dbb908c9a696f73ef1dbc911737e9cf7aa48c467d0a812cde0\",\"license\":\"MIT\"},\"src/core/NuggftV1Stake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {NuggftV1Proof} from './NuggftV1Proof.sol';\\n\\nimport {INuggftV1Migrator} from '../interfaces/nuggftv1/INuggftV1Migrator.sol';\\nimport {INuggftV1Stake} from '../interfaces/nuggftv1/INuggftV1Stake.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {NuggftV1StakeType} from '../types/NuggftV1StakeType.sol';\\nimport '../_test/utils/console.sol';\\n\\nabstract contract NuggftV1Stake is INuggftV1Stake, NuggftV1Proof {\\n    using SafeCastLib for uint256;\\n    using NuggftV1StakeType for uint256;\\n\\n    address public migrator;\\n\\n    uint256 internal stake;\\n\\n    uint96 constant PROTOCOL_FEE_BPS = 1000;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TRUSTED\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function extractProtocolEth() external requiresTrust {\\n        uint256 cache = stake;\\n\\n        SafeTransferLib.safeTransferETH(msg.sender, cache.proto());\\n\\n        cache = cache.proto(0);\\n\\n        emit Stake(cache);\\n    }\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function setMigrator(address _migrator) external requiresTrust {\\n        migrator = _migrator;\\n\\n        emit MigratorV1Updated(_migrator);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                VIEW\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function ethPerShare() public view override returns (uint96 res) {\\n        res = calculateEthPerShare(stake);\\n    }\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function minSharePrice() public view override returns (uint96 res) {\\n        (res, , , ) = minSharePriceBreakdown(stake);\\n    }\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function stakedShares() public view override returns (uint64 res) {\\n        res = stake.shares();\\n    }\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function stakedEth() public view override returns (uint96 res) {\\n        res = stake.staked();\\n    }\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function protocolEth() public view override returns (uint96 res) {\\n        res = stake.proto();\\n    }\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function totalSupply() public view override returns (uint256 res) {\\n        res = stakedShares();\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            ADD STAKE & SHARES\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @notice handles the adding of shares - ensures enough eth is being added\\n    /// @dev this is the only way to add shares - the logic here ensures that \\\"ethPerShare\\\" can never decrease\\n    function addStakedShareFromMsgValue(uint96 offset) internal {\\n        uint96 value = msg.value.safe96() - offset;\\n\\n        uint256 cache = stake;\\n\\n        (uint96 totalPrice, , uint96 protocolFee, ) = minSharePriceBreakdown(cache);\\n\\n        // logically unnessesary - to help front end\\n        require(value >= totalPrice, 'T:1'); // \\\"not enough eth to create share\\\"\\n\\n        uint96 overpay = value - totalPrice;\\n\\n        // the rest of the value gets added to stakedEth\\n        protocolFee += calculateProtocolFeeOf(overpay);\\n\\n        cache = cache.addShares(1);\\n        cache = cache.addStaked(value - protocolFee);\\n        cache = cache.addProto(protocolFee);\\n\\n        stake = cache;\\n\\n        emit Stake(cache);\\n    }\\n\\n    /// @notice handles isolated staking of eth\\n    /// @dev supply of eth goes up while supply of shares stays constant - increasing \\\"minSharePrice\\\"\\n    /// @param eth the amount of eth being staked - must be some portion of msg.value\\n    function addStakedEth(uint96 eth) internal {\\n        require(msg.value >= eth, 'T:2'); // \\\"value of tx too low\\\"\\n\\n        uint256 cache = stake;\\n\\n        uint96 protocolFee = calculateProtocolFeeOf(eth);\\n\\n        cache = cache.addStaked(eth - protocolFee);\\n        cache = cache.addProto(protocolFee);\\n\\n        stake = cache;\\n\\n        emit Stake(cache);\\n    }\\n\\n    function calculateProtocolFeeOf(uint256 any) internal pure returns (uint96 res) {\\n        // res = (any * PROTOCOL_FEE_BPS) / 10000;\\n\\n        assembly {\\n            res := div(mul(any, PROTOCOL_FEE_BPS), 10000)\\n        }\\n    }\\n\\n    // @test manual\\n    function minSharePriceBreakdown(uint256 cache)\\n        internal\\n        pure\\n        returns (\\n            uint96 total,\\n            uint96 eps,\\n            uint96 protocolFee,\\n            uint96 premium\\n        )\\n    {\\n        eps = calculateEthPerShare(cache);\\n\\n        protocolFee = calculateProtocolFeeOf(eps);\\n\\n        premium = cache.shares();\\n\\n        assembly {\\n            premium := div(mul(eps, premium), 10000)\\n        }\\n\\n        // premium = ((eps * cache.shares()) / 10000);\\n\\n        total = eps + protocolFee + premium;\\n    }\\n\\n    // @test manual\\n    function calculateEthPerShare(uint256 cache) internal pure returns (uint96 res) {\\n        res = cache.shares();\\n        if (res == 0) return 0;\\n        cache = cache.staked();\\n        assembly {\\n            res := div(cache, res)\\n        }\\n        // res = cache.shares() == 0 ? 0 : cache.staked() / cache.shares();\\n    }\\n}\\n\",\"keccak256\":\"0xefac3a012143b288c13a4d30863b57fe573bad402e26a0a67e991231aa633bff\",\"license\":\"MIT\"},\"src/core/NuggftV1Swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggftV1Swap} from '../interfaces/nuggftv1/INuggftV1Swap.sol';\\n\\nimport {NuggftV1Stake} from './NuggftV1Stake.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {NuggftV1AgentType} from '../types/NuggftV1AgentType.sol';\\n\\n/// @notice mechanism for trading of nuggs between users (and items between nuggs)\\n/// @dev Explain to a developer any extra details\\nabstract contract NuggftV1Swap is INuggftV1Swap, NuggftV1Stake {\\n    using SafeCastLib for uint256;\\n\\n    using NuggftV1AgentType for uint256;\\n\\n    struct Mapping {\\n        Storage self;\\n        mapping(uint16 => Storage) items;\\n    }\\n\\n    struct Storage {\\n        uint256 data;\\n        mapping(address => uint256) offers;\\n    }\\n\\n    struct Memory {\\n        uint256 swapData;\\n        uint256 offerData;\\n        uint24 activeEpoch;\\n        address sender;\\n    }\\n\\n    mapping(uint16 => uint256) protocolItems;\\n    mapping(uint160 => Mapping) swaps;\\n\\n    uint96 public constant MIN_OFFER = 10**8 * 100;\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                  delegate\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @inheritdoc INuggftV1Swap\\n    function delegate(uint160 tokenId) external payable override {\\n        // require(_isOperatorFor(msg.sender, sender), 'S:0');\\n\\n        (Storage storage s, Memory memory m) = loadTokenSwap(tokenId, msg.sender);\\n\\n        // make sure user is not the owner of swap\\n        // we do not know how much to give them when they call \\\"claim\\\" otherwise\\n\\n        uint96 lead;\\n\\n        if (m.activeEpoch == tokenId && m.swapData == 0) {\\n            // to ensure we at least have enough to increment the offer amount by 2%\\n            require(msg.value >= MIN_OFFER, 'S:1');\\n\\n            // we do not need this, could take tokenId out as an argument - but do not want to give users\\n            // the ability to accidently place an offer for nugg A and end up minting nugg B.\\n            assert(m.offerData == 0);\\n\\n            lead = msg.value.safe96();\\n\\n            (s.data) = NuggftV1AgentType.newAgentType(m.activeEpoch, m.sender, lead, false);\\n\\n            addStakedShareFromMsgValue(0);\\n\\n            setProofFromEpoch(tokenId);\\n\\n            emitTransferEvent(address(0), address(this), tokenId);\\n        } else {\\n            require(m.swapData != 0, 'S:4');\\n\\n            if (m.offerData != 0) {\\n                // forces user to claim previous swap before acting on this one\\n                // prevents owner from COMMITTING on their own swap - not offering\\n                require(m.offerData.epoch() >= m.activeEpoch, 'S:R');\\n\\n                require(!m.offerData.isOwner(), 'NOPE'); // always be caught by the require above\\n            }\\n\\n            // if the leader \\\"owns\\\" the swap, then it was initated by them - \\\"commit\\\" must be executed\\n            (lead) = m.swapData.isOwner() ? commit(s, m) : offer(s, m);\\n        }\\n\\n        emit Delegate(tokenId, msg.sender, lead);\\n    }\\n\\n    /// @inheritdoc INuggftV1Swap\\n    function delegateItem(\\n        uint160 buyerTokenId,\\n        uint160 sellerTokenId,\\n        uint16 itemId\\n    ) external payable override {\\n        require(_ownerOf(buyerTokenId) == msg.sender, 'S:6');\\n\\n        (Storage storage s, Memory memory m) = loadItemSwap(sellerTokenId, itemId, address(buyerTokenId));\\n\\n        require(m.swapData != 0, 'S:S');\\n\\n        if (m.offerData != 0) {\\n            // forces user to claim previous swap before acting on this one\\n            // prevents owner from COMMITTING on their own swap - not offering\\n            require(m.offerData.epoch() >= m.activeEpoch, 'S:7');\\n\\n            require(!m.offerData.isOwner(), 'NOPE'); // always be caught by the require above\\n        }\\n\\n        uint96 lead = m.offerData == 0 && m.swapData.isOwner() ? commit(s, m) : offer(s, m);\\n\\n        emit DelegateItem(encodeSellingItemId(sellerTokenId, itemId), buyerTokenId, lead);\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                  claim\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @inheritdoc INuggftV1Swap\\n    function claim(uint160 tokenId) external override {\\n        // require(_isOperatorFor(msg.sender, sender), 'S:8');\\n\\n        (Storage storage s, Memory memory m) = loadTokenSwap(tokenId, msg.sender);\\n\\n        delete s.offers[msg.sender];\\n\\n        if (checkClaimerIsWinnerOrLoser(m)) {\\n            delete s.data;\\n\\n            checkedTransferFromSelf(msg.sender, tokenId);\\n        } else {\\n            SafeTransferLib.safeTransferETH(msg.sender, m.offerData.eth());\\n        }\\n\\n        emit Claim(tokenId, msg.sender);\\n    }\\n\\n    /// @inheritdoc INuggftV1Swap\\n    function claimItem(\\n        uint160 buyerTokenId,\\n        uint160 sellerTokenId,\\n        uint16 itemId\\n    ) external override {\\n        require(_ownerOf(buyerTokenId) == msg.sender, 'S:9');\\n\\n        (Storage storage s, Memory memory m) = loadItemSwap(sellerTokenId, itemId, address(buyerTokenId));\\n\\n        delete s.offers[address(buyerTokenId)];\\n\\n        if (checkClaimerIsWinnerOrLoser(m)) {\\n            delete s.data;\\n\\n            require(protocolItems[itemId] > 0, 'P:3');\\n\\n            addItem(buyerTokenId, itemId);\\n\\n            protocolItems[itemId]--;\\n        } else {\\n            SafeTransferLib.safeTransferETH(_ownerOf(buyerTokenId), m.offerData.eth());\\n        }\\n\\n        emit ClaimItem(encodeSellingItemId(sellerTokenId, itemId), buyerTokenId);\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                  swap\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @inheritdoc INuggftV1Swap\\n    function swap(uint160 tokenId, uint96 floor) external override {\\n        require(_ownerOf(tokenId) == msg.sender, 'S:A');\\n\\n        require(floor >= ethPerShare(), 'S:B');\\n\\n        approvedTransferToSelf(tokenId);\\n\\n        (Storage storage s, Memory memory m) = loadTokenSwap(tokenId, msg.sender);\\n\\n        // make sure swap does not exist - this logically should never happen\\n        require(m.swapData == 0, 'NOPE2');\\n\\n        // no need to check dust as no value is being transfered\\n        (s.data) = NuggftV1AgentType.newAgentType(0, msg.sender, floor, true);\\n\\n        emit Swap(tokenId, floor);\\n    }\\n\\n    /// @inheritdoc INuggftV1Swap\\n    function swapItem(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        uint96 floor\\n    ) external override {\\n        require(_ownerOf(tokenId) == msg.sender, 'S:C');\\n\\n        // will revert if they do not have the item\\n        removeItem(tokenId, itemId);\\n\\n        protocolItems[itemId]++;\\n\\n        (Storage storage s, Memory memory m) = loadItemSwap(tokenId, itemId, address(tokenId));\\n\\n        // cannot sell two of the same item at same time\\n        require(m.swapData == 0, 'S:D');\\n\\n        (s.data) = NuggftV1AgentType.newAgentType(0, address(tokenId), floor, true);\\n\\n        emit Swap(tokenId, floor);\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                    view\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    // / @inheritdoc INuggftV1Swap\\n    function valueForDelegate(address sender, uint160 tokenId)\\n        external\\n        view\\n        override\\n        returns (\\n            bool canDelegate,\\n            uint96 nextSwapAmount,\\n            uint96 senderCurrentOffer\\n        )\\n    {\\n        canDelegate = true;\\n\\n        (, Memory memory m) = loadTokenSwap(tokenId, sender);\\n\\n        if (m.swapData == 0) {\\n            if (m.activeEpoch == tokenId) {\\n                // swap is minting\\n                nextSwapAmount = NuggftV1AgentType.compressEthRoundUp(minSharePrice());\\n            } else {\\n                // swap does not exist\\n                return (false, 0, 0);\\n            }\\n        } else {\\n            if (m.offerData.isOwner() && m.swapData.isOwner()) canDelegate = false;\\n\\n            senderCurrentOffer = m.offerData.eth();\\n\\n            nextSwapAmount = m.swapData.eth();\\n\\n            if (nextSwapAmount < ethPerShare()) {\\n                nextSwapAmount = ethPerShare();\\n            }\\n        }\\n\\n        if (nextSwapAmount == 0) {\\n            nextSwapAmount = MIN_OFFER;\\n        } else {\\n            nextSwapAmount = NuggftV1AgentType.addIncrement(nextSwapAmount);\\n        }\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                internal\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function commit(Storage storage s, Memory memory m) internal returns (uint96 lead) {\\n        require(msg.value >= ethPerShare(), 'S:5');\\n\\n        require(m.offerData == 0 && m.swapData != 0, 'NOPE3');\\n\\n        require(m.swapData.isOwner(), 'NOPE4');\\n\\n        // forces a user not to commit on their own swap\\n        // commented out as the logic is handled by S:R\\n        // require(!m.offerData.isOwner()(), 'S:3');\\n\\n        (uint256 newSwapData, uint96 increment) = updateSwapDataWithEpoch(m.swapData, m.activeEpoch + 1, m.sender, 0);\\n\\n        s.data = newSwapData;\\n\\n        s.offers[m.swapData.account()] = m.swapData.isOwner(false).epoch(m.activeEpoch + 1);\\n\\n        lead = newSwapData.eth();\\n        addStakedEth(increment);\\n    }\\n\\n    function offer(Storage storage s, Memory memory m) internal returns (uint96 lead) {\\n        // make sure swap is still active\\n        require(m.activeEpoch <= m.swapData.epoch(), 'S:F');\\n\\n        if (m.swapData.account() != m.sender) s.offers[m.swapData.account()] = m.swapData;\\n\\n        (uint256 newSwapData, uint96 increment) = updateSwapDataWithEpoch(m.swapData, m.swapData.epoch(), m.sender, m.offerData.eth());\\n\\n        s.data = newSwapData;\\n\\n        lead = newSwapData.eth();\\n        addStakedEth(increment);\\n    }\\n\\n    function checkClaimerIsWinnerOrLoser(Memory memory m) internal pure returns (bool winner) {\\n        require(m.offerData != 0, 'S:E');\\n\\n        bool isOver = m.activeEpoch > m.swapData.epoch();\\n        bool isLeader = m.offerData.account() == m.swapData.account();\\n        bool isOwner = m.swapData.isOwner() && m.offerData.isOwner();\\n\\n        return isLeader && (isOwner || isOver);\\n    }\\n\\n    // @test  unit\\n    function updateSwapDataWithEpoch(\\n        uint256 prevSwapData,\\n        uint24 _epoch,\\n        address account,\\n        uint96 currUserOffer\\n    ) internal view returns (uint256 res, uint96 increment) {\\n        uint96 baseEth = prevSwapData.eth();\\n\\n        currUserOffer += msg.value.safe96();\\n\\n        require(NuggftV1AgentType.addIncrement(baseEth) <= currUserOffer, 'S:G');\\n\\n        (res) = NuggftV1AgentType.newAgentType(_epoch, account, currUserOffer, false);\\n\\n        increment = currUserOffer - baseEth;\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TOKEN SWAP\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function loadTokenSwap(uint160 tokenId, address account) internal view returns (Storage storage s, Memory memory m) {\\n        s = swaps[tokenId].self;\\n        m = _load(s, account);\\n    }\\n\\n    function loadItemSwap(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        address account\\n    ) internal view returns (Storage storage s, Memory memory m) {\\n        s = swaps[tokenId].items[itemId];\\n        m = _load(s, account);\\n    }\\n\\n    function _load(Storage storage ptr, address account) private view returns (Memory memory m) {\\n        uint256 cache = ptr.data;\\n        m.swapData = cache;\\n        m.activeEpoch = epoch();\\n        m.sender = account;\\n\\n        if (account == cache.account()) {\\n            m.offerData = cache;\\n        } else {\\n            m.offerData = ptr.offers[account];\\n        }\\n    }\\n\\n    function encodeSellingItemId(uint160 tokenId, uint16 itemId) internal pure returns (uint176) {\\n        return (uint176(itemId) << 160) | tokenId;\\n    }\\n}\\n\",\"keccak256\":\"0xdeca916f9d8835b51044826849082f979e7d369b3b8abcc66f4881caaef843db\",\"license\":\"MIT\"},\"src/core/NuggftV1Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721} from '../interfaces/IERC721.sol';\\n\\nimport {INuggftV1Token} from '../interfaces/nuggftv1/INuggftV1Token.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport {NuggftV1Epoch} from './NuggftV1Epoch.sol';\\n\\n///\\n/// @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard\\n///\\nabstract contract NuggftV1Token is INuggftV1Token, NuggftV1Epoch {\\n    using SafeCastLib for uint256;\\n\\n    uint32 constant TRUSTED_MINT_TOKENS = 500;\\n    uint32 constant UNTRUSTED_MINT_TOKENS = 10000;\\n\\n    mapping(uint256 => address) owners;\\n    // mapping(address => uint256) balances;\\n    mapping(uint256 => address) approvals;\\n    mapping(address => mapping(address => bool)) operatorApprovals;\\n\\n    /// @inheritdoc IERC721\\n    function approve(address to, uint256 tokenId) public payable override {\\n        require(_ownerOf(tokenId.safe160()) == msg.sender, 'Z:1');\\n\\n        approvals[tokenId] = to;\\n\\n        emit Approval(msg.sender, to, tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) public override {\\n        // require(msg.sender != operator && operator == address(this), 'G:0');\\n\\n        operatorApprovals[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 tokenId) external view override returns (address) {\\n        return _ownerOf(tokenId.safe160());\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(uint256 tokenId) external view override returns (address) {\\n        return _getApproved(tokenId.safe160());\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(address owner, address operator) external view override returns (bool) {\\n        return _isOperatorFor(operator, owner);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                DISABLED\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function balanceOf(address) public pure override returns (uint256) {\\n        return 0;\\n    }\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) public payable override {\\n        revert();\\n    }\\n\\n    function safeTransferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) public payable override {\\n        revert();\\n    }\\n\\n    function safeTransferFrom(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public payable override {\\n        revert();\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                internal\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function _mintTo(address to, uint160 tokenId) internal {\\n        owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                view\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function exists(uint160 tokenId) internal view virtual returns (bool);\\n\\n    function _isOperatorFor(address operator, address owner) internal view returns (bool) {\\n        return owner == operator || operatorApprovals[owner][operator];\\n    }\\n\\n    function _isOperatorForOwner(address operator, uint160 tokenId) internal view returns (bool) {\\n        return _isOperatorFor(operator, _ownerOf(tokenId));\\n    }\\n\\n    function ensureOperatorForOwner(address operator, uint160 tokenId) internal view returns (address owner) {\\n        owner = _ownerOf(tokenId);\\n        require(_isOperatorFor(operator, owner), 'P:B');\\n    }\\n\\n    function _getApproved(uint160 tokenId) internal view returns (address) {\\n        require(exists(tokenId), 'T:9:1');\\n        return approvals[tokenId];\\n    }\\n\\n    function _ownerOf(uint160 tokenId) internal view returns (address owner) {\\n        require(exists(tokenId), 'T:9:2');\\n        owner = owners[tokenId];\\n        if (owner == address(0)) return address(this);\\n    }\\n\\n    function _isApprovedOrOwner(address spender, uint160 tokenId) internal view returns (bool) {\\n        address owner = _ownerOf(tokenId);\\n        return (spender == owner || _getApproved(tokenId) == spender || _isOperatorFor(owner, spender));\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TRANSFER\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function checkedTransferFromSelf(address to, uint160 tokenId) internal {\\n        require(_ownerOf(tokenId) == address(this), 'N:0');\\n\\n        owners[tokenId] = to;\\n\\n        emitTransferEvent(address(this), to, tokenId);\\n    }\\n\\n    function approvedTransferToSelf(uint160 tokenId) internal {\\n        require(_isOperatorForOwner(msg.sender, tokenId) && _getApproved(tokenId) == address(this), 'N:1');\\n\\n        delete owners[tokenId];\\n\\n        // Clear approvals from the previous owner\\n        delete approvals[tokenId];\\n\\n        emitTransferEvent(msg.sender, address(this), tokenId);\\n    }\\n\\n    function emitTransferEvent(\\n        address from,\\n        address to,\\n        uint160 tokenId\\n    ) internal {\\n        emit Transfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x9a0e7613187a7a8fb49e08b011b02c375182354d5935d0cbab27a0c2185dc129\",\"license\":\"MIT\"},\"src/core/Trust.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ITrust} from '../interfaces/ITrust.sol';\\n\\n/// @notice Ultra minimal authorization logic for smart contracts.\\n/// @author Inspired by Dappsys V2 (https://github.com/dapp-org/dappsys-v2/blob/main/src/auth.sol)\\nabstract contract Trust is ITrust {\\n    event UserTrustUpdated(address indexed user, bool trusted);\\n\\n    mapping(address => bool) public override isTrusted;\\n\\n    constructor(address[] memory inital) {\\n        for (uint256 i = 0; i < inital.length; i++) {\\n            isTrusted[inital[i]] = true;\\n            emit UserTrustUpdated(inital[i], true);\\n        }\\n    }\\n\\n    function setIsTrusted(address user, bool trusted) public virtual requiresTrust {\\n        isTrusted[user] = trusted;\\n\\n        emit UserTrustUpdated(user, trusted);\\n    }\\n\\n    modifier requiresTrust() {\\n        _requiresTrust();\\n        _;\\n    }\\n\\n    function _requiresTrust() internal view {\\n        require(isTrusted[msg.sender], 'UNTRUSTED');\\n    }\\n}\\n\",\"keccak256\":\"0xf0c1cfe49bfedc455619b614f4e9d842f9172140cc925e4a568f023625ae3fec\",\"license\":\"MIT\"},\"src/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\\n/// @title ERC-721 Non-Fungible Token Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 is IERC165 {\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\n    ///  may be created and assigned without emitting Transfer. At the time of\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when the approved address for an NFT is changed or\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\n    ///  When a Transfer event emits, this also indicates that the approved\\n    ///  address for that NFT (if any) is reset to none.\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\n    ///  The operator can manage all NFTs of the owner.\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n    /// @notice Count all NFTs assigned to an owner\\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\\n    ///  function throws for queries about the zero address.\\n    /// @param _owner An address for whom to query the balance\\n    /// @return The number of NFTs owned by `_owner`, possibly zero\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Find the owner of an NFT\\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\\n    ///  about them do throw.\\n    /// @param _tokenId The identifier for an NFT\\n    /// @return The address of the owner of the NFT\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n    ///  `onERC721Received` on `_to` and throws if the return value is not\\n    ///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes memory data\\n    ) external payable;\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev This works identically to the other function with an extra data parameter,\\n    ///  except this function just sets data to \\\"\\\".\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external payable;\\n\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n    ///  THEY MAY BE PERMANENTLY LOST\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external payable;\\n\\n    /// @notice Change or reaffirm the approved address for an NFT\\n    /// @dev The zero address indicates there is no approved address.\\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\n    ///  operator of the current owner.\\n    /// @param _approved The new approved NFT controller\\n    /// @param _tokenId The NFT to approve\\n    function approve(address _approved, uint256 _tokenId) external payable;\\n\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\n    ///  all of `msg.sender`'s assets\\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\\n    ///  multiple operators per owner.\\n    /// @param _operator Address to add to the set of authorized operators\\n    /// @param _approved True if the operator is approved, false to revoke approval\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /// @notice Get the approved address for a single NFT\\n    /// @dev Throws if `_tokenId` is not a valid NFT.\\n    /// @param _tokenId The NFT to find the approved address for\\n    /// @return The approved address for this NFT, or the zero address if there is none\\n    function getApproved(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Query if an address is an authorized operator for another address\\n    /// @param _owner The address that owns the NFTs\\n    /// @param _operator The address that acts on behalf of the owner\\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata is IERC721 {\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\n    function name() external view returns (string memory _name);\\n\\n    /// @notice An abbreviated name for NFTs in this contract\\n    function symbol() external view returns (string memory _symbol);\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe2d5f8f2ad6b005a82fe8370c7685b7c20d5d23788d7efd83e6ec347dbe48d87\",\"license\":\"MIT\"},\"src/interfaces/ITrust.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITrust {\\n    event TrustUpdated(address indexed user, bool trust);\\n\\n    function setIsTrusted(address user, bool trust) external;\\n\\n    function isTrusted(address user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8301ef0061614b920c6a6d1869c464b696105dc8881fb6e330296a6d7d60dc02\",\"license\":\"MIT\"},\"src/interfaces/dotnuggv1/IDotnuggV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata as Metadata} from './IDotnuggV1Metadata.sol';\\nimport {IDotnuggV1File as File} from './IDotnuggV1File.sol';\\nimport {IDotnuggV1StorageProxy} from './IDotnuggV1StorageProxy.sol';\\n\\ninterface IDotnuggV1 {\\n    function register() external returns (IDotnuggV1StorageProxy proxy);\\n\\n    function proxyOf(address implementer) external view returns (IDotnuggV1StorageProxy proxy);\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                core processors\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function raw(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        bytes calldata data\\n    ) external view returns (File.Raw memory res);\\n\\n    function proc(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        bytes calldata data\\n    ) external view returns (File.Processed memory res);\\n\\n    function comp(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        bytes calldata data\\n    ) external view returns (File.Compressed memory res);\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            complex resolved processors\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n    function dat(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        string memory name,\\n        string memory desc,\\n        bool base64,\\n        bytes calldata data\\n    ) external view returns (string memory res);\\n\\n    function img(\\n        address implementer,\\n        uint256 id,\\n        address resolver,\\n        bool rekt,\\n        bool background,\\n        bool base64,\\n        bool stats,\\n        bytes calldata data\\n    ) external view returns (string memory res);\\n}\\n\",\"keccak256\":\"0x97af143d39a686434d0758dab3b417a2ec86eeac5f6f8973cfd637e619ce37fd\",\"license\":\"MIT\"},\"src/interfaces/dotnuggv1/IDotnuggV1File.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata as Metadata} from './IDotnuggV1Metadata.sol';\\n\\ninterface IDotnuggV1File {\\n    struct Raw {\\n        uint256[][] file;\\n        Metadata.Memory metadata;\\n    }\\n\\n    struct Processed {\\n        uint256[] file;\\n        Metadata.Memory metadata;\\n    }\\n\\n    struct Compressed {\\n        uint256[] file;\\n        Metadata.Memory metadata;\\n    }\\n}\\n\",\"keccak256\":\"0x0dddef068fc65fc4f0d6849f65d4669e960725087d361caa023e947cdce21537\",\"license\":\"MIT\"},\"src/interfaces/dotnuggv1/IDotnuggV1Implementer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata} from './IDotnuggV1Metadata.sol';\\nimport {IDotnuggV1StorageProxy} from './IDotnuggV1StorageProxy.sol';\\n\\ninterface IDotnuggV1Implementer {\\n    event DotnuggV1ConfigUpdated(uint256 indexed artifactId);\\n\\n    function dotnuggV1ImplementerCallback(uint256 artifactId) external view returns (IDotnuggV1Metadata.Memory memory data);\\n\\n    function dotnuggV1StoreCallback(\\n        address caller,\\n        uint8 feature,\\n        uint8 amount,\\n        address storagePointer\\n    ) external returns (bool ok);\\n\\n    function dotnuggV1StorageProxy() external returns (IDotnuggV1StorageProxy res);\\n}\\n\",\"keccak256\":\"0x1865523e448b3d3c75fd772d2b54760154a34e1e690572dc6d0963d8ce686e63\",\"license\":\"MIT\"},\"src/interfaces/dotnuggv1/IDotnuggV1Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IDotnuggV1Metadata {\\n    struct Memory {\\n        uint8[] ids;\\n        uint8[] xovers;\\n        uint8[] yovers;\\n        uint256 version;\\n        address implementer;\\n        uint256 artifactId;\\n        string[] labels;\\n        string[] styles;\\n        string background;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0x87228718e37d0c24c240eb5d3a09192a708cbfd7293b5b4f1a03bc9ede33e712\",\"license\":\"MIT\"},\"src/interfaces/dotnuggv1/IDotnuggV1Resolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata} from './IDotnuggV1Metadata.sol';\\n\\ninterface IDotnuggV1Resolver {\\n    function resolveBytes(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) external view returns (bytes memory res);\\n\\n    function resolveRaw(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) external view returns (uint256[] memory res);\\n\\n    function resolveMetadata(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) external view returns (IDotnuggV1Metadata.Memory memory res);\\n\\n    function resolveString(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) external view returns (string memory res);\\n\\n    function resolveUri(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) external view returns (string memory res);\\n}\\n\",\"keccak256\":\"0x816035c81399e79c031f6f65ff57cca1b488c0b707eb8b0429d501bd9fb1dbf4\",\"license\":\"MIT\"},\"src/interfaces/dotnuggv1/IDotnuggV1StorageProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IDotnuggV1StorageProxy {\\n    function stored(uint8 feature) external view returns (uint8);\\n\\n    function store(uint8 feature, uint256[][] calldata data) external returns (uint8 amount);\\n\\n    function unsafeBulkStore(uint256[][][] calldata data) external;\\n\\n    function init(address _implementer) external;\\n\\n    function getBatch(uint8[] memory ids) external view returns (uint256[][] memory data);\\n\\n    function get(uint8 feature, uint8 pos) external view returns (uint256[] memory data);\\n}\\n\",\"keccak256\":\"0xe7cdc2f164e14c96a1ccd18fea1d90e086065d55e8a7889dbc8272918497ac40\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggftV1Token} from './INuggftV1Token.sol';\\nimport {INuggftV1Stake} from './INuggftV1Stake.sol';\\nimport {INuggftV1Proof} from './INuggftV1Proof.sol';\\nimport {INuggftV1Dotnugg} from './INuggftV1Dotnugg.sol';\\nimport {INuggftV1Swap} from './INuggftV1Swap.sol';\\nimport {INuggftV1Loan} from './INuggftV1Loan.sol';\\nimport {INuggftV1Epoch} from './INuggftV1Epoch.sol';\\n\\nimport {IERC721Metadata} from '../IERC721.sol';\\n\\ninterface INuggftV1 is\\n    IERC721Metadata,\\n    INuggftV1Token,\\n    INuggftV1Stake,\\n    INuggftV1Proof,\\n    INuggftV1Dotnugg,\\n    INuggftV1Swap,\\n    INuggftV1Loan,\\n    INuggftV1Epoch\\n{}\\n\",\"keccak256\":\"0xc9fcd03f3fc8de3ac97bca0d64c7cbdcddb48d464789a0ba1cf7b72b4634c2a4\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Dotnugg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Implementer} from '../dotnuggv1/IDotnuggV1Implementer.sol';\\nimport {IDotnuggV1} from '../dotnuggv1/IDotnuggV1.sol';\\n\\ninterface INuggftV1Dotnugg is IDotnuggV1Implementer {\\n    function setDotnuggV1Resolver(uint256 tokenId, address to) external;\\n\\n    function dotnuggV1ResolverOf(uint256 tokenId) external view returns (address resolver);\\n\\n    function dotnuggV1() external returns (IDotnuggV1);\\n\\n    function dotnuggV1StoreFiles(uint256[][] calldata data, uint8 feature) external;\\n\\n    function setDotnuggV1AnchorOverrides(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        uint256 x,\\n        uint256 y\\n    ) external;\\n\\n    function setDotnuggV1Background(uint160 tokenId, string memory s) external;\\n\\n    function setDotnuggV1Style(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        string memory s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3a59d138be94dca5f3d10b407d3b810303b6b7a1fa9df93eb807798d0e8fd681\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Epoch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Epoch {\\n    /// @notice Explain to an end user what this does\\n    /// @dev Explain to a developer any extra details\\n    event Genesis(uint256 blocknum, uint32 interval, uint24 offset);\\n\\n    function epoch() external view returns (uint24 res);\\n}\\n\",\"keccak256\":\"0xb2f2ea0581b58ceb3b8c703233027f0a6c88eff27635b153295c1c2097c5defc\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Loan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Loan {\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    event Loan(uint160 indexed tokenId, uint96 value);\\n\\n    event Rebalance(uint160 indexed tokenId, uint96 value);\\n\\n    event Liquidate(uint160 indexed tokenId, uint96 value, address user);\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function rebalance(uint160 tokenId) external payable;\\n\\n    function loan(uint160 tokenId) external;\\n\\n    function liquidate(uint160 tokenId) external payable;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @notice for a nugg's active loan: calculates the current min eth a user must send to liquidate or rebalance\\n    /// @dev contract ->\\n    /// @dev frontend -> used to set the amount of eth for user\\n    /// @param tokenId the token who's current loan to check\\n    /// @return toLiquidate ->  the current amount loaned out, plus the final rebalance fee\\n    /// @return toRebalance ->  the fee a user must pay to rebalance (and extend) the loan on their nugg\\n    /// @return earned -> the amount of eth the minSharePrice has increased since loan was last rebalanced\\n    /// @return epochDue -> the final epoch a user is safe from liquidation (inclusive)\\n    /// @return loaner -> the user responsable for the loan\\n    function loanInfo(uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 toLiquidate,\\n            uint96 toRebalance,\\n            uint96 earned,\\n            uint24 epochDue,\\n            address loaner\\n        );\\n\\n    /// @notice \\\"toLiquidate\\\" value from \\\"loanInfo\\\"\\n    /// @dev should be used to tell user how much eth to send for liquidate\\n    function valueForLiquidate(uint160 tokenId) external view returns (uint96 res);\\n\\n    /// @notice \\\"toRebalance\\\" value from \\\"loanInfo\\\"\\n    /// @dev should be used to tell user how much eth to send for rebalance\\n    function valueForRebalance(uint160 tokenId) external view returns (uint96 res);\\n}\\n\",\"keccak256\":\"0x95d78159337e2b9e2baca91aa65e979dbd65f59bbb41e441d6f650a7ab3c80b3\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Migrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Migrator {\\n    event MigrateV1Accepted(address v1, uint160 tokenId, uint256 proof, address owner, uint96 eth);\\n\\n    function nuggftMigrateFromV1(\\n        uint160 tokenId,\\n        uint256 proof,\\n        address owner\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x4d29c605f2565daa86ea16b75ba13d5385c373aac9121aef4df42d4e3e77b6aa\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Proof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Proof {\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                             STATE CHANGING\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function rotate(\\n        uint160 tokenId,\\n        uint8 index0,\\n        uint8 index1\\n    ) external;\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                               VIEW FUNCTIONS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function proofOf(uint160 tokenId) external view returns (uint256);\\n\\n    function proofToDotnuggMetadata(uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            uint256 proof,\\n            uint8[] memory defaultIds,\\n            uint8[] memory overxs,\\n            uint8[] memory overys,\\n            string[] memory styles,\\n            string memory background\\n        );\\n}\\n\",\"keccak256\":\"0x24c5185492b6889e0c7425226b457460ab089f79f730c8a6f8996b0bb63b4611\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Stake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Stake {\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                EVENTS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    event ProtocolEthExtracted(uint96 eth);\\n    event MigratorV1Updated(address migrator);\\n    event MigrateV1Sent(address v2, uint160 tokenId, uint256 proof, address owner, uint96 eth);\\n    event Burn(uint160 tokenId, address owner, uint96 ethOwed);\\n    event Stake(uint256 stake);\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function migrate(uint160 tokenId) external;\\n\\n    /// @notice burns a nugg from existance, dealing the eth worth of that share to the user\\n    /// @dev should only be called directly\\n    /// @param tokenId the id of the nugg being burned\\n    function burn(uint160 tokenId) external;\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @notice returns the minimum eth that must be added to create a new share\\n    /// @dev premium here is used to push against dillution of supply through ensuring the price always increases\\n    /// @dev used by the front end\\n    /// @return res -> premium + protcolFee + ethPerShare\\n    function minSharePrice() external view returns (uint96 res);\\n\\n    /// @notice returns the amount of eth extractable by protocol\\n    /// @dev this will be\\n    /// @return res -> (PROTOCOL_FEE_BPS * [all eth staked] / 10000) - [all previously extracted eth]\\n    function protocolEth() external view returns (uint96);\\n\\n    /// @notice returns the total number of staked shares held by the contract\\n    /// @dev this is equivilent to the amount of nuggs in existance\\n    function stakedShares() external view returns (uint64);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice returns the total amount of staked eth held by the contract\\n    /// @dev can be used as the market-cap or tvl of all nuggft v1\\n    /// @dev not equivilent to the balance of eth the contract holds, which also hs protocolEth and\\n    /// unclaimed eth from unsuccessful swaps\\n    function stakedEth() external view returns (uint96);\\n\\n    /// @notice returns the total \\\"ethPerShare\\\" held by the contract\\n    /// @dev this value not always equivilent to the \\\"floor\\\" price which can consist of perceived value.\\n    /// can be looked at as an \\\"intrinsic floor\\\"\\n    /// @dev this is the value that users will receive when their either burn or loan out nuggs\\n    /// @return res -> [current staked eth] / [current staked shares]\\n    function ethPerShare() external view returns (uint96);\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TRUSTED\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    /// @notice sends the current protocolEth to the user and resets the value to zero\\n    /// @dev caller must be a trusted user\\n    function extractProtocolEth() external;\\n\\n    /// @notice sets the migrator contract\\n    /// @dev caller must be a trusted user\\n    /// @param migrator the address to set as the migrator contract\\n    function setMigrator(address migrator) external;\\n}\\n\",\"keccak256\":\"0xfb2b6e366fe68573409586140b55b64323afdab0d4d14e0652ccfa8e368b2731\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Swap {\\n    event Delegate(uint160 indexed tokenId, address user, uint96 lead);\\n    event DelegateItem(uint176 indexed sellingItemId, uint160 nugg, uint96 lead);\\n    event Claim(uint160 indexed tokenId, address user);\\n    event ClaimItem(uint176 indexed sellingItemId, uint160 nugg);\\n    event Swap(uint160 indexed tokenId, uint96 floor);\\n    event SwapItem(uint176 indexed sellingItemId, uint96 floor);\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            STATE CHANGING\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function delegate(uint160 tokenId) external payable;\\n\\n    function delegateItem(\\n        uint160 buyerTokenId,\\n        uint160 sellerTokenId,\\n        uint16 itemId\\n    ) external payable;\\n\\n    function claim(uint160 tokenId) external;\\n\\n    function claimItem(\\n        uint160 buyerTokenId,\\n        uint160 sellerTokenId,\\n        uint16 itemid\\n    ) external;\\n\\n    function swap(uint160 tokenId, uint96 floor) external;\\n\\n    function swapItem(\\n        uint160 sellerTokenId,\\n        uint16 itemid,\\n        uint96 floor\\n    ) external;\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            VIEW FUNCTIONS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    /// @notice calculates the minimum eth that must be sent with a delegate call\\n    /// @dev returns 0 if no delegate can be made for this oken\\n    /// @param tokenId -> the token to be delegated to\\n    /// @param sender -> the address of the user who will be delegating\\n    /// @return canDelegate -> instead of reverting this function will return false\\n    /// @return nextOfferAmount -> the minimum value that must be sent with a delegate call\\n    /// @return senderCurrentOffer ->\\n    function valueForDelegate(address sender, uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            bool canDelegate,\\n            uint96 nextOfferAmount,\\n            uint96 senderCurrentOffer\\n        );\\n}\\n\",\"keccak256\":\"0x09221f91767c4bc3b278ec9f87e69b0b2604a5933738e8a2c188be39ea8401e0\",\"license\":\"MIT\"},\"src/interfaces/nuggftv1/INuggftV1Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721} from '../IERC721.sol';\\n\\ninterface INuggftV1Token is IERC721 {\\n    event Mint(uint160 tokenId, uint96 value);\\n\\n    function mint(uint160 tokenId) external payable;\\n\\n    function trustedMint(uint160 tokenId, address to) external payable;\\n}\\n\",\"keccak256\":\"0x33c9c6dac596e805db87bfedeca661f03f433941108bb9be9a418328ef1c8cc4\",\"license\":\"MIT\"},\"src/libraries/SafeCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/// Adapted from Rari-Capital/solmate\\n\\n/// @notice Safe unsigned integer casting library that reverts on overflow.\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\\nlibrary SafeCastLib {\\n    function safe160(uint256 x) internal pure returns (uint160 y) {\\n        require(x <= type(uint160).max);\\n        y = uint160(x);\\n    }\\n\\n    function safe96(uint256 x) internal pure returns (uint96 y) {\\n        require(x <= type(uint96).max);\\n        y = uint96(x);\\n    }\\n\\n    function safe64(uint256 x) internal pure returns (uint64 y) {\\n        require(x <= type(uint64).max);\\n        y = uint64(x);\\n    }\\n\\n    function safe32(uint256 x) internal pure returns (uint32 y) {\\n        require(x <= type(uint32).max);\\n        y = uint32(x);\\n    }\\n\\n    function safe24(uint256 x) internal pure returns (uint24 y) {\\n        assembly {\\n            if gt(x, 0xfff) {\\n                revert(0, 0)\\n            }\\n            y := x\\n        }\\n        require(x <= type(uint24).max);\\n        y = uint24(x);\\n    }\\n\\n    function safe16(uint256 x) internal pure returns (uint16 y) {\\n        require(x <= type(uint16).max);\\n        y = uint16(x);\\n    }\\n\\n    function safe8(uint256 x) internal pure returns (uint8 y) {\\n        require(x <= type(uint8).max);\\n        y = uint8(x);\\n    }\\n}\\n\",\"keccak256\":\"0x77df3a9ff00438a2b7f2e362ed2d867afbcb521481150f3ed2b01d51a3b43293\",\"license\":\"MIT\"},\"src/libraries/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/// Adapted from Rari-Capital/solmate\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\nlibrary SafeTransferLib {\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                               ETH OPERATIONS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, 'Z:0');\\n    }\\n}\\n\",\"keccak256\":\"0xc656f6d67b0de690a5cd3613628efcccb0b6d7433c364b6662a77258d6932780\",\"license\":\"MIT\"},\"src/libraries/ShiftLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeCastLib} from './SafeCastLib.sol';\\n\\nlibrary ShiftLib {\\n    using SafeCastLib for uint256;\\n\\n    /// @notice creates a bit mask\\n    /// @dev res = (2 ^ bits) - 1\\n    /// @param bits bit size of mask\\n    /// @return res the mask\\n    function mask(uint8 bits) internal pure returns (uint256 res) {\\n        assembly {\\n            res := sub(shl(bits, 1), 1)\\n        }\\n    }\\n\\n    function fullsubmask(uint8 bits, uint8 pos) internal pure returns (uint256 res) {\\n        res = ~(mask(bits) << pos);\\n    }\\n\\n    function set(\\n        uint256 preStore,\\n        uint8 bits,\\n        uint8 pos,\\n        uint256 value\\n    ) internal pure returns (uint256 res) {\\n        // res = preStore & fullsubmask(bits, pos);\\n        res = fullsubmask(bits, pos);\\n\\n        assembly {\\n            value := shl(pos, value)\\n            res := or(and(preStore, res), value)\\n        }\\n\\n        // res |= value;\\n    }\\n\\n    function get(\\n        uint256 store,\\n        uint8 bits,\\n        uint8 pos\\n    ) internal pure returns (uint256 res) {\\n        res = mask(bits);\\n        assembly {\\n            res := and(shr(pos, store), res)\\n        }\\n        // value &= mask(bits);\\n    }\\n}\\n\",\"keccak256\":\"0x76d089d6d150b4a2828093a3bdbc1fcdef8d9ada4aba7ebb4ea5979ed31494aa\",\"license\":\"MIT\"},\"src/types/NuggftV1AgentType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\n/// @notice Explain to an end user what this does\\n/// @dev Explain to a developer any extra details\\nlibrary NuggftV1AgentType {\\n    using SafeCastLib for uint256;\\n\\n    // 10**13\\n    uint96 constant COMPRESSION_LOSS = 10e8;\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                               CALCULATION\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    // @test  manual\\n    function addIncrement(uint96 value) internal pure returns (uint96 res) {\\n        res = value * 10200;\\n        assembly {\\n            res := div(res, 10000)\\n        }\\n    }\\n\\n    // @test  manual\\n    function compressEthRoundDown(uint96 value) internal pure returns (uint96 res) {\\n        assembly {\\n            res := mul(div(value, COMPRESSION_LOSS), COMPRESSION_LOSS)\\n        }\\n    }\\n\\n    // @test  manual\\n    function compressEthRoundUp(uint96 value) internal pure returns (uint96 res) {\\n        assembly {\\n            res := mod(value, COMPRESSION_LOSS)\\n        }\\n        if (res > 0) {\\n            assembly {\\n                res := mul(add(div(value, COMPRESSION_LOSS), 1), COMPRESSION_LOSS)\\n            }\\n        } else {\\n            return compressEthRoundDown(value);\\n        }\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                              SHIFT HELPERS\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n    // @test input output unit test\\n    // type(uint96).max / 10e8 =    792281625142643375935\\n    // type(uint70).max          = 1180591620717411303423\\n    function eth(uint256 input) internal pure returns (uint96 res) {\\n        input = ShiftLib.get(input, 70, 160);\\n        assembly {\\n            res := mul(input, COMPRESSION_LOSS)\\n        }\\n        // return input.safe96();\\n    }\\n\\n    function eth(uint256 input, uint96 update) internal pure returns (uint256 cache) {\\n        assembly {\\n            update := div(update, COMPRESSION_LOSS) // bye byte wei\\n        }\\n        cache = ShiftLib.set(input, 70, 160, update);\\n    }\\n\\n    // @test  input output unit test\\n    function epoch(uint256 input, uint24 update) internal pure returns (uint256 res) {\\n        return ShiftLib.set(input, 24, 230, update);\\n    }\\n\\n    function epoch(uint256 input) internal pure returns (uint24 res) {\\n        return uint24(ShiftLib.get(input, 24, 230));\\n    }\\n\\n    // @test  input output unit test\\n    function account(uint256 input) internal pure returns (address res) {\\n        res = address(uint160(ShiftLib.get(input, 160, 0)));\\n    }\\n\\n    function account(uint256 input, address update) internal pure returns (uint256 output) {\\n        output = ShiftLib.set(input, 160, 0, uint160(update));\\n    }\\n\\n    // @test  input output unit test\\n    function isOwner(uint256 input, bool update) internal pure returns (uint256 res) {\\n        return ShiftLib.set(input, 1, 255, update ? 0x1 : 0x0);\\n    }\\n\\n    function isOwner(uint256 input) internal pure returns (bool output) {\\n        output = ShiftLib.get(input, 1, 255) == 0x1;\\n    }\\n\\n    // @test  check to see if it does this - will be easy\\n    function flag(uint256 input) internal pure returns (uint256 res) {\\n        res = ShiftLib.set(input, 1, 254, 0x01);\\n    }\\n\\n    // @test  manual\\n    function newAgentType(\\n        uint24 _epoch,\\n        address _account,\\n        uint96 _eth,\\n        bool _isOwner\\n    ) internal pure returns (uint256 res) {\\n        res = epoch(res, _epoch);\\n        res = account(res, _account);\\n        if (_isOwner) res = isOwner(res, true);\\n        (res) = eth(res, _eth);\\n        res = flag(res);\\n    }\\n}\\n\",\"keccak256\":\"0xc88f706a55232dd0a4f13101a07c9019cad56ff83ba9d2bee9956777e795697d\",\"license\":\"MIT\"},\"src/types/NuggftV1ProofType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\n/// @notice abstracts all the logic for converting the proof between a the uint256 which is stored in\\n/// in state and the the 4 uint8 arrays that it consists off.\\n/// @dev Explain to a developer any extra details\\n/// @dev itemIds are externally 16 bits, but here there are referenced as 8 bit ids in one of 8 indexs\\n/// where the id is the position the item exists in the file storage, and the index is the feature id\\n/// @dev there is not check - but dotnugg v1 only allows for max 63 for size, so anchor overrides should\\n/// reflect this.\\n/// @dev pushing and pulling is only set up for the extra array, so the user must manage their default array\\n/// by passing through the extra array - this is to reduce complexity\\n/// @dev see the dotnugg specification for more clarificaiton on the values used here\\n///\\n///  uint256 bit allocation of proof \\\"state\\\" variable:\\n/// \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u252c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u252c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n/// \\u2502  0 - 63   \\u2502 64 bits \\u2502  default item ids - 8 x 8 bits     \\u2502\\n/// \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524\\n/// \\u2502 64 - 127  \\u2502 64 bits \\u2502  extra item ids - 8 x 8 bits       \\u2502\\n/// \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524\\n/// \\u2502 128 - 191 \\u2502 64 bits \\u2502  x anchor overrides - 8 x 8 bits   \\u2502\\n/// \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524\\n/// \\u2502 192 - 255 \\u2502 64 bits \\u2502  y anchor overrides - 8 x 8 bits   \\u2502\\n/// \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n///\\nlibrary NuggftV1ProofType {\\n    /// @notice converts the proof state into a human readable form\\n    /// @dev fully parses the proof from a uint256 to 4 uint8 arrays\\n    /// @param state -> the uint256 proof state\\n    /// @return proof -> the uint256 proof state\\n    /// @return defaultIds -> the modifed uint256 proof state\\n    /// @return extraIds -> the modifed uint256 proof state\\n    /// @return xOverrides -> the modifed uint256 proof state\\n    /// @return yOverrides -> the modifed uint256 proof state\\n    // function fullProof(uint256 state)\\n    //     internal\\n    //     pure\\n    //     returns (\\n    //         uint256 proof,\\n    //         uint8[] memory defaultIds,\\n    //         uint8[] memory extraIds,\\n    //         uint8[] memory xOverrides,\\n    //         uint8[] memory yOverrides\\n    //     )\\n    // {\\n    //     proof = state;\\n    //     defaultIds = ShiftLib.getArray(state, 0);\\n    //     extraIds = ShiftLib.getArray(state, 64);\\n    //     xOverrides = ShiftLib.getArray(state, 128);\\n    //     yOverrides = ShiftLib.getArray(state, 192);\\n    // }\\n\\n    /// @notice sets an item to the extra array\\n    /// @dev extra array must be empty at the feature positon being added to\\n    /// @param state -> the uint256 proof state\\n    /// @param itemId -> the itemId being added\\n    /// @return res -> the modifed uint256 proof state\\n    // function pushToExtra(uint256 state, uint16 itemId) internal pure returns (uint256 res) {\\n    //     uint8[] memory arr = ShiftLib.getArray(state, 64);\\n\\n    //     (uint8 feat, uint8 pos) = parseItemId(itemId);\\n\\n    //     require(arr[feat] == 0, 'P:D');\\n\\n    //     arr[feat] = pos;\\n\\n    //     res = ShiftLib.setArray(state, 64, arr);\\n    // }\\n\\n    /// / @notice removes an item from the extra array\\n    // / @dev extra array must NOT be empty at the feature positon being removed\\n    // / @dev the extra array must have that specific feature in that postion\\n    // / @param state -> the uint256 proof state\\n    // / @param itemId -> the itemId being removed\\n    // / @return res -> the modifed uint256 proof state\\n    // function pullFromExtra(uint256 state, uint16 itemId) internal pure returns (uint256 res) {\\n    //     uint8[] memory arr = ShiftLib.getArray(state, 64);\\n\\n    //     (uint8 feat, uint8 pos) = parseItemId(itemId);\\n\\n    //     require(feat != 0, 'P:F');\\n\\n    //     require(arr[feat] == pos, 'P:E');\\n\\n    //     arr[feat] = 0;\\n\\n    //     res = ShiftLib.setArray(state, 64, arr);\\n    // }\\n\\n    function search(uint256 state, uint256 itemId) internal pure returns (uint8 index) {\\n        state >>= 3;\\n\\n        do {\\n            if (state & 11 == itemId) return index;\\n            index++;\\n        } while ((state >>= 11) != 0);\\n\\n        require(index != 22, 'UNTESTED');\\n\\n        // if (index == 22) revert('UNTESTED');\\n    }\\n\\n    function swapIndexs(\\n        uint256 state,\\n        uint8 index1,\\n        uint8 index2\\n    ) internal pure returns (uint256 res) {\\n        uint256 tmp = getIndex(state, index1);\\n        res = setIndex(state, index1, getIndex(state, index2));\\n        res = setIndex(state, index2, tmp);\\n    }\\n\\n    function getIndex(uint256 state, uint8 index) internal pure returns (uint16 res) {\\n        res = uint16(ShiftLib.get(state, 11, 3 + 11 * index));\\n    }\\n\\n    function setIndex(\\n        uint256 state,\\n        uint8 index,\\n        uint256 id\\n    ) internal pure returns (uint256 res) {\\n        res = ShiftLib.set(state, 11, 3 + 11 * index, id);\\n    }\\n\\n    /// @notice updates the x and y override arrays\\n    /// @dev all must be set at once\\n    /// @param state -> the uint256 proof state\\n    /// @param xOverrides -> uint8 array of new x overrides\\n    /// @param yOverrides -> uint8 array of new x overrides\\n    /// @return res -> the modifed uint256 proof state\\n    // function setNewAnchorOverrides(\\n    //     uint256 state,\\n    //     uint8[] memory xOverrides,\\n    //     uint8[] memory yOverrides\\n    // ) internal pure returns (uint256 res) {\\n    //     res = ShiftLib.setArray(state, 128, xOverrides);\\n    //     res = ShiftLib.setArray(res, 192, yOverrides);\\n    // }\\n\\n    /// @notice clears the anchor overrides for a specific feature\\n    /// @dev this should be called each time an item is added or removed from a feature\\n    /// @param state -> the uint256 proof state\\n    /// @param feature -> the feature to switch items for\\n    /// @return res -> the modifed uint256 proof state\\n    // function clearAnchorOverridesForFeature(uint256 state, uint8 feature) internal pure returns (uint256 res) {\\n    //     uint8[] memory x = ShiftLib.getArray(state, 128);\\n    //     uint8[] memory y = ShiftLib.getArray(state, 192);\\n\\n    //     y[feature] = 0;\\n    //     x[feature] = 0;\\n\\n    //     res = ShiftLib.setArray(state, 128, x);\\n    //     res = ShiftLib.setArray(res, 192, y);\\n    // }\\n\\n    /// @notice parses the external itemId into a feautre and position\\n    /// @dev this follows dotnugg v1 specification\\n    /// @param itemId -> the external itemId\\n    /// @return feat -> the feautre of the item\\n    /// @return pos -> the file storage position of the item\\n    function parseItemId(uint16 itemId) internal pure returns (uint8 feat, uint8 pos) {\\n        feat = uint8(itemId >> 8);\\n        pos = uint8(itemId & 0xff);\\n    }\\n}\\n\",\"keccak256\":\"0x06bce92824e43d4740034b0fd81a3928c6995c5b927b9f0d1a31c9887ed2f00f\",\"license\":\"MIT\"},\"src/types/NuggftV1StakeType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\nlibrary NuggftV1StakeType {\\n    /// 96 protocol\\n    /// 96 stakedEth\\n    /// 64 stakedShares\\n\\n    function proto(uint256 cache) internal pure returns (uint96 res) {\\n        res = uint96(cache);\\n    }\\n\\n    function proto(uint256 cache, uint96 update) internal pure returns (uint256 res) {\\n        res = cache & ShiftLib.fullsubmask(96, 0);\\n        res |= update;\\n    }\\n\\n    function addProto(uint256 cache, uint96 add) internal pure returns (uint256 res) {\\n        add += proto(cache);\\n        res = proto(cache, add);\\n    }\\n\\n    function subProto(uint256 cache, uint96 sub) internal pure returns (uint256 res) {\\n        sub = proto(cache) - sub;\\n        res = proto(cache, sub);\\n    }\\n\\n    // @test input output unit test\\n    function staked(uint256 cache) internal pure returns (uint96 res) {\\n        // using casting to select only 96\\n        res = uint96(cache >> 96);\\n    }\\n\\n    function staked(uint256 cache, uint96 update) internal pure returns (uint256 res) {\\n        // clear stakedEth\\n        res = cache & ShiftLib.fullsubmask(96, 96);\\n        res |= uint256(update) << 96;\\n    }\\n\\n    function addStaked(uint256 cache, uint96 add) internal pure returns (uint256 res) {\\n        add += staked(cache);\\n        res = staked(cache, add);\\n    }\\n\\n    function subStaked(uint256 cache, uint96 sub) internal pure returns (uint256 res) {\\n        sub = staked(cache) - sub;\\n        res = staked(cache, sub);\\n    }\\n\\n    // @test input output unit test\\n    function shares(uint256 cache) internal pure returns (uint64 res) {\\n        res = uint64(cache >> 192);\\n    }\\n\\n    function addShares(uint256 cache, uint64 add) internal pure returns (uint256 res) {\\n        add += shares(cache);\\n        res = shares(cache, add);\\n    }\\n\\n    function subShares(uint256 cache, uint64 sub) internal pure returns (uint256 res) {\\n        sub = shares(cache) - sub;\\n        res = shares(cache, sub);\\n    }\\n\\n    function shares(uint256 cache, uint64 update) internal pure returns (uint256 res) {\\n        res = cache & type(uint192).max;\\n        res |= (uint256(update) << 192);\\n    }\\n}\\n\",\"keccak256\":\"0xdfe7917e72accb6061faf5c13e6c2876f3ea40c213dd2495909d662ec5f0166d\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 2270,
            "contract": "src/_deployment/NuggftV1Deployer.sol:NuggftV1Deployer",
            "label": "nuggft",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(NuggftV1)2263"
          }
        ],
        "types": {
          "t_contract(NuggftV1)2263": {
            "encoding": "inplace",
            "label": "contract NuggftV1",
            "numberOfBytes": "20"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"src/_deployment/NuggftV1Deployer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {NuggftV1} from '../NuggftV1.sol';\\n\\ncontract NuggftV1Deployer {\\n    NuggftV1 public nuggft;\\n\\n    constructor(\\n        bytes32 salt,\\n        address[] memory trusted,\\n        address dotnugg,\\n        uint256[][][] memory nuggs\\n    ) {\\n        nuggft = new NuggftV1{salt: salt}(trusted, dotnugg);\\n\\n        nuggft.dotnuggV1StorageProxy().unsafeBulkStore(nuggs);\\n\\n        for (uint160 i = 1; i < 200; i++) {\\n            nuggft.trustedMint(i, trusted[0]);\\n        }\\n\\n        nuggft.setIsTrusted(address(this), false);\\n    }\\n}\\n\"\n    },\n    \"src/NuggftV1.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721, IERC165, IERC721Metadata} from './interfaces/IERC721.sol';\\n\\nimport {NuggftV1Loan} from './core/NuggftV1Loan.sol';\\nimport {NuggftV1Dotnugg} from './core/NuggftV1Dotnugg.sol';\\nimport {Trust} from './core/Trust.sol';\\n\\nimport {INuggftV1Migrator} from './interfaces/nuggftv1/INuggftV1Migrator.sol';\\nimport {IDotnuggV1Metadata} from './interfaces/dotnuggv1/IDotnuggV1Metadata.sol';\\nimport {IDotnuggV1Implementer} from './interfaces/dotnuggv1/IDotnuggV1Implementer.sol';\\nimport {IDotnuggV1} from './interfaces/dotnuggv1/IDotnuggV1.sol';\\n\\nimport {INuggftV1Token} from './interfaces/nuggftv1/INuggftV1Token.sol';\\nimport {INuggftV1Stake} from './interfaces/nuggftv1/INuggftV1Stake.sol';\\n\\nimport {INuggftV1} from './interfaces/nuggftv1/INuggftV1.sol';\\n\\nimport {SafeTransferLib} from './libraries/SafeTransferLib.sol';\\nimport {SafeCastLib} from './libraries/SafeCastLib.sol';\\nimport {ShiftLib} from './libraries/ShiftLib.sol';\\n\\nimport {NuggftV1StakeType} from './types/NuggftV1StakeType.sol';\\nimport {NuggftV1ProofType} from './types/NuggftV1ProofType.sol';\\n\\n/// @title NuggFT V1\\n/// @author nugg.xyz - danny7even & dub6ix\\n/// @notice Explain to an end user what this does\\n/// @dev Explain to a developer any extra details\\n/// @dev the words \\\"share\\\" and \\\"nugg\\\" are used interchangably throughout\\n\\n/// deviations from ERC721 standard:\\n/// 1. no verificaiton the receiver is a ERC721Reciever - on top of this being a gross waste of gas,\\n/// the way the swapping logic works makes this only worth calling when a user places an offer - and\\n/// we did not want to call \\\"onERC721Recieved\\\" when no token was being sent.\\n/// 2.\\ncontract NuggftV1 is IERC721Metadata, NuggftV1Loan {\\n    using SafeCastLib for uint256;\\n\\n    using NuggftV1StakeType for uint256;\\n\\n    constructor(address[] memory trusted, address _defaultResolver) NuggftV1Dotnugg(_defaultResolver) Trust(trusted) {}\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IDotnuggV1Implementer).interfaceId ||\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n\\n    function name() public pure override returns (string memory) {\\n        return 'Nugg Fungible Token V1';\\n    }\\n\\n    function symbol() public pure override returns (string memory) {\\n        return 'NUGGFT';\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory res) {\\n        uint160 safeTokenId = tokenId.safe160();\\n\\n        res = dotnuggV1.dat(address(this), tokenId, dotnuggV1ResolverOf(safeTokenId), symbol(), name(), true, '');\\n    }\\n\\n    /*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                CORE\\n    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*/\\n\\n    function dotnuggV1ImplementerCallback(uint256 tokenId) public view override returns (IDotnuggV1Metadata.Memory memory data) {\\n        (\\n            ,\\n            data.ids, //\\n            data.xovers,\\n            data.yovers,\\n            data.styles,\\n            data.background\\n        ) = proofToDotnuggMetadata(tokenId.safe160());\\n\\n        data.labels = new string[](8);\\n        data.version = 1;\\n        data.artifactId = tokenId;\\n        data.implementer = address(this);\\n\\n        data.labels[0] = 'BASE';\\n        data.labels[1] = 'EYES';\\n        data.labels[2] = 'MOUTH';\\n        data.labels[3] = 'HAIR';\\n        data.labels[4] = 'HAT';\\n        data.labels[5] = 'BACK';\\n        data.labels[6] = 'NECK';\\n        data.labels[7] = 'HOLD';\\n\\n        return data;\\n    }\\n\\n    /// @inheritdoc INuggftV1Token\\n    function trustedMint(uint160 tokenId, address to) external payable override requiresTrust {\\n        require(tokenId < TRUSTED_MINT_TOKENS && tokenId != 0, 'G:1');\\n\\n        addStakedShareFromMsgValue(0);\\n\\n        setProof(tokenId);\\n\\n        _mintTo(to, tokenId);\\n\\n        emit Mint(tokenId, uint96(msg.value));\\n    }\\n\\n    // modifier haha() {\\n    //     uint256 price = gasleft();\\n\\n    //     _;\\n    //     uint256 price2 = gasleft();\\n    //     // console.log(price, price2, price - price2);\\n    //     assert(price < 90000 && price - price2 < 58000);\\n    // }\\n\\n    /// @inheritdoc INuggftV1Token\\n    function mint(uint160 tokenId) public payable override {\\n        require(tokenId < UNTRUSTED_MINT_TOKENS + TRUSTED_MINT_TOKENS && tokenId > TRUSTED_MINT_TOKENS, 'G:1');\\n\\n        addStakedShareFromMsgValue(0);\\n\\n        setProof(tokenId);\\n\\n        _mintTo(msg.sender, tokenId);\\n\\n        emit Mint(tokenId, uint96(msg.value));\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                BURN/MIGRATE\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function burn(uint160 tokenId) external {\\n        uint96 ethOwed = subStakedShare(tokenId);\\n\\n        SafeTransferLib.safeTransferETH(msg.sender, ethOwed);\\n\\n        emit Burn(tokenId, msg.sender, ethOwed);\\n    }\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function migrate(uint160 tokenId) external {\\n        require(migrator != address(0), 'T:4');\\n\\n        // stores the proof before deleting the nugg\\n        uint256 proof = proofOf(tokenId);\\n\\n        uint96 ethOwed = subStakedShare(tokenId);\\n\\n        INuggftV1Migrator(migrator).nuggftMigrateFromV1{value: ethOwed}(tokenId, proof, msg.sender);\\n\\n        emit MigrateV1Sent(migrator, tokenId, proof, msg.sender, ethOwed);\\n    }\\n\\n    function testnet__exploit() external {\\n        SafeTransferLib.safeTransferETH(msg.sender, address(this).balance);\\n    }\\n\\n    /// @notice removes a staked share from the contract,\\n    /// @dev this is the only way to remove a share\\n    /// @dev caculcates but does not handle dealing the eth - which is handled by the two helpers above\\n    /// @dev ensures the user is the owner of the nugg\\n    /// @param tokenId the id of the nugg being unstaked\\n    /// @return ethOwed -> the amount of eth owed to the unstaking user - equivilent to \\\"ethPerShare\\\"\\n    function subStakedShare(uint160 tokenId) internal returns (uint96 ethOwed) {\\n        // reverts if token does not exist\\n        address owner = _ownerOf(tokenId);\\n\\n        require(_getApproved(tokenId) == address(this) && owner == msg.sender, 'T:3');\\n\\n        uint256 cache = stake;\\n\\n        // hanles all logic not related to staking the nugg\\n        delete owners[tokenId];\\n        delete approvals[tokenId];\\n\\n        delete swaps[tokenId];\\n        delete loans[tokenId];\\n        delete proofs[tokenId];\\n        delete resolvers[tokenId];\\n\\n        emitTransferEvent(owner, address(0), tokenId);\\n\\n        ethOwed = calculateEthPerShare(cache);\\n\\n        /// TODO - test migration\\n        assert(cache.shares() >= 1);\\n        assert(cache.staked() >= ethOwed);\\n\\n        cache = cache.subShares(1);\\n        cache = cache.subStaked(ethOwed);\\n\\n        stake = cache;\\n\\n        emit Stake(cache);\\n    }\\n}\\n\"\n    },\n    \"src/interfaces/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\\n/// @title ERC-721 Non-Fungible Token Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 is IERC165 {\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\n    ///  may be created and assigned without emitting Transfer. At the time of\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when the approved address for an NFT is changed or\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\n    ///  When a Transfer event emits, this also indicates that the approved\\n    ///  address for that NFT (if any) is reset to none.\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\n    ///  The operator can manage all NFTs of the owner.\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n    /// @notice Count all NFTs assigned to an owner\\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\\n    ///  function throws for queries about the zero address.\\n    /// @param _owner An address for whom to query the balance\\n    /// @return The number of NFTs owned by `_owner`, possibly zero\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Find the owner of an NFT\\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\\n    ///  about them do throw.\\n    /// @param _tokenId The identifier for an NFT\\n    /// @return The address of the owner of the NFT\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n    ///  `onERC721Received` on `_to` and throws if the return value is not\\n    ///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes memory data\\n    ) external payable;\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev This works identically to the other function with an extra data parameter,\\n    ///  except this function just sets data to \\\"\\\".\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external payable;\\n\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n    ///  THEY MAY BE PERMANENTLY LOST\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external payable;\\n\\n    /// @notice Change or reaffirm the approved address for an NFT\\n    /// @dev The zero address indicates there is no approved address.\\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\n    ///  operator of the current owner.\\n    /// @param _approved The new approved NFT controller\\n    /// @param _tokenId The NFT to approve\\n    function approve(address _approved, uint256 _tokenId) external payable;\\n\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\n    ///  all of `msg.sender`'s assets\\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\\n    ///  multiple operators per owner.\\n    /// @param _operator Address to add to the set of authorized operators\\n    /// @param _approved True if the operator is approved, false to revoke approval\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /// @notice Get the approved address for a single NFT\\n    /// @dev Throws if `_tokenId` is not a valid NFT.\\n    /// @param _tokenId The NFT to find the approved address for\\n    /// @return The approved address for this NFT, or the zero address if there is none\\n    function getApproved(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Query if an address is an authorized operator for another address\\n    /// @param _owner The address that owns the NFTs\\n    /// @param _operator The address that acts on behalf of the owner\\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata is IERC721 {\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\n    function name() external view returns (string memory _name);\\n\\n    /// @notice An abbreviated name for NFTs in this contract\\n    function symbol() external view returns (string memory _symbol);\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"src/core/NuggftV1Loan.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggftV1Loan} from '../interfaces/nuggftv1/INuggftV1Loan.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {NuggftV1AgentType} from '../types/NuggftV1AgentType.sol';\\n\\nimport {NuggftV1Swap} from './NuggftV1Swap.sol';\\n\\nabstract contract NuggftV1Loan is INuggftV1Loan, NuggftV1Swap {\\n    using SafeCastLib for uint256;\\n\\n    using NuggftV1AgentType for uint256;\\n\\n    mapping(uint160 => uint256) loans;\\n\\n    uint24 constant LIQUIDATION_PERIOD = 2;\\n\\n    uint96 constant REBALANCE_FEE_BPS = 100;\\n\\n    /// @inheritdoc INuggftV1Loan\\n    function loan(uint160 tokenId) external override {\\n        require(_ownerOf(tokenId) == msg.sender, 'L:0');\\n\\n        uint256 loanData = NuggftV1AgentType.newAgentType(epoch(), msg.sender, ethPerShare(), false);\\n\\n        loans[tokenId] = loanData; // starting swap data\\n\\n        approvedTransferToSelf(tokenId);\\n\\n        uint96 value = loanData.eth();\\n\\n        SafeTransferLib.safeTransferETH(msg.sender, value);\\n\\n        emit Loan(tokenId, value);\\n    }\\n\\n    /// @inheritdoc INuggftV1Loan\\n    function liquidate(uint160 tokenId) external payable override {\\n        (uint96 toLiquidate, uint96 toRebalance, uint96 owed, uint24 epochDue, address loaner) = loanInfo(tokenId);\\n\\n        assert(address(this) == _ownerOf(tokenId)); // should always be true - should revert in loanInfo\\n\\n        delete loans[tokenId];\\n\\n        address benif = msg.sender;\\n\\n        if (epochDue >= epoch()) {\\n            // if liquidaton deadline has not passed - check perrmission\\n            require(_isOperatorFor(msg.sender, loaner), 'L:1');\\n            benif = loaner;\\n        }\\n\\n        uint96 value = msg.value.safe96();\\n\\n        require(toLiquidate <= value, 'L:2');\\n\\n        uint96 overpayment = value - toLiquidate;\\n\\n        addStakedEth(toRebalance + overpayment);\\n\\n        SafeTransferLib.safeTransferETH(benif, owed);\\n\\n        checkedTransferFromSelf(benif, tokenId);\\n\\n        emit Liquidate(tokenId, value, msg.sender);\\n    }\\n\\n    /// @inheritdoc INuggftV1Loan\\n    function rebalance(uint160 tokenId) external payable override {\\n        (, uint96 toRebalance, uint96 earned, , address loaner) = loanInfo(tokenId);\\n\\n        assert(address(this) == _ownerOf(tokenId)); // should always be true - should revert in loanInfo\\n\\n        require(toRebalance <= msg.value, 'L:3');\\n\\n        uint96 value = msg.value.safe96();\\n\\n        // must be done before new principal is calculated\\n        addStakedEth(value);\\n\\n        uint256 res = NuggftV1AgentType.newAgentType(epoch(), loaner, ethPerShare(), false);\\n\\n        loans[tokenId] = res;\\n\\n        SafeTransferLib.safeTransferETH(loaner, earned);\\n\\n        emit Rebalance(tokenId, value);\\n    }\\n\\n    /// @inheritdoc INuggftV1Loan\\n    function valueForLiquidate(uint160 tokenId) external view returns (uint96 res) {\\n        (res, , , , ) = loanInfo(tokenId);\\n    }\\n\\n    /// @inheritdoc INuggftV1Loan\\n    function valueForRebalance(uint160 tokenId) external view returns (uint96 res) {\\n        (, res, , , ) = loanInfo(tokenId);\\n    }\\n\\n    /// @inheritdoc INuggftV1Loan\\n    function loanInfo(uint160 tokenId)\\n        public\\n        view\\n        override\\n        returns (\\n            uint96 toLiquidate,\\n            uint96 toRebalance,\\n            uint96 earned,\\n            uint24 epochDue,\\n            address loaner\\n        )\\n    {\\n        uint256 cache = loans[tokenId];\\n\\n        loaner = cache.account();\\n\\n        require(loaner != address(0), 'L:4');\\n\\n        // the amount of eth currently loanded by user\\n        uint96 curr = cache.eth();\\n\\n        uint96 activeEps = ethPerShare();\\n\\n        assembly {\\n            toRebalance := div(mul(curr, REBALANCE_FEE_BPS), 10000)\\n        }\\n\\n        toLiquidate = curr + toRebalance;\\n\\n        unchecked {\\n            // value earned while lone was taken out\\n            earned = toLiquidate >= activeEps ? 0 : activeEps - toLiquidate;\\n\\n            epochDue = cache.epoch() + LIQUIDATION_PERIOD;\\n        }\\n    }\\n}\\n\"\n    },\n    \"src/core/NuggftV1Dotnugg.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1StorageProxy} from '../interfaces/dotnuggv1/IDotnuggV1StorageProxy.sol';\\n\\nimport {IDotnuggV1} from '../interfaces/dotnuggv1/IDotnuggV1.sol';\\nimport {IDotnuggV1Metadata} from '../interfaces/dotnuggv1/IDotnuggV1Metadata.sol';\\nimport {IDotnuggV1Resolver} from '../interfaces/dotnuggv1/IDotnuggV1Resolver.sol';\\nimport {IDotnuggV1Implementer} from '../interfaces/dotnuggv1/IDotnuggV1Implementer.sol';\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\nimport {INuggftV1Dotnugg} from '../interfaces/nuggftv1/INuggftV1Dotnugg.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {NuggftV1Token} from './NuggftV1Token.sol';\\n\\nimport {Trust} from './Trust.sol';\\n\\nabstract contract NuggftV1Dotnugg is INuggftV1Dotnugg, NuggftV1Token, Trust {\\n    using SafeCastLib for uint256;\\n    using SafeCastLib for uint16;\\n\\n    struct Settings {\\n        mapping(uint256 => uint256) anchorOverrides;\\n        mapping(uint256 => string) styles;\\n        string background;\\n    }\\n\\n    mapping(uint160 => Settings) settings;\\n\\n    /// @inheritdoc IDotnuggV1Implementer\\n    IDotnuggV1StorageProxy public override dotnuggV1StorageProxy;\\n\\n    /// @inheritdoc INuggftV1Dotnugg\\n    IDotnuggV1 public override dotnuggV1;\\n\\n    mapping(uint256 => address) resolvers;\\n\\n    uint256 internal featureLengths;\\n\\n    constructor(address _dotnuggV1) {\\n        require(_dotnuggV1 != address(0), 'F:4');\\n        dotnuggV1 = IDotnuggV1(_dotnuggV1);\\n        dotnuggV1StorageProxy = dotnuggV1.register();\\n    }\\n\\n    /// @inheritdoc IDotnuggV1Implementer\\n    function dotnuggV1StoreCallback(\\n        address caller,\\n        uint8 feature,\\n        uint8 amount,\\n        address\\n    ) external override(IDotnuggV1Implementer) returns (bool ok) {\\n        require(msg.sender == address(dotnuggV1StorageProxy), 'D:0');\\n\\n        ok = isTrusted[caller];\\n\\n        if (!ok) return false;\\n\\n        uint256 cache = featureLengths;\\n\\n        uint256 newLen = _lengthOf(cache, feature) + amount;\\n\\n        featureLengths = ShiftLib.set(cache, 8, feature * 8, newLen);\\n    }\\n\\n    /// @inheritdoc INuggftV1Dotnugg\\n    function dotnuggV1StoreFiles(uint256[][] calldata data, uint8 feature) external requiresTrust {\\n        // uint8 len = dotnuggV1StorageProxy.store(feature, data);\\n        // uint256 cache = featureLengths;\\n        // uint256 newLen = _lengthOf(cache, feature) + len;\\n        // featureLengths = ShiftLib.set(cache, 8, feature * 8, newLen);\\n    }\\n\\n    function lengthOf(uint8 feature) external view returns (uint8) {\\n        return _lengthOf(featureLengths, feature);\\n    }\\n\\n    function _lengthOf(uint256 cache, uint8 feature) internal pure returns (uint8) {\\n        return uint8(ShiftLib.get(cache, 8, feature * 8));\\n    }\\n\\n    /// @inheritdoc INuggftV1Dotnugg\\n    function setDotnuggV1Resolver(uint256 tokenId, address to) public virtual override {\\n        require(_isOperatorForOwner(msg.sender, tokenId.safe160()), 'F:5');\\n\\n        resolvers[tokenId] = to;\\n\\n        emit DotnuggV1ConfigUpdated(tokenId);\\n    }\\n\\n    /// @inheritdoc INuggftV1Dotnugg\\n    function dotnuggV1ResolverOf(uint256 tokenId) public view virtual override returns (address) {\\n        return resolvers[tokenId.safe160()];\\n    }\\n\\n    /// @inheritdoc INuggftV1Dotnugg\\n    function setDotnuggV1AnchorOverrides(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        uint256 x,\\n        uint256 y\\n    ) external override {\\n        require(x < 64 && y < 64, 'UNTEESTED:1');\\n\\n        ensureOperatorForOwner(msg.sender, tokenId);\\n\\n        settings[tokenId].anchorOverrides[itemId] = x | (y << 6);\\n\\n        emit DotnuggV1ConfigUpdated(tokenId);\\n    }\\n\\n    /// @inheritdoc INuggftV1Dotnugg\\n    function setDotnuggV1Background(uint160 tokenId, string memory s) external override {\\n        ensureOperatorForOwner(msg.sender, tokenId);\\n\\n        settings[tokenId].background = s;\\n\\n        emit DotnuggV1ConfigUpdated(tokenId);\\n    }\\n\\n    /// @inheritdoc INuggftV1Dotnugg\\n    function setDotnuggV1Style(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        string memory s\\n    ) external override {\\n        ensureOperatorForOwner(msg.sender, tokenId);\\n\\n        settings[tokenId].styles[itemId] = s;\\n\\n        emit DotnuggV1ConfigUpdated(tokenId);\\n    }\\n\\n    function hasResolver(uint160 tokenId) internal view returns (bool) {\\n        return resolvers[tokenId] != address(0);\\n    }\\n}\\n\"\n    },\n    \"src/core/Trust.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ITrust} from '../interfaces/ITrust.sol';\\n\\n/// @notice Ultra minimal authorization logic for smart contracts.\\n/// @author Inspired by Dappsys V2 (https://github.com/dapp-org/dappsys-v2/blob/main/src/auth.sol)\\nabstract contract Trust is ITrust {\\n    event UserTrustUpdated(address indexed user, bool trusted);\\n\\n    mapping(address => bool) public override isTrusted;\\n\\n    constructor(address[] memory inital) {\\n        for (uint256 i = 0; i < inital.length; i++) {\\n            isTrusted[inital[i]] = true;\\n            emit UserTrustUpdated(inital[i], true);\\n        }\\n    }\\n\\n    function setIsTrusted(address user, bool trusted) public virtual requiresTrust {\\n        isTrusted[user] = trusted;\\n\\n        emit UserTrustUpdated(user, trusted);\\n    }\\n\\n    modifier requiresTrust() {\\n        _requiresTrust();\\n        _;\\n    }\\n\\n    function _requiresTrust() internal view {\\n        require(isTrusted[msg.sender], 'UNTRUSTED');\\n    }\\n}\\n\"\n    },\n    \"src/interfaces/nuggftv1/INuggftV1Migrator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Migrator {\\n    event MigrateV1Accepted(address v1, uint160 tokenId, uint256 proof, address owner, uint96 eth);\\n\\n    function nuggftMigrateFromV1(\\n        uint160 tokenId,\\n        uint256 proof,\\n        address owner\\n    ) external payable;\\n}\\n\"\n    },\n    \"src/interfaces/dotnuggv1/IDotnuggV1Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IDotnuggV1Metadata {\\n    struct Memory {\\n        uint8[] ids;\\n        uint8[] xovers;\\n        uint8[] yovers;\\n        uint256 version;\\n        address implementer;\\n        uint256 artifactId;\\n        string[] labels;\\n        string[] styles;\\n        string background;\\n        bytes data;\\n    }\\n}\\n\"\n    },\n    \"src/interfaces/dotnuggv1/IDotnuggV1Implementer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata} from './IDotnuggV1Metadata.sol';\\nimport {IDotnuggV1StorageProxy} from './IDotnuggV1StorageProxy.sol';\\n\\ninterface IDotnuggV1Implementer {\\n    event DotnuggV1ConfigUpdated(uint256 indexed artifactId);\\n\\n    function dotnuggV1ImplementerCallback(uint256 artifactId) external view returns (IDotnuggV1Metadata.Memory memory data);\\n\\n    function dotnuggV1StoreCallback(\\n        address caller,\\n        uint8 feature,\\n        uint8 amount,\\n        address storagePointer\\n    ) external returns (bool ok);\\n\\n    function dotnuggV1StorageProxy() external returns (IDotnuggV1StorageProxy res);\\n}\\n\"\n    },\n    \"src/interfaces/dotnuggv1/IDotnuggV1.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata as Metadata} from './IDotnuggV1Metadata.sol';\\nimport {IDotnuggV1File as File} from './IDotnuggV1File.sol';\\nimport {IDotnuggV1StorageProxy} from './IDotnuggV1StorageProxy.sol';\\n\\ninterface IDotnuggV1 {\\n    function register() external returns (IDotnuggV1StorageProxy proxy);\\n\\n    function proxyOf(address implementer) external view returns (IDotnuggV1StorageProxy proxy);\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                core processors\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function raw(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        bytes calldata data\\n    ) external view returns (File.Raw memory res);\\n\\n    function proc(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        bytes calldata data\\n    ) external view returns (File.Processed memory res);\\n\\n    function comp(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        bytes calldata data\\n    ) external view returns (File.Compressed memory res);\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                            complex resolved processors\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n    function dat(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        string memory name,\\n        string memory desc,\\n        bool base64,\\n        bytes calldata data\\n    ) external view returns (string memory res);\\n\\n    function img(\\n        address implementer,\\n        uint256 id,\\n        address resolver,\\n        bool rekt,\\n        bool background,\\n        bool base64,\\n        bool stats,\\n        bytes calldata data\\n    ) external view returns (string memory res);\\n}\\n\"\n    },\n    \"src/interfaces/nuggftv1/INuggftV1Token.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721} from '../IERC721.sol';\\n\\ninterface INuggftV1Token is IERC721 {\\n    event Mint(uint160 tokenId, uint96 value);\\n\\n    function mint(uint160 tokenId) external payable;\\n\\n    function trustedMint(uint160 tokenId, address to) external payable;\\n}\\n\"\n    },\n    \"src/interfaces/nuggftv1/INuggftV1Stake.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Stake {\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                EVENTS\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    event ProtocolEthExtracted(uint96 eth);\\n    event MigratorV1Updated(address migrator);\\n    event MigrateV1Sent(address v2, uint160 tokenId, uint256 proof, address owner, uint96 eth);\\n    event Burn(uint160 tokenId, address owner, uint96 ethOwed);\\n    event Stake(uint256 stake);\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                            STATE CHANGING\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function migrate(uint160 tokenId) external;\\n\\n    /// @notice burns a nugg from existance, dealing the eth worth of that share to the user\\n    /// @dev should only be called directly\\n    /// @param tokenId the id of the nugg being burned\\n    function burn(uint160 tokenId) external;\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                            VIEW FUNCTIONS\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    /// @notice returns the minimum eth that must be added to create a new share\\n    /// @dev premium here is used to push against dillution of supply through ensuring the price always increases\\n    /// @dev used by the front end\\n    /// @return res -> premium + protcolFee + ethPerShare\\n    function minSharePrice() external view returns (uint96 res);\\n\\n    /// @notice returns the amount of eth extractable by protocol\\n    /// @dev this will be\\n    /// @return res -> (PROTOCOL_FEE_BPS * [all eth staked] / 10000) - [all previously extracted eth]\\n    function protocolEth() external view returns (uint96);\\n\\n    /// @notice returns the total number of staked shares held by the contract\\n    /// @dev this is equivilent to the amount of nuggs in existance\\n    function stakedShares() external view returns (uint64);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice returns the total amount of staked eth held by the contract\\n    /// @dev can be used as the market-cap or tvl of all nuggft v1\\n    /// @dev not equivilent to the balance of eth the contract holds, which also hs protocolEth and\\n    /// unclaimed eth from unsuccessful swaps\\n    function stakedEth() external view returns (uint96);\\n\\n    /// @notice returns the total \\\"ethPerShare\\\" held by the contract\\n    /// @dev this value not always equivilent to the \\\"floor\\\" price which can consist of perceived value.\\n    /// can be looked at as an \\\"intrinsic floor\\\"\\n    /// @dev this is the value that users will receive when their either burn or loan out nuggs\\n    /// @return res -> [current staked eth] / [current staked shares]\\n    function ethPerShare() external view returns (uint96);\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                TRUSTED\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    /// @notice sends the current protocolEth to the user and resets the value to zero\\n    /// @dev caller must be a trusted user\\n    function extractProtocolEth() external;\\n\\n    /// @notice sets the migrator contract\\n    /// @dev caller must be a trusted user\\n    /// @param migrator the address to set as the migrator contract\\n    function setMigrator(address migrator) external;\\n}\\n\"\n    },\n    \"src/interfaces/nuggftv1/INuggftV1.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggftV1Token} from './INuggftV1Token.sol';\\nimport {INuggftV1Stake} from './INuggftV1Stake.sol';\\nimport {INuggftV1Proof} from './INuggftV1Proof.sol';\\nimport {INuggftV1Dotnugg} from './INuggftV1Dotnugg.sol';\\nimport {INuggftV1Swap} from './INuggftV1Swap.sol';\\nimport {INuggftV1Loan} from './INuggftV1Loan.sol';\\nimport {INuggftV1Epoch} from './INuggftV1Epoch.sol';\\n\\nimport {IERC721Metadata} from '../IERC721.sol';\\n\\ninterface INuggftV1 is\\n    IERC721Metadata,\\n    INuggftV1Token,\\n    INuggftV1Stake,\\n    INuggftV1Proof,\\n    INuggftV1Dotnugg,\\n    INuggftV1Swap,\\n    INuggftV1Loan,\\n    INuggftV1Epoch\\n{}\\n\"\n    },\n    \"src/libraries/SafeTransferLib.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/// Adapted from Rari-Capital/solmate\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\nlibrary SafeTransferLib {\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                               ETH OPERATIONS\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, 'Z:0');\\n    }\\n}\\n\"\n    },\n    \"src/libraries/SafeCastLib.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/// Adapted from Rari-Capital/solmate\\n\\n/// @notice Safe unsigned integer casting library that reverts on overflow.\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\\nlibrary SafeCastLib {\\n    function safe160(uint256 x) internal pure returns (uint160 y) {\\n        require(x <= type(uint160).max);\\n        y = uint160(x);\\n    }\\n\\n    function safe96(uint256 x) internal pure returns (uint96 y) {\\n        require(x <= type(uint96).max);\\n        y = uint96(x);\\n    }\\n\\n    function safe64(uint256 x) internal pure returns (uint64 y) {\\n        require(x <= type(uint64).max);\\n        y = uint64(x);\\n    }\\n\\n    function safe32(uint256 x) internal pure returns (uint32 y) {\\n        require(x <= type(uint32).max);\\n        y = uint32(x);\\n    }\\n\\n    function safe24(uint256 x) internal pure returns (uint24 y) {\\n        assembly {\\n            if gt(x, 0xfff) {\\n                revert(0, 0)\\n            }\\n            y := x\\n        }\\n        require(x <= type(uint24).max);\\n        y = uint24(x);\\n    }\\n\\n    function safe16(uint256 x) internal pure returns (uint16 y) {\\n        require(x <= type(uint16).max);\\n        y = uint16(x);\\n    }\\n\\n    function safe8(uint256 x) internal pure returns (uint8 y) {\\n        require(x <= type(uint8).max);\\n        y = uint8(x);\\n    }\\n}\\n\"\n    },\n    \"src/libraries/ShiftLib.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeCastLib} from './SafeCastLib.sol';\\n\\nlibrary ShiftLib {\\n    using SafeCastLib for uint256;\\n\\n    /// @notice creates a bit mask\\n    /// @dev res = (2 ^ bits) - 1\\n    /// @param bits bit size of mask\\n    /// @return res the mask\\n    function mask(uint8 bits) internal pure returns (uint256 res) {\\n        assembly {\\n            res := sub(shl(bits, 1), 1)\\n        }\\n    }\\n\\n    function fullsubmask(uint8 bits, uint8 pos) internal pure returns (uint256 res) {\\n        res = ~(mask(bits) << pos);\\n    }\\n\\n    function set(\\n        uint256 preStore,\\n        uint8 bits,\\n        uint8 pos,\\n        uint256 value\\n    ) internal pure returns (uint256 res) {\\n        // res = preStore & fullsubmask(bits, pos);\\n        res = fullsubmask(bits, pos);\\n\\n        assembly {\\n            value := shl(pos, value)\\n            res := or(and(preStore, res), value)\\n        }\\n\\n        // res |= value;\\n    }\\n\\n    function get(\\n        uint256 store,\\n        uint8 bits,\\n        uint8 pos\\n    ) internal pure returns (uint256 res) {\\n        res = mask(bits);\\n        assembly {\\n            res := and(shr(pos, store), res)\\n        }\\n        // value &= mask(bits);\\n    }\\n}\\n\"\n    },\n    \"src/types/NuggftV1StakeType.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\nlibrary NuggftV1StakeType {\\n    /// 96 protocol\\n    /// 96 stakedEth\\n    /// 64 stakedShares\\n\\n    function proto(uint256 cache) internal pure returns (uint96 res) {\\n        res = uint96(cache);\\n    }\\n\\n    function proto(uint256 cache, uint96 update) internal pure returns (uint256 res) {\\n        res = cache & ShiftLib.fullsubmask(96, 0);\\n        res |= update;\\n    }\\n\\n    function addProto(uint256 cache, uint96 add) internal pure returns (uint256 res) {\\n        add += proto(cache);\\n        res = proto(cache, add);\\n    }\\n\\n    function subProto(uint256 cache, uint96 sub) internal pure returns (uint256 res) {\\n        sub = proto(cache) - sub;\\n        res = proto(cache, sub);\\n    }\\n\\n    // @test input output unit test\\n    function staked(uint256 cache) internal pure returns (uint96 res) {\\n        // using casting to select only 96\\n        res = uint96(cache >> 96);\\n    }\\n\\n    function staked(uint256 cache, uint96 update) internal pure returns (uint256 res) {\\n        // clear stakedEth\\n        res = cache & ShiftLib.fullsubmask(96, 96);\\n        res |= uint256(update) << 96;\\n    }\\n\\n    function addStaked(uint256 cache, uint96 add) internal pure returns (uint256 res) {\\n        add += staked(cache);\\n        res = staked(cache, add);\\n    }\\n\\n    function subStaked(uint256 cache, uint96 sub) internal pure returns (uint256 res) {\\n        sub = staked(cache) - sub;\\n        res = staked(cache, sub);\\n    }\\n\\n    // @test input output unit test\\n    function shares(uint256 cache) internal pure returns (uint64 res) {\\n        res = uint64(cache >> 192);\\n    }\\n\\n    function addShares(uint256 cache, uint64 add) internal pure returns (uint256 res) {\\n        add += shares(cache);\\n        res = shares(cache, add);\\n    }\\n\\n    function subShares(uint256 cache, uint64 sub) internal pure returns (uint256 res) {\\n        sub = shares(cache) - sub;\\n        res = shares(cache, sub);\\n    }\\n\\n    function shares(uint256 cache, uint64 update) internal pure returns (uint256 res) {\\n        res = cache & type(uint192).max;\\n        res |= (uint256(update) << 192);\\n    }\\n}\\n\"\n    },\n    \"src/types/NuggftV1ProofType.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\n/// @notice abstracts all the logic for converting the proof between a the uint256 which is stored in\\n/// in state and the the 4 uint8 arrays that it consists off.\\n/// @dev Explain to a developer any extra details\\n/// @dev itemIds are externally 16 bits, but here there are referenced as 8 bit ids in one of 8 indexs\\n/// where the id is the position the item exists in the file storage, and the index is the feature id\\n/// @dev there is not check - but dotnugg v1 only allows for max 63 for size, so anchor overrides should\\n/// reflect this.\\n/// @dev pushing and pulling is only set up for the extra array, so the user must manage their default array\\n/// by passing through the extra array - this is to reduce complexity\\n/// @dev see the dotnugg specification for more clarificaiton on the values used here\\n///\\n///  uint256 bit allocation of proof \\\"state\\\" variable:\\n/// ┌───────────┬─────────┬────────────────────────────────────┐\\n/// │  0 - 63   │ 64 bits │  default item ids - 8 x 8 bits     │\\n/// ├───────────┼─────────┼────────────────────────────────────┤\\n/// │ 64 - 127  │ 64 bits │  extra item ids - 8 x 8 bits       │\\n/// ├───────────┼─────────┼────────────────────────────────────┤\\n/// │ 128 - 191 │ 64 bits │  x anchor overrides - 8 x 8 bits   │\\n/// ├───────────┼─────────┼────────────────────────────────────┤\\n/// │ 192 - 255 │ 64 bits │  y anchor overrides - 8 x 8 bits   │\\n/// └───────────┴─────────┴────────────────────────────────────┘\\n///\\nlibrary NuggftV1ProofType {\\n    /// @notice converts the proof state into a human readable form\\n    /// @dev fully parses the proof from a uint256 to 4 uint8 arrays\\n    /// @param state -> the uint256 proof state\\n    /// @return proof -> the uint256 proof state\\n    /// @return defaultIds -> the modifed uint256 proof state\\n    /// @return extraIds -> the modifed uint256 proof state\\n    /// @return xOverrides -> the modifed uint256 proof state\\n    /// @return yOverrides -> the modifed uint256 proof state\\n    // function fullProof(uint256 state)\\n    //     internal\\n    //     pure\\n    //     returns (\\n    //         uint256 proof,\\n    //         uint8[] memory defaultIds,\\n    //         uint8[] memory extraIds,\\n    //         uint8[] memory xOverrides,\\n    //         uint8[] memory yOverrides\\n    //     )\\n    // {\\n    //     proof = state;\\n    //     defaultIds = ShiftLib.getArray(state, 0);\\n    //     extraIds = ShiftLib.getArray(state, 64);\\n    //     xOverrides = ShiftLib.getArray(state, 128);\\n    //     yOverrides = ShiftLib.getArray(state, 192);\\n    // }\\n\\n    /// @notice sets an item to the extra array\\n    /// @dev extra array must be empty at the feature positon being added to\\n    /// @param state -> the uint256 proof state\\n    /// @param itemId -> the itemId being added\\n    /// @return res -> the modifed uint256 proof state\\n    // function pushToExtra(uint256 state, uint16 itemId) internal pure returns (uint256 res) {\\n    //     uint8[] memory arr = ShiftLib.getArray(state, 64);\\n\\n    //     (uint8 feat, uint8 pos) = parseItemId(itemId);\\n\\n    //     require(arr[feat] == 0, 'P:D');\\n\\n    //     arr[feat] = pos;\\n\\n    //     res = ShiftLib.setArray(state, 64, arr);\\n    // }\\n\\n    /// / @notice removes an item from the extra array\\n    // / @dev extra array must NOT be empty at the feature positon being removed\\n    // / @dev the extra array must have that specific feature in that postion\\n    // / @param state -> the uint256 proof state\\n    // / @param itemId -> the itemId being removed\\n    // / @return res -> the modifed uint256 proof state\\n    // function pullFromExtra(uint256 state, uint16 itemId) internal pure returns (uint256 res) {\\n    //     uint8[] memory arr = ShiftLib.getArray(state, 64);\\n\\n    //     (uint8 feat, uint8 pos) = parseItemId(itemId);\\n\\n    //     require(feat != 0, 'P:F');\\n\\n    //     require(arr[feat] == pos, 'P:E');\\n\\n    //     arr[feat] = 0;\\n\\n    //     res = ShiftLib.setArray(state, 64, arr);\\n    // }\\n\\n    function search(uint256 state, uint256 itemId) internal pure returns (uint8 index) {\\n        state >>= 3;\\n\\n        do {\\n            if (state & 11 == itemId) return index;\\n            index++;\\n        } while ((state >>= 11) != 0);\\n\\n        require(index != 22, 'UNTESTED');\\n\\n        // if (index == 22) revert('UNTESTED');\\n    }\\n\\n    function swapIndexs(\\n        uint256 state,\\n        uint8 index1,\\n        uint8 index2\\n    ) internal pure returns (uint256 res) {\\n        uint256 tmp = getIndex(state, index1);\\n        res = setIndex(state, index1, getIndex(state, index2));\\n        res = setIndex(state, index2, tmp);\\n    }\\n\\n    function getIndex(uint256 state, uint8 index) internal pure returns (uint16 res) {\\n        res = uint16(ShiftLib.get(state, 11, 3 + 11 * index));\\n    }\\n\\n    function setIndex(\\n        uint256 state,\\n        uint8 index,\\n        uint256 id\\n    ) internal pure returns (uint256 res) {\\n        res = ShiftLib.set(state, 11, 3 + 11 * index, id);\\n    }\\n\\n    /// @notice updates the x and y override arrays\\n    /// @dev all must be set at once\\n    /// @param state -> the uint256 proof state\\n    /// @param xOverrides -> uint8 array of new x overrides\\n    /// @param yOverrides -> uint8 array of new x overrides\\n    /// @return res -> the modifed uint256 proof state\\n    // function setNewAnchorOverrides(\\n    //     uint256 state,\\n    //     uint8[] memory xOverrides,\\n    //     uint8[] memory yOverrides\\n    // ) internal pure returns (uint256 res) {\\n    //     res = ShiftLib.setArray(state, 128, xOverrides);\\n    //     res = ShiftLib.setArray(res, 192, yOverrides);\\n    // }\\n\\n    /// @notice clears the anchor overrides for a specific feature\\n    /// @dev this should be called each time an item is added or removed from a feature\\n    /// @param state -> the uint256 proof state\\n    /// @param feature -> the feature to switch items for\\n    /// @return res -> the modifed uint256 proof state\\n    // function clearAnchorOverridesForFeature(uint256 state, uint8 feature) internal pure returns (uint256 res) {\\n    //     uint8[] memory x = ShiftLib.getArray(state, 128);\\n    //     uint8[] memory y = ShiftLib.getArray(state, 192);\\n\\n    //     y[feature] = 0;\\n    //     x[feature] = 0;\\n\\n    //     res = ShiftLib.setArray(state, 128, x);\\n    //     res = ShiftLib.setArray(res, 192, y);\\n    // }\\n\\n    /// @notice parses the external itemId into a feautre and position\\n    /// @dev this follows dotnugg v1 specification\\n    /// @param itemId -> the external itemId\\n    /// @return feat -> the feautre of the item\\n    /// @return pos -> the file storage position of the item\\n    function parseItemId(uint16 itemId) internal pure returns (uint8 feat, uint8 pos) {\\n        feat = uint8(itemId >> 8);\\n        pos = uint8(itemId & 0xff);\\n    }\\n}\\n\"\n    },\n    \"src/interfaces/nuggftv1/INuggftV1Loan.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Loan {\\n    /*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                EVENTS\\n    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*/\\n\\n    event Loan(uint160 indexed tokenId, uint96 value);\\n\\n    event Rebalance(uint160 indexed tokenId, uint96 value);\\n\\n    event Liquidate(uint160 indexed tokenId, uint96 value, address user);\\n\\n    /*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                            STATE CHANGING\\n    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*/\\n\\n    function rebalance(uint160 tokenId) external payable;\\n\\n    function loan(uint160 tokenId) external;\\n\\n    function liquidate(uint160 tokenId) external payable;\\n\\n    /*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                            VIEW FUNCTIONS\\n    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*/\\n\\n    /// @notice for a nugg's active loan: calculates the current min eth a user must send to liquidate or rebalance\\n    /// @dev contract ->\\n    /// @dev frontend -> used to set the amount of eth for user\\n    /// @param tokenId the token who's current loan to check\\n    /// @return toLiquidate ->  the current amount loaned out, plus the final rebalance fee\\n    /// @return toRebalance ->  the fee a user must pay to rebalance (and extend) the loan on their nugg\\n    /// @return earned -> the amount of eth the minSharePrice has increased since loan was last rebalanced\\n    /// @return epochDue -> the final epoch a user is safe from liquidation (inclusive)\\n    /// @return loaner -> the user responsable for the loan\\n    function loanInfo(uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 toLiquidate,\\n            uint96 toRebalance,\\n            uint96 earned,\\n            uint24 epochDue,\\n            address loaner\\n        );\\n\\n    /// @notice \\\"toLiquidate\\\" value from \\\"loanInfo\\\"\\n    /// @dev should be used to tell user how much eth to send for liquidate\\n    function valueForLiquidate(uint160 tokenId) external view returns (uint96 res);\\n\\n    /// @notice \\\"toRebalance\\\" value from \\\"loanInfo\\\"\\n    /// @dev should be used to tell user how much eth to send for rebalance\\n    function valueForRebalance(uint160 tokenId) external view returns (uint96 res);\\n}\\n\"\n    },\n    \"src/types/NuggftV1AgentType.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\n/// @notice Explain to an end user what this does\\n/// @dev Explain to a developer any extra details\\nlibrary NuggftV1AgentType {\\n    using SafeCastLib for uint256;\\n\\n    // 10**13\\n    uint96 constant COMPRESSION_LOSS = 10e8;\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                               CALCULATION\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    // @test  manual\\n    function addIncrement(uint96 value) internal pure returns (uint96 res) {\\n        res = value * 10200;\\n        assembly {\\n            res := div(res, 10000)\\n        }\\n    }\\n\\n    // @test  manual\\n    function compressEthRoundDown(uint96 value) internal pure returns (uint96 res) {\\n        assembly {\\n            res := mul(div(value, COMPRESSION_LOSS), COMPRESSION_LOSS)\\n        }\\n    }\\n\\n    // @test  manual\\n    function compressEthRoundUp(uint96 value) internal pure returns (uint96 res) {\\n        assembly {\\n            res := mod(value, COMPRESSION_LOSS)\\n        }\\n        if (res > 0) {\\n            assembly {\\n                res := mul(add(div(value, COMPRESSION_LOSS), 1), COMPRESSION_LOSS)\\n            }\\n        } else {\\n            return compressEthRoundDown(value);\\n        }\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                              SHIFT HELPERS\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n    // @test input output unit test\\n    // type(uint96).max / 10e8 =    792281625142643375935\\n    // type(uint70).max          = 1180591620717411303423\\n    function eth(uint256 input) internal pure returns (uint96 res) {\\n        input = ShiftLib.get(input, 70, 160);\\n        assembly {\\n            res := mul(input, COMPRESSION_LOSS)\\n        }\\n        // return input.safe96();\\n    }\\n\\n    function eth(uint256 input, uint96 update) internal pure returns (uint256 cache) {\\n        assembly {\\n            update := div(update, COMPRESSION_LOSS) // bye byte wei\\n        }\\n        cache = ShiftLib.set(input, 70, 160, update);\\n    }\\n\\n    // @test  input output unit test\\n    function epoch(uint256 input, uint24 update) internal pure returns (uint256 res) {\\n        return ShiftLib.set(input, 24, 230, update);\\n    }\\n\\n    function epoch(uint256 input) internal pure returns (uint24 res) {\\n        return uint24(ShiftLib.get(input, 24, 230));\\n    }\\n\\n    // @test  input output unit test\\n    function account(uint256 input) internal pure returns (address res) {\\n        res = address(uint160(ShiftLib.get(input, 160, 0)));\\n    }\\n\\n    function account(uint256 input, address update) internal pure returns (uint256 output) {\\n        output = ShiftLib.set(input, 160, 0, uint160(update));\\n    }\\n\\n    // @test  input output unit test\\n    function isOwner(uint256 input, bool update) internal pure returns (uint256 res) {\\n        return ShiftLib.set(input, 1, 255, update ? 0x1 : 0x0);\\n    }\\n\\n    function isOwner(uint256 input) internal pure returns (bool output) {\\n        output = ShiftLib.get(input, 1, 255) == 0x1;\\n    }\\n\\n    // @test  check to see if it does this - will be easy\\n    function flag(uint256 input) internal pure returns (uint256 res) {\\n        res = ShiftLib.set(input, 1, 254, 0x01);\\n    }\\n\\n    // @test  manual\\n    function newAgentType(\\n        uint24 _epoch,\\n        address _account,\\n        uint96 _eth,\\n        bool _isOwner\\n    ) internal pure returns (uint256 res) {\\n        res = epoch(res, _epoch);\\n        res = account(res, _account);\\n        if (_isOwner) res = isOwner(res, true);\\n        (res) = eth(res, _eth);\\n        res = flag(res);\\n    }\\n}\\n\"\n    },\n    \"src/core/NuggftV1Swap.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggftV1Swap} from '../interfaces/nuggftv1/INuggftV1Swap.sol';\\n\\nimport {NuggftV1Stake} from './NuggftV1Stake.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {NuggftV1AgentType} from '../types/NuggftV1AgentType.sol';\\n\\n/// @notice mechanism for trading of nuggs between users (and items between nuggs)\\n/// @dev Explain to a developer any extra details\\nabstract contract NuggftV1Swap is INuggftV1Swap, NuggftV1Stake {\\n    using SafeCastLib for uint256;\\n\\n    using NuggftV1AgentType for uint256;\\n\\n    struct Mapping {\\n        Storage self;\\n        mapping(uint16 => Storage) items;\\n    }\\n\\n    struct Storage {\\n        uint256 data;\\n        mapping(address => uint256) offers;\\n    }\\n\\n    struct Memory {\\n        uint256 swapData;\\n        uint256 offerData;\\n        uint24 activeEpoch;\\n        address sender;\\n    }\\n\\n    mapping(uint16 => uint256) protocolItems;\\n    mapping(uint160 => Mapping) swaps;\\n\\n    uint96 public constant MIN_OFFER = 10**8 * 100;\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                  delegate\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    /// @inheritdoc INuggftV1Swap\\n    function delegate(uint160 tokenId) external payable override {\\n        // require(_isOperatorFor(msg.sender, sender), 'S:0');\\n\\n        (Storage storage s, Memory memory m) = loadTokenSwap(tokenId, msg.sender);\\n\\n        // make sure user is not the owner of swap\\n        // we do not know how much to give them when they call \\\"claim\\\" otherwise\\n\\n        uint96 lead;\\n\\n        if (m.activeEpoch == tokenId && m.swapData == 0) {\\n            // to ensure we at least have enough to increment the offer amount by 2%\\n            require(msg.value >= MIN_OFFER, 'S:1');\\n\\n            // we do not need this, could take tokenId out as an argument - but do not want to give users\\n            // the ability to accidently place an offer for nugg A and end up minting nugg B.\\n            assert(m.offerData == 0);\\n\\n            lead = msg.value.safe96();\\n\\n            (s.data) = NuggftV1AgentType.newAgentType(m.activeEpoch, m.sender, lead, false);\\n\\n            addStakedShareFromMsgValue(0);\\n\\n            setProofFromEpoch(tokenId);\\n\\n            emitTransferEvent(address(0), address(this), tokenId);\\n        } else {\\n            require(m.swapData != 0, 'S:4');\\n\\n            if (m.offerData != 0) {\\n                // forces user to claim previous swap before acting on this one\\n                // prevents owner from COMMITTING on their own swap - not offering\\n                require(m.offerData.epoch() >= m.activeEpoch, 'S:R');\\n\\n                require(!m.offerData.isOwner(), 'NOPE'); // always be caught by the require above\\n            }\\n\\n            // if the leader \\\"owns\\\" the swap, then it was initated by them - \\\"commit\\\" must be executed\\n            (lead) = m.swapData.isOwner() ? commit(s, m) : offer(s, m);\\n        }\\n\\n        emit Delegate(tokenId, msg.sender, lead);\\n    }\\n\\n    /// @inheritdoc INuggftV1Swap\\n    function delegateItem(\\n        uint160 buyerTokenId,\\n        uint160 sellerTokenId,\\n        uint16 itemId\\n    ) external payable override {\\n        require(_ownerOf(buyerTokenId) == msg.sender, 'S:6');\\n\\n        (Storage storage s, Memory memory m) = loadItemSwap(sellerTokenId, itemId, address(buyerTokenId));\\n\\n        require(m.swapData != 0, 'S:S');\\n\\n        if (m.offerData != 0) {\\n            // forces user to claim previous swap before acting on this one\\n            // prevents owner from COMMITTING on their own swap - not offering\\n            require(m.offerData.epoch() >= m.activeEpoch, 'S:7');\\n\\n            require(!m.offerData.isOwner(), 'NOPE'); // always be caught by the require above\\n        }\\n\\n        uint96 lead = m.offerData == 0 && m.swapData.isOwner() ? commit(s, m) : offer(s, m);\\n\\n        emit DelegateItem(encodeSellingItemId(sellerTokenId, itemId), buyerTokenId, lead);\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                  claim\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    /// @inheritdoc INuggftV1Swap\\n    function claim(uint160 tokenId) external override {\\n        // require(_isOperatorFor(msg.sender, sender), 'S:8');\\n\\n        (Storage storage s, Memory memory m) = loadTokenSwap(tokenId, msg.sender);\\n\\n        delete s.offers[msg.sender];\\n\\n        if (checkClaimerIsWinnerOrLoser(m)) {\\n            delete s.data;\\n\\n            checkedTransferFromSelf(msg.sender, tokenId);\\n        } else {\\n            SafeTransferLib.safeTransferETH(msg.sender, m.offerData.eth());\\n        }\\n\\n        emit Claim(tokenId, msg.sender);\\n    }\\n\\n    /// @inheritdoc INuggftV1Swap\\n    function claimItem(\\n        uint160 buyerTokenId,\\n        uint160 sellerTokenId,\\n        uint16 itemId\\n    ) external override {\\n        require(_ownerOf(buyerTokenId) == msg.sender, 'S:9');\\n\\n        (Storage storage s, Memory memory m) = loadItemSwap(sellerTokenId, itemId, address(buyerTokenId));\\n\\n        delete s.offers[address(buyerTokenId)];\\n\\n        if (checkClaimerIsWinnerOrLoser(m)) {\\n            delete s.data;\\n\\n            require(protocolItems[itemId] > 0, 'P:3');\\n\\n            addItem(buyerTokenId, itemId);\\n\\n            protocolItems[itemId]--;\\n        } else {\\n            SafeTransferLib.safeTransferETH(_ownerOf(buyerTokenId), m.offerData.eth());\\n        }\\n\\n        emit ClaimItem(encodeSellingItemId(sellerTokenId, itemId), buyerTokenId);\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                  swap\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    /// @inheritdoc INuggftV1Swap\\n    function swap(uint160 tokenId, uint96 floor) external override {\\n        require(_ownerOf(tokenId) == msg.sender, 'S:A');\\n\\n        require(floor >= ethPerShare(), 'S:B');\\n\\n        approvedTransferToSelf(tokenId);\\n\\n        (Storage storage s, Memory memory m) = loadTokenSwap(tokenId, msg.sender);\\n\\n        // make sure swap does not exist - this logically should never happen\\n        require(m.swapData == 0, 'NOPE2');\\n\\n        // no need to check dust as no value is being transfered\\n        (s.data) = NuggftV1AgentType.newAgentType(0, msg.sender, floor, true);\\n\\n        emit Swap(tokenId, floor);\\n    }\\n\\n    /// @inheritdoc INuggftV1Swap\\n    function swapItem(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        uint96 floor\\n    ) external override {\\n        require(_ownerOf(tokenId) == msg.sender, 'S:C');\\n\\n        // will revert if they do not have the item\\n        removeItem(tokenId, itemId);\\n\\n        protocolItems[itemId]++;\\n\\n        (Storage storage s, Memory memory m) = loadItemSwap(tokenId, itemId, address(tokenId));\\n\\n        // cannot sell two of the same item at same time\\n        require(m.swapData == 0, 'S:D');\\n\\n        (s.data) = NuggftV1AgentType.newAgentType(0, address(tokenId), floor, true);\\n\\n        emit Swap(tokenId, floor);\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                    view\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    // / @inheritdoc INuggftV1Swap\\n    function valueForDelegate(address sender, uint160 tokenId)\\n        external\\n        view\\n        override\\n        returns (\\n            bool canDelegate,\\n            uint96 nextSwapAmount,\\n            uint96 senderCurrentOffer\\n        )\\n    {\\n        canDelegate = true;\\n\\n        (, Memory memory m) = loadTokenSwap(tokenId, sender);\\n\\n        if (m.swapData == 0) {\\n            if (m.activeEpoch == tokenId) {\\n                // swap is minting\\n                nextSwapAmount = NuggftV1AgentType.compressEthRoundUp(minSharePrice());\\n            } else {\\n                // swap does not exist\\n                return (false, 0, 0);\\n            }\\n        } else {\\n            if (m.offerData.isOwner() && m.swapData.isOwner()) canDelegate = false;\\n\\n            senderCurrentOffer = m.offerData.eth();\\n\\n            nextSwapAmount = m.swapData.eth();\\n\\n            if (nextSwapAmount < ethPerShare()) {\\n                nextSwapAmount = ethPerShare();\\n            }\\n        }\\n\\n        if (nextSwapAmount == 0) {\\n            nextSwapAmount = MIN_OFFER;\\n        } else {\\n            nextSwapAmount = NuggftV1AgentType.addIncrement(nextSwapAmount);\\n        }\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                internal\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function commit(Storage storage s, Memory memory m) internal returns (uint96 lead) {\\n        require(msg.value >= ethPerShare(), 'S:5');\\n\\n        require(m.offerData == 0 && m.swapData != 0, 'NOPE3');\\n\\n        require(m.swapData.isOwner(), 'NOPE4');\\n\\n        // forces a user not to commit on their own swap\\n        // commented out as the logic is handled by S:R\\n        // require(!m.offerData.isOwner()(), 'S:3');\\n\\n        (uint256 newSwapData, uint96 increment) = updateSwapDataWithEpoch(m.swapData, m.activeEpoch + 1, m.sender, 0);\\n\\n        s.data = newSwapData;\\n\\n        s.offers[m.swapData.account()] = m.swapData.isOwner(false).epoch(m.activeEpoch + 1);\\n\\n        lead = newSwapData.eth();\\n        addStakedEth(increment);\\n    }\\n\\n    function offer(Storage storage s, Memory memory m) internal returns (uint96 lead) {\\n        // make sure swap is still active\\n        require(m.activeEpoch <= m.swapData.epoch(), 'S:F');\\n\\n        if (m.swapData.account() != m.sender) s.offers[m.swapData.account()] = m.swapData;\\n\\n        (uint256 newSwapData, uint96 increment) = updateSwapDataWithEpoch(m.swapData, m.swapData.epoch(), m.sender, m.offerData.eth());\\n\\n        s.data = newSwapData;\\n\\n        lead = newSwapData.eth();\\n        addStakedEth(increment);\\n    }\\n\\n    function checkClaimerIsWinnerOrLoser(Memory memory m) internal pure returns (bool winner) {\\n        require(m.offerData != 0, 'S:E');\\n\\n        bool isOver = m.activeEpoch > m.swapData.epoch();\\n        bool isLeader = m.offerData.account() == m.swapData.account();\\n        bool isOwner = m.swapData.isOwner() && m.offerData.isOwner();\\n\\n        return isLeader && (isOwner || isOver);\\n    }\\n\\n    // @test  unit\\n    function updateSwapDataWithEpoch(\\n        uint256 prevSwapData,\\n        uint24 _epoch,\\n        address account,\\n        uint96 currUserOffer\\n    ) internal view returns (uint256 res, uint96 increment) {\\n        uint96 baseEth = prevSwapData.eth();\\n\\n        currUserOffer += msg.value.safe96();\\n\\n        require(NuggftV1AgentType.addIncrement(baseEth) <= currUserOffer, 'S:G');\\n\\n        (res) = NuggftV1AgentType.newAgentType(_epoch, account, currUserOffer, false);\\n\\n        increment = currUserOffer - baseEth;\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                TOKEN SWAP\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function loadTokenSwap(uint160 tokenId, address account) internal view returns (Storage storage s, Memory memory m) {\\n        s = swaps[tokenId].self;\\n        m = _load(s, account);\\n    }\\n\\n    function loadItemSwap(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        address account\\n    ) internal view returns (Storage storage s, Memory memory m) {\\n        s = swaps[tokenId].items[itemId];\\n        m = _load(s, account);\\n    }\\n\\n    function _load(Storage storage ptr, address account) private view returns (Memory memory m) {\\n        uint256 cache = ptr.data;\\n        m.swapData = cache;\\n        m.activeEpoch = epoch();\\n        m.sender = account;\\n\\n        if (account == cache.account()) {\\n            m.offerData = cache;\\n        } else {\\n            m.offerData = ptr.offers[account];\\n        }\\n    }\\n\\n    function encodeSellingItemId(uint160 tokenId, uint16 itemId) internal pure returns (uint176) {\\n        return (uint176(itemId) << 160) | tokenId;\\n    }\\n}\\n\"\n    },\n    \"src/interfaces/nuggftv1/INuggftV1Swap.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Swap {\\n    event Delegate(uint160 indexed tokenId, address user, uint96 lead);\\n    event DelegateItem(uint176 indexed sellingItemId, uint160 nugg, uint96 lead);\\n    event Claim(uint160 indexed tokenId, address user);\\n    event ClaimItem(uint176 indexed sellingItemId, uint160 nugg);\\n    event Swap(uint160 indexed tokenId, uint96 floor);\\n    event SwapItem(uint176 indexed sellingItemId, uint96 floor);\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                            STATE CHANGING\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function delegate(uint160 tokenId) external payable;\\n\\n    function delegateItem(\\n        uint160 buyerTokenId,\\n        uint160 sellerTokenId,\\n        uint16 itemId\\n    ) external payable;\\n\\n    function claim(uint160 tokenId) external;\\n\\n    function claimItem(\\n        uint160 buyerTokenId,\\n        uint160 sellerTokenId,\\n        uint16 itemid\\n    ) external;\\n\\n    function swap(uint160 tokenId, uint96 floor) external;\\n\\n    function swapItem(\\n        uint160 sellerTokenId,\\n        uint16 itemid,\\n        uint96 floor\\n    ) external;\\n\\n    /*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                            VIEW FUNCTIONS\\n    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*/\\n\\n    /// @notice calculates the minimum eth that must be sent with a delegate call\\n    /// @dev returns 0 if no delegate can be made for this oken\\n    /// @param tokenId -> the token to be delegated to\\n    /// @param sender -> the address of the user who will be delegating\\n    /// @return canDelegate -> instead of reverting this function will return false\\n    /// @return nextOfferAmount -> the minimum value that must be sent with a delegate call\\n    /// @return senderCurrentOffer ->\\n    function valueForDelegate(address sender, uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            bool canDelegate,\\n            uint96 nextOfferAmount,\\n            uint96 senderCurrentOffer\\n        );\\n}\\n\"\n    },\n    \"src/core/NuggftV1Stake.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {NuggftV1Proof} from './NuggftV1Proof.sol';\\n\\nimport {INuggftV1Migrator} from '../interfaces/nuggftv1/INuggftV1Migrator.sol';\\nimport {INuggftV1Stake} from '../interfaces/nuggftv1/INuggftV1Stake.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {SafeTransferLib} from '../libraries/SafeTransferLib.sol';\\n\\nimport {NuggftV1StakeType} from '../types/NuggftV1StakeType.sol';\\nimport '../_test/utils/console.sol';\\n\\nabstract contract NuggftV1Stake is INuggftV1Stake, NuggftV1Proof {\\n    using SafeCastLib for uint256;\\n    using NuggftV1StakeType for uint256;\\n\\n    address public migrator;\\n\\n    uint256 internal stake;\\n\\n    uint96 constant PROTOCOL_FEE_BPS = 1000;\\n\\n    /*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                TRUSTED\\n    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*/\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function extractProtocolEth() external requiresTrust {\\n        uint256 cache = stake;\\n\\n        SafeTransferLib.safeTransferETH(msg.sender, cache.proto());\\n\\n        cache = cache.proto(0);\\n\\n        emit Stake(cache);\\n    }\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function setMigrator(address _migrator) external requiresTrust {\\n        migrator = _migrator;\\n\\n        emit MigratorV1Updated(_migrator);\\n    }\\n\\n    /*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                VIEW\\n    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*/\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function ethPerShare() public view override returns (uint96 res) {\\n        res = calculateEthPerShare(stake);\\n    }\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function minSharePrice() public view override returns (uint96 res) {\\n        (res, , , ) = minSharePriceBreakdown(stake);\\n    }\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function stakedShares() public view override returns (uint64 res) {\\n        res = stake.shares();\\n    }\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function stakedEth() public view override returns (uint96 res) {\\n        res = stake.staked();\\n    }\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function protocolEth() public view override returns (uint96 res) {\\n        res = stake.proto();\\n    }\\n\\n    /// @inheritdoc INuggftV1Stake\\n    function totalSupply() public view override returns (uint256 res) {\\n        res = stakedShares();\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                            ADD STAKE & SHARES\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    /// @notice handles the adding of shares - ensures enough eth is being added\\n    /// @dev this is the only way to add shares - the logic here ensures that \\\"ethPerShare\\\" can never decrease\\n    function addStakedShareFromMsgValue(uint96 offset) internal {\\n        uint96 value = msg.value.safe96() - offset;\\n\\n        uint256 cache = stake;\\n\\n        (uint96 totalPrice, , uint96 protocolFee, ) = minSharePriceBreakdown(cache);\\n\\n        // logically unnessesary - to help front end\\n        require(value >= totalPrice, 'T:1'); // \\\"not enough eth to create share\\\"\\n\\n        uint96 overpay = value - totalPrice;\\n\\n        // the rest of the value gets added to stakedEth\\n        protocolFee += calculateProtocolFeeOf(overpay);\\n\\n        cache = cache.addShares(1);\\n        cache = cache.addStaked(value - protocolFee);\\n        cache = cache.addProto(protocolFee);\\n\\n        stake = cache;\\n\\n        emit Stake(cache);\\n    }\\n\\n    /// @notice handles isolated staking of eth\\n    /// @dev supply of eth goes up while supply of shares stays constant - increasing \\\"minSharePrice\\\"\\n    /// @param eth the amount of eth being staked - must be some portion of msg.value\\n    function addStakedEth(uint96 eth) internal {\\n        require(msg.value >= eth, 'T:2'); // \\\"value of tx too low\\\"\\n\\n        uint256 cache = stake;\\n\\n        uint96 protocolFee = calculateProtocolFeeOf(eth);\\n\\n        cache = cache.addStaked(eth - protocolFee);\\n        cache = cache.addProto(protocolFee);\\n\\n        stake = cache;\\n\\n        emit Stake(cache);\\n    }\\n\\n    function calculateProtocolFeeOf(uint256 any) internal pure returns (uint96 res) {\\n        // res = (any * PROTOCOL_FEE_BPS) / 10000;\\n\\n        assembly {\\n            res := div(mul(any, PROTOCOL_FEE_BPS), 10000)\\n        }\\n    }\\n\\n    // @test manual\\n    function minSharePriceBreakdown(uint256 cache)\\n        internal\\n        pure\\n        returns (\\n            uint96 total,\\n            uint96 eps,\\n            uint96 protocolFee,\\n            uint96 premium\\n        )\\n    {\\n        eps = calculateEthPerShare(cache);\\n\\n        protocolFee = calculateProtocolFeeOf(eps);\\n\\n        premium = cache.shares();\\n\\n        assembly {\\n            premium := div(mul(eps, premium), 10000)\\n        }\\n\\n        // premium = ((eps * cache.shares()) / 10000);\\n\\n        total = eps + protocolFee + premium;\\n    }\\n\\n    // @test manual\\n    function calculateEthPerShare(uint256 cache) internal pure returns (uint96 res) {\\n        res = cache.shares();\\n        if (res == 0) return 0;\\n        cache = cache.staked();\\n        assembly {\\n            res := div(cache, res)\\n        }\\n        // res = cache.shares() == 0 ? 0 : cache.staked() / cache.shares();\\n    }\\n}\\n\"\n    },\n    \"src/core/NuggftV1Proof.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggftV1Proof} from '../interfaces/nuggftv1/INuggftV1Proof.sol';\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport {NuggftV1Dotnugg} from './NuggftV1Dotnugg.sol';\\n\\nimport {NuggftV1ProofType} from '../types/NuggftV1ProofType.sol';\\n\\nabstract contract NuggftV1Proof is INuggftV1Proof, NuggftV1Dotnugg {\\n    using SafeCastLib for uint160;\\n    using SafeCastLib for uint256;\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                state\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    mapping(uint160 => uint256) proofs;\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                           external functions\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    /// @inheritdoc INuggftV1Proof\\n    function rotate(\\n        uint160 tokenId,\\n        uint8 index0,\\n        uint8 index1\\n    ) external override {\\n        ensureOperatorForOwner(msg.sender, tokenId);\\n\\n        uint256 working = proofOf(tokenId);\\n\\n        working = NuggftV1ProofType.swapIndexs(working, index0, index1);\\n\\n        proofs[tokenId] = working;\\n    }\\n\\n    /// @inheritdoc INuggftV1Proof\\n    function proofOf(uint160 tokenId) public view virtual override returns (uint256) {\\n        if (proofs[tokenId] != 0) return proofs[tokenId];\\n\\n        (uint256 seed, uint256 epoch, uint256 proof) = pendingProof();\\n\\n        if (epoch == tokenId && seed != 0) return proof;\\n        else return 0;\\n    }\\n\\n    /// @inheritdoc INuggftV1Proof\\n    function proofToDotnuggMetadata(uint160 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint256 proof,\\n            uint8[] memory defaultIds,\\n            uint8[] memory overxs,\\n            uint8[] memory overys,\\n            string[] memory styles,\\n            string memory background\\n        )\\n    {\\n        proof = proofOf(tokenId);\\n\\n        if (proof == 0) {\\n            proof = initFromSeed(tryCalculateSeed(tokenId.safe24()));\\n            require(proof != 0, 'P:L');\\n        }\\n\\n        defaultIds = new uint8[](8);\\n        overxs = new uint8[](8);\\n        overys = new uint8[](8);\\n        styles = new string[](8);\\n\\n        defaultIds[0] = uint8(proof & 0x3);\\n\\n        for (uint8 i = 0; i < 7; i++) {\\n            uint16 item = NuggftV1ProofType.getIndex(proof, i);\\n\\n            if (item == 0) continue;\\n\\n            (uint8 feature, uint8 pos) = NuggftV1ProofType.parseItemId(item);\\n\\n            if (defaultIds[feature] == 0) {\\n                uint256 overrides = settings[tokenId].anchorOverrides[item];\\n                overys[feature] = uint8(overrides >> 6);\\n                overxs[feature] = uint8(overrides & ShiftLib.mask(6));\\n                styles[feature] = settings[tokenId].styles[item];\\n\\n                defaultIds[feature] = pos;\\n            }\\n        }\\n\\n        background = settings[tokenId].background;\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                             internal functions\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function exists(uint160 tokenId) internal view override returns (bool) {\\n        return proofOf(tokenId) != 0;\\n    }\\n\\n    /*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                            SWAP MANAGEMENT\\n    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*/\\n\\n    function addItem(uint160 tokenId, uint16 itemId) internal {\\n        ensureOperatorForOwner(msg.sender, tokenId);\\n\\n        uint256 working = proofOf(tokenId);\\n\\n        working = NuggftV1ProofType.setIndex(working, NuggftV1ProofType.search(working, 0), itemId);\\n\\n        proofs[tokenId] = working;\\n    }\\n\\n    function removeItem(uint160 tokenId, uint16 itemId) internal {\\n        ensureOperatorForOwner(msg.sender, tokenId);\\n\\n        uint256 working = proofOf(tokenId);\\n\\n        working = NuggftV1ProofType.setIndex(working, NuggftV1ProofType.search(working, itemId), 0);\\n\\n        proofs[tokenId] = working;\\n    }\\n\\n    /*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                            INITIALIZATION\\n    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*/\\n\\n    function setProof(uint160 tokenId) internal {\\n        require(proofs[tokenId] == 0, 'P:5');\\n\\n        uint256 randomEnoughSeed = uint256(keccak256(abi.encodePacked(hex'420690', tokenId, blockhash(block.number - 1))));\\n\\n        uint256 res = initFromSeed(randomEnoughSeed);\\n\\n        proofs[tokenId] = res;\\n    }\\n\\n    function setProofFromEpoch(uint160 tokenId) internal {\\n        require(proofs[tokenId] == 0, 'P:6');\\n\\n        (, uint256 epoch, uint256 res) = pendingProof();\\n\\n        require(epoch == tokenId, 'P:7');\\n\\n        proofs[tokenId] = res;\\n    }\\n\\n    // TODO TO BE TESTED\\n    function initFromSeed(uint256 seed) internal view returns (uint256 res) {\\n        require(seed != 0, 'P:8');\\n\\n        uint256 l = featureLengths;\\n\\n        res |= ((safeMod(seed & 0xff, _lengthOf(l, 0))) + 1);\\n        res |= ((1 << 8) | ((((seed >>= 8) & 0xff % _lengthOf(l, 1))) + 1)) << 3;\\n        res |= ((2 << 8) | ((((seed >>= 8) & 0xff % _lengthOf(l, 2))) + 1)) << (3 + 11);\\n\\n        uint256 selA = (seed >>= 8) & 0xff;\\n\\n        selA = selA < 128 ? 3 : 4;\\n\\n        res |= ((selA << 8) | ((safeMod((seed >>= 8) & 0xff, _lengthOf(l, uint8(selA)))) + 1)) << (3 + 22);\\n\\n        uint256 selB = (seed >>= 8) & 0xff;\\n\\n        selB = selB < 30 //\\n            ? 5\\n            : selB < 55\\n            ? 6\\n            : selB < 75\\n            ? 7\\n            : 0;\\n\\n        if (selB != 0) {\\n            res |= ((selB << 8) | ((safeMod((seed >>= 8) & 0xff, _lengthOf(l, uint8(selB)))) + 1)) << (3 + 33);\\n        }\\n\\n        uint256 selC = (seed >>= 8) & 0xff;\\n\\n        selC = selC < 30 //\\n            ? 5\\n            : selC < 55\\n            ? 6\\n            : selC < 75\\n            ? 7\\n            : selC < 115\\n            ? 4\\n            : selC < 155\\n            ? 3\\n            : selC < 205\\n            ? 2\\n            : 1;\\n\\n        res |= ((selC << 8) | ((safeMod((seed >>= 8) & 0xff, _lengthOf(l, uint8(selC)))) + 1)) << (3 + 77);\\n    }\\n\\n    function safeMod(uint256 value, uint8 modder) internal pure returns (uint256) {\\n        require(modder != 0, 'P:9');\\n        return value.safe8() % modder;\\n    }\\n\\n    function pendingProof()\\n        internal\\n        view\\n        returns (\\n            uint256 seed,\\n            uint256 epoch,\\n            uint256 proof\\n        )\\n    {\\n        (seed, epoch) = calculateSeed();\\n\\n        proof = initFromSeed(seed);\\n    }\\n}\\n\"\n    },\n    \"src/_test/utils/console.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function logb(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes32)', p0));\\n    }\\n\\n    function logb(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes32)', bytes32(p0)));\\n    }\\n\\n    function logb(string memory p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bytes32)', p0, bytes32(p1)));\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log()'));\\n    }\\n\\n    function logInt(int256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(int)', p0));\\n    }\\n\\n    function logUint(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint)', p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string)', p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool)', p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address)', p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes)', p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes1)', p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes2)', p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes3)', p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes4)', p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes5)', p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes6)', p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes7)', p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes8)', p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes9)', p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes10)', p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes11)', p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes12)', p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes13)', p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes14)', p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes15)', p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes16)', p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes17)', p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes18)', p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes19)', p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes20)', p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes21)', p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes22)', p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes23)', p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes24)', p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes25)', p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes26)', p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes27)', p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes28)', p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes29)', p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes30)', p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes31)', p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes32)', p0));\\n    }\\n\\n    function log(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint)', p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string)', p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool)', p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address)', p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint)', p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string)', p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool)', p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address)', p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint)', p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string)', p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool)', p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address)', p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint)', p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string)', p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool)', p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address)', p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint)', p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string)', p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool)', p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address)', p0, p1));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,address)', p0, p1, p2, p3));\\n    }\\n}\\n\"\n    },\n    \"src/interfaces/nuggftv1/INuggftV1Proof.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Proof {\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                             STATE CHANGING\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function rotate(\\n        uint160 tokenId,\\n        uint8 index0,\\n        uint8 index1\\n    ) external;\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                               VIEW FUNCTIONS\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function proofOf(uint160 tokenId) external view returns (uint256);\\n\\n    function proofToDotnuggMetadata(uint160 tokenId)\\n        external\\n        view\\n        returns (\\n            uint256 proof,\\n            uint8[] memory defaultIds,\\n            uint8[] memory overxs,\\n            uint8[] memory overys,\\n            string[] memory styles,\\n            string memory background\\n        );\\n}\\n\"\n    },\n    \"src/interfaces/dotnuggv1/IDotnuggV1StorageProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IDotnuggV1StorageProxy {\\n    function stored(uint8 feature) external view returns (uint8);\\n\\n    function store(uint8 feature, uint256[][] calldata data) external returns (uint8 amount);\\n\\n    function unsafeBulkStore(uint256[][][] calldata data) external;\\n\\n    function init(address _implementer) external;\\n\\n    function getBatch(uint8[] memory ids) external view returns (uint256[][] memory data);\\n\\n    function get(uint8 feature, uint8 pos) external view returns (uint256[] memory data);\\n}\\n\"\n    },\n    \"src/interfaces/dotnuggv1/IDotnuggV1Resolver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata} from './IDotnuggV1Metadata.sol';\\n\\ninterface IDotnuggV1Resolver {\\n    function resolveBytes(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) external view returns (bytes memory res);\\n\\n    function resolveRaw(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) external view returns (uint256[] memory res);\\n\\n    function resolveMetadata(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) external view returns (IDotnuggV1Metadata.Memory memory res);\\n\\n    function resolveString(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) external view returns (string memory res);\\n\\n    function resolveUri(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) external view returns (string memory res);\\n}\\n\"\n    },\n    \"src/interfaces/nuggftv1/INuggftV1Dotnugg.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Implementer} from '../dotnuggv1/IDotnuggV1Implementer.sol';\\nimport {IDotnuggV1} from '../dotnuggv1/IDotnuggV1.sol';\\n\\ninterface INuggftV1Dotnugg is IDotnuggV1Implementer {\\n    function setDotnuggV1Resolver(uint256 tokenId, address to) external;\\n\\n    function dotnuggV1ResolverOf(uint256 tokenId) external view returns (address resolver);\\n\\n    function dotnuggV1() external returns (IDotnuggV1);\\n\\n    function dotnuggV1StoreFiles(uint256[][] calldata data, uint8 feature) external;\\n\\n    function setDotnuggV1AnchorOverrides(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        uint256 x,\\n        uint256 y\\n    ) external;\\n\\n    function setDotnuggV1Background(uint160 tokenId, string memory s) external;\\n\\n    function setDotnuggV1Style(\\n        uint160 tokenId,\\n        uint16 itemId,\\n        string memory s\\n    ) external;\\n}\\n\"\n    },\n    \"src/core/NuggftV1Token.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IERC721} from '../interfaces/IERC721.sol';\\n\\nimport {INuggftV1Token} from '../interfaces/nuggftv1/INuggftV1Token.sol';\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport {NuggftV1Epoch} from './NuggftV1Epoch.sol';\\n\\n///\\n/// @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard\\n///\\nabstract contract NuggftV1Token is INuggftV1Token, NuggftV1Epoch {\\n    using SafeCastLib for uint256;\\n\\n    uint32 constant TRUSTED_MINT_TOKENS = 500;\\n    uint32 constant UNTRUSTED_MINT_TOKENS = 10000;\\n\\n    mapping(uint256 => address) owners;\\n    // mapping(address => uint256) balances;\\n    mapping(uint256 => address) approvals;\\n    mapping(address => mapping(address => bool)) operatorApprovals;\\n\\n    /// @inheritdoc IERC721\\n    function approve(address to, uint256 tokenId) public payable override {\\n        require(_ownerOf(tokenId.safe160()) == msg.sender, 'Z:1');\\n\\n        approvals[tokenId] = to;\\n\\n        emit Approval(msg.sender, to, tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) public override {\\n        // require(msg.sender != operator && operator == address(this), 'G:0');\\n\\n        operatorApprovals[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 tokenId) external view override returns (address) {\\n        return _ownerOf(tokenId.safe160());\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(uint256 tokenId) external view override returns (address) {\\n        return _getApproved(tokenId.safe160());\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(address owner, address operator) external view override returns (bool) {\\n        return _isOperatorFor(operator, owner);\\n    }\\n\\n    /*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                DISABLED\\n    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*/\\n\\n    function balanceOf(address) public pure override returns (uint256) {\\n        return 0;\\n    }\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) public payable override {\\n        revert();\\n    }\\n\\n    function safeTransferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) public payable override {\\n        revert();\\n    }\\n\\n    function safeTransferFrom(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public payable override {\\n        revert();\\n    }\\n\\n    /*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                internal\\n    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*/\\n\\n    function _mintTo(address to, uint160 tokenId) internal {\\n        owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                view\\n    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*/\\n\\n    function exists(uint160 tokenId) internal view virtual returns (bool);\\n\\n    function _isOperatorFor(address operator, address owner) internal view returns (bool) {\\n        return owner == operator || operatorApprovals[owner][operator];\\n    }\\n\\n    function _isOperatorForOwner(address operator, uint160 tokenId) internal view returns (bool) {\\n        return _isOperatorFor(operator, _ownerOf(tokenId));\\n    }\\n\\n    function ensureOperatorForOwner(address operator, uint160 tokenId) internal view returns (address owner) {\\n        owner = _ownerOf(tokenId);\\n        require(_isOperatorFor(operator, owner), 'P:B');\\n    }\\n\\n    function _getApproved(uint160 tokenId) internal view returns (address) {\\n        require(exists(tokenId), 'T:9:1');\\n        return approvals[tokenId];\\n    }\\n\\n    function _ownerOf(uint160 tokenId) internal view returns (address owner) {\\n        require(exists(tokenId), 'T:9:2');\\n        owner = owners[tokenId];\\n        if (owner == address(0)) return address(this);\\n    }\\n\\n    function _isApprovedOrOwner(address spender, uint160 tokenId) internal view returns (bool) {\\n        address owner = _ownerOf(tokenId);\\n        return (spender == owner || _getApproved(tokenId) == spender || _isOperatorFor(owner, spender));\\n    }\\n\\n    /*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                TRANSFER\\n    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*/\\n\\n    function checkedTransferFromSelf(address to, uint160 tokenId) internal {\\n        require(_ownerOf(tokenId) == address(this), 'N:0');\\n\\n        owners[tokenId] = to;\\n\\n        emitTransferEvent(address(this), to, tokenId);\\n    }\\n\\n    function approvedTransferToSelf(uint160 tokenId) internal {\\n        require(_isOperatorForOwner(msg.sender, tokenId) && _getApproved(tokenId) == address(this), 'N:1');\\n\\n        delete owners[tokenId];\\n\\n        // Clear approvals from the previous owner\\n        delete approvals[tokenId];\\n\\n        emitTransferEvent(msg.sender, address(this), tokenId);\\n    }\\n\\n    function emitTransferEvent(\\n        address from,\\n        address to,\\n        uint160 tokenId\\n    ) internal {\\n        emit Transfer(from, to, tokenId);\\n    }\\n}\\n\"\n    },\n    \"src/interfaces/dotnuggv1/IDotnuggV1File.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata as Metadata} from './IDotnuggV1Metadata.sol';\\n\\ninterface IDotnuggV1File {\\n    struct Raw {\\n        uint256[][] file;\\n        Metadata.Memory metadata;\\n    }\\n\\n    struct Processed {\\n        uint256[] file;\\n        Metadata.Memory metadata;\\n    }\\n\\n    struct Compressed {\\n        uint256[] file;\\n        Metadata.Memory metadata;\\n    }\\n}\\n\"\n    },\n    \"src/core/NuggftV1Epoch.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggftV1Epoch} from '../interfaces/nuggftv1/INuggftV1Epoch.sol';\\n\\nabstract contract NuggftV1Epoch is INuggftV1Epoch {\\n    uint256 public immutable genesis;\\n\\n    uint16 constant INTERVAL = 69;\\n    uint24 constant OFFSET = 3000;\\n\\n    constructor() {\\n        genesis = block.number;\\n        emit Genesis(block.number, INTERVAL, OFFSET);\\n    }\\n\\n    /// @inheritdoc INuggftV1Epoch\\n    function epoch() public view override returns (uint24 res) {\\n        res = toEpoch(block.number, genesis);\\n    }\\n\\n    function calculateSeed() internal view returns (uint256 res, uint24 _epoch) {\\n        _epoch = epoch();\\n        res = calculateSeed(_epoch);\\n    }\\n\\n    function tryCalculateSeed(uint24 _epoch) internal view returns (uint256 res) {\\n        res = calculateSeed(_epoch);\\n    }\\n\\n    /// @notice calculates a random-enough seed that will stay the\\n    function calculateSeed(uint24 _epoch) internal view returns (uint256 res) {\\n        uint256 startblock = toStartBlock(_epoch, genesis);\\n        bytes32 bhash = getBlockHash(startblock - 2);\\n        require(bhash != 0, 'E:0');\\n        res = uint256(keccak256(abi.encodePacked(bhash, _epoch, address(this))));\\n    }\\n\\n    function getBlockHash(uint256 blocknum) internal view virtual returns (bytes32 res) {\\n        return blockhash(blocknum);\\n    }\\n\\n    function toStartBlock(uint24 _epoch, uint256 gen) internal pure returns (uint256 res) {\\n        assembly {\\n            res := add(mul(sub(_epoch, OFFSET), INTERVAL), gen)\\n        }\\n    }\\n\\n    function toEpoch(uint256 blocknum, uint256 gen) internal pure returns (uint24 res) {\\n        assembly {\\n            res := add(div(sub(blocknum, gen), INTERVAL), OFFSET)\\n        }\\n    }\\n\\n    function toEndBlock(uint24 _epoch, uint256 gen) internal pure returns (uint256 res) {\\n        unchecked {\\n            res = toStartBlock(_epoch + 1, gen) - 1;\\n        }\\n    }\\n}\\n\"\n    },\n    \"src/interfaces/nuggftv1/INuggftV1Epoch.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface INuggftV1Epoch {\\n    /// @notice Explain to an end user what this does\\n    /// @dev Explain to a developer any extra details\\n    event Genesis(uint256 blocknum, uint32 interval, uint24 offset);\\n\\n    function epoch() external view returns (uint24 res);\\n}\\n\"\n    },\n    \"src/interfaces/ITrust.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITrust {\\n    event TrustUpdated(address indexed user, bool trust);\\n\\n    function setIsTrusted(address user, bool trust) external;\\n\\n    function isTrusted(address user) external view returns (bool);\\n}\\n\"\n    },\n    \"src/_test/NuggftV1.test.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {DSTestPlus as t} from './utils/DSTestPlus.sol';\\n\\nimport './utils/User.sol';\\n\\nimport {IDotnuggV1Metadata} from '../interfaces/dotnuggv1/IDotnuggV1Metadata.sol';\\n\\nimport {MockDotnuggV1} from './mock/MockDotnuggV1.sol';\\n\\nimport {MockNuggftV1Migrator} from './mock/MockNuggftV1Migrator.sol';\\n\\nimport {NuggftV1} from '../NuggftV1.sol';\\n\\nimport './utils/logger.sol';\\n\\ncontract RiggedNuggft is NuggftV1 {\\n    constructor(address[] memory trusted , address processor) NuggftV1(trusted, processor) {\\n        featureLengths = 0x0303030303030303;\\n    }\\n\\n    function getBlockHash(uint256 blocknum) internal view override returns (bytes32 res) {\\n        if (block.number >= blocknum && block.number - blocknum < 256) {\\n            return keccak256(abi.encodePacked(blocknum));\\n        }\\n    }\\n\\n    function external__calculateSeed() external view returns (uint256 res, uint24 _epoch) {\\n        return calculateSeed();\\n    }\\n\\n    function external__calculateSeed(uint24 epoch) external view returns (uint256 res) {\\n        return calculateSeed(epoch);\\n    }\\n}\\n\\nlibrary SafeCast {\\n    function safeInt(uint96 input) internal pure returns (int192) {\\n        return (int192(int256(uint256(input))));\\n    }\\n}\\n\\ncontract NuggftV1Test is t {\\n    using SafeCast for uint96;\\n    using SafeCast for uint256;\\n    using SafeCast for uint64;\\n\\n    using UserTarget for address;\\n\\n    MockDotnuggV1 public processor;\\n\\n    MockNuggftV1Migrator public migrator;\\n\\n    RiggedNuggft public nuggft;\\n\\n    address public _nuggft;\\n\\n    User public safe;\\n\\n    User public frank;\\n    User public charlie;\\n    User public dennis;\\n    User public mac;\\n    User public dee;\\n\\n    User public any;\\n\\n    struct Users {\\n        address frank;\\n        address dee;\\n        address mac;\\n        address dennis;\\n        address charlie;\\n        address safe;\\n    }\\n\\n    Users public users;\\n\\n    constructor() {}\\n\\n    function reset() public {\\n        fvm.roll(1000001);\\n        processor = new MockDotnuggV1();\\n        migrator = new MockNuggftV1Migrator();\\n\\n        address[] memory trusted = new address[](1);\\n        trusted[0] = address(this);\\n        nuggft = new RiggedNuggft(trusted,address(processor));\\n        _nuggft = address(nuggft);\\n        safe = new User();\\n\\n        frank = new User();\\n        charlie = new User();\\n        dennis = new User();\\n        mac = new User();\\n        dee = new User();\\n\\n        users.frank = fvm.addr(12);\\n        fvm.deal(users.frank, 90000 ether);\\n\\n        users.dee = fvm.addr(13);\\n        fvm.deal(users.dee, 90000 ether);\\n\\n        users.mac = fvm.addr(14);\\n        fvm.deal(users.mac, 90000 ether);\\n\\n        users.dennis = fvm.addr(15);\\n        fvm.deal(users.dennis, 90000 ether);\\n\\n        users.charlie = fvm.addr(16);\\n        fvm.deal(users.charlie, 90000 ether);\\n\\n        users.safe = fvm.addr(17);\\n        fvm.deal(users.safe, 90000 ether);\\n\\n        // any = new User();\\n\\n        fvm.deal(address(safe), 30 ether);\\n        fvm.deal(address(dennis), 30 ether);\\n        fvm.deal(address(mac), 30 ether);\\n        fvm.deal(address(dee), 30 ether);\\n        fvm.deal(address(frank), 90000 ether);\\n        fvm.deal(address(charlie), 30 ether);\\n\\n        nuggft.setIsTrusted(address(safe), true);\\n        nuggft.setIsTrusted(users.safe, true);\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                eth modifiers\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    struct ChangeCheck {\\n        int192 before_staked;\\n        int192 before_protocol;\\n        int192 before_shares;\\n        int192 before_minSharePrice;\\n        int192 before_eps;\\n        //\\n        int192 after_staked;\\n        int192 after_protocol;\\n        int192 after_shares;\\n        int192 after_minSharePrice;\\n        int192 after_eps;\\n    }\\n\\n    modifier changeInStaked(int192 change, int192 shareChange) {\\n        ChangeCheck memory str;\\n        str.before_staked = nuggft.stakedEth().safeInt();\\n        str.before_protocol = nuggft.protocolEth().safeInt();\\n        str.before_shares = nuggft.stakedShares().safeInt();\\n        str.before_minSharePrice = nuggft.minSharePrice().safeInt();\\n\\n        str.before_eps = nuggft.ethPerShare().safeInt();\\n\\n        assertEq(\\n            str.before_eps,\\n            str.before_shares > 0 ? str.before_staked / str.before_shares : int256(0),\\n            'EPS is starting off with an incorrect value'\\n        );\\n\\n        _;\\n        str.after_staked = nuggft.stakedEth().safeInt();\\n        str.after_protocol = nuggft.protocolEth().safeInt();\\n        str.after_shares = nuggft.stakedShares().safeInt();\\n        str.after_minSharePrice = nuggft.minSharePrice().safeInt();\\n\\n        assertTrue(str.after_minSharePrice >= str.before_minSharePrice, 'minSharePrice is did not increase as expected');\\n        assertEq(str.after_protocol - str.before_protocol, take(10, change), 'totalProtocol is not what is expected');\\n        assertEq(str.after_staked - str.before_staked, change - take(10, change), 'staked change is not 90 percent of expected change');\\n        assertEq(str.after_shares - str.before_shares, shareChange, 'shares difference is not what is expected');\\n\\n        str.after_eps = nuggft.ethPerShare().safeInt();\\n        assertEq(\\n            str.after_eps,\\n            str.after_shares > 0 ? str.after_staked / str.after_shares : int256(0),\\n            'EPS is not ending with correct value'\\n        );\\n    }\\n\\n    modifier changeInUserBalance(User user, int192 change) {\\n        ChangeCheck memory str;\\n\\n        str.before_staked = int192(int256(uint256(address(user).balance)));\\n        _;\\n        str.after_staked = int192(int256(uint256(address(user).balance)));\\n\\n        assertEq(str.after_staked - str.before_staked, change, 'user balance did not change');\\n    }\\n\\n    modifier changeInNuggftBalance(int192 change) {\\n        ChangeCheck memory str;\\n\\n        str.before_staked = int192(int256(uint256(address(nuggft).balance)));\\n        _;\\n        str.after_staked = int192(int256(uint256(address(nuggft).balance)));\\n\\n        assertEq(str.after_staked - str.before_staked, change, 'nuggft balance did not change');\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                encodeWithSelector\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function delegate(uint256 tokenId) public view returns (bytes memory res) {\\n        return abi.encodeWithSelector(nuggft.delegate.selector, tokenId);\\n    }\\n\\n    function delegateItem(\\n        uint256 buyerTokenId,\\n        uint256 sellerTokenId,\\n        uint256 itemId\\n    ) public view returns (bytes memory res) {\\n        return abi.encodeWithSelector(nuggft.delegateItem.selector, buyerTokenId, sellerTokenId, itemId);\\n    }\\n\\n    function claim(uint256 tokenId) public view returns (bytes memory res) {\\n        return abi.encodeWithSelector(nuggft.claim.selector, tokenId);\\n    }\\n\\n    function swap(uint256 tokenId, uint96 floor) public view returns (bytes memory res) {\\n        return abi.encodeWithSelector(nuggft.swap.selector, tokenId, floor);\\n    }\\n\\n    function loan(uint256 tokenId) public view returns (bytes memory res) {\\n        return abi.encodeWithSelector(nuggft.loan.selector, tokenId);\\n    }\\n\\n    function liquidate(uint256 tokenId) public view returns (bytes memory res) {\\n        return abi.encodeWithSelector(nuggft.liquidate.selector, tokenId);\\n    }\\n\\n    function rebalance(uint256 tokenId) public view returns (bytes memory res) {\\n        return abi.encodeWithSelector(nuggft.rebalance.selector, tokenId);\\n    }\\n\\n    function loanInfo(uint256 tokenId) public view returns (bytes memory res) {\\n        return abi.encodeWithSelector(nuggft.loanInfo.selector, tokenId);\\n    }\\n\\n    function swapItem(\\n        uint256 tokenId,\\n        uint256 itemId,\\n        uint96 floor\\n    ) public view returns (bytes memory res) {\\n        return abi.encodeWithSelector(nuggft.swapItem.selector, tokenId, itemId, floor);\\n    }\\n\\n    function claimItem(\\n        uint256 buyerTokenId,\\n        uint256 sellerTokenId,\\n        uint256 itemId\\n    ) public view returns (bytes memory res) {\\n        return abi.encodeWithSelector(nuggft.claimItem.selector, buyerTokenId, sellerTokenId, itemId);\\n    }\\n\\n    function rotate(\\n        uint256 tokenId,\\n        uint8 index0,\\n        uint8 index1\\n    ) public view returns (bytes memory res) {\\n        return abi.encodeWithSelector(nuggft.rotate.selector, tokenId, index0, index1);\\n    }\\n\\n    function burn(uint256 tokenId) public view returns (bytes memory res) {\\n        return abi.encodeWithSelector(nuggft.burn.selector, tokenId);\\n    }\\n\\n    function migrate(uint256 tokenId) public view returns (bytes memory res) {\\n        return abi.encodeWithSelector(nuggft.migrate.selector, tokenId);\\n    }\\n\\n    function setMigrator(address _migrator) public view returns (bytes memory res) {\\n        return abi.encodeWithSelector(nuggft.setMigrator.selector, _migrator);\\n    }\\n\\n    function approve(address addr, uint256 tokenId) public view returns (bytes memory res) {\\n        return abi.encodeWithSelector(nuggft.approve.selector, addr, tokenId);\\n    }\\n\\n    function setApprovalForAll(address addr, bool appr) public view returns (bytes memory res) {\\n        return abi.encodeWithSelector(nuggft.setApprovalForAll.selector, addr, appr);\\n    }\\n\\n    function mint(uint256 tokenId) public view returns (bytes memory res) {\\n        return abi.encodeWithSelector(nuggft.mint.selector, tokenId);\\n    }\\n\\n    function trustedMint(uint256 tokenId, address to) public view returns (bytes memory res) {\\n        return abi.encodeWithSelector(nuggft.trustedMint.selector, tokenId, to);\\n    }\\n\\n    function take(int256 percent, int256 value) internal pure returns (int256) {\\n        return (value * percent) / 100;\\n    }\\n\\n    /*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                scenarios\\n    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*/\\n\\n    function scenario_dee_has_a_token() public payable returns (uint160 tokenId) {\\n        tokenId = 2069;\\n        _nuggft.shouldPass(dee, mint(tokenId));\\n    }\\n\\n    function scenario_frank_has_a_token_and_spent_50_eth() public payable returns (uint160 tokenId) {\\n        tokenId = 2012;\\n        _nuggft.shouldPass(frank, mint(tokenId), 50 ether);\\n    }\\n\\n    function scenario_frank_has_a_loaned_token() public payable returns (uint160 tokenId) {\\n        scenario_charlie_has_a_token();\\n\\n        tokenId = scenario_frank_has_a_token_and_spent_50_eth();\\n\\n        {\\n            _nuggft.shouldPass(frank, approve(address(nuggft), tokenId));\\n        }\\n\\n        _nuggft.shouldPass(frank, loan(tokenId));\\n    }\\n\\n    function scenario_frank_has_a_loaned_token_that_has_expired() public payable returns (uint160 tokenId) {\\n        tokenId = scenario_frank_has_a_loaned_token();\\n\\n        fvm.roll(200000);\\n    }\\n\\n    function scenario_dee_has_a_token_2() public payable returns (uint160 tokenId) {\\n        tokenId = 2400;\\n        _nuggft.shouldPass(dee, mint(tokenId));\\n    }\\n\\n    function scenario_charlie_has_a_token() public payable returns (uint160 tokenId) {\\n        tokenId = 2070;\\n        _nuggft.shouldPass(charlie, mint(tokenId));\\n    }\\n\\n    function scenario_migrator_set() public payable {\\n        _nuggft.shouldPass(safe, setMigrator(address(migrator)));\\n    }\\n\\n    function scenario_dee_has_a_token_and_can_swap() public payable returns (uint160 tokenId) {\\n        tokenId = scenario_dee_has_a_token();\\n\\n        _nuggft.shouldPass(dee, approve(address(nuggft), tokenId));\\n    }\\n\\n    function scenario_dee_has_swapped_a_token() public payable returns (uint160 tokenId, uint96 floor) {\\n        tokenId = scenario_dee_has_a_token_and_can_swap();\\n\\n        floor = 1 ether;\\n\\n        _nuggft.shouldPass(dee, swap(tokenId, floor));\\n    }\\n\\n    function scenario_dee_has_swapped_a_token_and_mac_has_delegated() public payable returns (uint160 tokenId, uint96 eth) {\\n        (tokenId, ) = scenario_dee_has_swapped_a_token();\\n\\n        eth = 2 ether;\\n\\n        _nuggft.shouldPass(mac, delegate(tokenId), eth);\\n    }\\n\\n    function scenario_dee_has_swapped_a_token_and_mac_can_claim() public payable returns (uint160 tokenId) {\\n        (tokenId, ) = scenario_dee_has_swapped_a_token_and_mac_has_delegated();\\n\\n        fvm.roll(2000);\\n    }\\n\\n    function scenario_mac_has_claimed_a_token_dee_swapped() public payable returns (uint160 tokenId) {\\n        (tokenId) = scenario_dee_has_swapped_a_token_and_mac_can_claim();\\n\\n        _nuggft.shouldPass(mac, claim(tokenId));\\n    }\\n\\n    function scenario_mac_has_swapped_a_token_dee_swapped() public payable returns (uint160 tokenId, uint96 floor) {\\n        (tokenId) = scenario_mac_has_claimed_a_token_dee_swapped();\\n        floor = 3 ether;\\n\\n        _nuggft.shouldPass(mac, approve(address(nuggft), tokenId));\\n\\n        _nuggft.shouldPass(mac, swap(tokenId, floor));\\n    }\\n\\n    function scenario_dee_has_a_token_and_can_swap_an_item()\\n        public\\n        payable\\n        returns (\\n            uint160 tokenId,\\n            uint16 itemId,\\n            uint8 feature\\n        )\\n    {\\n        (tokenId) = scenario_dee_has_a_token();\\n\\n        IDotnuggV1Metadata.Memory memory m = nuggft.dotnuggV1ImplementerCallback(\\n            tokenId\\n            // IDotnuggV1Metadata.Memory({\\n            //     implementer: _nuggft,\\n            //     artifactId: tokenId,\\n            //     ids: new uint8[](8),\\n            //     xovers: new uint8[](8),\\n            //     yovers: new uint8[](8),\\n            //     version: 1,\\n            //     labels: new string[](8),\\n            //     jsonKeys: new string[](8),\\n            //     jsonValues: new string[](8),\\n            //     styles: new string[](8),\\n            //     background: '',\\n            //     data: ''\\n            // })\\n        );\\n\\n        feature = 1;\\n        itemId = m.ids[feature] | (uint16(feature) << 8);\\n\\n        // _nuggft.shouldPass(dee, rotate(tokenId, feature));\\n    }\\n\\n    function scenario_dee_has_swapped_an_item()\\n        public\\n        payable\\n        returns (\\n            uint160 tokenId,\\n            uint8 feature,\\n            uint16 itemId,\\n            uint96 floor\\n        )\\n    {\\n        (tokenId, itemId, feature) = scenario_dee_has_a_token_and_can_swap_an_item();\\n        floor = 3 ether;\\n\\n        _nuggft.shouldPass(dee, swapItem(tokenId, itemId, floor));\\n    }\\n\\n    function scenario_dee_has_swapped_an_item_and_charlie_can_claim()\\n        public\\n        payable\\n        returns (\\n            uint160 charliesTokenId,\\n            uint160 tokenId,\\n            uint16 itemId\\n        )\\n    {\\n        uint256 feature;\\n        uint96 floor;\\n        (tokenId, feature, itemId, floor) = scenario_dee_has_swapped_an_item();\\n\\n        charliesTokenId = scenario_charlie_has_a_token();\\n\\n        _nuggft.shouldPass(charlie, delegateItem(charliesTokenId, tokenId, itemId), floor + 1 ether);\\n\\n        fvm.roll(2000);\\n    }\\n\\n    /*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                scenarios\\n    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*/\\n\\n    // function environment() public returns (address[] memory users) {\\n    //     users = new address[](2000);\\n\\n    //     User start = new User{value: 69 ether}();\\n    //     uint160 count = 501;\\n\\n    //                 fvm.deal(address(start), 69 ether);\\n\\n    //     nuggft_call(start, mint(count++), .01 ether);\\n    //     nuggft_call(start, mint(count++), nuggft.minSharePrice());\\n    //     nuggft_call(start, mint(count++), nuggft.minSharePrice());\\n\\n    //     users[0] = address(start);\\n\\n    //     for (uint256 i = 1; i < users.length; i++) {\\n    //         User tmp = new User{value: 69 ether}();\\n\\n    //         fvm.deal(address(tmp), 69 ether);\\n\\n    //         nuggft_call(tmp, mint(count++), nuggft.minSharePrice());\\n    //         nuggft_call(tmp, mint(count++), nuggft.minSharePrice());\\n    //         nuggft_call(tmp, mint(count++), nuggft.minSharePrice());\\n\\n    //         users[i] = address(tmp);\\n    //     }\\n\\n    // }\\n\\n    function environmentForge() public returns (address[] memory users) {\\n        users = new address[](9500);\\n\\n        User start = new User{value: 1000000000 ether}();\\n        uint160 count = 501;\\n\\n        //   fvm.deal(address(start), 10000 *10**18);\\n\\n        _nuggft.shouldPass(start, mint(count++), .08 ether);\\n\\n        users[0] = address(start);\\n\\n        int256 last = 0;\\n        int256 lastDiff = 0;\\n\\n        for (uint256 i = 1; i < users.length; i++) {\\n            // User tmp = new User{value: 100000000 ether}();\\n\\n            // fvm.deal(address(tmp), 10000 *10**18);\\n\\n            _nuggft.shouldPass(start, mint(count++), nuggft.minSharePrice());\\n\\n            int256 curr = nuggft.minSharePrice().safeInt();\\n\\n            users[i] = address(start);\\n\\n            int256 diff = curr - last;\\n            emit log_named_int('diff', curr - last);\\n            emit log_named_int('ldif', diff - lastDiff);\\n\\n            emit log_named_uint('nuggft.ethPerShare()', nuggft.ethPerShare());\\n            // emit log_named_uint('nuggft.protocolEth()', nuggft.protocolEth());\\n            // emit log_named_uint('nuggft.stakedEth()', nuggft.stakedEth());\\n            emit log_named_uint('nuggft.stakedShares()', nuggft.stakedShares());\\n            emit log_named_uint('nuggft.minSharePrice()', nuggft.minSharePrice());\\n\\n            emit log_string('--------');\\n\\n            last = curr;\\n            lastDiff = diff;\\n        }\\n    }\\n\\n    function environmentForge2() public returns (address[] memory users) {\\n        users = environmentForge();\\n\\n        uint256 bn = 5000;\\n\\n        // for (uint256 i = 0; i < 10000; i++) {\\n        //     uint256 epoch = nuggft.epoch();\\n\\n        //     uint256 funner = uint256(keccak256(abi.encodePacked(epoch))) % 100;\\n\\n        //     nuggft_call(User(payable(users[funner])), delegate(users[funner], epoch), nuggft.minSharePrice());\\n\\n        //     fvm.roll(bn);\\n\\n        //     bn += 70;\\n\\n        //     nuggft_call(User(payable(users[funner])), claim(users[funner], epoch));\\n        // }\\n\\n        assert(false);\\n    }\\n}\\n\\n// Success: test__system1()\\n\\n//   users length: 2000\\n//   nuggft.ethPerShare(): 36422938319266817\\n//   nuggft.protocolEth(): 13721927850988207037\\n//   nuggft.stakedEth(): 254960568234867720007\\n//   nuggft.stakedShares(): 7000\\n\\n// Success: test__system1()\\n\\n//   users length: 2000\\n//   nuggft.ethPerShare(): .220269870602728762\\n//   nuggft.protocolEth(): 105.652900187038601090\\n//   nuggft.stakedEth(): 3524.317929643660202576\\n//   nuggft.stakedShares(): 16000\\n\\n// Success: test__system1()\\n// *10\\n//   users length: 2000\\n//   nuggft.ethPerShare():  .081046931383505748\\n//   nuggft.protocolEth(): 36.036371675422002761\\n//   nuggft.stakedEth():  891.516245218563229016\\n//   nuggft.stakedShares(): 11000\\n\\n//   users length: 2000\\n//   nuggft.ethPerShare():   .009923420616251655\\n//   nuggft.protocolEth():  10.797105517187750828\\n//   nuggft.stakedEth():   109.157626778768205405\\n//   nuggft.stakedShares(): 11000\\n\\n// Success: test__system1()\\n\\n//   users length: 2000\\n//   nuggft.ethPerShare(): .023820112972809680\\n//   nuggft.protocolEth(): 23.605706549631210195\\n//   nuggft.stakedEth(): 262.021242700906482643\\n//   nuggft.stakedShares(): 11000\\n\\n// Success: test__system1()\\n\\n//   users length: 2000\\n//   nuggft.ethPerShare(): 22283800801842573\\n//   nuggft.protocolEth(): 12045486919914902312\\n//   nuggft.stakedEth(): 133702804811055442627\\n//   nuggft.stakedShares(): 6000\\n\\n//   users length: 2000\\n//   nuggft.ethPerShare(): 1.124042581556443270\\n//   nuggft.protocolEth(): 658.232592803322633239\\n//   nuggft.stakedEth(): 7306.276780116881258328\\n//   nuggft.stakedShares(): 6500\\n\\n// Success: test__system1()\\n\\n//   users length: 2000\\n//   nuggft.ethPerShare(): .179846813049030914\\n//   nuggft.protocolEth(): 105317214848531614175\\n//   nuggft.stakedEth(): 1169004284818700946598\\n//   nuggft.stakedShares(): 6500\\n\\n// .092595956292375926\\n\\n// .101719406217199627\\n\\n// Success: test__system1()\\n\\n//   users length: 2000\\n//   nuggft.ethPerShare(): .178270406414740660\\n//   nuggft.protocolEth(): 96363895359319273644\\n//   nuggft.stakedEth(): 1069622438488443964472\\n//   nuggft.stakedShares(): 6000\\n\\n// Success: test__system1()\\n\\n//   users length: 1000\\n//   nuggft.ethPerShare():   1.425741271002990526\\n//   nuggft.protocolEth():  305.518843786355111578\\n//   nuggft.stakedEth():   4277.223813008971579744\\n//   nuggft.stakedShares(): 3000\\n\"\n    },\n    \"src/_test/utils/DSTestPlus.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {DSTest} from '../../../lib/ds-test/src/test.sol';\\n\\nimport {Hevm, ForgeVm} from './Vm.sol';\\n\\ncontract DSTestPlus is DSTest {\\n    Hevm internal constant hevm = Hevm(HEVM_ADDRESS);\\n\\n    ForgeVm internal constant fvm = ForgeVm(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);\\n\\n    address internal constant DEAD_ADDRESS = 0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF;\\n\\n    bytes32 checkpointLabel;\\n    uint256 private checkpointGasLeft;\\n\\n    function startMeasuringGas(bytes32 label) internal virtual {\\n        checkpointLabel = label;\\n        checkpointGasLeft = gasleft();\\n    }\\n\\n    function stopMeasuringGas() internal virtual {\\n        uint256 checkpointGasLeft2 = gasleft();\\n\\n        bytes32 label = checkpointLabel;\\n\\n        emit log_named_uint(string(abi.encodePacked(label, ' Gas')), checkpointGasLeft - checkpointGasLeft2 - 22134);\\n    }\\n\\n    function fail(bytes32 err) internal virtual {\\n        emit log_named_string('Error', string(abi.encodePacked(err)));\\n        fail();\\n    }\\n\\n    function assertFalse(bool data) internal virtual {\\n        assertTrue(!data);\\n    }\\n\\n    function assertBytesEq(bytes memory a, bytes memory b) internal virtual {\\n        if (keccak256(a) != keccak256(b)) {\\n            emit log('Error: a == b not satisfied [bytes]');\\n            emit log_named_bytes('  Expected', b);\\n            emit log_named_bytes('    Actual', a);\\n            fail();\\n        }\\n    }\\n\\n    function mockBlockhash(uint256 blocknum) internal view returns (bytes32 res) {\\n        if (block.number - blocknum < 256) {\\n            return keccak256(abi.encodePacked(blocknum));\\n        }\\n    }\\n}\\n\\ncontract DSInvariantTest {\\n    address[] private targets;\\n\\n    function targetContracts() public view virtual returns (address[] memory) {\\n        require(targets.length > 0, 'NO_TARGET_CONTRACTS');\\n\\n        return targets;\\n    }\\n\\n    function addTargetContract(address newTargetContract) internal virtual {\\n        targets.push(newTargetContract);\\n    }\\n}\\n\"\n    },\n    \"src/_test/utils/User.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ForgeVm} from './Vm.sol';\\n\\nlibrary UserTarget {\\n    function shouldPass(\\n        address target,\\n        User user,\\n        bytes memory args\\n    ) internal {\\n        shouldPass(target, user, args, 0);\\n    }\\n\\n    function shouldPass(\\n        address target,\\n        User user,\\n        bytes memory args,\\n        uint96 eth\\n    ) internal {\\n        user.call(target, args, eth);\\n    }\\n\\n    function shouldFail(\\n        address target,\\n        string memory message,\\n        User user,\\n        bytes memory args\\n    ) internal {\\n        shouldFail(target, message, user, args, 0);\\n    }\\n\\n    function shouldFail(\\n        address target,\\n        string memory message,\\n        User user,\\n        bytes memory args,\\n        uint96 eth\\n    ) internal {\\n        user.revertCall(target, message, args, eth);\\n    }\\n}\\n\\ncontract User {\\n    ForgeVm internal constant fvm = ForgeVm(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);\\n    event log_named_string(string key, string val);\\n\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n\\n    constructor() payable {}\\n\\n    function tryCall(address target, bytes memory data) public payable virtual returns (bool success, bytes memory returnData) {\\n        (success, returnData) = target.call{value: msg.value}(data);\\n    }\\n\\n    function call(\\n        address target,\\n        bytes memory data,\\n        uint256 eth\\n    ) public payable virtual returns (bytes memory returnData) {\\n        require(address(this).balance >= eth, 'INSUFFICIENT_BALANCE_FROM_TARGET');\\n        bool success;\\n\\n        (success, returnData) = target.call{value: eth}(data);\\n\\n        if (!success) {\\n            if (returnData.length > 0) {\\n                assembly {\\n                    let returnDataSize := mload(returnData)\\n                    revert(add(32, returnData), returnDataSize)\\n                }\\n            } else {\\n                revert('REVERTED_WITHOUT_MESSAGE');\\n            }\\n        }\\n    }\\n\\n    function revertCall(\\n        address target,\\n        string memory message,\\n        bytes memory data,\\n        uint256 eth\\n    ) public payable virtual {\\n        require(address(this).balance >= eth, 'INSUFFICIENT_BALANCE_FROM_TARGET');\\n\\n        (bool callSuccess, bytes memory returnData) = target.call{value: eth}(data);\\n\\n        require(!callSuccess, 'REVERT-CALL SUCCEEDED');\\n\\n        string memory revertReason = string(extractRevertReason(returnData));\\n\\n        if (!compareStrings(revertReason, message)) {\\n            revert(string(abi.encodePacked('UNEXPECTED REVERT: ', revertReason, ' EXPECTED: ', message)));\\n        }\\n    }\\n\\n    function extractRevertReason(bytes memory revertData) internal pure returns (string memory reason) {\\n        uint256 l = revertData.length;\\n        if (l < 68) return '';\\n        uint256 t;\\n        assembly {\\n            revertData := add(revertData, 4)\\n            t := mload(revertData) // Save the content of the length slot\\n            mstore(revertData, sub(l, 4)) // Set proper length\\n        }\\n        reason = abi.decode(revertData, (string));\\n        assembly {\\n            mstore(revertData, t) // Restore the content of the length slot\\n        }\\n    }\\n\\n    function compareStrings(string memory a, string memory b) public pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n}\\n\"\n    },\n    \"src/_test/mock/MockDotnuggV1.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '../../interfaces/dotnuggv1/IDotnuggV1.sol';\\nimport '../../interfaces/dotnuggv1/IDotnuggV1Metadata.sol';\\nimport '../../interfaces/dotnuggv1/IDotnuggV1Implementer.sol';\\nimport '../../interfaces/dotnuggv1/IDotnuggV1File.sol';\\n\\nimport {SafeCastLib} from '../../libraries/SafeCastLib.sol';\\n\\nimport '../utils/logger.sol';\\n\\nlibrary SSTORE2 {\\n    uint256 internal constant DATA_OFFSET = 1; // We skip the first byte as it's a STOP opcode to ensure the contract can't be called.\\n\\n    function read2DArray(address pointer, uint256 index) internal view returns (uint256[] memory) {\\n        return abi.decode(read(pointer), (uint256[][]))[index];\\n    }\\n\\n    // function write2DArray(uint256[][] memory data) internal  returns (address pointer) {\\n    //     return write(abi.encode(data));\\n    // }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               WRITE LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function write(uint256[][] calldata data) internal returns (address pointer) {\\n        // Prefix the bytecode with a STOP opcode to ensure it cannot be called.\\n        // bytes memory runtimeCode = abi.encodePacked(hex'00', data);\\n\\n        bytes memory creationCode = abi.encodePacked(\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // Opcode  | Opcode + Arguments  | Description  | Stack View                                                     //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // 0x60    |  0x600B             | PUSH1 11     | codeOffset                                                     //\\n            // 0x59    |  0x59               | MSIZE        | 0 codeOffset                                                   //\\n            // 0x81    |  0x81               | DUP2         | codeOffset 0 codeOffset                                        //\\n            // 0x38    |  0x38               | CODESIZE     | codeSize codeOffset 0 codeOffset                               //\\n            // 0x03    |  0x03               | SUB          | (codeSize - codeOffset) 0 codeOffset                           //\\n            // 0x80    |  0x80               | DUP          | (codeSize - codeOffset) (codeSize - codeOffset) 0 codeOffset   //\\n            // 0x92    |  0x92               | SWAP3        | codeOffset (codeSize - codeOffset) 0 (codeSize - codeOffset)   //\\n            // 0x59    |  0x59               | MSIZE        | 0 codeOffset (codeSize - codeOffset) 0 (codeSize - codeOffset) //\\n            // 0x39    |  0x39               | CODECOPY     | 0 (codeSize - codeOffset)                                      //\\n            // 0xf3    |  0xf3               | RETURN       |                                                                //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            hex'60_0B_59_81_38_03_80_92_59_39_F3_00', // Returns all code in the contract except for the first 11 (0B in hex) bytes.\\n            abi.encode(data)\\n            // runtimeCode // The bytecode we want the contract to have after deployment. Capped at 1 byte less than the code size limit.\\n        );\\n\\n        assembly {\\n            // Deploy a new contract with the generated creation code.\\n            // We start 32 bytes into the code to avoid copying the byte length.\\n            pointer := create(0, add(creationCode, 32), mload(creationCode))\\n        }\\n\\n        require(pointer != address(0), 'DEPLOYMENT_FAILED');\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               READ LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function read(address pointer) internal view returns (bytes memory) {\\n        return readBytecode(pointer, DATA_OFFSET, pointer.code.length - DATA_OFFSET);\\n    }\\n\\n    // function read(address pointer, uint256 start) internal view returns (bytes memory) {\\n    //     start += DATA_OFFSET;\\n\\n    //     return readBytecode(pointer, start, pointer.code.length - start);\\n    // }\\n\\n    // function read(\\n    //     address pointer,\\n    //     uint256 start,\\n    //     uint256 end\\n    // ) internal view returns (bytes memory) {\\n    //     start += DATA_OFFSET;\\n    //     end += DATA_OFFSET;\\n\\n    //     require(pointer.code.length >= end, 'OUT_OF_BOUNDS');\\n\\n    //     return readBytecode(pointer, start, end - start);\\n    // }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function readBytecode(\\n        address pointer,\\n        uint256 start,\\n        uint256 size\\n    ) private view returns (bytes memory data) {\\n        assembly {\\n            // Get a pointer to some free memory.\\n            data := mload(0x40)\\n\\n            // Update the free memory pointer to prevent overriding our data.\\n            // We use and(x, not(31)) as a cheaper equivalent to sub(x, mod(x, 32)).\\n            // Adding 31 to size and running the result through the logic above ensures\\n            // the memory pointer remains word-aligned, following the Solidity convention.\\n            mstore(0x40, add(data, and(add(add(size, 32), 31), not(31))))\\n\\n            // Store the size of the data in the first 32 byte chunk of free memory.\\n            mstore(data, size)\\n\\n            // Copy the code into memory right after the 32 bytes we used to store the size.\\n            extcodecopy(pointer, add(data, 32), start, size)\\n        }\\n    }\\n}\\n\\ncontract DotnuggV1StorageProxy is IDotnuggV1StorageProxy {\\n    using SafeCastLib for uint256;\\n    using SafeCastLib for uint16;\\n\\n    address public immutable dotnuggv1;\\n\\n    address public implementer;\\n\\n    modifier requiresTrust() {\\n\\n        _;\\n    }\\n\\n    constructor() {\\n        dotnuggv1 = msg.sender;\\n    }\\n\\n    function init(address _implementer) external {\\n        require(implementer == address(0) && msg.sender == dotnuggv1, 'C:01');\\n        implementer = _implementer;\\n    }\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint8 => uint168[]) sstore2Pointers;\\n    mapping(uint8 => uint8) featureLengths;\\n\\n    function stored(uint8 feature) public view override returns (uint8 res) {\\n        return featureLengths[feature];\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                TRUSTED\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function unsafeBulkStore(uint256[][][] calldata data) public override {\\n        for (uint8 i = 0; i < 8; i++) {\\n            uint8 len = data[i].length.safe8();\\n\\n\\n            require(len > 0, 'F:0');\\n\\n            address ptr = SSTORE2.write(data[i]);\\n\\n            bool ok = IDotnuggV1Implementer(implementer).dotnuggV1StoreCallback(msg.sender, i, len, ptr);\\n\\n            require(ok, 'C:0');\\n\\n            sstore2Pointers[i].push(uint168(uint160(ptr)) | (uint168(len) << 160));\\n\\n            featureLengths[i] += len;\\n\\n        }\\n    }\\n\\n    function store(uint8 feature, uint256[][] calldata data) public override  returns (uint8 res) {\\n        uint8 len = data.length.safe8();\\n\\n        require(len > 0, 'F:0');\\n\\n\\n        address ptr = SSTORE2.write(data);\\n\\n        require(IDotnuggV1Implementer(implementer).dotnuggV1StoreCallback(msg.sender, feature, len, ptr), 'C:0');\\n\\n        sstore2Pointers[feature].push(uint168(uint160(ptr)) | (uint168(len) << 160));\\n\\n        featureLengths[feature] += len;\\n\\n        return len;\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                 GET FILES\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function getBatch(uint8[] memory ids) public view returns (uint256[][] memory data) {\\n        data = new uint256[][](ids.length);\\n\\n        for (uint8 i = 0; i < ids.length; i++) {\\n            if (ids[i] == 0) data[i] = new uint256[](0);\\n            else data[i] = get(i, ids[i]);\\n        }\\n    }\\n\\n    function get(uint8 feature, uint8 pos) public view returns (uint256[] memory data) {\\n        require(pos != 0, 'F:1');\\n\\n        pos--;\\n\\n        uint8 totalLength = featureLengths[feature];\\n\\n        require(pos < totalLength, 'F:2');\\n\\n        uint168[] memory ptrs = sstore2Pointers[feature];\\n\\n        address stor;\\n        uint8 storePos;\\n\\n        uint8 workingPos;\\n\\n        for (uint256 i = 0; i < ptrs.length; i++) {\\n            uint8 here = uint8(ptrs[i] >> 160);\\n            if (workingPos + here > pos) {\\n                stor = address(uint160(ptrs[i]));\\n                storePos = pos - workingPos;\\n                break;\\n            } else {\\n                workingPos += here;\\n            }\\n        }\\n\\n        require(stor != address(0), 'F:3');\\n\\n        data = SSTORE2.read2DArray(stor, storePos);\\n    }\\n}\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary MinimalProxy {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), 'ERC1167: create failed');\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function deploy(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), 'ERC1167: create2 failed');\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function compute(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function compute(address implementation, bytes32 salt) internal view returns (address predicted) {\\n        return compute(implementation, salt, address(this));\\n    }\\n}\\n\\n\\n\\ncontract MockDotnuggV1 is IDotnuggV1 {\\n\\n\\n       address public template;\\n\\n    constructor() {        template = address(new DotnuggV1StorageProxy());\\n    }\\n\\n    function register() external override returns (IDotnuggV1StorageProxy proxy) {\\n        proxy = IDotnuggV1StorageProxy(MinimalProxy.deploy(template, keccak256(abi.encodePacked(msg.sender))));\\n        proxy.init(msg.sender);\\n    }\\n\\n    function proxyOf(address implementer) public view override returns (IDotnuggV1StorageProxy proxy) {\\n        proxy = IDotnuggV1StorageProxy(MinimalProxy.compute(template, keccak256(abi.encodePacked(implementer))));\\n        require(address(proxy).code.length != 0, 'P:0');\\n    }\\n\\n\\n    function raw(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        bytes memory data\\n    ) public view override returns (IDotnuggV1File.Raw memory res) {\\n\\n        res.metadata = IDotnuggV1Implementer(implementer).dotnuggV1ImplementerCallback(artifactId);\\n\\n        res.file = proxyOf(implementer).getBatch(res.metadata.ids);\\n    }\\n\\n    function proc(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        bytes memory data\\n    ) public view override returns (IDotnuggV1File.Processed memory ) {\\n        IDotnuggV1File.Raw memory _raw = raw(implementer, artifactId, resolver, data);\\n\\n        for (uint256 i = 0; i < _raw.file.length; i++) {\\n            logger.log(_raw.file[i], 'files[i]');\\n        }\\n\\n\\n    }\\n\\n    function comp(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        bytes memory data\\n    ) public view override returns (IDotnuggV1File.Compressed memory res) {}\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                complex proccessors\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function dat(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        string memory name,\\n        string memory desc,\\n        bool base64,\\n        bytes calldata data\\n    ) external view override returns (string memory res) {}\\n\\n    function img(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        bool rekt,\\n        bool background,\\n        bool stats,\\n        bool base64,\\n        bytes memory data\\n    ) external view override returns (string memory res) {}\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                                basic proccessors\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    // function byt(\\n    //     address implementer,\\n    //     uint256 artifactId,\\n    //     address resolver,\\n    //     bytes memory data\\n    // ) external view override returns (bytes memory res) {}\\n\\n    // function str(\\n    //     address implementer,\\n    //     uint256 artifactId,\\n    //     address resolver,\\n    //     bytes memory data\\n    // ) external view override returns (string memory res) {}\\n}\\n\"\n    },\n    \"src/_test/mock/MockNuggftV1Migrator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {INuggftV1Migrator} from '../../interfaces/nuggftv1/INuggftV1Migrator.sol';\\n\\ncontract MockNuggftV1Migrator is INuggftV1Migrator {\\n    function nuggftMigrateFromV1(\\n        uint160 tokenId,\\n        uint256 proof,\\n        address owner\\n    ) external payable override {\\n        emit MigrateV1Accepted(msg.sender, tokenId, proof, owner, uint96(msg.value));\\n    }\\n}\\n\"\n    },\n    \"src/_test/utils/logger.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport './console.sol';\\n\\nlibrary logger {\\n    function log(uint256 val, string memory name) internal view {\\n        console.log('-----------------------');\\n        console.log('variable: ', name);\\n        console.log('|', Uint256.toHexString(val, 32), '=', val);\\n    }\\n\\n    function log(\\n        uint256 val0,\\n        string memory name0,\\n        uint256 val1,\\n        string memory name1,\\n        uint256 val2,\\n        string memory name2\\n    ) internal view {\\n        console.log('-----------------------');\\n        console.log('variable: ', name0);\\n        console.log('|', Uint256.toHexString(val0, 32), '=', val0);\\n        console.log('variable: ', name1);\\n        console.log('|', Uint256.toHexString(val1, 32), '=', val1);\\n        console.log('variable: ', name2);\\n        console.log('|', Uint256.toHexString(val2, 32), '=', val2);\\n    }\\n\\n    function log(\\n        uint256 val0,\\n        string memory name0,\\n        uint256 val1,\\n        string memory name1\\n    ) internal view {\\n        console.log('-----------------------');\\n        console.log(name0, val0, '|', Uint256.toHexString(val0, 32));\\n        console.log(name1, val1, '|', Uint256.toHexString(val1, 32));\\n    }\\n\\n    function log(\\n        uint256 val0,\\n        string memory name0,\\n        uint256 val1,\\n        string memory name1,\\n        uint256 val2,\\n        string memory name2,\\n        uint256 val3,\\n        string memory name3\\n    ) internal view {\\n        console.log('-----------------------');\\n        console.log(name0, val0, '|', Uint256.toHexString(val0, 32));\\n        console.log(name1, val1, '|', Uint256.toHexString(val1, 32));\\n        console.log(name2, val2, '|', Uint256.toHexString(val2, 32));\\n        console.log(name3, val3, '|', Uint256.toHexString(val3, 32));\\n    }\\n\\n    function log(\\n        uint256 val0,\\n        string memory name0,\\n        uint256 val1,\\n        string memory name1,\\n        uint256 val2,\\n        string memory name2,\\n        uint256 val3,\\n        string memory name3,\\n        uint256 val4,\\n        string memory name4\\n    ) internal view {\\n        console.log('-----------------------');\\n        console.log('-----------------------');\\n        console.log('variable: ', name0);\\n        console.log('|', Uint256.toHexString(val0, 32), '=', val0);\\n        console.log('variable: ', name1);\\n        console.log('|', Uint256.toHexString(val1, 32), '=', val1);\\n        console.log('variable: ', name2);\\n        console.log('|', Uint256.toHexString(val2, 32), '=', val2);\\n        console.log('variable: ', name3);\\n        console.log('|', Uint256.toHexString(val3, 32), '=', val3);\\n        console.log('variable: ', name4);\\n        console.log('|', Uint256.toHexString(val4, 32), '=', val4);\\n    }\\n\\n    function log(uint256[] memory arr, string memory name) internal view {\\n        console.log('--------------------');\\n        console.log('array: ', name);\\n        for (uint256 i = 0; i < arr.length; i++) {\\n            console.log('[', i, ']', Uint256.toHexString(arr[i], 32));\\n        }\\n    }\\n\\n    function log(uint8[] memory arr, string memory name) internal view {\\n        console.log('--------------------');\\n        console.log('array: ', name);\\n        for (uint256 i = 0; i < arr.length; i++) {\\n            console.log('[', i, ']', Uint256.toHexString(arr[i], 32));\\n        }\\n    }\\n}\\n\\nlibrary Uint256 {\\n    bytes16 private constant ALPHABET = '0123456789abcdef';\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toAscii(uint256 value) internal pure returns (bytes memory buffer) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return '0';\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return buffer;\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        return string(toAscii(value));\\n    }\\n\\n    /// @notice Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n    /// @dev Credit to Open Zeppelin under MIT license https://github.com/OpenZeppelin/openzeppelin-contracts/blob/243adff49ce1700e0ecb99fe522fb16cff1d1ddc/contracts/utils/Strings.sol#L55\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, 'Strings: hex length insufficient');\\n        return string(buffer);\\n    }\\n\\n    function toHexStringNoPrefix(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length);\\n        for (uint256 i = buffer.length; i > 0; i--) {\\n            buffer[i - 1] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\\n// library Event {\\n//     function log(uint256 val, string memory name) internal view {}\\n\\n//     function log(\\n//         uint256 val0,\\n//         string memory name0,\\n//         uint256 val1,\\n//         string memory name1,\\n//         uint256 val2,\\n//         string memory name2\\n//     ) internal view {}\\n\\n//     function log(uint256[] memory arr, string memory name) internal view {}\\n// }\\n\"\n    },\n    \"lib/ds-test/src/test.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.4.23;\\n\\ncontract DSTest {\\n    event log                    (string);\\n    event logs                   (bytes);\\n\\n    event log_address            (address);\\n    event log_bytes32            (bytes32);\\n    event log_int                (int);\\n    event log_uint               (uint);\\n    event log_bytes              (bytes);\\n    event log_string             (string);\\n\\n    event log_named_address      (string key, address val);\\n    event log_named_bytes32      (string key, bytes32 val);\\n    event log_named_decimal_int  (string key, int val, uint decimals);\\n    event log_named_decimal_uint (string key, uint val, uint decimals);\\n    event log_named_int          (string key, int val);\\n    event log_named_uint         (string key, uint val);\\n    event log_named_bytes        (string key, bytes val);\\n    event log_named_string       (string key, string val);\\n\\n    bool public IS_TEST = true;\\n    bool public failed;\\n\\n    address constant HEVM_ADDRESS =\\n        address(bytes20(uint160(uint256(keccak256('hevm cheat code')))));\\n\\n    modifier mayRevert() { _; }\\n    modifier testopts(string memory) { _; }\\n\\n    function fail() internal {\\n        failed = true;\\n    }\\n\\n    modifier logs_gas() {\\n        uint startGas = gasleft();\\n        _;\\n        uint endGas = gasleft();\\n        emit log_named_uint(\\\"gas\\\", startGas - endGas);\\n    }\\n\\n    function assertTrue(bool condition) internal {\\n        if (!condition) {\\n            emit log(\\\"Error: Assertion Failed\\\");\\n            fail();\\n        }\\n    }\\n\\n    function assertTrue(bool condition, string memory err) internal {\\n        if (!condition) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertTrue(condition);\\n        }\\n    }\\n\\n    function assertEq(address a, address b) internal {\\n        if (a != b) {\\n            emit log(\\\"Error: a == b not satisfied [address]\\\");\\n            emit log_named_address(\\\"  Expected\\\", b);\\n            emit log_named_address(\\\"    Actual\\\", a);\\n            fail();\\n        }\\n    }\\n    function assertEq(address a, address b, string memory err) internal {\\n        if (a != b) {\\n            emit log_named_string (\\\"Error\\\", err);\\n            assertEq(a, b);\\n        }\\n    }\\n\\n    function assertEq(bytes32 a, bytes32 b) internal {\\n        if (a != b) {\\n            emit log(\\\"Error: a == b not satisfied [bytes32]\\\");\\n            emit log_named_bytes32(\\\"  Expected\\\", b);\\n            emit log_named_bytes32(\\\"    Actual\\\", a);\\n            fail();\\n        }\\n    }\\n    function assertEq(bytes32 a, bytes32 b, string memory err) internal {\\n        if (a != b) {\\n            emit log_named_string (\\\"Error\\\", err);\\n            assertEq(a, b);\\n        }\\n    }\\n    function assertEq32(bytes32 a, bytes32 b) internal {\\n        assertEq(a, b);\\n    }\\n    function assertEq32(bytes32 a, bytes32 b, string memory err) internal {\\n        assertEq(a, b, err);\\n    }\\n\\n    function assertEq(int a, int b) internal {\\n        if (a != b) {\\n            emit log(\\\"Error: a == b not satisfied [int]\\\");\\n            emit log_named_int(\\\"  Expected\\\", b);\\n            emit log_named_int(\\\"    Actual\\\", a);\\n            fail();\\n        }\\n    }\\n    function assertEq(int a, int b, string memory err) internal {\\n        if (a != b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertEq(a, b);\\n        }\\n    }\\n    function assertEq(uint a, uint b) internal {\\n        if (a != b) {\\n            emit log(\\\"Error: a == b not satisfied [uint]\\\");\\n            emit log_named_uint(\\\"  Expected\\\", b);\\n            emit log_named_uint(\\\"    Actual\\\", a);\\n            fail();\\n        }\\n    }\\n    function assertEq(uint a, uint b, string memory err) internal {\\n        if (a != b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertEq(a, b);\\n        }\\n    }\\n    function assertEqDecimal(int a, int b, uint decimals) internal {\\n        if (a != b) {\\n            emit log(\\\"Error: a == b not satisfied [decimal int]\\\");\\n            emit log_named_decimal_int(\\\"  Expected\\\", b, decimals);\\n            emit log_named_decimal_int(\\\"    Actual\\\", a, decimals);\\n            fail();\\n        }\\n    }\\n    function assertEqDecimal(int a, int b, uint decimals, string memory err) internal {\\n        if (a != b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertEqDecimal(a, b, decimals);\\n        }\\n    }\\n    function assertEqDecimal(uint a, uint b, uint decimals) internal {\\n        if (a != b) {\\n            emit log(\\\"Error: a == b not satisfied [decimal uint]\\\");\\n            emit log_named_decimal_uint(\\\"  Expected\\\", b, decimals);\\n            emit log_named_decimal_uint(\\\"    Actual\\\", a, decimals);\\n            fail();\\n        }\\n    }\\n    function assertEqDecimal(uint a, uint b, uint decimals, string memory err) internal {\\n        if (a != b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertEqDecimal(a, b, decimals);\\n        }\\n    }\\n\\n    function assertGt(uint a, uint b) internal {\\n        if (a <= b) {\\n            emit log(\\\"Error: a > b not satisfied [uint]\\\");\\n            emit log_named_uint(\\\"  Value a\\\", a);\\n            emit log_named_uint(\\\"  Value b\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertGt(uint a, uint b, string memory err) internal {\\n        if (a <= b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertGt(a, b);\\n        }\\n    }\\n    function assertGt(int a, int b) internal {\\n        if (a <= b) {\\n            emit log(\\\"Error: a > b not satisfied [int]\\\");\\n            emit log_named_int(\\\"  Value a\\\", a);\\n            emit log_named_int(\\\"  Value b\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertGt(int a, int b, string memory err) internal {\\n        if (a <= b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertGt(a, b);\\n        }\\n    }\\n    function assertGtDecimal(int a, int b, uint decimals) internal {\\n        if (a <= b) {\\n            emit log(\\\"Error: a > b not satisfied [decimal int]\\\");\\n            emit log_named_decimal_int(\\\"  Value a\\\", a, decimals);\\n            emit log_named_decimal_int(\\\"  Value b\\\", b, decimals);\\n            fail();\\n        }\\n    }\\n    function assertGtDecimal(int a, int b, uint decimals, string memory err) internal {\\n        if (a <= b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertGtDecimal(a, b, decimals);\\n        }\\n    }\\n    function assertGtDecimal(uint a, uint b, uint decimals) internal {\\n        if (a <= b) {\\n            emit log(\\\"Error: a > b not satisfied [decimal uint]\\\");\\n            emit log_named_decimal_uint(\\\"  Value a\\\", a, decimals);\\n            emit log_named_decimal_uint(\\\"  Value b\\\", b, decimals);\\n            fail();\\n        }\\n    }\\n    function assertGtDecimal(uint a, uint b, uint decimals, string memory err) internal {\\n        if (a <= b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertGtDecimal(a, b, decimals);\\n        }\\n    }\\n\\n    function assertGe(uint a, uint b) internal {\\n        if (a < b) {\\n            emit log(\\\"Error: a >= b not satisfied [uint]\\\");\\n            emit log_named_uint(\\\"  Value a\\\", a);\\n            emit log_named_uint(\\\"  Value b\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertGe(uint a, uint b, string memory err) internal {\\n        if (a < b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertGe(a, b);\\n        }\\n    }\\n    function assertGe(int a, int b) internal {\\n        if (a < b) {\\n            emit log(\\\"Error: a >= b not satisfied [int]\\\");\\n            emit log_named_int(\\\"  Value a\\\", a);\\n            emit log_named_int(\\\"  Value b\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertGe(int a, int b, string memory err) internal {\\n        if (a < b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertGe(a, b);\\n        }\\n    }\\n    function assertGeDecimal(int a, int b, uint decimals) internal {\\n        if (a < b) {\\n            emit log(\\\"Error: a >= b not satisfied [decimal int]\\\");\\n            emit log_named_decimal_int(\\\"  Value a\\\", a, decimals);\\n            emit log_named_decimal_int(\\\"  Value b\\\", b, decimals);\\n            fail();\\n        }\\n    }\\n    function assertGeDecimal(int a, int b, uint decimals, string memory err) internal {\\n        if (a < b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertGeDecimal(a, b, decimals);\\n        }\\n    }\\n    function assertGeDecimal(uint a, uint b, uint decimals) internal {\\n        if (a < b) {\\n            emit log(\\\"Error: a >= b not satisfied [decimal uint]\\\");\\n            emit log_named_decimal_uint(\\\"  Value a\\\", a, decimals);\\n            emit log_named_decimal_uint(\\\"  Value b\\\", b, decimals);\\n            fail();\\n        }\\n    }\\n    function assertGeDecimal(uint a, uint b, uint decimals, string memory err) internal {\\n        if (a < b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertGeDecimal(a, b, decimals);\\n        }\\n    }\\n\\n    function assertLt(uint a, uint b) internal {\\n        if (a >= b) {\\n            emit log(\\\"Error: a < b not satisfied [uint]\\\");\\n            emit log_named_uint(\\\"  Value a\\\", a);\\n            emit log_named_uint(\\\"  Value b\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertLt(uint a, uint b, string memory err) internal {\\n        if (a >= b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertLt(a, b);\\n        }\\n    }\\n    function assertLt(int a, int b) internal {\\n        if (a >= b) {\\n            emit log(\\\"Error: a < b not satisfied [int]\\\");\\n            emit log_named_int(\\\"  Value a\\\", a);\\n            emit log_named_int(\\\"  Value b\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertLt(int a, int b, string memory err) internal {\\n        if (a >= b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertLt(a, b);\\n        }\\n    }\\n    function assertLtDecimal(int a, int b, uint decimals) internal {\\n        if (a >= b) {\\n            emit log(\\\"Error: a < b not satisfied [decimal int]\\\");\\n            emit log_named_decimal_int(\\\"  Value a\\\", a, decimals);\\n            emit log_named_decimal_int(\\\"  Value b\\\", b, decimals);\\n            fail();\\n        }\\n    }\\n    function assertLtDecimal(int a, int b, uint decimals, string memory err) internal {\\n        if (a >= b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertLtDecimal(a, b, decimals);\\n        }\\n    }\\n    function assertLtDecimal(uint a, uint b, uint decimals) internal {\\n        if (a >= b) {\\n            emit log(\\\"Error: a < b not satisfied [decimal uint]\\\");\\n            emit log_named_decimal_uint(\\\"  Value a\\\", a, decimals);\\n            emit log_named_decimal_uint(\\\"  Value b\\\", b, decimals);\\n            fail();\\n        }\\n    }\\n    function assertLtDecimal(uint a, uint b, uint decimals, string memory err) internal {\\n        if (a >= b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertLtDecimal(a, b, decimals);\\n        }\\n    }\\n\\n    function assertLe(uint a, uint b) internal {\\n        if (a > b) {\\n            emit log(\\\"Error: a <= b not satisfied [uint]\\\");\\n            emit log_named_uint(\\\"  Value a\\\", a);\\n            emit log_named_uint(\\\"  Value b\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertLe(uint a, uint b, string memory err) internal {\\n        if (a > b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertLe(a, b);\\n        }\\n    }\\n    function assertLe(int a, int b) internal {\\n        if (a > b) {\\n            emit log(\\\"Error: a <= b not satisfied [int]\\\");\\n            emit log_named_int(\\\"  Value a\\\", a);\\n            emit log_named_int(\\\"  Value b\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertLe(int a, int b, string memory err) internal {\\n        if (a > b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertLe(a, b);\\n        }\\n    }\\n    function assertLeDecimal(int a, int b, uint decimals) internal {\\n        if (a > b) {\\n            emit log(\\\"Error: a <= b not satisfied [decimal int]\\\");\\n            emit log_named_decimal_int(\\\"  Value a\\\", a, decimals);\\n            emit log_named_decimal_int(\\\"  Value b\\\", b, decimals);\\n            fail();\\n        }\\n    }\\n    function assertLeDecimal(int a, int b, uint decimals, string memory err) internal {\\n        if (a > b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertLeDecimal(a, b, decimals);\\n        }\\n    }\\n    function assertLeDecimal(uint a, uint b, uint decimals) internal {\\n        if (a > b) {\\n            emit log(\\\"Error: a <= b not satisfied [decimal uint]\\\");\\n            emit log_named_decimal_uint(\\\"  Value a\\\", a, decimals);\\n            emit log_named_decimal_uint(\\\"  Value b\\\", b, decimals);\\n            fail();\\n        }\\n    }\\n    function assertLeDecimal(uint a, uint b, uint decimals, string memory err) internal {\\n        if (a > b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertGeDecimal(a, b, decimals);\\n        }\\n    }\\n\\n    function assertEq(string memory a, string memory b) internal {\\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\\n            emit log(\\\"Error: a == b not satisfied [string]\\\");\\n            emit log_named_string(\\\"  Value a\\\", a);\\n            emit log_named_string(\\\"  Value b\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertEq(string memory a, string memory b, string memory err) internal {\\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertEq(a, b);\\n        }\\n    }\\n\\n    function checkEq0(bytes memory a, bytes memory b) internal pure returns (bool ok) {\\n        ok = true;\\n        if (a.length == b.length) {\\n            for (uint i = 0; i < a.length; i++) {\\n                if (a[i] != b[i]) {\\n                    ok = false;\\n                }\\n            }\\n        } else {\\n            ok = false;\\n        }\\n    }\\n    function assertEq0(bytes memory a, bytes memory b) internal {\\n        if (!checkEq0(a, b)) {\\n            emit log(\\\"Error: a == b not satisfied [bytes]\\\");\\n            emit log_named_bytes(\\\"  Expected\\\", a);\\n            emit log_named_bytes(\\\"    Actual\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertEq0(bytes memory a, bytes memory b, string memory err) internal {\\n        if (!checkEq0(a, b)) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertEq0(a, b);\\n        }\\n    }\\n}\\n\"\n    },\n    \"src/_test/utils/Vm.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface Hevm {\\n    function warp(uint256) external;\\n\\n    function roll(uint256) external;\\n\\n    function store(\\n        address,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function load(address, bytes32) external returns (bytes32);\\n\\n    function sign(uint256, bytes32)\\n        external\\n        returns (\\n            uint8,\\n            bytes32,\\n            bytes32\\n        );\\n\\n    function addr(uint256) external returns (address);\\n\\n    function ffi(string[] calldata) external returns (bytes memory);\\n}\\n\\ninterface ForgeVm {\\n    // Set block.timestamp (newTimestamp)\\n    function warp(uint256) external;\\n    // Set block.height (newHeight)\\n    function roll(uint256) external;\\n    // Loads a storage slot from an address (who, slot)\\n    function load(address,bytes32) external returns (bytes32);\\n    // Stores a value to an address' storage slot, (who, slot, value)\\n    function store(address,bytes32,bytes32) external;\\n    // Signs data, (privateKey, digest) => (r, v, s)\\n    function sign(uint256,bytes32) external returns (uint8,bytes32,bytes32);\\n    // Gets address for a given private key, (privateKey) => (address)\\n    function addr(uint256) external returns (address);\\n    // Performs a foreign function call via terminal, (stringInputs) => (result)\\n    function ffi(string[] calldata) external returns (bytes memory);\\n    // Performs the next smart contract call with specified `msg.sender`, (newSender)\\n    function prank(address) external;\\n    // Performs all the following smart contract calls with specified `msg.sender`, (newSender)\\n    function startPrank(address) external;\\n    // Stop smart contract calls using the specified address with prankStart()\\n    function stopPrank() external;\\n    // Sets an address' balance, (who, newBalance)\\n    function deal(address, uint256) external;\\n    // Sets an address' code, (who, newCode)\\n    function etch(address, bytes calldata) external;\\n    // Expects an error on next call\\n    function expectRevert(bytes calldata) external;\\n    // Expects the next emitted event. Params check topic 1, topic 2, topic 3 and data are the same.\\n    function expectEmit(bool, bool, bool, bool) external;\\n\\n}\\n\"\n    },\n    \"src/_test/reverts/revert__NuggftV1Swap.t.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '../NuggftV1.test.sol';\\n\\ncontract revert__NuggftV1Swap is NuggftV1Test {\\n    using SafeCast for uint96;\\n\\n    using UserTarget for address;\\n\\n    uint32 epoch;\\n\\n    uint160 tokenId;\\n    uint96 floor;\\n    uint16 itemId;\\n\\n    uint96 eth;\\n\\n    uint160 charliesTokenId;\\n\\n    uint96 MIN = 10**13 * 50;\\n\\n    int96 MININT = int96(int256(uint256(MIN)));\\n\\n    function setUp() public {\\n        reset();\\n        fvm.roll(57);\\n\\n        epoch = nuggft.epoch();\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [S:0] - delegate - \\\"msg.sender is operator for sender\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function test__revert__NuggftV1Swap__S_0__successAsSelf() public {\\n        // console.log(block.number, uint256(blockhash(block.number - 2)), block.chainid);\\n\\n        _nuggft.shouldPass(frank, delegate(epoch), 30 * 10**16);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    function test__revert__NuggftV1Swap__S_0__successAsOperator() public {\\n        _nuggft.shouldPass(frank, setApprovalForAll(address(dennis), true));\\n\\n        _nuggft.shouldPass(dennis, delegate(epoch), 30 * 10**16);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    // function test__revert__NuggftV1Swap__S_0__failAsNotOperator() public {\\n    //     _nuggft.shouldFail('S:0', dennis, delegate(epoch), 30 * 10**16);\\n    // }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [S:1] - delegate - \\\"msg.value >= minimum offer\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function test__revert__NuggftV1Swap__S_1__successWithExactMinOffer()\\n        public\\n        changeInUserBalance(frank, -1 * MININT)\\n        changeInNuggftBalance(MININT)\\n        changeInStaked(MININT, 1)\\n    {\\n        _nuggft.shouldPass(frank, delegate(epoch), MIN);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    function test__revert__NuggftV1Swap__S_1__successWithHigherMinOffer()\\n        public\\n        changeInUserBalance(frank, -1 * (MININT + 1))\\n        changeInNuggftBalance(MININT + 1)\\n        changeInStaked(MININT + 1, 1)\\n    {\\n        _nuggft.shouldPass(frank, delegate(epoch), MIN + 1);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    function test__revert__NuggftV1Swap__S_1__failWithOneWeiLessThanMin() public {\\n        fvm.startPrank(address(frank));\\n\\n        fvm.expectRevert('S:1');\\n\\n        nuggft.delegate{value: MIN - 1}(epoch);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    function test__revert__NuggftV1Swap__S_1__failWithZero() public {\\n        _nuggft.shouldFail('S:1', frank, delegate(epoch), 0);\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [S:3a] - delegate - \\\"if commiting, offerer should not be owner of swap\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function test__revert__NuggftV1Swap__S_R__successWithNotOwner() public {\\n        (tokenId, floor) = scenario_dee_has_swapped_a_token();\\n\\n        wrap__revert__NuggftV1Swap__S_R__successWithNotOwner();\\n    }\\n\\n    function wrap__revert__NuggftV1Swap__S_R__successWithNotOwner()\\n        internal\\n        changeInUserBalance(frank, -1 * (floor.safeInt() + 1 ether))\\n        changeInNuggftBalance(floor.safeInt() + 1 ether)\\n        changeInStaked(1 ether, 0)\\n    {\\n        _nuggft.shouldPass(frank, delegate(tokenId), floor + 1 ether);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    function test__revert__NuggftV1Swap__S_R__successWithOwnerAfterSomeoneElseDelegates() public {\\n        (tokenId, floor) = scenario_dee_has_swapped_a_token();\\n\\n        wrap__revert__NuggftV1Swap__S_R__successWithOwnerAfterSomeoneElseDelegates();\\n    }\\n\\n    function wrap__revert__NuggftV1Swap__S_R__successWithOwnerAfterSomeoneElseDelegates()\\n        public\\n        changeInUserBalance(frank, -1 * (floor.safeInt() + 1 ether))\\n        changeInUserBalance(dee, -1 * (floor.safeInt() + 1 ether * 2))\\n        changeInNuggftBalance(3 ether + floor.safeInt() * 2)\\n        changeInStaked(3 ether, 0)\\n    {\\n        _nuggft.shouldPass(frank, delegate(tokenId), floor + 1 ether);\\n\\n        _nuggft.shouldPass(dee, delegate(tokenId), floor + 2 ether);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    function test__revert__NuggftV1Swap__S_R__failWithOwnerOnCommit() public {\\n        (tokenId, floor) = scenario_dee_has_swapped_a_token();\\n\\n        _nuggft.shouldFail('S:R', dee, delegate(tokenId), floor + 1 ether * 2);\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [S:3b] - delegate - \\\"if not minting, offerer must claim previous offers for the specific token\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n    function test__revert__NuggftV1Swap__S_R__successWithUserWithNoPrevClaim() public {\\n        (tokenId, floor) = scenario_mac_has_swapped_a_token_dee_swapped();\\n\\n        wrap__revert__NuggftV1Swap__S_R__successWithUserWithNoPrevClaim();\\n    }\\n\\n    function wrap__revert__NuggftV1Swap__S_R__successWithUserWithNoPrevClaim()\\n        internal\\n        changeInUserBalance(frank, -1 * (floor.safeInt() + 1 ether))\\n        changeInNuggftBalance(floor.safeInt() + 1 ether)\\n        changeInStaked(1 ether, 0)\\n    {\\n        _nuggft.shouldPass(frank, delegate(tokenId), floor + 1 ether);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    // LOL - MASSIVE bug found with this test\\n    function test__revert__NuggftV1Swap__S_R__successWithPrevClaimUserAfterClaiming() public {\\n        (tokenId, floor) = scenario_mac_has_swapped_a_token_dee_swapped();\\n\\n        _nuggft.shouldPass(dee, claim(tokenId));\\n\\n        _nuggft.shouldPass(dee, delegate(tokenId), floor + 1 ether);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    function test__revert__NuggftV1Swap__S_R__failWtihUserWithPrevClaim() public {\\n        (tokenId, floor) = scenario_mac_has_swapped_a_token_dee_swapped();\\n\\n        _nuggft.shouldFail('S:R', dee, delegate(tokenId), floor + 1 ether);\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [S:4] - delegate - \\\"if not minting, swap data must exist\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n    function test__revert__NuggftV1Swap__S_4__failWithNoSwap() public {\\n        tokenId = scenario_mac_has_claimed_a_token_dee_swapped();\\n\\n        _nuggft.shouldFail('S:4', frank, delegate(tokenId), 1 ether);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    function test__revert__NuggftV1Swap__S_4__failWithNonexistantToken() public {\\n        _nuggft.shouldFail('S:4', frank, delegate(50000), 1 ether);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    function test__revert__NuggftV1Swap__S_4__successWithSwap() public {\\n        (tokenId, floor) = scenario_mac_has_swapped_a_token_dee_swapped();\\n\\n        _nuggft.shouldPass(dee, claim(tokenId));\\n\\n        _nuggft.shouldPass(dee, delegate(tokenId), floor + 1 ether);\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [S:5] - delegate - \\\"if commiting, msg.value must be >= total eth per share\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function test__revert__NuggftV1Swap__S_5__failWithVeryHighEPS() public {\\n        (tokenId, floor) = scenario_mac_has_swapped_a_token_dee_swapped();\\n\\n        _nuggft.shouldPass(frank, mint(1500), 50 ether);\\n\\n        _nuggft.shouldFail('S:5', frank, delegate(tokenId), floor + 1 ether);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    function test__revert__NuggftV1Swap__S_5__successWithLowEPS() public {\\n        (tokenId, floor) = scenario_mac_has_swapped_a_token_dee_swapped();\\n\\n        _nuggft.shouldPass(frank, mint(1500), floor + .5 ether);\\n\\n        _nuggft.shouldPass(frank, delegate(tokenId), floor + 1 ether);\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [S:6] - delegateItem - \\\"msg.sender is operator for buyerTokenId\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n    function test__revert__NuggftV1Swap__S_6__successAsOwnerOfBuyerTokenId() public {\\n        (tokenId, , itemId, floor) = scenario_dee_has_swapped_an_item();\\n\\n        charliesTokenId = scenario_charlie_has_a_token();\\n\\n        _nuggft.shouldPass(charlie, delegateItem(charliesTokenId, tokenId, itemId), floor + 1 ether);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    function test__revert__NuggftV1Swap__S_6__successAsOperator() public {\\n        (tokenId, , itemId, floor) = scenario_dee_has_swapped_an_item();\\n\\n        charliesTokenId = scenario_charlie_has_a_token();\\n\\n        _nuggft.shouldPass(charlie, setApprovalForAll(address(mac), true));\\n\\n        _nuggft.shouldFail('S:6', mac, delegateItem(charliesTokenId, tokenId, itemId), floor + 1 ether);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    function test__revert__NuggftV1Swap__S_6__failAsNotOperator() public {\\n        (tokenId, , itemId, floor) = scenario_dee_has_swapped_an_item();\\n\\n        charliesTokenId = scenario_charlie_has_a_token();\\n\\n        _nuggft.shouldFail('S:6', mac, delegateItem(charliesTokenId, tokenId, itemId), floor + 1 ether);\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [S:7] - delegateItem - \\\"offerer should not be owner of swap\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function test__revert__NuggftV1Swap__S_7__successWithNotOwner() public {\\n        (tokenId, , itemId, floor) = scenario_dee_has_swapped_an_item();\\n\\n        charliesTokenId = scenario_charlie_has_a_token();\\n\\n        _nuggft.shouldPass(charlie, delegateItem(charliesTokenId, tokenId, itemId), floor + 1 ether);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    function test__revert__NuggftV1Swap__S_7__successWithSameUserDifferentToken() public {\\n        (tokenId, , itemId, floor) = scenario_dee_has_swapped_an_item();\\n\\n        uint160 tokenId2 = scenario_dee_has_a_token_2();\\n\\n        _nuggft.shouldPass(dee, delegateItem(tokenId2, tokenId, itemId), floor + 1 ether);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    function test__revert__NuggftV1Swap__S_7__failWithUserAndOwningToken() public {\\n        (tokenId, , itemId, floor) = scenario_dee_has_swapped_an_item();\\n\\n        _nuggft.shouldFail('S:7', dee, delegateItem(tokenId, tokenId, itemId), floor + 1 ether);\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [S:8] - claim - \\\"msg.sender is operator for sender\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n    function test__revert__NuggftV1Swap__S_8__successAsSelf() public {\\n        tokenId = scenario_dee_has_swapped_a_token_and_mac_can_claim();\\n\\n        _nuggft.shouldPass(mac, claim(tokenId));\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [S:9] - claimItem - \\\"msg.sender is operator for buyerTokenId\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function test__revert__NuggftV1Swap__S_9__successAsOwnerOfBuyerTokenId() public {\\n        (charliesTokenId, tokenId, itemId) = scenario_dee_has_swapped_an_item_and_charlie_can_claim();\\n\\n        _nuggft.shouldPass(charlie, claimItem(charliesTokenId, tokenId, itemId));\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    function test__revert__NuggftV1Swap__S_9__failAsOperator() public {\\n        (charliesTokenId, tokenId, itemId) = scenario_dee_has_swapped_an_item_and_charlie_can_claim();\\n\\n        _nuggft.shouldPass(charlie, setApprovalForAll(address(mac), true));\\n\\n        _nuggft.shouldFail('S:9', mac, claimItem(charliesTokenId, tokenId, itemId));\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    function test__revert__NuggftV1Swap__S_9__failAsNotOperator() public {\\n        (charliesTokenId, tokenId, itemId) = scenario_dee_has_swapped_an_item_and_charlie_can_claim();\\n\\n        _nuggft.shouldFail('S:9', mac, claimItem(charliesTokenId, tokenId, itemId));\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [S:A] - swap - \\\"msg.sender is operator for sender\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function test__revert__NuggftV1Swap__S_A__successAsSelf() public {\\n        tokenId = scenario_dee_has_a_token_and_can_swap();\\n\\n        _nuggft.shouldPass(dee, swap(tokenId, 2 ether));\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    function test__revert__NuggftV1Swap__S_A__failsAsOperator() public {\\n        tokenId = scenario_dee_has_a_token_and_can_swap();\\n\\n        _nuggft.shouldPass(dee, setApprovalForAll(address(dennis), true));\\n\\n        _nuggft.shouldFail('S:A', dennis, swap(tokenId, 2 ether));\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    function test__revert__NuggftV1Swap__S_A__failAsNotOperator() public {\\n        tokenId = scenario_dee_has_a_token_and_can_swap();\\n\\n        _nuggft.shouldFail('S:A', dennis, swap(tokenId, 2 ether));\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [S:B] - swap - \\\"floor >= ethPerShare\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function test__revert__NuggftV1Swap__S_B__successWithEqualEPS() public {\\n        tokenId = scenario_dee_has_a_token_and_can_swap();\\n\\n        scenario_frank_has_a_token_and_spent_50_eth();\\n\\n        floor = nuggft.ethPerShare();\\n\\n        _nuggft.shouldPass(dee, swap(tokenId, floor));\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    function test__revert__NuggftV1Swap__S_B__successWithOneWeiTooHigh() public {\\n        tokenId = scenario_dee_has_a_token_and_can_swap();\\n\\n        scenario_frank_has_a_token_and_spent_50_eth();\\n\\n        floor = nuggft.ethPerShare();\\n\\n        _nuggft.shouldPass(dee, swap(tokenId, floor + 1));\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////\\n\\n    function test__revert__NuggftV1Swap__S_B__revertWithOneWeiTooLow() public {\\n        tokenId = scenario_dee_has_a_token_and_can_swap();\\n\\n        scenario_frank_has_a_token_and_spent_50_eth();\\n\\n        floor = nuggft.ethPerShare();\\n\\n        _nuggft.shouldFail('S:B', dee, swap(tokenId, floor - 1));\\n    }\\n\\n    function test__revert__NuggftV1Swap__S_B__revertWithZero() public {\\n        tokenId = scenario_dee_has_a_token_and_can_swap();\\n\\n        scenario_frank_has_a_token_and_spent_50_eth();\\n\\n        _nuggft.shouldFail('S:B', dee, swap(tokenId, 0));\\n    }\\n\\n    function test__revert__NuggftV1Swap__S_B__revertWithHalfFloor() public {\\n        tokenId = scenario_dee_has_a_token_and_can_swap();\\n\\n        scenario_frank_has_a_token_and_spent_50_eth();\\n\\n        floor = nuggft.ethPerShare();\\n\\n        _nuggft.shouldFail('S:B', dee, swap(tokenId, floor / 2));\\n    }\\n\\n    function test__revert__NuggftV1Swap__S_B__successWithWayTooHigh() public {\\n        tokenId = scenario_dee_has_a_token_and_can_swap();\\n\\n        scenario_frank_has_a_token_and_spent_50_eth();\\n\\n        floor = nuggft.ethPerShare();\\n\\n        _nuggft.shouldPass(dee, swap(tokenId, floor + 30 ether));\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [S:C] - swapItem - \\\"msg.sender is operator for buyerTokenId\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function test__revert__NuggftV1Swap__S_C__successAsOwnerOfBuyerTokenId() public {\\n        (tokenId, itemId, ) = scenario_dee_has_a_token_and_can_swap_an_item();\\n\\n        _nuggft.shouldPass(dee, swapItem(tokenId, itemId, 1 ether));\\n    }\\n\\n    function test__revert__NuggftV1Swap__S_C__failAsOperator() public {\\n        (tokenId, itemId, ) = scenario_dee_has_a_token_and_can_swap_an_item();\\n\\n        _nuggft.shouldPass(dee, setApprovalForAll(address(dennis), true));\\n\\n        _nuggft.shouldFail('S:C', dennis, swapItem(tokenId, itemId, 1 ether));\\n    }\\n\\n    function test__revert__NuggftV1Swap__S_C__failAsNotOperator() public {\\n        (tokenId, itemId, ) = scenario_dee_has_a_token_and_can_swap_an_item();\\n\\n        _nuggft.shouldFail('S:C', dennis, swapItem(tokenId, itemId, 1 ether));\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [S:D] - swapItem - \\\"cannot sell two of same item at same time\\\" @todo\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [S:E] - checkClaimerIsWinnerOrLoser - \\\"invalid offer\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function test__revert__NuggftV1Swap__S_E__successPrevSwapperCanClaimAfterNewSwapHasStarted() public {\\n        (tokenId, floor) = scenario_mac_has_swapped_a_token_dee_swapped();\\n\\n        // dee got the token here\\n        _nuggft.shouldPass(dee, claim(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Swap__S_E__failNoOffer() public {\\n        tokenId = scenario_dee_has_swapped_a_token_and_mac_can_claim();\\n\\n        // dee got the token here\\n        _nuggft.shouldFail('S:E', charlie, claim(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Swap__S_E__successAsLeader() public {\\n        tokenId = scenario_dee_has_swapped_a_token_and_mac_can_claim();\\n\\n        // dee got the token here\\n        _nuggft.shouldPass(mac, claim(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Swap__S_E__successAsOwner() public {\\n        tokenId = scenario_dee_has_swapped_a_token_and_mac_can_claim();\\n\\n        // dee got the token here\\n        _nuggft.shouldPass(dee, claim(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Swap__S_E__failAsOperator() public {\\n        tokenId = scenario_dee_has_swapped_a_token_and_mac_can_claim();\\n\\n        _nuggft.shouldPass(mac, setApprovalForAll(address(dennis), true));\\n\\n        _nuggft.shouldFail('S:E', dennis, claim(tokenId));\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [S:F] - offer - \\\"swap must be total\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function test__revert__NuggftV1Swap__S_F__successOfferInActiveSwap() public {\\n        (tokenId, eth) = scenario_dee_has_swapped_a_token_and_mac_has_delegated();\\n\\n        // dee got the token here\\n        _nuggft.shouldPass(charlie, delegate(tokenId), eth + 1 ether);\\n    }\\n\\n    function test__revert__NuggftV1Swap__S_F__failOfferInOldSwap() public {\\n        (tokenId, eth) = scenario_dee_has_swapped_a_token_and_mac_has_delegated();\\n\\n        fvm.roll(2000);\\n\\n        // dee got the token here\\n        _nuggft.shouldFail('S:F', charlie, delegate(tokenId), eth + 1 ether);\\n    }\\n\\n    function test__revert__NuggftV1Swap__S_F__failOfferInFutureSwap() public {\\n        // dee got the token here\\n        _nuggft.shouldFail('S:4', charlie, delegate(50000), 1 ether);\\n    }\\n}\\n\\n// @todo - make sure eth ends up where we want it\\n\"\n    },\n    \"src/_test/reverts/revert__NuggftV1Stake.t.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '../NuggftV1.test.sol';\\n\\ncontract revert__NuggftV1Stake is NuggftV1Test {\\n    uint32 epoch;\\n\\n    using UserTarget for address;\\n\\n    function setUp() public {\\n        reset();\\n        epoch = nuggft.epoch();\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n            [T:1] - addStakedShareFromMsgValue - \\\"value of tx too low\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    // mint\\n    // ────\\n\\n    function test__revert__NuggftV1Stake__T_1__success() public {\\n        _nuggft.shouldPass(frank, mint(2099), 30 ether);\\n    }\\n\\n    function test__revert__NuggftV1Stake__T_1__failWithValue() public {\\n        test__revert__NuggftV1Stake__T_1__success();\\n\\n        fvm.startPrank(users.dennis);\\n\\n        fvm.expectRevert('T:1');\\n\\n        nuggft.mint{value: 29 ether}(2909);\\n\\n        fvm.stopPrank();\\n    }\\n\\n    function test__revert__NuggftV1Stake__T_1__failWithZero() public {\\n        test__revert__NuggftV1Stake__T_1__success();\\n\\n        fvm.startPrank(users.dennis);\\n\\n        fvm.expectRevert('T:1');\\n\\n        nuggft.mint{value: 0}(2909);\\n\\n        fvm.stopPrank();\\n    }\\n\\n    // trustedMint\\n    // ────\\n\\n    function test__revert__NuggftV1Stake__T_1__successOnTrusted() public {\\n        fvm.startPrank(users.safe);\\n\\n        nuggft.trustedMint{value: 30 ether}(200, users.frank);\\n\\n        fvm.stopPrank();\\n    }\\n\\n    function test__revert__NuggftV1Stake__T_1__failOnTrusted() public {\\n        // console.log(address(safe).balance);\\n\\n        _nuggft.shouldPass(safe, trustedMint(99, address(frank)), 15 * 10**18);\\n\\n        // console.log(address(safe).balance);\\n\\n        _nuggft.shouldFail('T:1', safe, trustedMint(9, address(dennis)), 14 * 10**18);\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                         [T:2] - value of tx too low  @todo\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n             [T:3] - subStakedShare - \\\"user not granded permission\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    // burn\\n    // ─────────────\\n\\n    function test__revert__NuggftV1Stake__T_3__burn__fail() public {\\n        uint160 tokenId = scenario_dee_has_a_token();\\n\\n        _nuggft.shouldFail('T:3', mac, burn(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Stake__T_3__burn__failOnNoApproval() public {\\n        uint160 tokenId = scenario_dee_has_a_token();\\n\\n        _nuggft.shouldFail('T:3', dee, burn(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Stake__T_3__burn__succeeds() public {\\n        uint160 tokenId = scenario_dee_has_a_token();\\n\\n        _nuggft.shouldPass(dee, approve(address(nuggft), tokenId));\\n\\n        _nuggft.shouldPass(dee, burn(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Stake__T_3__burn__failOnIncorrectApproval() public {\\n        uint160 tokenId = scenario_dee_has_a_token();\\n\\n        _nuggft.shouldPass(dee, approve(address(mac), tokenId));\\n\\n        _nuggft.shouldFail('T:3', dee, burn(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Stake__T_3__burn__failOnIncorrectOperatorApproval() public {\\n        uint160 tokenId = scenario_dee_has_a_token();\\n\\n        _nuggft.shouldPass(dee, setApprovalForAll(address(mac), true));\\n\\n        _nuggft.shouldPass(dee, approve(address(nuggft), tokenId));\\n\\n        _nuggft.shouldFail('T:3', dennis, burn(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Stake__T_3__burn__failsOnCorrectOperatorApproval() public {\\n        uint160 tokenId = scenario_dee_has_a_token();\\n\\n        _nuggft.shouldPass(dee, setApprovalForAll(address(mac), true));\\n\\n        _nuggft.shouldPass(dee, approve(address(nuggft), tokenId));\\n\\n        _nuggft.shouldFail('T:3', mac, burn(tokenId));\\n    }\\n\\n    // migrate\\n    // ─────────────\\n\\n    function test__revert__NuggftV1Stake__T_3__migrate__fail() public {\\n        uint160 tokenId = scenario_dee_has_a_token();\\n\\n        scenario_migrator_set();\\n\\n        _nuggft.shouldFail('T:3', dee, migrate(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Stake__T_3__migrate__succeeds() public {\\n        uint160 tokenId = scenario_dee_has_a_token();\\n\\n        scenario_migrator_set();\\n\\n        _nuggft.shouldPass(dee, approve(address(nuggft), tokenId));\\n\\n        _nuggft.shouldPass(dee, migrate(tokenId));\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n                [T:4] - migrate - \\\"migrator must be set\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    // migrate\\n    // ────────────\\n\\n    function test__revert__NuggftV1Stake__T_4__fail() public {\\n        uint160 tokenId = scenario_dee_has_a_token();\\n\\n        _nuggft.shouldFail('T:4', dee, migrate(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Stake__T_4__succeeds() public {\\n        uint160 tokenId = scenario_dee_has_a_token();\\n\\n        _nuggft.shouldPass(dee, approve(address(nuggft), tokenId));\\n\\n        _nuggft.shouldPass(safe, setMigrator(address(migrator)));\\n\\n        _nuggft.shouldPass(dee, migrate(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Stake__T_4__succeedsWithApproval() public {\\n        uint160 tokenId = scenario_dee_has_a_token();\\n\\n        _nuggft.shouldPass(dee, approve(address(nuggft), tokenId));\\n\\n        _nuggft.shouldPass(safe, setMigrator(address(migrator)));\\n\\n        _nuggft.shouldPass(dee, migrate(tokenId));\\n    }\\n\\n    /// values add on top of each other\\n}\\n\"\n    },\n    \"src/_test/reverts/revert__NuggftV1Loan.t.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '../NuggftV1.test.sol';\\n\\ncontract revert__NuggftV1Loan is NuggftV1Test {\\n    uint32 epoch;\\n\\n    using UserTarget for address;\\n\\n    function setUp() public {\\n        reset();\\n        epoch = nuggft.epoch();\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [L:0] - loan - \\\"msg.sender is operator for sender\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function test__revert__NuggftV1Loan__L_0__successAsSelf() public {\\n        uint160 tokenId = scenario_frank_has_a_token_and_spent_50_eth();\\n\\n        _nuggft.shouldPass(frank, approve(address(nuggft), tokenId));\\n\\n        _nuggft.shouldPass(frank, loan(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Loan__L_0__failAsOperator() public {\\n        uint160 tokenId = scenario_frank_has_a_token_and_spent_50_eth();\\n\\n        _nuggft.shouldPass(frank, approve(address(nuggft), tokenId));\\n\\n        _nuggft.shouldPass(frank, setApprovalForAll(address(dennis), true));\\n\\n        _nuggft.shouldFail('L:0', dennis, loan(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Loan__L_0__failAsNotOperator() public {\\n        uint160 tokenId = scenario_frank_has_a_token_and_spent_50_eth();\\n\\n        _nuggft.shouldPass(frank, approve(address(nuggft), tokenId));\\n\\n        _nuggft.shouldFail('L:0', dennis, loan(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Loan__N_1__failAsSelfHasNotApprovedContract() public {\\n        uint160 tokenId = scenario_frank_has_a_token_and_spent_50_eth();\\n\\n        _nuggft.shouldFail('N:1', frank, loan(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Loan__L_0__failAsOperatorHasNotApprovedContract() public {\\n        uint160 tokenId = scenario_frank_has_a_token_and_spent_50_eth();\\n\\n        _nuggft.shouldPass(frank, setApprovalForAll(address(dennis), true));\\n\\n        _nuggft.shouldFail('L:0', dennis, loan(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Loan__L_0__failAsNotOperatorHasNotApprovedContract() public {\\n        uint160 tokenId = scenario_frank_has_a_token_and_spent_50_eth();\\n\\n        _nuggft.shouldFail('L:0', dennis, loan(tokenId));\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [L:1] - liquidate - \\\"msg.sender must be operator for unexpired loan\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function test__revert__NuggftV1Loan__L_1__successAsSelf() public {\\n        uint160 tokenId = scenario_frank_has_a_loaned_token();\\n\\n        _nuggft.shouldPass(frank, liquidate(tokenId), nuggft.valueForLiquidate(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Loan__L_1__successAsSelfExpired() public {\\n        uint160 tokenId = scenario_frank_has_a_loaned_token_that_has_expired();\\n\\n        _nuggft.shouldPass(frank, liquidate(tokenId), nuggft.valueForLiquidate(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Loan__L_1__successAsOperator() public {\\n        uint160 tokenId = scenario_frank_has_a_loaned_token();\\n\\n        _nuggft.shouldPass(frank, setApprovalForAll(address(mac), true));\\n\\n        _nuggft.shouldPass(mac, liquidate(tokenId), nuggft.valueForLiquidate(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Loan__L_1__successAsOperatorExpired() public {\\n        uint160 tokenId = scenario_frank_has_a_loaned_token_that_has_expired();\\n\\n        _nuggft.shouldPass(frank, setApprovalForAll(address(mac), true));\\n\\n        _nuggft.shouldPass(mac, liquidate(tokenId), nuggft.valueForLiquidate(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Loan__L_1__successNotOperatorExpired() public {\\n        uint160 tokenId = scenario_frank_has_a_loaned_token_that_has_expired();\\n\\n        _nuggft.shouldPass(mac, liquidate(tokenId), nuggft.valueForLiquidate(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Loan__L_1__failAsNotOperatorNotExpired() public {\\n        uint160 tokenId = scenario_frank_has_a_loaned_token();\\n\\n        _nuggft.shouldFail('L:1', mac, liquidate(tokenId), nuggft.valueForLiquidate(tokenId));\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [L:2] - liquidate - \\\"msg.value not high enough\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function test__revert__NuggftV1Loan__L_2__successLiquidateExact() public {\\n        uint160 tokenId = scenario_frank_has_a_loaned_token();\\n\\n        _nuggft.shouldPass(frank, liquidate(tokenId), nuggft.valueForLiquidate(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Loan__L_2__successLiquidateWeiHigher() public {\\n        uint160 tokenId = scenario_frank_has_a_loaned_token();\\n\\n        _nuggft.shouldPass(frank, liquidate(tokenId), nuggft.valueForLiquidate(tokenId) + 1);\\n    }\\n\\n    function test__revert__NuggftV1Loan__L_2__failLiquidateWeiLower() public {\\n        uint160 tokenId = scenario_frank_has_a_loaned_token();\\n\\n        _nuggft.shouldFail('L:2', frank, liquidate(tokenId), nuggft.valueForLiquidate(tokenId) - 1);\\n    }\\n\\n    function test__revert__NuggftV1Loan__L_2__successLiquidateWayHigher() public {\\n        uint160 tokenId = scenario_frank_has_a_loaned_token();\\n\\n        _nuggft.shouldPass(frank, liquidate(tokenId), nuggft.valueForLiquidate(tokenId) + 50 ether);\\n    }\\n\\n    function test__revert__NuggftV1Loan__L_2__failLiquidateWayLower() public {\\n        uint160 tokenId = scenario_frank_has_a_loaned_token();\\n\\n        _nuggft.shouldFail('L:2', frank, liquidate(tokenId), nuggft.valueForLiquidate(tokenId) / 2);\\n    }\\n\\n    function test__revert__NuggftV1Loan__L_2__failLiquidateZero() public {\\n        uint160 tokenId = scenario_frank_has_a_loaned_token();\\n\\n        _nuggft.shouldFail('L:2', frank, liquidate(tokenId), 0);\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [L:3] - rebalance - \\\"msg.value not high enough\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function test__revert__NuggftV1Loan__L_3__successRebalanceExact() public {\\n        uint160 tokenId = scenario_frank_has_a_loaned_token();\\n\\n        _nuggft.shouldPass(frank, rebalance(tokenId), nuggft.valueForRebalance(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Loan__L_3__successRebalanceWeiHigher() public {\\n        uint160 tokenId = scenario_frank_has_a_loaned_token();\\n\\n        _nuggft.shouldPass(frank, rebalance(tokenId), nuggft.valueForRebalance(tokenId) + 1);\\n    }\\n\\n    function test__revert__NuggftV1Loan__L_3__failRebalanceWeiLower() public {\\n        uint160 tokenId = scenario_frank_has_a_loaned_token();\\n\\n        _nuggft.shouldFail('L:3', frank, rebalance(tokenId), nuggft.valueForRebalance(tokenId) - 1);\\n    }\\n\\n    function test__revert__NuggftV1Loan__L_3__successRebalanceWayHigher() public {\\n        uint160 tokenId = scenario_frank_has_a_loaned_token();\\n\\n        _nuggft.shouldPass(frank, rebalance(tokenId), nuggft.valueForRebalance(tokenId) + 50 ether);\\n    }\\n\\n    function test__revert__NuggftV1Loan__L_3__failRebalanceWayLower() public {\\n        uint160 tokenId = scenario_frank_has_a_loaned_token();\\n\\n        _nuggft.shouldFail('L:3', frank, rebalance(tokenId), nuggft.valueForRebalance(tokenId) / 2);\\n    }\\n\\n    function test__revert__NuggftV1Loan__L_3__failRebalanceZero() public {\\n        uint160 tokenId = scenario_frank_has_a_loaned_token();\\n\\n        _nuggft.shouldFail('L:3', frank, rebalance(tokenId), 0);\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [L:4] - loanInfo - \\\"loan exists\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function test__revert__NuggftV1Loan__L_4__failDoesNotExist() public {\\n        _nuggft.shouldFail('L:4', frank, loanInfo(100));\\n    }\\n\\n    function test__revert__NuggftV1Loan__L_4__successDoesExist() public {\\n        uint160 tokenId = scenario_frank_has_a_loaned_token();\\n\\n        _nuggft.shouldPass(frank, loanInfo(tokenId));\\n    }\\n\\n    function test__revert__NuggftV1Loan__L_4__failDoesNotExistAfterLiquidate() public {\\n        uint160 tokenId = scenario_frank_has_a_loaned_token();\\n\\n        _nuggft.shouldPass(frank, loanInfo(tokenId));\\n\\n        _nuggft.shouldPass(frank, liquidate(tokenId), nuggft.valueForLiquidate(tokenId) + 1);\\n\\n        _nuggft.shouldFail('L:4', frank, loanInfo(tokenId));\\n    }\\n}\\n\"\n    },\n    \"src/_test/reverts/revert__NuggftV1Epoch.t.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '../NuggftV1.test.sol';\\n\\nimport {NuggftV1Epoch} from '../../core/NuggftV1Epoch.sol';\\n\\ncontract revert__NuggftV1Epoch is NuggftV1Test, NuggftV1Epoch {\\n    using UserTarget for address;\\n\\n    function setUp() public {\\n        reset();\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [E:0] - calculateSeed - \\\"block hash does not exist\\\"\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function test__revert__NuggftV1Epoch__calculateSeed__E_0__failNextEpoch() public {\\n        uint24 epoch = nuggft.epoch();\\n\\n        fvm.expectRevert('E:0');\\n        nuggft.external__calculateSeed(epoch + 1);\\n    }\\n\\n    function test__revert__NuggftV1Epoch__calculateSeed__E_0__succeedCurrentBlock() public view {\\n        nuggft.external__calculateSeed();\\n    }\\n}\\n\"\n    },\n    \"src/_test/general/general__NuggftV1Epoch.t.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '../NuggftV1.test.sol';\\n\\nimport {NuggftV1Epoch} from '../../core/NuggftV1Epoch.sol';\\n\\ncontract general__NuggftV1Epoch is NuggftV1Test, NuggftV1Epoch {\\n    using UserTarget for address;\\n\\n    function setUp() public {\\n        reset();\\n        // fvm.roll(13952818);\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [pure] toEpoch\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function safe__toEpoch(uint32 blocknum, uint256 gen) internal pure returns (uint32 res) {\\n        res = (uint32(blocknum - gen) / INTERVAL) + OFFSET;\\n    }\\n\\n    function test__general__NuggftV1Epoch__toEpoch__symbolic(uint32 blocknum, uint256 gen) public {\\n        if (blocknum < gen) return;\\n\\n        assertEq(\\n            toEpoch(blocknum, gen), //\\n            safe__toEpoch(blocknum, gen),\\n            'toEpoch: real != safe'\\n        );\\n    }\\n\\n    function test__general__NuggftV1Epoch__toEpoch__gas() public view {\\n        toEpoch(uint32(block.number), genesis);\\n    }\\n\\n    function test__general__NuggftV1Epoch__toEpoch__gas__safe() public view {\\n        safe__toEpoch(uint32(block.number), genesis);\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [pure] toStartBlock\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function safe__toStartBlock(uint24 _epoch, uint256 gen) internal pure returns (uint256 res) {\\n        res = uint256(uint256(_epoch - OFFSET) * INTERVAL) + gen;\\n    }\\n\\n    function test__general__NuggftV1Epoch__toStartBlock__symbolic(uint32 _epoch, uint32 gen) public {\\n        uint24 epoch = uint24(_epoch);\\n\\n        if (_epoch < OFFSET || _epoch > 5000000) return;\\n        if (gen < 1000000) return;\\n\\n        if (gen == 0) return;\\n        if (epoch == 0) return;\\n\\n        uint256 got = toStartBlock(epoch, gen);\\n        uint256 exp = safe__toStartBlock(epoch, gen);\\n\\n        assertEq(got, exp, 'toStartBlock: real != safe');\\n    }\\n\\n    function test__general__NuggftV1Epoch__toStartBlock__gas() public view {\\n        toStartBlock(OFFSET + 100, genesis);\\n    }\\n\\n    function test__general__NuggftV1Epoch__toStartBlock__gas__safe() public view {\\n        safe__toStartBlock(OFFSET + 100, genesis);\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [pure] toEndBlock\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n\\n    function safe__toEndBlock(uint24 _epoch, uint256 gen) internal pure returns (uint256 res) {\\n        res = safe__toStartBlock(_epoch + 1, gen) - 1;\\n    }\\n\\n    function semisafe__toEndBlock(uint24 _epoch, uint256 gen) internal pure returns (uint256 res) {\\n        res = toStartBlock(_epoch + 1, gen) - 1;\\n    }\\n\\n    function test__general__NuggftV1Epoch__toEndBlock__symbolic(uint32 _epoch, uint32 gen) public {\\n        uint24 epoch = uint24(_epoch);\\n\\n        if (_epoch < OFFSET || _epoch > 1000000) return;\\n        if (gen < 1000000) return;\\n\\n        if (gen == 0) return;\\n        if (epoch == 0) return;\\n\\n        uint256 got = toEndBlock(epoch, gen);\\n        uint256 exp = safe__toEndBlock(epoch, gen);\\n\\n        assertEq(got, exp, 'toEndBlock: real != safe');\\n    }\\n\\n    function test__general__NuggftV1Epoch__toEndBlock__gas() public view {\\n        toEndBlock(OFFSET + 100, genesis);\\n    }\\n\\n    function test__general__NuggftV1Epoch__toEndBlock__gas__safe() public view {\\n        safe__toEndBlock(OFFSET + 100, genesis);\\n    }\\n\\n    function test__general__NuggftV1Epoch__toEndBlock__gas__semisafe() public view {\\n        semisafe__toEndBlock(OFFSET + 100, genesis);\\n    }\\n\\n    /* ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n        [pure] toEndBlock\\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */\\n}\\n\"\n    },\n    \"src/_test/dev/TrustedMinter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '../../interfaces/nuggftv1/INuggftV1.sol';\\n\\ncontract NuggftV1TrustedMinter {\\n    address immutable deployer;\\n\\n    constructor() {\\n        deployer = msg.sender;\\n    }\\n\\n    function byebye() external {\\n        require(msg.sender == deployer);\\n        selfdestruct(payable(msg.sender));\\n    }\\n}\\n\"\n    },\n    \"src/_test/dev/Minter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '../../interfaces/nuggftv1/INuggftV1.sol';\\n\\ncontract NuggftV1MinterHelper {\\n    function delegateem(address nuggftv1, uint160 id) external payable {\\n        INuggftV1(nuggftv1).delegate{value: msg.value}(id);\\n\\n        // payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function claimem(address nuggftv1, uint160 id) external {\\n        INuggftV1(nuggftv1).claim(id);\\n\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n}\\n\\ncontract NuggftV1Minter {\\n    address immutable minterHelper;\\n    address immutable deployer;\\n\\n    uint160[] toClaimFromHelper;\\n    uint160[] toClaim;\\n\\n    uint256 claimedIndex;\\n    uint256 claimedFromHelperIndex;\\n\\n    constructor() {\\n        minterHelper = address(new NuggftV1MinterHelper());\\n        deployer = msg.sender;\\n    }\\n\\n    function trustMint(\\n        address nuggftv1,\\n        address to,\\n        uint256 start,\\n        uint256 amount\\n    ) external payable {\\n        for (uint256 i = start; i < start + amount; i++) {\\n            INuggftV1(nuggftv1).trustedMint{value: INuggftV1(nuggftv1).minSharePrice()}(uint160(i), to);\\n        }\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function mint(\\n        address nuggftv1,\\n        uint160 start,\\n        uint160 amount\\n    ) external payable {\\n        for (uint160 i = start; i < start + amount; i++) {\\n            INuggftV1(nuggftv1).mint{value: INuggftV1(nuggftv1).minSharePrice()}(uint160(i));\\n            uint96 floor = INuggftV1(nuggftv1).ethPerShare() * 3;\\n            INuggftV1(nuggftv1).approve(nuggftv1, uint160(i));\\n\\n            INuggftV1(nuggftv1).swap(uint160(i), floor);\\n\\n            (, uint96 amt, ) = INuggftV1(nuggftv1).valueForDelegate(minterHelper, uint160(i));\\n\\n            if (i % 2 == 0) {\\n                NuggftV1MinterHelper(minterHelper).delegateem{value: amt}(nuggftv1, i);\\n                toClaimFromHelper.push(i);\\n            } else {\\n                toClaim.push(i);\\n            }\\n        }\\n\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function claimHelper(address nuggftv1, uint160 amount) external {\\n        uint256 i = claimedIndex;\\n        uint256 start = i;\\n        for (; i < start + amount; i++) {\\n            NuggftV1MinterHelper(minterHelper).claimem(nuggftv1, toClaim[claimedIndex]);\\n        }\\n        claimedIndex = i;\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function claimSelf(address nuggftv1, uint160 amount) external {\\n        uint256 i = claimedIndex;\\n        uint256 start = i;\\n        for (; i < start + amount; i++) {\\n            INuggftV1(nuggftv1).claim(toClaim[claimedIndex]);\\n        }\\n        claimedIndex = i;\\n\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function byebye() external {\\n        require(msg.sender == deployer);\\n        selfdestruct(payable(msg.sender));\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 10000\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "3074fae03d0c999350afc0874049cfd3",
      "transactionHash": "0xe45fd6fdbf589e9e41cd5a110b2f4e7a4562b7d2aca7b664b922f7826205d397",
      "args": [
        "0x27b6e7032f3800389d963ddba80ceb6f7815a4fc6447889d90fdd500e5000000",
        [
          "0x9B0E2b16F57648C7bAF28EDD7772a815Af266E77",
          "0xea5A05C66e5Ffc93A3b4266eb04a6630E7D9c0d7"
        ],
        "0xCEab72cb5BC8Fc1149AB63FA9986311f18E26573",
        [
          [
            [
              {
                "type": "BigNumber",
                "hex": "0x0f01c9049082f04a4a8829211001f211010a188aa430a017228610a2"
              },
              {
                "type": "BigNumber",
                "hex": "0x2a98a3122801b9218a18428620a9ac40148e40c2a818a98a88c41203030b198c"
              },
              {
                "type": "BigNumber",
                "hex": "0x400caaf98a19001240b39b000e30b598c00e18b79923862de639018b799098b5"
              },
              {
                "type": "BigNumber",
                "hex": "0x9b098b799098a18b198c4ac2a82ae82b003028628628682868412030108a8628"
              },
              {
                "type": "BigNumber",
                "hex": "0x8a88287000701842c62892b080703041aa22aa0620c0170306ac940a3007c4c2"
              },
              {
                "type": "BigNumber",
                "hex": "0xcc440fb901c805e3f8402c18b018f400283864285998530992665ac24792ea09"
              },
              {
                "type": "BigNumber",
                "hex": "0x3b568f2545fb70942b0f924d67fd092593f1244a2bac99ac3ee2401042069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1b3e07b029c8aa63401b0218692a"
              },
              {
                "type": "BigNumber",
                "hex": "0x60ac006c0861a4b1823001b06590828623001b061a4a5b20b285a9e43003285a"
              },
              {
                "type": "BigNumber",
                "hex": "0xa643003283aae43003042892bec00c10b20af90c90a90b190c90b790c90b790c"
              },
              {
                "type": "BigNumber",
                "hex": "0x90b790c90b790c90a990a5b06a7a24286c82c1aa5a4b3001b06a8e92cc006c1c"
              },
              {
                "type": "BigNumber",
                "hex": "0xa3a06a3001b27286928c80ec1a8ed036c78171be100b062c063d000a0e190a16"
              },
              {
                "type": "BigNumber",
                "hex": "0x6614c264792ea0942b0f924d67fd09128aeb24964fc492665ac2281842069001"
              }
            ]
          ],
          [
            [
              {
                "type": "BigNumber",
                "hex": "0x06182659060269071060269071060269060a41808a"
              },
              {
                "type": "BigNumber",
                "hex": "0x4185180948007046a04b0610a39445c6cbd3cffffffd3e9ded84981142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x206020612029a80a6a00a02204188088106200"
              },
              {
                "type": "BigNumber",
                "hex": "0xa06126206126201246470608e29a73ffffff4e5b8ef13ff9b634981942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x028006800ea18202a18204a184980184"
              },
              {
                "type": "BigNumber",
                "hex": "0x9a02801a80081a800a0fc182388610ccb533cfa77b613ffffff4a02142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x40a400e40a48a484488480"
              },
              {
                "type": "BigNumber",
                "hex": "0x48a10a484488108480e484481e4044006430610e31a73e9ded84882942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1a402710"
              },
              {
                "type": "BigNumber",
                "hex": "0x098290098290098018e018e1189c18230861cffffffd3b7ad9b4903142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x24080390202500650040"
              },
              {
                "type": "BigNumber",
                "hex": "0x440240450048248048050065044016402410610c3187396e3bc4883942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x418064182508500508458c40050c488e400408e488"
              },
              {
                "type": "BigNumber",
                "hex": "0x4d884581e502482e482403e402403e400550619049e73ffffff4884142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0482e418850450a48848"
              },
              {
                "type": "BigNumber",
                "hex": "0xa48848a400408648864044d80e41805043b0610e31c73c6c6c64884942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x701e6180688680e68841c290680660a49a519e419a51801a01a51a01c01a118e"
              },
              {
                "type": "BigNumber",
                "hex": "0x0598019a099a039c039a0998099c18841281cffffffd3212b4a4905142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x06200e200200e200200e20"
              },
              {
                "type": "BigNumber",
                "hex": "0x020020020020028425802580623802182e21856210c18248c81c805942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0xa058a10c00a08c00a0086018861788418238871c806142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x24880392201640a0390282604c38c0"
              },
              {
                "type": "BigNumber",
                "hex": "0x0802eb0428cb8028e30a38c02ca0a30630e30800800c380b0a00c3803801cc18"
              },
              {
                "type": "BigNumber",
                "hex": "0x448a893a4d834c84ad2933b568f4c99761d32f3e6a4f3ffffff4b06942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0480e484408039"
              },
              {
                "type": "BigNumber",
                "hex": "0x020564044024045004824804805006500390618c31873ffffff4887142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x028006804818808120608918404610"
              },
              {
                "type": "BigNumber",
                "hex": "0x8808981188848848823d0610c29673b7ad9b4fa77b613ffffff4987942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x8003042900a200a40430090049811260080280"
              },
              {
                "type": "BigNumber",
                "hex": "0x288080488281848182470611029c45c6cbd396e3bc4cbda52d3c988142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1a200668801a"
              },
              {
                "type": "BigNumber",
                "hex": "0x20066886884181182106384618ac18230859ccbcf9a93ffffff4908942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x06806682608019820261001984026100"
              },
              {
                "type": "BigNumber",
                "hex": "0x198400680602680638269826190c18428e51cffffffd3e9ded84909142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x02480e48440a40440a40040840a40040840a4884"
              },
              {
                "type": "BigNumber",
                "hex": "0x0a40040840a40040a40440a404480e4825d0610e31a73ffffff4889942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x186119829a019a649a019c210680610210"
              },
              {
                "type": "BigNumber",
                "hex": "0x60461221a098e11849a0f986110c18440c81cccdd68532665ac490a142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x070470260840460840263806387418230659cf1b1b1936a6a69490a942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x08c018c1"
              },
              {
                "type": "BigNumber",
                "hex": "0x12280e28447844580438443816404400e2b0611029e7fffffd3c88b142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x10a40429011801060906"
              },
              {
                "type": "BigNumber",
                "hex": "0x01a611960196019e019c09a018c418440a79b7ad9b4fa77b613c90b942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x041806438048864004886488e400408e48c50040c418a418040a438a"
              },
              {
                "type": "BigNumber",
                "hex": "0x418040a418040850240a4180418064380610611041e73ffffff488c142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x10e091e21409029063"
              },
              {
                "type": "BigNumber",
                "hex": "0x100923122900192292212039221060992390610e31a73ffffff488c942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x99a200668841808c4043"
              },
              {
                "type": "BigNumber",
                "hex": "0x10639210849a11b6019c11a0f8d418438c71cfa77b613b7ad9b490d142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x6a384a3816a94a80"
              },
              {
                "type": "BigNumber",
                "hex": "0xa94a82a02a1062280284188a02a02a14210914210800a808a840842a02a40842"
              },
              {
                "type": "BigNumber",
                "hex": "0x86aa680a384a380a9dc18250ca12f3e6a471cd4959651e9ded8420d942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x02638066384600612218019848860261902106826902106807"
              },
              {
                "type": "BigNumber",
                "hex": "0x1021460261021461fe094c18250a99150b2a4fa77b613a6a6a6490e142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x028298018a600a90680641ab24a0492a0ac1"
              },
              {
                "type": "BigNumber",
                "hex": "0x28600bc184388693b568f4c88c94d3ffffff4e3f0f9530306074a0e942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0xb92281648809"
              },
              {
                "type": "BigNumber",
                "hex": "0x22180e40c438a018c50443845036418462f0619032073ffffff488f142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x01861186018841a01a2120aa0906006220aa0280"
              },
              {
                "type": "BigNumber",
                "hex": "0xda800d4182388710943734f23c771342808c4ffffffd3071a104a0f942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x04a036a006a18a026702a88a1005a871009c099882801a80da8007f8"
              },
              {
                "type": "BigNumber",
                "hex": "0xcac806ccb8838c8e3001b0e498810038ca01cb883a51a5981838181aa0c18241"
              },
              {
                "type": "BigNumber",
                "hex": "0x4899a14316d4c6480d931e4ba84ab050c5b53b5d3e54c2850c5b53ebd0a34d79"
              },
              {
                "type": "BigNumber",
                "hex": "0x510d30a303aa94a28c0eaa534a303aa94b58c0eaa539a303aa94e10142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x066f03ee1806e9ce81ee"
              },
              {
                "type": "BigNumber",
                "hex": "0x986e80e98ee80ee1c89ae00e1c2106b803b86a06638038690918e00ee1a8198e"
              },
              {
                "type": "BigNumber",
                "hex": "0xe1a42463803b86a0663803a61093a05ba622e84e988ba0316038607bc032a3"
              },
              {
                "type": "BigNumber",
                "hex": "0x2b30609b06b306a1b06134a1b40b4a3b20b0a1b405b06b300b0ab40fb0e0b060"
              },
              {
                "type": "BigNumber",
                "hex": "0x5bbc18c61cc1cf31631504e61c0ed3ffffff4e31a4e938c7a3a4b10942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x01e6184e600e700e"
              },
              {
                "type": "BigNumber",
                "hex": "0x6380661468261062186459a4598098459a49a49809851a41a49a49809851a418"
              },
              {
                "type": "BigNumber",
                "hex": "0x01841980198419811860598609cc18449291cffffffd30306074911142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x01180998079a6079852002049803a248880080841a01a85080a02128180a0612"
              },
              {
                "type": "BigNumber",
                "hex": "0x8826204aa818814800661462062861062801a061262802a82803a26206047016"
              },
              {
                "type": "BigNumber",
                "hex": "0x7029f062905204964fc532555ce4c25c79531039a04ffffffd3ca91942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x6280e3016218062180e218423824022382218250031020221028048048021823"
              },
              {
                "type": "BigNumber",
                "hex": "0x02404482282282480648264816401e4846d061924a273ffffff4892142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0xa03886038a0b82c18228649071a104812942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0xd88608c038"
              },
              {
                "type": "BigNumber",
                "hex": "0xa408e40a018c6018850241806501e482e2b0611031e73ffffff4893142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x12a01ac07a8408a0261222803a840842866084a81288aa019aa22a00b0"
              },
              {
                "type": "BigNumber",
                "hex": "0x3ea192418248a89150b2a4d0a023130306074cc1be2934a978f4a13942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0181084006210019c00a018a09a0126d92602614"
              },
              {
                "type": "BigNumber",
                "hex": "0x6026106600e680641a110c18448a81a6a6a64fa77b613150b2a4914142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x2229010a40091a48449a88081a8828"
              },
              {
                "type": "BigNumber",
                "hex": "0x1a8849006902350611021c55dc6f532665ac4ffffffd3150b2a4994942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x3058103890007008438a39001098e23085"
              },
              {
                "type": "BigNumber",
                "hex": "0x0b870010ba8390850b8a3b01b8c3b11830780f081708165d061163264542ca93"
              },
              {
                "type": "BigNumber",
                "hex": "0xa6a6a64e4bdbc75d314f6f1d74f33cfb31d3ffffff4f23ab653cb95142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1a"
              },
              {
                "type": "BigNumber",
                "hex": "0x88a80a88a809a8808420aa021082801a802a8188aa8188ac0aa0a88a80a88a81"
              },
              {
                "type": "BigNumber",
                "hex": "0x2a1f96418250a99150b2a4ce9360d366b0d94ccdd68533b568f4a15942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x201620423822380e1f84c18238861171b2f4816142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x680e68068860468868"
              },
              {
                "type": "BigNumber",
                "hex": "0x84181182106046700670bc18430a59171b2f4fab46b538260304916942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x418243982100902184982100902184206a"
              },
              {
                "type": "BigNumber",
                "hex": "0xa06a0e0a06370608a2944a8803d3eae5dd4edeb66d38c67254997142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x02500e500e40c40248c404408e508e40240a40c4086408400488e5"
              },
              {
                "type": "BigNumber",
                "hex": "0x08e50040c40440c400e500e50065d061143a240028453ffffff4897942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x11c199851805986019848a41811a4198098488641c50"
              },
              {
                "type": "BigNumber",
                "hex": "0xa49801840a68a418488e49a40a68a41848a68a418018408649848a68a4180184"
              },
              {
                "type": "BigNumber",
                "hex": "0x8a49c488641809c49a09a48a49801a0986019a49c01809801801a09a01c01a09"
              },
              {
                "type": "BigNumber",
                "hex": "0xa0180398098018098139809813d418a51aa1d7fffffd5e4cd5f5118142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1c21a01840861221a4"
              },
              {
                "type": "BigNumber",
                "hex": "0x0861221a49851c41a418118e00e418420c41cffffffd3000a114918942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x418243982100902184982100902184206a"
              },
              {
                "type": "BigNumber",
                "hex": "0xa06a0e0a06370608a2944a8803d3e4eed54dba50dd3394d1d4999142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x900b9011221a11a21201801840860460841801801801060810841801811801"
              },
              {
                "type": "BigNumber",
                "hex": "0x06044180180398079811a418440c79171b2f4cb840e13e9ded84919942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x010200e408090e090e0387e170608e21845c6cbd3eec4ad489a142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x102102100102102100102101102101100390"
              },
              {
                "type": "BigNumber",
                "hex": "0x09809a01a09801c11c011c18630a591d27424c5c6cbd3e9ded8491a942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x02180388604420039080068108"
              },
              {
                "type": "BigNumber",
                "hex": "0x18120420602880e880330610e2184542ca93ce5b8ef134a978f499b142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x6800801621880080021809262002"
              },
              {
                "type": "BigNumber",
                "hex": "0x0498020e020e310608c2164542ca933a4c814fa77b613212b4a499b942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x6800801621880080021809262002"
              },
              {
                "type": "BigNumber",
                "hex": "0x0498020e020e310608c2164542ca93ffffff4fa77b613212b4a499c142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x28062804"
              },
              {
                "type": "BigNumber",
                "hex": "0x180190624124190608a19257e874d3ffffff4c910e093150b2a499c942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0114019409"
              },
              {
                "type": "BigNumber",
                "hex": "0x90e090e059560196e090179021023060962a64542ca91150b2a489d142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x012039201821211821229210"
              },
              {
                "type": "BigNumber",
                "hex": "0xa439811460041a019068d418230a595e54434ffffffd3b7ad9b491d942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x01201921102006408090e010e1b0608c1964542ca93ffffff489e142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x06086046086100884181"
              },
              {
                "type": "BigNumber",
                "hex": "0x1a21002062003a0622310608e19873150b2a4c9996b13ffffff499e942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0xa038a108400e210118e098e1186c182388615e54434ffffffd3c91f142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1840a058a41801"
              },
              {
                "type": "BigNumber",
                "hex": "0x8498019849811a059a089c182386712f3e6a4eab83c53150b2a491f942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0a"
              },
              {
                "type": "BigNumber",
                "hex": "0x06826620600e8089006908602a808122220a2290600a1a22128028084a062a0a"
              },
              {
                "type": "BigNumber",
                "hex": "0xa839a83aa097418250a990306074f3150b2a4c912d49342808c4a20142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x08400e210108"
              },
              {
                "type": "BigNumber",
                "hex": "0x400700210098e098e11894182388612f3e6a4edf27b93150b2a4920942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x028200ea0803aa2006a8813041a830a3041a831ea00c"
              },
              {
                "type": "BigNumber",
                "hex": "0x580370609021c4542ca93cffffffd330be6a4dba50dd34a978f4aa1142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x884080398282418210200e"
              },
              {
                "type": "BigNumber",
                "hex": "0x60a48260a038a600e418039a10e418440879150b2a4f3ffffff4921942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x01a039a0184086046084"
              },
              {
                "type": "BigNumber",
                "hex": "0x1a49811849801a039a00c418430859071a104ffffffd34242454922142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x019c059c079831801983181100302b029862b02b0090631e0b"
              },
              {
                "type": "BigNumber",
                "hex": "0x1e700c20ec02c20ec82c7806c3aa0a8ec00ec28ec02c28e03a8ec006d2805aac"
              },
              {
                "type": "BigNumber",
                "hex": "0x8067f062144a873ce65294d0ac3e5317179e4c3031f93ffffff4aa2942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x106019401021260250848850241840848c40240c50a40240a68040a018a6"
              },
              {
                "type": "BigNumber",
                "hex": "0x418441824180694019a01c119c18a39261cc0028453ffffff4923142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x036301e318"
              },
              {
                "type": "BigNumber",
                "hex": "0x10a49a018a49821906682290692214692602612692214692602610e619066846"
              },
              {
                "type": "BigNumber",
                "hex": "0x126f80665827581e6780604e69bc18a51491cffffffd3000a114923942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x01a0b9a408408404408408"
              },
              {
                "type": "BigNumber",
                "hex": "0x400610600e4981798480e49800dc18638a69cc0028453ffffff4924142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0xe8816883e80a800680a8036218062182e2"
              },
              {
                "type": "BigNumber",
                "hex": "0x223022223026222302222302e218062184700e28162826380678467906807106"
              },
              {
                "type": "BigNumber",
                "hex": "0x6191e68066391663836698267d062985ac73cf93357d3ffffff49a4942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x22816280621806218225822580210218221021822180621844"
              },
              {
                "type": "BigNumber",
                "hex": "0x0a058a502481e480e5006482640064006550621049e73ffffff48a5142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x36300e290018a68840241c2398e49a49964996419e419e499649"
              },
              {
                "type": "BigNumber",
                "hex": "0xae01996018e0199609a07986013c18641281ffffff4c0028453c925942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x09c0598e0598e11960"
              },
              {
                "type": "BigNumber",
                "hex": "0x59c621801980182198e31a49a41d6018c418258aa1c73393c324126142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x088060a08a60288281c22002221c020022"
              },
              {
                "type": "BigNumber",
                "hex": "0x61a00a0618080089c88289c02409842003a068081848828848d829008d806858"
              },
              {
                "type": "BigNumber",
                "hex": "0x28380e838490168182890631252240028453ffffff4f3743f3f49a6942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x30063002"
              },
              {
                "type": "BigNumber",
                "hex": "0x9020440840c41824188501e503e290610c29840028453ffffff48a6942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x108680e688039021a039a2101102"
              },
              {
                "type": "BigNumber",
                "hex": "0x9c11c29009029c11c29001a40861086418601228421468268050260048068268"
              },
              {
                "type": "BigNumber",
                "hex": "0x049a01a09c118e118e0a2418849289000a114ffffffd3e4cd5f4927142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1860198e"
              },
              {
                "type": "BigNumber",
                "hex": "0x01982398018239811821831801821831811823980182398119e01ae098419a01"
              },
              {
                "type": "BigNumber",
                "hex": "0x8419801a0986019860199418458e91000a114e3a83d93ffffff4927942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x24836481648164816438064380623900902382409e089e488e4824"
              },
              {
                "type": "BigNumber",
                "hex": "0x88e488e482488e48960189640040864006408640440a401640a400e482648240"
              },
              {
                "type": "BigNumber",
                "hex": "0x0480640240065024380645806501641829d0631272473ffffff48a8142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x011c0398603983181182198118239801825980982982980182"
              },
              {
                "type": "BigNumber",
                "hex": "0x9829a0906086600608661001a01068a60060c610098098010684690600604600"
              },
              {
                "type": "BigNumber",
                "hex": "0x6036600600660366049f062144a440373d53cc082c193ffffff49a8942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x28180e818481a2a012068a8008"
              },
              {
                "type": "BigNumber",
                "hex": "0x1c32002070c89a88a80081a88a89a89a80081a89a89261a00204986800810720"
              },
              {
                "type": "BigNumber",
                "hex": "0x12041c8048180e81828506192422731e703f4f03bae1337f41649a9142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x012842803a842803a832812832812c420a80a1988280280ac03ac0"
              },
              {
                "type": "BigNumber",
                "hex": "0xa802c0bac013418448a89cffffffd3e8844a4f197c913e5bfa84a29942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x21fa403a0603a052012252"
              },
              {
                "type": "BigNumber",
                "hex": "0x0120290690a50480c522219280280c522219280280c4a421928009084a202421"
              },
              {
                "type": "BigNumber",
                "hex": "0x081808580685849582790621452473cebeee4ffffffd354417849aa142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x24"
              },
              {
                "type": "BigNumber",
                "hex": "0x02402400e40040040164380e408e40440c40c4004086408640040c40c404408e"
              },
              {
                "type": "BigNumber",
                "hex": "0x40440043804006400400400e402402402750628c59673ffffff48aa942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0916111e039221920122392112259427920122"
              },
              {
                "type": "BigNumber",
                "hex": "0x922190312219062106259063120105f824b0609832c73cfc93248ab142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x112039205902"
              },
              {
                "type": "BigNumber",
                "hex": "0x9011029211021942390010310290219029225902792259027900102392259009"
              },
              {
                "type": "BigNumber",
                "hex": "0x0292014310019205941187e1f9c418c4188142b0f94f3ffffff492b942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x02e418165044086400640c402408e402408e4896"
              },
              {
                "type": "BigNumber",
                "hex": "0x402408e489640240c408488640840440c4024086484438441804380400404480"
              },
              {
                "type": "BigNumber",
                "hex": "0x4044024804006400480e40240064024049d062945a273ffffff48ab942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x09a059a019801849801984"
              },
              {
                "type": "BigNumber",
                "hex": "0x9811a4198098419801c428498298428498218098498019849803a89280a881a8"
              },
              {
                "type": "BigNumber",
                "hex": "0x01a8e0a9611c418450e89cf3994a532020c94ffffffd317179e4a2c142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x01986019860798"
              },
              {
                "type": "BigNumber",
                "hex": "0x29a11a408601e608518098508601621468261421805884886826102102180588"
              },
              {
                "type": "BigNumber",
                "hex": "0x488682688408680e608498019a41809a01a0186039a01a09809a018079a09811"
              },
              {
                "type": "BigNumber",
                "hex": "0x80980d9803980180f98079817b1418c518a1cdd0fcfd3ffffff492c942069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x11a21811c039c29809a21c09"
              },
              {
                "type": "BigNumber",
                "hex": "0xa31a09a318631c09c219a609a601a51809851c09a51809851a019a41a11841c0"
              },
              {
                "type": "BigNumber",
                "hex": "0x1986039c099a09a0d9a019a03a1418a49689cffffffd36e9437492d142069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x501e500508400e4884780e4380"
              },
              {
                "type": "BigNumber",
                "hex": "0x408480e408482408480e408484481e482450611031e73ffffff48ad942069001"
              }
            ]
          ],
          [
            [
              {
                "type": "BigNumber",
                "hex": "0x1ef056e20a20e046238a20f00643801baa20e00e180e806638a2"
              },
              {
                "type": "BigNumber",
                "hex": "0x0e006e3852a8c3813d9048e05744944013d36c211d12516c00fd12d12420fc96"
              },
              {
                "type": "BigNumber",
                "hex": "0x51251204744954811d12594490047459485f25415d92d817d1285f259485f259"
              },
              {
                "type": "BigNumber",
                "hex": "0x405700125019d1206765015d0051606f4580fbec1a823291b7ad9b6fa77b61bf"
              },
              {
                "type": "BigNumber",
                "hex": "0xfffff6f1b1b19becbcf9a9b3a4d836c84ad29ad4ec749d09b0ced01242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1850240a518518004c18220630a0ba7bd734792ea0d562da93101a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x2100198210a02c18210c00c98828c0"
              },
              {
                "type": "BigNumber",
                "hex": "0x0c1802b0608628c6d0cb430c8cab0da37eed34a05140d562da93282242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x059c0d9a41a099a5180998419a059a49a21809a01a41c09a"
              },
              {
                "type": "BigNumber",
                "hex": "0x01a0186039960b9c0f980181394418a39471171b2f37fffffcdb102a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x240240c400500110608618a73afbb8d562da93083242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x188e038a10a10a038a00a05880880b8a0b89418830c59b003a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x4a38364286ac"
              },
              {
                "type": "BigNumber",
                "hex": "0x0ba868ca02ea1a088a826a1a08aa026b0422a0598a184b00ea19001ac8826b80"
              },
              {
                "type": "BigNumber",
                "hex": "0x7a86804e4007ac01b90056e3015b10056e4013b9004ee856e4015b815c0c0570"
              },
              {
                "type": "BigNumber",
                "hex": "0x3015b215b0e056c3815b0e056c85703815c0e857085f005f004ed106a06f207a"
              },
              {
                "type": "BigNumber",
                "hex": "0x77b61bb7ad9b6ffffffdb171b2f6e6b0fb8decf0a115b212b4a6b84242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1fa460081217a2022620613a21"
              },
              {
                "type": "BigNumber",
                "hex": "0x20620022038c03a00980206220200188e0a40a46008008900a2021611881803a"
              },
              {
                "type": "BigNumber",
                "hex": "0x16020e6046900e882e7b0619c43045c6cbd72f3e6a5f71e4ba83184a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x04700ea384a00ea00110"
              },
              {
                "type": "BigNumber",
                "hex": "0x608a19250ac3e4d562da934d67fd0da37eed344a2bacd2593f13285242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x3003008108008008"
              },
              {
                "type": "BigNumber",
                "hex": "0x620600e8028008802b062064086d171b2f368dfbb4d562da93185a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x080990"
              },
              {
                "type": "BigNumber",
                "hex": "0x282628062044080902006488400250608a29245c6cbcd1d27423086242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x44180e"
              },
              {
                "type": "BigNumber",
                "hex": "0x408640440964006026606c1842885120404634912918dffffff3106a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x094110310012112130608818e458c540d2626853087242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x42380e284284280e280281e286c18430859535bbd3007a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x6628e0d9890ca026622b0aa82ea1"
              },
              {
                "type": "BigNumber",
                "hex": "0x0a10a0aa81ea12a12a22a816a12a12a24a00eaba4a04a81eaa2a026836aa0a05"
              },
              {
                "type": "BigNumber",
                "hex": "0xea866a866a1dc18a51889b50ac3e4d03060737fffffcd359ff43208242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x5a1e13a06b83681b60"
              },
              {
                "type": "BigNumber",
                "hex": "0x99266780e40a691a81a1102b9c91a1102b98681c88040ae6ba2010299a681880"
              },
              {
                "type": "BigNumber",
                "hex": "0x040a66da0010299a6882407e6f0621662a6d42b0f937742b0f95988a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x06687668266866682e705e6836685e68"
              },
              {
                "type": "BigNumber",
                "hex": "0x2e7056702e7056702e7056702e6184661826638466381e638366781e6582e678"
              },
              {
                "type": "BigNumber",
                "hex": "0x166886381e6981660a63816638a700660c6784678a68468c6990e638870260c6"
              },
              {
                "type": "BigNumber",
                "hex": "0x79471470a68260c65926792708618c67916619070a70c6392059269261221c29"
              },
              {
                "type": "BigNumber",
                "hex": "0x8e403641a5182186218e403641849c218629864036418e298098298e4026418e"
              },
              {
                "type": "BigNumber",
                "hex": "0x318099e0926099e039c19986150c18a7b2e91039a04713c3ca94109242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x62f8163580e37842180620421843042382218230423843022184"
              },
              {
                "type": "BigNumber",
                "hex": "0x3042180282300e3022002842b84306e286e286e218c18851899b009a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x6382608608600694685c1822063926268535e97ac8dffffff310a242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x01e404e5046501e48450448041804380438248164025024022"
              },
              {
                "type": "BigNumber",
                "hex": "0x044004806400300481e500502650050065d0611051e6d7a5eb2308aa42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x042380630428020020162581e206c184308591324e0300b242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x2413a02226a00e808804b20b0481"
              },
              {
                "type": "BigNumber",
                "hex": "0x8802a80ea82c3812809a80b8c056e3013ba13ba15b817b817ba1597419031881"
              },
              {
                "type": "BigNumber",
                "hex": "0xfafafa6ed2d2d1b1e4ba8342480e9b9ac3ee6c2480e9b128aeb6b0ba42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x05b6e07b0b9b003b0ada2a3b001b2a1b0232aa4a1b001b0a1b02"
              },
              {
                "type": "BigNumber",
                "hex": "0x1b0a24a1b001b0b322198c29ec04c22ab065b0a7b01308a8c10612732a24a301"
              },
              {
                "type": "BigNumber",
                "hex": "0x30b304984986c28928c04c2cc79cc28928c02c22d2ac598c286c04c22ab4a3b4"
              },
              {
                "type": "BigNumber",
                "hex": "0xa30ab0130a34adb4ab0132a5b4b32a00ab00b0a3b2029603a8c02c2ad00eb01e"
              },
              {
                "type": "BigNumber",
                "hex": "0xc031f063188306d36f2fb352a5e3cd0d0d6a37fffffcd8ea0f6328c242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0e838768186886"
              },
              {
                "type": "BigNumber",
                "hex": "0x68196905e81986885e88880889a805e88a4246a017a0214918885680841a0720"
              },
              {
                "type": "BigNumber",
                "hex": "0x01a209a25227220a0623e52272066fa2672002061fe80289ae879a884899e801"
              },
              {
                "type": "BigNumber",
                "hex": "0xe900e8986906685856ad062128307536f2fb558d5f6551414a1518ca42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1415940920"
              },
              {
                "type": "BigNumber",
                "hex": "0x120f9160120920b92019201209210c0120590092090e01060190010079066140"
              },
              {
                "type": "BigNumber",
                "hex": "0x3940d980181f981180b9a4184610b93a4d83345b43e8d265d87310d242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x02413a060a20220f90838088250264221220"
              },
              {
                "type": "BigNumber",
                "hex": "0x220a0482312880e8028828148008108806800801e81a889803a40da80281fa81"
              },
              {
                "type": "BigNumber",
                "hex": "0x280b9e4184610b93a4d8334792ea0d2882f134910e08d265d87320da42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x04258062002806300200281e280203e208c18438869171b2f300e242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x24043004380400400150600620a558b6a4d281450308ea42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x3a0e0ba240842205a2508522122418841a20a0"
              },
              {
                "type": "BigNumber",
                "hex": "0x6fa0026613a0370611039e45c6cbcd1a1a8534a4a71cd262685318f242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0223822b81c18228449244382300fa42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x01c01031260861001c006418218829b4749d08d562da93110242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x65016408e4044084780481e50361d0610c29668dfbb4d8668c43090a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x02302484480480480150608818e4910e08d2626853091242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0a08c08a00a038a10c00c086c18230659150b2a3011a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0660849801aa801e82a028818081a812c12c12a0"
              },
              {
                "type": "BigNumber",
                "hex": "0x7aa00cc18438a693c658534bcf9a8d7a5eb234b439b0d2626853211a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x22384284280280e301e205c184288490d1bb63012a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0110"
              },
              {
                "type": "BigNumber",
                "hex": "0x6059229411223920902790609901f0610c2964989a14dffffff3093242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x805880096002c182284411d27423013a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x5986179a41c1398518e0d9a41a60b98498118e07986079a4"
              },
              {
                "type": "BigNumber",
                "hex": "0x0166106022184610600e61068a08a01c41811849ce41809841841a0598419641"
              },
              {
                "type": "BigNumber",
                "hex": "0x860b99641817980981da4418859aa1e9ded837fffffcd7a5eb23114242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0xc010e070608610a4542ca8d2626853094a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x010a03886018861096089600c08c0f8a0f88418221241b015242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x2e"
              },
              {
                "type": "BigNumber",
                "hex": "0x4186e498564d84651836578264380e4581641826458064382e43806418423844"
              },
              {
                "type": "BigNumber",
                "hex": "0x3824184e4b85e4985e49866500486e480550621872e4910e08db095a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0118e49a41c401e69907"
              },
              {
                "type": "BigNumber",
                "hex": "0x12079c41841c41a41a039c418e49a41a0398e41ae400e61906b9061011a41860"
              },
              {
                "type": "BigNumber",
                "hex": "0x3996400712682669401c41a0d98641841c108e019841841a4181598418e159c0"
              },
              {
                "type": "BigNumber",
                "hex": "0x1a199a0181b980981b980981fb041905a0a9ffffff37a77b60db116242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x392e0994e0390e0390e11060b9060940f940"
              },
              {
                "type": "BigNumber",
                "hex": "0x920188e0190e17906179419941b921b903f062145a6484ad28db096a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x2890088e09088481c0ba460081c0fa2600898119881a8181598818885e8185e6"
              },
              {
                "type": "BigNumber",
                "hex": "0x221ba21ba21b9880765d065145a6484ad28d2f3e6a34910e08db197242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1e705e6584"
              },
              {
                "type": "BigNumber",
                "hex": "0x67146836612619260266106792601677806739068263826690602703e6180704"
              },
              {
                "type": "BigNumber",
                "hex": "0x238066584e658566185e706e618c18851c9942cff9345bc3f0db117a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0170"
              },
              {
                "type": "BigNumber",
                "hex": "0xc87003f0ca94a0ba884a740848802704a6a86a92c007ca42a628610849001704"
              },
              {
                "type": "BigNumber",
                "hex": "0x861062862a62b0806a41221018a1902841901108504a81842862d1110050188c"
              },
              {
                "type": "BigNumber",
                "hex": "0x2a98aa0642a030a3082a192288c40c0840800c00331280840c03021280c10ec4"
              },
              {
                "type": "BigNumber",
                "hex": "0xa621030021029330f3188b002104bea4a840c2104cc00ec29281240c41284e80"
              },
              {
                "type": "BigNumber",
                "hex": "0xe833010ca03b803803cb04a17c8619ca1dc81ddcc18c52a9923426434389908d"
              },
              {
                "type": "BigNumber",
                "hex": "0x150b2a351a070cd3b568f34f9ba8cd2665ac34989a14d3c3ca93418242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1603404a01f600f40368560140160360"
              },
              {
                "type": "BigNumber",
                "hex": "0x16816500280296180ab4580d86d0a5865a058ad2ad1601751650a5805865002b"
              },
              {
                "type": "BigNumber",
                "hex": "0x4580296196516297016a8652a53681655618058628029429600a58658650a5a6"
              },
              {
                "type": "BigNumber",
                "hex": "0x01458a194d8a516816d0658601619618a58ad0a5065b42805865d42960162970"
              },
              {
                "type": "BigNumber",
                "hex": "0x3650658a51619618a58651629458a536286d16516296006582581594194a9419"
              },
              {
                "type": "BigNumber",
                "hex": "0x6194194d8a5165362a6537294996196836994a94296194594d8a51619458a506"
              },
              {
                "type": "BigNumber",
                "hex": "0x5955b498251605654a5945b4195594a9419b4595594d82296007650658a51653"
              },
              {
                "type": "BigNumber",
                "hex": "0x699458653653619499529619651600f65362b6114d94196556516d0651650a58"
              },
              {
                "type": "BigNumber",
                "hex": "0xa5955805d95296d066516516516d06d2b54e5807da852a594114996996516294"
              },
              {
                "type": "BigNumber",
                "hex": "0x1943a950160276994a96d36d1653629459418a516d1619682f62141942941145"
              },
              {
                "type": "BigNumber",
                "hex": "0x86500594296516194296d265a0fd952b6214594d9429651618a51652651604f6"
              },
              {
                "type": "BigNumber",
                "hex": "0x50658a58858a5945865a65942945945865a13d9419650a5365085b4594594d94"
              },
              {
                "type": "BigNumber",
                "hex": "0x996396057652ad16516206214594594d8a58639605f6a9629558819650eb50e5"
              },
              {
                "type": "BigNumber",
                "hex": "0x819d16296516d16216d0051601629651606f458a5945a05a0580586a51651606"
              },
              {
                "type": "BigNumber",
                "hex": "0x7651650a51700c18161d1651606765163945a05d0d8605945945819d941d815b"
              },
              {
                "type": "BigNumber",
                "hex": "0x258601d94581bdb45801c8605d94da17dd45801c80fd16867651606f70676877"
              },
              {
                "type": "BigNumber",
                "hex": "0x651606f407f68761fd809814201929bf3996fcff350b3fe4d2f3e6a36df27b8d"
              },
              {
                "type": "BigNumber",
                "hex": "0x42b0f934989a14d3375a1357e874cd2d66a6349996b0d38b2d73518a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x07e806e1fa21987e8185"
              },
              {
                "type": "BigNumber",
                "hex": "0xe1fa2c201787e8b080561fa4c221387e930884e1fa2d201387e83488461fa4c2"
              },
              {
                "type": "BigNumber",
                "hex": "0x0c221fa8602e83081b088267016a1826904901ea584a82a81e801e800ea184a0"
              },
              {
                "type": "BigNumber",
                "hex": "0x2a806a826294039aa816a00a016a1c139ca81eb01ea986a1803986b04b02a82a"
              },
              {
                "type": "BigNumber",
                "hex": "0x184a39aa806a8e03a801aa0a80a805a8e12c09aa0a8601a80787ea182b00a85e"
              },
              {
                "type": "BigNumber",
                "hex": "0x1fac1387f29063a4acc4bcf9a8d1d274246dc4549134d060b173299242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x17ace0b87ebd8161fa8ecda96107eb3423"
              },
              {
                "type": "BigNumber",
                "hex": "0x0e2b06a3821faac88c18cc18acac087ea30e2bb4232a821fa8d0d6c1a8087ea3"
              },
              {
                "type": "BigNumber",
                "hex": "0x239b4a021fa8c0c08a608cc2a107ea0a01896038aa001f906900788607926044"
              },
              {
                "type": "BigNumber",
                "hex": "0x01e49801062049c090882e70049881849888041a4188128128808920a2418291"
              },
              {
                "type": "BigNumber",
                "hex": "0x849801849a0146204008980188848848900909029046220906200d04188b9d61"
              },
              {
                "type": "BigNumber",
                "hex": "0x3758a034790230d28145034dd6281b1e408c6ca05141b3c5a9b3319a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x3a81"
              },
              {
                "type": "BigNumber",
                "hex": "0x2801a811a842c42a0284280a807a8290a18498a184a862807a829a649ca016a1"
              },
              {
                "type": "BigNumber",
                "hex": "0x8479c41889803a82106619460892812a4198e5182a4a02a084198e42870a8a80"
              },
              {
                "type": "BigNumber",
                "hex": "0x88439851aa1c2a4a88418518a126aa68a92a45a851ca1a2a4a94690a1066a870"
              },
              {
                "type": "BigNumber",
                "hex": "0x892a5184a8419aa10724a946284284398a10628624a9462847a8498a1892c498"
              },
              {
                "type": "BigNumber",
                "hex": "0xa106a192a98928028498a11ea90a1a92802849a028641aa60892802849aa82b1"
              },
              {
                "type": "BigNumber",
                "hex": "0x0a9a222a02a0a42a03a8428724a00e62807aa122a816a026a00682807a80187e"
              },
              {
                "type": "BigNumber",
                "hex": "0xa0061fa817f8418c632b9b7a30ebcdeee9e637fffffcdf1d9cc321a242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0xe81881803a26"
              },
              {
                "type": "BigNumber",
                "hex": "0x2003a262003a262203a06a005a0608800e898220600680880881801a07221226"
              },
              {
                "type": "BigNumber",
                "hex": "0x206088180a0218688289881c8180a062061a00a2658281c41c80081a51a80281"
              },
              {
                "type": "BigNumber",
                "hex": "0x8e8006800884b90610a9147a77b60dffffff34989a14ddcd2c8319aa42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x02e6181e"
              },
              {
                "type": "BigNumber",
                "hex": "0x638460c704610e638867024998e29a11a4999601984f986019a4186419801a03"
              },
              {
                "type": "BigNumber",
                "hex": "0x9c11c11981d9a1d9c0996c18a31699000a113470c540d1414e5311b242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x2e4186640c485e4086482e4588e43806418e48c51c402419e4884996"
              },
              {
                "type": "BigNumber",
                "hex": "0x0106b9467926d9069926b9467926791665926592663900106392e7100906392e"
              },
              {
                "type": "BigNumber",
                "hex": "0x69001906391e690059060761fa4c18c520a942b0f94716357d9411ba42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1e482e408481648c40164086480640"
              },
              {
                "type": "BigNumber",
                "hex": "0x96400538b6402409e40064886401e4184410618a5186d36f2fb309c242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x5920f902900992219205900920901f981121180206008024"
              },
              {
                "type": "BigNumber",
                "hex": "0x0240481811805988024f0620e41c63a83d8d1414e536dffffff319ca42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x08138c098c00800a098800810c018c008038961f8b418240c79b01d242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x400e401e484484488090e03884046210"
              },
              {
                "type": "BigNumber",
                "hex": "0x012099021229007884080102836450621439c4002844d42b0f9309da42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x026618"
              },
              {
                "type": "BigNumber",
                "hex": "0x3e6886682660a66016678c600669267006006146700539809853846146039a4b"
              },
              {
                "type": "BigNumber",
                "hex": "0x80e6391605996119c1395c18c39a89000a11350ac3e4d1c3150311e242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x22f816292e280e213e284214e28221229362802123136200212214e291"
              },
              {
                "type": "BigNumber",
                "hex": "0x6212e290e312600845884982e206e2036610621262450ac3e55d09ea42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x019a"
              },
              {
                "type": "BigNumber",
                "hex": "0xa61587ea34a306b0361fb0ea31ea30a00e1fa96caac7a8c28107eb3082acaaca"
              },
              {
                "type": "BigNumber",
                "hex": "0x8ca2ab0a001fb2a20caaca8c5a882cc281db48b2ab4a30a306b30832a066d20d"
              },
              {
                "type": "BigNumber",
                "hex": "0x28c1a8c5a8c28c28ca817a8c1a8c3a8c28c5a8c7a815a8ca8c7a8c1a8d28c1a8"
              },
              {
                "type": "BigNumber",
                "hex": "0xc20c2813b4a31ea306a336830a83ea34ab06a32a356a20c280fa8c1a8c7aad28"
              },
              {
                "type": "BigNumber",
                "hex": "0xc5a8caac280fa8d3a8d28cda0c280fa88346a34a33682a0fa88366a30ea30ea0"
              },
              {
                "type": "BigNumber",
                "hex": "0x4ea32edf856ab36a18623268781e85b26a1962316a7a203a0c7a0c5886306730"
              },
              {
                "type": "BigNumber",
                "hex": "0x6ab1e884832e8b066b0e6b4a33e40283368b06628e630b316430430a34020c28"
              },
              {
                "type": "BigNumber",
                "hex": "0xc10d28d20c3a8ca96c1a842801b06a32a30092ca8c788634b306a10a80e432a3"
              },
              {
                "type": "BigNumber",
                "hex": "0x0400e4b2ab4a0861b16a12c28c016d2807b04b4a886388a190a32a320590c28c"
              },
              {
                "type": "BigNumber",
                "hex": "0x2807b2528019e12a030aa007b4030a0566581e881642a4300b04001f87e02c60"
              },
              {
                "type": "BigNumber",
                "hex": "0x62aced67fffffcdfcdbcb364793a0d42b0f936deb66cd128aeb329f242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x03ee1a80187ea3cab8e1fa"
              },
              {
                "type": "BigNumber",
                "hex": "0x8e9aaf06ef785ee1a8f1a811a8e28e5a8ed83ee5aae28f28e1a8e82eea8e1aae"
              },
              {
                "type": "BigNumber",
                "hex": "0x3a8e2aea8e2807baa38eab8a3ca38abaa1816ea8ea8eaae28f28e2ce28f2801b"
              },
              {
                "type": "BigNumber",
                "hex": "0xca3aab8ab8abaa38b38a38a38a006f28eaae2ae2aea8e2ceaae28e04f28eaae2"
              },
              {
                "type": "BigNumber",
                "hex": "0xae2ce286eacea813aab8a5b8a9bab3aa04eaae296e29eeacf006eacbfbc03b8b"
              },
              {
                "type": "BigNumber",
                "hex": "0x3861a8ef1ab3c05baabc6bba6aaf01ee39261261261261062af026e390612612"
              },
              {
                "type": "BigNumber",
                "hex": "0x612638a1ba13801bc61b8e63a86e84e180e7982b463ae03a03c03a93a2316aa0"
              },
              {
                "type": "BigNumber",
                "hex": "0x6e382e5a0ec7a1ee184e3a16c3a26e382e3a7ef00ee1a7ef02e1fb8018081818"
              },
              {
                "type": "BigNumber",
                "hex": "0xc7b8f9b50ac3e4d34202234d080887000a1137fffffcd128aeb331fa42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x06a10a10a01ea08620a10600ea08a30e30a10a"
              },
              {
                "type": "BigNumber",
                "hex": "0x04a08630f30a20600a10630e3b0a20a04c38ec01f03d002f100e6d0620e41a63"
              },
              {
                "type": "BigNumber",
                "hex": "0x753c8d42b0f9349996b0db4a0a0a0d000a1134f0f0f0d32323233a0242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0baa0387eb0061fa96"
              },
              {
                "type": "BigNumber",
                "hex": "0x7eab876af85eaf90a846b590a82ea592a390a92a026a394a590a92a80ea190"
              },
              {
                "type": "BigNumber",
                "hex": "0xa794a90a10b006ab90a92a10a94b02a190a392a906a92b00b390a906a90a990a"
              },
              {
                "type": "BigNumber",
                "hex": "0x10b790a790b790a90a790b990a90a590bf90a592a990eb14b00a90a10b794b00"
              },
              {
                "type": "BigNumber",
                "hex": "0xa190a89e028e4a8602865026af82b12a2fe0ac42abf84aa06a206a3a06a184aa"
              },
              {
                "type": "BigNumber",
                "hex": "0x06a20eaa16b006b24aa46b00eaa6e42805aa9ba809a899aa09a899a80b87e1f8"
              },
              {
                "type": "BigNumber",
                "hex": "0x7e1fd941946c2d91c31503470c540766a0d934ed5a3cd000a113220a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0388e07886438a0188508458a1"
              },
              {
                "type": "BigNumber",
                "hex": "0x08418845881085384214e108418c4582212292219408c40c50a0188088508488"
              },
              {
                "type": "BigNumber",
                "hex": "0x401e2126098a40041846505e4827f0629072050ac3e4d000a1130a1242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x2380418210229b021a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x08a098c00a088058a0188006418618e29b022242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1e8b8368f82e82a69026a0aa0aa08aa407a82a82a82a"
              },
              {
                "type": "BigNumber",
                "hex": "0xa88066f88a08a2201a4d98a1a2614e8580611e69485826106690e8584612610e"
              },
              {
                "type": "BigNumber",
                "hex": "0x119841851a179c0da1c18c41aa1b50ac3e4db50ac3e4dffffff3222a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0xe41a4182641821986400e688608661901182b986"
              },
              {
                "type": "BigNumber",
                "hex": "0x10c669001823a8e31a01827a82199625a821986010608ea0c6180641aa39a0da"
              },
              {
                "type": "BigNumber",
                "hex": "0x2b04e82a079dc18a49889010a053400200cd3a3f3b36d5259543223242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x08a008038c138c008105418818e29b023a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x17940f90607902900b90310079229007903100b9031003903100f90310110219"
              },
              {
                "type": "BigNumber",
                "hex": "0xf9021900902190119031009021900390059021900102190010090210090090"
              },
              {
                "type": "BigNumber",
                "hex": "0x239221922123122100102392219031031031223922190291e310239001031060"
              },
              {
                "type": "BigNumber",
                "hex": "0x5906239001021900f92310110212090059011221001940900900900901140390"
              },
              {
                "type": "BigNumber",
                "hex": "0x0190059003901190012010007e402403f470639a9b26dccf2f430a4242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x201e3003003380300301e206418428a49b024a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x50"
              },
              {
                "type": "BigNumber",
                "hex": "0x1e212018c48421916310112290019221029062083906dffffff30a5242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0xb8a07886038a089e1184418230a51b025a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x280201418208411b026242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x2647836409e402640ae401640be400640c640440ce400558a48c64"
              },
              {
                "type": "BigNumber",
                "hex": "0x0a40240d640440c6400e40ae481e4b80e590618e6246d3375a130a6a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0166180665886086806116688608600611e688602691e680614690e018459848"
              },
              {
                "type": "BigNumber",
                "hex": "0x4611e059845816690e0798e0597c18e21669b50ac3e4dffffff3127242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0xe90269089006910310902818279880081a41a81a41a9783e"
              },
              {
                "type": "BigNumber",
                "hex": "0x800e800802e80480064d0620e49a6d8668c437fffffcda3bcf131a7a42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x2e409e11902b83e40b60b92e2181650a648a40248d6500409e48"
              },
              {
                "type": "BigNumber",
                "hex": "0xae489e409607943102584650a4076483e550628e5aa7542b0f950a8242069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x026885e80a804e88"
              },
              {
                "type": "BigNumber",
                "hex": "0xa884680868026604810680460462c802882800a98098b02eb1ab0068806b180a"
              },
              {
                "type": "BigNumber",
                "hex": "0xa120601aa019c188492910344eb36d0c0c7e3619a310d5e03eb3228a42069001"
              }
            ]
          ],
          [
            [
              {
                "type": "BigNumber",
                "hex": "0x187e"
              },
              {
                "type": "BigNumber",
                "hex": "0x20161f88108007e2842001f88018a0081b88018a008198a018a008198c109600"
              },
              {
                "type": "BigNumber",
                "hex": "0x80d8800c00b6098800e610801896018a600800a08a608800a3f84218fe058ee0"
              },
              {
                "type": "BigNumber",
                "hex": "0x8c038ee098a00c00a00800a1080988078801880bae418c722d1b801342069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x05e298007e218007e218"
              },
              {
                "type": "BigNumber",
                "hex": "0x058a118a6006285661001886056212092210139a48040a1590694610159841a4"
              },
              {
                "type": "BigNumber",
                "hex": "0x98179a21a418179841841841a1798641a15886190704e21864184180f98019e4"
              },
              {
                "type": "BigNumber",
                "hex": "0x1a01070060261886107107106106f90018e41a41c6099e41c6098e49ce019ee0"
              },
              {
                "type": "BigNumber",
                "hex": "0x79d60b9c6119a605bed0b0f90630b116f0fc3e5bf3fcf42cff93901b42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x62036202201628"
              },
              {
                "type": "BigNumber",
                "hex": "0x2280e2022002006282200282284202200284204290c18c28e59b802342069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1081b88088617880086198c00a1988088e118800810c"
              },
              {
                "type": "BigNumber",
                "hex": "0x138be00800808800800c058a008600860080080389e008600a038c600c018f60"
              },
              {
                "type": "BigNumber",
                "hex": "0x18a08a08a10a008098a08c08a0d8a08a15a7418e59cb142cff93802b42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x764076486650"
              },
              {
                "type": "BigNumber",
                "hex": "0x1e40265016408401e41806508400e4804084024388404502408498843844884f"
              },
              {
                "type": "BigNumber",
                "hex": "0x88400648a4988481640a458840364581e75062946266f3c3c3c3883342069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x107e4380e4186643"
              },
              {
                "type": "BigNumber",
                "hex": "0x82458664580458665186e5186e5186e4f87e4d87e4d87e438041876438241876"
              },
              {
                "type": "BigNumber",
                "hex": "0x4384507641806507e290038a1f8c018c1f9028062901d9405941990605906179"
              },
              {
                "type": "BigNumber",
                "hex": "0x060590615906079160f90e079160d91609916099160d916079160f90e0590e15"
              },
              {
                "type": "BigNumber",
                "hex": "0x90e019161794e1b93e007e4783ecb0629eeba50b3fe4f212b4a3883b42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x03921590202e4881590281e5081590281e5081590300e50a15902920"
              },
              {
                "type": "BigNumber",
                "hex": "0x192305640a50250c158c418050c158c418050c15886478c15886478c15886478"
              },
              {
                "type": "BigNumber",
                "hex": "0xc15886458861588645886404640c498c404640c418091c959c902919e91ae818"
              },
              {
                "type": "BigNumber",
                "hex": "0x491a681b6880e89a681ae900e919e81ae881e919681a6882e918681986903e99"
              },
              {
                "type": "BigNumber",
                "hex": "0x85683828182f070649ec3845c6cbcf212b4a3c5c6cbc7212b4a1984342069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x070061f9c0387e6887"
              },
              {
                "type": "BigNumber",
                "hex": "0x021f8861841f9841a107e6106841f9841a107e6106841f9841a107e6106841f9"
              },
              {
                "type": "BigNumber",
                "hex": "0xa4841f9c40061f9a40061f9a40061f9a40061f9a40061f9a40061f9a40061f9a"
              },
              {
                "type": "BigNumber",
                "hex": "0x4066700e6101b9a0398400604e600680e6182e6006580e700681e60260070166"
              },
              {
                "type": "BigNumber",
                "hex": "0x80604600602602600681e61826806026026182669201809a09841c0b9a418609"
              },
              {
                "type": "BigNumber",
                "hex": "0x801a41a0f9d6159ae07d041885bad12f3e6a3ce9360cf171b2f3904b42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0a1b886178a6118c60988e08ae0189610b60"
              },
              {
                "type": "BigNumber",
                "hex": "0x88e018be008e058d6098c60d8ae1788e078ec18c596a9212b4a3805342069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x010199009019900921592010611926119261"
              },
              {
                "type": "BigNumber",
                "hex": "0x194200503e418801060d9060885036508110e078848803942016214200e21421"
              },
              {
                "type": "BigNumber",
                "hex": "0x0110e20162136202e2942122016870629472869a9a98f6a6a693885b42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x2c22811aa622811a"
              },
              {
                "type": "BigNumber",
                "hex": "0xa622811aae2046ab8811aae2046a188aafe22abf88aafe22abf88aafe22abf88"
              },
              {
                "type": "BigNumber",
                "hex": "0xb7afebfafebfafec2eec3aeed00cadec180c1a0b1b060348b062b6c182c24d18"
              },
              {
                "type": "BigNumber",
                "hex": "0xa7b061308b16a5b0601a0cbaac580ecb90c581ecb90c182ecb90c846c582ec90"
              },
              {
                "type": "BigNumber",
                "hex": "0x6298eac4910e08f2443821e5b8ef0f128aeb3ced5a3cf3b568f3a86342069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0a"
              },
              {
                "type": "BigNumber",
                "hex": "0x089e0f88e00800a009600860f8800a600a600a0f89600a08be0f89600a08a00a"
              },
              {
                "type": "BigNumber",
                "hex": "0x60f880096038a611880096008018c00a13880096008018961389e00a109e1588"
              },
              {
                "type": "BigNumber",
                "hex": "0x860080388e1788e00a05886198a00c078c1b88e058800c1b886108108e1b88"
              },
              {
                "type": "BigNumber",
                "hex": "0x600a038800a1d88e108018a1d88e10c08a1d8860080188e1d88e078c1d8860b8"
              },
              {
                "type": "BigNumber",
                "hex": "0xa1b886038a10a0b900390010e0189e09920192011e0190e11211009201001060"
              },
              {
                "type": "BigNumber",
                "hex": "0x1921116090110090090014059003906092015601900390e5f82e5f8450264005"
              },
              {
                "type": "BigNumber",
                "hex": "0xb80e48065025d80e481e482482418048448064036482480400402484484481e5"
              },
              {
                "type": "BigNumber",
                "hex": "0x04402402401e40064066404404ff1064250c245c6cbcf171b2f1886b42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x41f8a08c1b88600c1b8ae178b617886008e17886"
              },
              {
                "type": "BigNumber",
                "hex": "0x088e138860188613886038c138c1787e1f90c182696c96a6a693807342069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x418261f900"
              },
              {
                "type": "BigNumber",
                "hex": "0x0801220664986202400418a159000851a0902106285640048869020269417900"
              },
              {
                "type": "BigNumber",
                "hex": "0x084084182418438819922121106004804081b9062024182102902066290e01a4"
              },
              {
                "type": "BigNumber",
                "hex": "0x80210198a40840021801840850a178801229a0106906205e2390e60061021020"
              },
              {
                "type": "BigNumber",
                "hex": "0x5e311661941b8848841984004186e21066906100106285e23986478815880142"
              },
              {
                "type": "BigNumber",
                "hex": "0x1c01c488405628040a488600612310158c4084826006004388158a4884026006"
              },
              {
                "type": "BigNumber",
                "hex": "0x10e210138c419a09840841a010138800849c11a41864080f8c01271009063804"
              },
              {
                "type": "BigNumber",
                "hex": "0x080d91e21061009c4582e2102002906604610612210012202640841884981184"
              },
              {
                "type": "BigNumber",
                "hex": "0x18010680210200e219071461001926886084b8851964016418e40a5002906192"
              },
              {
                "type": "BigNumber",
                "hex": "0x610010059068841a21840840c694610600402e638061880106926006900f9ae1"
              },
              {
                "type": "BigNumber",
                "hex": "0x1065901798e05980f80b0818c8c1012665ac3c84ad28f2443823907b42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x461f"
              },
              {
                "type": "BigNumber",
                "hex": "0x881080987e28428161f8a038a107e304282304204e21816259200a10a08a0102"
              },
              {
                "type": "BigNumber",
                "hex": "0x58162590298021902981631233902382621942f80488e058c01201000a611408"
              },
              {
                "type": "BigNumber",
                "hex": "0x8610a0590108603900121086a54482e3245c27fffffcf16f0fc3888342069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x016486e1f9020361f90039028261f940390306e500e4180819021415"
              },
              {
                "type": "BigNumber",
                "hex": "0x9421011421289a81421060994219009231002061942394112259062390020619"
              },
              {
                "type": "BigNumber",
                "hex": "0x1621920902390e239202063903143100903142b901206192219421262b941227"
              },
              {
                "type": "BigNumber",
                "hex": "0x20409650a48be500e89a81230fe501e89889220fe503681943b9213a0e50be43"
              },
              {
                "type": "BigNumber",
                "hex": "0x856818839431261ba0620e094312087e8988180650a4187e81889880164b86e8"
              },
              {
                "type": "BigNumber",
                "hex": "0x9a88561fa26200787f610662aacc55105e0f7a5eb23ef1631503988b42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x660461f9809984180d87e610601e41980787e614600e610e6006"
              },
              {
                "type": "BigNumber",
                "hex": "0x1f9845980191e600485e4806126602611e6004182e459a4798418012e2116059"
              },
              {
                "type": "BigNumber",
                "hex": "0x1e2916602690691629160191e291e01906026116211e111e6084598019811843"
              },
              {
                "type": "BigNumber",
                "hex": "0x980184780479801843980d984198098519a11841980d9a51811c479a05985046"
              },
              {
                "type": "BigNumber",
                "hex": "0x612601e6782e704e68561fc5d160b8ab1d51bcc317acf8260303909342069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x6e6081d9820164580649820281360946880205998200"
              },
              {
                "type": "BigNumber",
                "hex": "0x8166608018599820061666080185b88015661081201566008900184b98480810"
              },
              {
                "type": "BigNumber",
                "hex": "0x02449845808184008101206108128184028900a01206008180a0604801e80480"
              },
              {
                "type": "BigNumber",
                "hex": "0x4805e805ed94286e5148a84dd930492593f1250ac3e491e4ba82189b42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0a180a1806b1a0186a0a"
              },
              {
                "type": "BigNumber",
                "hex": "0xb0a600660ca1a21a0282a832860262821982980982a821aa0182398218019827"
              },
              {
                "type": "BigNumber",
                "hex": "0x980182798039825ac2598079825a825980b9a2d980f98649cb180b9a81883988"
              },
              {
                "type": "BigNumber",
                "hex": "0x1a860166a26a4720ea0066a46006180620ea046a06a016a20ea04620ea016a20"
              },
              {
                "type": "BigNumber",
                "hex": "0xea04620ea016a20ea04a20ea016a20662812a92809a88aa03aa82a0b9882807a"
              },
              {
                "type": "BigNumber",
                "hex": "0xc0daa01ce50c2f9e626b9bc0d13acf0306073c100c1cf2593f13a0a342069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0xd94139021060"
              },
              {
                "type": "BigNumber",
                "hex": "0x4640a604649811a211a00a20fa20a0e09a417a417a41b87e800804e802804688"
              },
              {
                "type": "BigNumber",
                "hex": "0x0903e88288165f06320820531214cf128aeb3d0ac3e4f071a10398ab42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0d981387e684e1f9820fe119a20fe4280d984083f90a02e614"
              },
              {
                "type": "BigNumber",
                "hex": "0x3f90a0266106a0ee4a8079a52a25922b92a016694a92a8a4389651805984a0a1"
              },
              {
                "type": "BigNumber",
                "hex": "0x06a12a10682842a428518039852252a8aa52a4284a8518019841a442a4224284"
              },
              {
                "type": "BigNumber",
                "hex": "0xaa4a88aa498019841a441a04ba881941184197e819460065abe4ba4518028999"
              },
              {
                "type": "BigNumber",
                "hex": "0x5e600aba26b1c4d980ba9e87aa710e605ea3a266587ea3a266280387ea1a4a83"
              },
              {
                "type": "BigNumber",
                "hex": "0x61fa860d4511139a72d11bd2a5e3cf000a113cdbcbecf36bac31a0b342069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1b98e107e60866386e689e6076609668766096607e6096607e68866801f982"
              },
              {
                "type": "BigNumber",
                "hex": "0x198107e60a60061f9a2180387e608600e1f982180387e608600e1f982180387e"
              },
              {
                "type": "BigNumber",
                "hex": "0x60860061f9a218107e68a6041f8866041f8c681e60811886602660a0f8c68266"
              },
              {
                "type": "BigNumber",
                "hex": "0x880f8c603660c098c681688260ce681681088068be681e81288060ae70268148"
              },
              {
                "type": "BigNumber",
                "hex": "0x98279c4a205a0439ae43a205a05fa005a055a043a005a245a241a043a009a241"
              },
              {
                "type": "BigNumber",
                "hex": "0xa041a243a00da0e52202041a011a241a00a24a013a041a2120611a041a2007e8"
              },
              {
                "type": "BigNumber",
                "hex": "0x148841fa04220387e8867a74388e89d3b66fa439cf5cf1414e5218bb42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x7e6185e678466906783661261806181e"
              },
              {
                "type": "BigNumber",
                "hex": "0x690638469886906380e69061886781e7106886190602e6b90603e6b8666001f9"
              },
              {
                "type": "BigNumber",
                "hex": "0x861b9809a159c11a1398119dd0d079459ea9bcc8c8c8f42b0f9390c342069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1d87e1f87e1fa0e007e89a8801fa26a0087e81a8021fa070"
              },
              {
                "type": "BigNumber",
                "hex": "0x21fa0707688081c1fa4707e9088181fa06202981fa06202981da2624607681c8"
              },
              {
                "type": "BigNumber",
                "hex": "0x9812015a0720682904e818e80081846819680081888468196912883e81968906"
              },
              {
                "type": "BigNumber",
                "hex": "0x9026898e9128928180689968008128184188128798e8808128126a062066a063"
              },
              {
                "type": "BigNumber",
                "hex": "0xa00a243a061a072061a212241a06106a061a06a205a24a049a8186818368798e"
              },
              {
                "type": "BigNumber",
                "hex": "0x886e878175b4202e39af324002844f1c31503cc4e598f66a0d9398cb42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x5e1fb06b03e885e902d2c05a8c580885e81a832a"
              },
              {
                "type": "BigNumber",
                "hex": "0x982a31ea18885e81a420a02b00a82a32a00a1262019a442412a12861204a81ba"
              },
              {
                "type": "BigNumber",
                "hex": "0x866a20a80aa02a0206a0b066a1a062203a80a80a0620ab0a066a180884e800ab"
              },
              {
                "type": "BigNumber",
                "hex": "0x0a06ec801fb2a066c386ea30a866d28c06eca81db4a3017a8caa3bb4a3017a8c"
              },
              {
                "type": "BigNumber",
                "hex": "0xaa3db2a3017a8caa3db2a3017a8caa3db2a3017aac2a3da8d05eab0a8aec89ed"
              },
              {
                "type": "BigNumber",
                "hex": "0x066a32b09ed09ec28c06ed2a25b425a8ca81db0a30b086ca8c0ca7876ca8621b"
              },
              {
                "type": "BigNumber",
                "hex": "0x0a8ab34a30007ec2962b0a0aab4ab2007eca96c28eca86c041fb2a3b0a1b2a1b"
              },
              {
                "type": "BigNumber",
                "hex": "0x20187ecaa6c296c0161fb0b5b20587ed2b6d02e1fb4a00caad281987ec186e02"
              },
              {
                "type": "BigNumber",
                "hex": "0x1c45c3e3aaf544505284f1414e53f93357cfbffffffcf7272f31a8d342069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x041f98e0d87e"
              },
              {
                "type": "BigNumber",
                "hex": "0x692603e1f9849a087e2b946041f8b6498107e2d906b85e2d92e704e2d91e6384"
              },
              {
                "type": "BigNumber",
                "hex": "0xe2d9066186e2d946801f8b651a007e2d906687e2d90e68762d91670662b93661"
              },
              {
                "type": "BigNumber",
                "hex": "0x8462994e604e299066b81e680e2790e68566102d926604e6142992e60466145f"
              },
              {
                "type": "BigNumber",
                "hex": "0x980d9851a4f9845980b984980984598419a4598079841a118439a419c4398079"
              },
              {
                "type": "BigNumber",
                "hex": "0xa01984398018419801c4198059803984198098419a098649a0d9841980984398"
              },
              {
                "type": "BigNumber",
                "hex": "0x039960b9a49801984198087e610600e61066021f9c039a51a087e601e694603e"
              },
              {
                "type": "BigNumber",
                "hex": "0x1f9a4981387e70561f9a13e8d172b9eac519bf93357cfe4cd5f190db42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x07e1f87e678a1599e80a1399e8881399e88a1199e9081199e9081199e9"
              },
              {
                "type": "BigNumber",
                "hex": "0x081199e9081199e9281199e9281199681a81199681a81198e83a81198e83a822"
              },
              {
                "type": "BigNumber",
                "hex": "0xd98683aa818266226a00827ea02a276a849baa01a895ac05a891aa0bac85ac"
              },
              {
                "type": "BigNumber",
                "hex": "0x13aa60daf5110f8e732b9000a113ced5a3cf3b568f1d9a8364fba0e342069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x02e1fa21b87e818885e1fa26a01587e89c883e1fa265a00d87e899e80261fa"
              },
              {
                "type": "BigNumber",
                "hex": "0x469a00587e91b680161fa06fa20587e2206da00587e3206ba00587e32069a205"
              },
              {
                "type": "BigNumber",
                "hex": "0x87e21a067a00787e21a065a20787e2a267a00987e919e88261fa069a20b87e81"
              },
              {
                "type": "BigNumber",
                "hex": "0x9e88268186e81968182839c801e8181681ae81996881e81a801681f6881691c8"
              },
              {
                "type": "BigNumber",
                "hex": "0x681f6880681996819a681ae880e8187fa467a205a07fa04a063a409a079a24"
              },
              {
                "type": "BigNumber",
                "hex": "0x1a06a40ba0675a043a060da24a275a241a011a041a077a0642011a0520677a06"
              },
              {
                "type": "BigNumber",
                "hex": "0x0fa24240a475a013a0607a066da00987e81b6802e1fa06ba20987e89ae88261f"
              },
              {
                "type": "BigNumber",
                "hex": "0xa26ba00b87e89ae802e1fa269a00d87e89a680361fa467a00f87e918e903e1fa"
              },
              {
                "type": "BigNumber",
                "hex": "0x463a21187e87817fd474eea3b5ce6fe16e5b3d0ac3e4f42b0f9218eb42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x2a066a80"
              },
              {
                "type": "BigNumber",
                "hex": "0x6a06e82801a8806682801a8885e8a812a17a0a20a04a9088891ac01a8425662a"
              },
              {
                "type": "BigNumber",
                "hex": "0x01aa42881aa879aa006a12624620a24620662801aa418a2462889c918a84aa06"
              },
              {
                "type": "BigNumber",
                "hex": "0x28918aa46288988281284206a46a891a89aa04a24628918a206628898a02aa46"
              },
              {
                "type": "BigNumber",
                "hex": "0x28918a206628898a80a10918a246a8918aa06a80284246288198a246a8898a00"
              },
              {
                "type": "BigNumber",
                "hex": "0xa12898a2066288198a22620a00aa26288198a2066288988280aa818a20662881"
              },
              {
                "type": "BigNumber",
                "hex": "0x98aa06a812a8288198a2066a8898a00eaa06628819aa2262805ac898a2066a88"
              },
              {
                "type": "BigNumber",
                "hex": "0x98a026b18a20662a81aa036b20662889882811ac898a2262a15a868ac1ba8e10"
              },
              {
                "type": "BigNumber",
                "hex": "0x0899091ba86b6c1000a113e0bbbd0f4abbeb3d9a8364f36f2fb3a0f342069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x015d865900"
              },
              {
                "type": "BigNumber",
                "hex": "0x3e1f87f618e3bda69801fd8658f7699761a1bc361963dda41b6187685701d61d"
              },
              {
                "type": "BigNumber",
                "hex": "0x61a3fda45869075a11da65865841b61a3fc1639909b68376987698e3fc371075"
              },
              {
                "type": "BigNumber",
                "hex": "0x86dc07da6d869d83fc363997700f0586da419698760ff0d9664075b05815c641"
              },
              {
                "type": "BigNumber",
                "hex": "0x619b61d60ff0db6658615a6d8e7586d83dc07758369b05c65c65d00f701d8e75"
              },
              {
                "type": "BigNumber",
                "hex": "0x960c1679b65c239c17639b641638174164361d6996c239c176c169b64163816c"
              },
              {
                "type": "BigNumber",
                "hex": "0x0f61d6c174235c0e4436416c065915905805b03da6db05d018c709dd05864164"
              },
              {
                "type": "BigNumber",
                "hex": "0x365c0f63c3641e2bc376916406d90d9703d871189f0bd845a45909b623619601"
              },
              {
                "type": "BigNumber",
                "hex": "0x6428c3745ef43e45845865901d0217016428c0841645643eeb0ec3f611641643"
              },
              {
                "type": "BigNumber",
                "hex": "0x6196216c005b12517bacb8c43f61905b0216408416856408408408c4ef30eb10"
              },
              {
                "type": "BigNumber",
                "hex": "0xbd905870211217056a30230230fbacbac45e8c285c03da8c0940842ee30e3183"
              },
              {
                "type": "BigNumber",
                "hex": "0xac41f641e842858605da8c0840941f8b3460e50c4164076c1e8408406d809da8"
              },
              {
                "type": "BigNumber",
                "hex": "0xc08429406060c50c5183943115a07619603762070be0c1d183943311a06a5a11"
              },
              {
                "type": "BigNumber",
                "hex": "0xd881c1e060c394614634b107d9120f704f72503e0cb94614634b315905912162"
              },
              {
                "type": "BigNumber",
                "hex": "0x3706772501e0c3b4614e1531840e85882961801fd970e0c394e0e50e614b2e45"
              },
              {
                "type": "BigNumber",
                "hex": "0x6780e1fd978315634e34b2e41658361fd8741e141e1561258e1387f6e4756168"
              },
              {
                "type": "BigNumber",
                "hex": "0x7e1fe5e007e04664742e8bb1ee785b96cf4abbeb3f93357cf6e94373e4793a0f"
              },
              {
                "type": "BigNumber",
                "hex": "0xff9b633ff36f2cf36f2fb3ffffffcf66a0d93e6b0fb8f9ac3ee1d8fb42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0xf88e00"
              },
              {
                "type": "BigNumber",
                "hex": "0xa6018e6088600de10ce058b60d886058850b0b8a48e891c31503810342069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1d9a1787e1"
              },
              {
                "type": "BigNumber",
                "hex": "0xf98e0d9c1b87e678466183e1f9b6559960787e6f9566b8261f996579b60787e6"
              },
              {
                "type": "BigNumber",
                "hex": "0x396671841f99e5b99e107e6f96e6987e7396e6d85e7796e7185e7396e75801f9"
              },
              {
                "type": "BigNumber",
                "hex": "0x965b99e11961b99e5198419a60198e179a64598439a51ae107e6b90e690e6926"
              },
              {
                "type": "BigNumber",
                "hex": "0xf801f9b6419a459c41ce1999e29c51c4398641de1399e298651c51841be21ae0"
              },
              {
                "type": "BigNumber",
                "hex": "0xb99e2199641c51849be29ae0b9a239ce51841b6259a6159d649849be279ae0d9"
              },
              {
                "type": "BigNumber",
                "hex": "0xae21c7f8a66b81e6b8868871fe2f98e039a631a29fe01c2798e039ae29a01831"
              },
              {
                "type": "BigNumber",
                "hex": "0xfe01b6079a6219a09a239ee118e0998e23986019a259ee199a60b9c299c601a1"
              },
              {
                "type": "BigNumber",
                "hex": "0x587e658866f82618661f9c29c6019c1b87e60873816685e1f9829ce0187e1f98"
              },
              {
                "type": "BigNumber",
                "hex": "0x29ce0187e1f9831c60187e1f9a29c60187e1f9a31be0387e1f9c219ae0387e1f"
              },
              {
                "type": "BigNumber",
                "hex": "0x986239960587e1f9d60f87e1f9b60808c01a9053c9be75959593910b42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x041f9060"
              },
              {
                "type": "BigNumber",
                "hex": "0x987e3100987e3100987e21940387e27900387e27900187e27900187e23920387"
              },
              {
                "type": "BigNumber",
                "hex": "0xe21900987e3120787e23900587e25901121f89640240a1d89640240861988e48"
              },
              {
                "type": "BigNumber",
                "hex": "0x440861988e40440961588e4806488e0f89e401e408e098ae401e40863f900590"
              },
              {
                "type": "BigNumber",
                "hex": "0x3d902190079437942900d903102d900940d90290010312219017902100903100"
              },
              {
                "type": "BigNumber",
                "hex": "0x103101990110290110290007e500e482f2d065a2dbe6942b0f92091342069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1980790628039a4a8119e0196418202a1ca006a1c4006a1a"
              },
              {
                "type": "BigNumber",
                "hex": "0x82808f418829049e8e2d73faee668febd0a33f96fea0fd6d6d73a11b42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1306032e0bb240cc906c9023205b"
              },
              {
                "type": "BigNumber",
                "hex": "0x0218518232212c08c1223413021a508c10c1223250cc02c0a418508c90e688c3"
              },
              {
                "type": "BigNumber",
                "hex": "0x82c0a41851a4198408c02c00c82c0a808a192620d04c80ec3a96c01ec82ec583"
              },
              {
                "type": "BigNumber",
                "hex": "0xebb064204b26f0507ec3c080ba8f0303eb3fd00c0facf0202e63a92342069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x01d880f87e28361fb820361fb820361fb820361fb848"
              },
              {
                "type": "BigNumber",
                "hex": "0x2e1fba402e1fba401e1f88f120587e238a3a402e6056238a3c402ee081188e1a"
              },
              {
                "type": "BigNumber",
                "hex": "0x8e100bba202e23ca386482ec382bbaa1b8a3a402e63bea5bc402ee20bdba4026"
              },
              {
                "type": "BigNumber",
                "hex": "0x23862e6f1209b882fee10099abdba4026e20e18bdb84026620bfba401ee286ae"
              },
              {
                "type": "BigNumber",
                "hex": "0x6f100998c3862eee1209b8c20b9bc408079ac18b9ba40a0798c2062eee880798"
              },
              {
                "type": "BigNumber",
                "hex": "0xe18c2de63c281e638bdb863820266206ad66ba402663abb98e100b98c20bbba0"
              },
              {
                "type": "BigNumber",
                "hex": "0xb98e3063862cee83e638620b3ba15b8a3aabbc1bb8c29ef001fb8c39609f341b"
              },
              {
                "type": "BigNumber",
                "hex": "0x0b48f9783a163ffe6d8cfce65293f96ba3cfc65f243c1c6840fbb12b42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x4e402402404e400500404e4004084004056488"
              },
              {
                "type": "BigNumber",
                "hex": "0x485e40a010178c10ee10e640063790018de400e3380401640ae0900790090218"
              },
              {
                "type": "BigNumber",
                "hex": "0x0402402640248240240364824384e503695064988286f42b0f93893342069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x01101f9005"
              },
              {
                "type": "BigNumber",
                "hex": "0x901b940390210199221001902101b902900902901988e40040a4066239231019"
              },
              {
                "type": "BigNumber",
                "hex": "0x88e48c485e2190010219213902190088e4981650840064884896458c481650ee"
              },
              {
                "type": "BigNumber",
                "hex": "0x401e40de502e40c6484640b648664b83eb30641c8366fce65293893b42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x7e48161f902106087e408e4001f902390007e408e4186e40"
              },
              {
                "type": "BigNumber",
                "hex": "0x8e48a485e408e40040a504e408648240c4380e458c400640964588e4380e40fe"
              },
              {
                "type": "BigNumber",
                "hex": "0x401e40ee482640de404650a6506649826930631e7b66fce65293894342069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x761f87"
              },
              {
                "type": "BigNumber",
                "hex": "0xf251200664060461f87f2d21190981187e1fc94194486c32181187e1fc941944"
              },
              {
                "type": "BigNumber",
                "hex": "0x86452180f87e1fcb4194c90510980f87e1fc86532192406510180d87e1fcae19"
              },
              {
                "type": "BigNumber",
                "hex": "0x4992406526480987e1fcb44125064b01b2512100587e1fcb4cb4192010486ca4"
              },
              {
                "type": "BigNumber",
                "hex": "0x0161f87f2530494ca0432506c8400e1f87f2c06482412026412d06484041f87e"
              },
              {
                "type": "BigNumber",
                "hex": "0xc4b4194c120070512386c84001f87f23125320b04801c1418e48650407e1fc8c"
              },
              {
                "type": "BigNumber",
                "hex": "0x294c82c1201709921b2101b87f230ad064520270992512101987f2ab41b04c09"
              },
              {
                "type": "BigNumber",
                "hex": "0xcb04a8121587f2a94c0643203f24084944840561fc8ad0c45283f24321904840"
              },
              {
                "type": "BigNumber",
                "hex": "0x4e1fab4308c322011c9022640404e1fa8c50e214c815cb020e1187e250e214c0"
              },
              {
                "type": "BigNumber",
                "hex": "0x19c90b86900f87f2094214c1206f240a386120d87f2314214190077221039418"
              },
              {
                "type": "BigNumber",
                "hex": "0x40361fc94194c1207f241238682e1fca652240087e840e50611201e1fc8e1942"
              },
              {
                "type": "BigNumber",
                "hex": "0x9050107e44141b201e1fc8e1942900061fc844264880161fb9529200e1f93019"
              },
              {
                "type": "BigNumber",
                "hex": "0x2212010801fc8e5280920161f914188c9087702aed30480787e4528490a80481"
              },
              {
                "type": "BigNumber",
                "hex": "0x7c9022a386510480987e450ec08d100674408b86502480987e45081c204815c3"
              },
              {
                "type": "BigNumber",
                "hex": "0x44325320361fd124084905213c805070d10480d87f4108c3401004f403440e1a"
              },
              {
                "type": "BigNumber",
                "hex": "0xa480f87f440e41529203f0d122943863120461fd103b4a948273510d0ad06412"
              },
              {
                "type": "BigNumber",
                "hex": "0x0461fd1050e50a512512530030290b942b4c94190481387f443429250a52a401"
              },
              {
                "type": "BigNumber",
                "hex": "0x52601252a412286481587f25125103b49a01c06532d0a4121b205e1fc8ac0e19"
              },
              {
                "type": "BigNumber",
                "hex": "0x4486414034c0650e4b420e5120661fcb421049438652752e52e48e414481b87f"
              },
              {
                "type": "BigNumber",
                "hex": "0x5406494194c14490d2e1aec1206e1fd070c8641541445541441505e1fd2c2b44"
              },
              {
                "type": "BigNumber",
                "hex": "0x06c074990d2e510a8e53204e1fd0c2b0314414b92d12412190194c0a20ad2138"
              },
              {
                "type": "BigNumber",
                "hex": "0x7f4310b142944144b015299153022e501387f4210314290334490480c8f438a5"
              },
              {
                "type": "BigNumber",
                "hex": "0x0c44804e1fd08b1440cd12037438a5323b40561fd30b3483f43aa51239485e1f"
              },
              {
                "type": "BigNumber",
                "hex": "0xd2c5128474b90cb406e1f87f4387e06b4065bfa7a40373d4f96fcff3c318a1cf"
              },
              {
                "type": "BigNumber",
                "hex": "0x1ca7e23c629b88f2882f13c761f18f128abd3ce2cb5cf5db4da3c94b42069001"
              }
            ]
          ],
          [
            [
              {
                "type": "BigNumber",
                "hex": "0x11e5f884084084b82418c4182480e488e4"
              },
              {
                "type": "BigNumber",
                "hex": "0x836408488488403e478163901c3020041050031432671516e644081442069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1d8a1b8c1788615896"
              },
              {
                "type": "BigNumber",
                "hex": "0x13896118a608ee10e6038d6098b617880f8b418e616a1171b2f4001c42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x297848b909d928d928594818"
              },
              {
                "type": "BigNumber",
                "hex": "0x8610898420298912818a61081888a610890838a622039a8908383e610802904e"
              },
              {
                "type": "BigNumber",
                "hex": "0x610098801e71064964a8458b8cd12f3e6a44749d090004545454182442069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x07e418107ea90087ea1876a7980da860"
              },
              {
                "type": "BigNumber",
                "hex": "0x28e92a0ba8222a3a422c6016a088a8e92c41805aa9286929605aa8ac2a2a980e"
              },
              {
                "type": "BigNumber",
                "hex": "0xa24a8a92ae03a862a2b39212a224b3a0a90129660042a68ac404b1803984a802"
              },
              {
                "type": "BigNumber",
                "hex": "0x88aa828407662a82a031c19679ec9c59ac3650d4c43315fa1d34202c42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x03b8fe3f806819e419e8006200e819e419e8036819651968036818"
              },
              {
                "type": "BigNumber",
                "hex": "0x641851841c883629c479a903e220612e622118a818418518418904e29a439890"
              },
              {
                "type": "BigNumber",
                "hex": "0x5e29c41a90268b0659c5b6499761d15fa1d344a4a71d1212b4a4183442069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0533b401b12b525b52b20ccc4cca86c4"
              },
              {
                "type": "BigNumber",
                "hex": "0x9e04e6e49e04cee3004aa4a048ee4904824cc8322928125c042921b120322814"
              },
              {
                "type": "BigNumber",
                "hex": "0x8f01922104ca4807c97020a486c4809c86e49049e09cce03a8c192616b1c484a"
              },
              {
                "type": "BigNumber",
                "hex": "0xd291171b2f4458b8cd1244b5244e9360d13375a144bcf9a910cc403c42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0166126079849d"
              },
              {
                "type": "BigNumber",
                "hex": "0xe0947b8041ae418e49c418310619063885184183106190638c41803907106583"
              },
              {
                "type": "BigNumber",
                "hex": "0xe7106384e69001c0799c190592a9ffffff47a77b610004545454104442069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0318fe3f8fe018"
              },
              {
                "type": "BigNumber",
                "hex": "0xde098de098de098de098de098de098de01894194614b9171b2f4004c42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0178a158c13886138861188e11886138861188e0f88e0f88e0f8"
              },
              {
                "type": "BigNumber",
                "hex": "0x960b89e098b610be08810b60789e118c1192418c72289562da94005442069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x16614612703681ae810620"
              },
              {
                "type": "BigNumber",
                "hex": "0x41805a06a06906206204a0622400681060081849829270081a80281012049821"
              },
              {
                "type": "BigNumber",
                "hex": "0x081062260081a89201a261261062001a06224806818812608620039802040168"
              },
              {
                "type": "BigNumber",
                "hex": "0x398806e85826c5064984ae4cdd6851265d87457e874d142b0f94185c42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x11e1d94e1197e07884988e4026291e23900b88"
              },
              {
                "type": "BigNumber",
                "hex": "0x478864036291e30464f8564780e39064124ae4a4a71d1ffffff4086442069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x660a107e29a019c2841f8c68270a0387"
              },
              {
                "type": "BigNumber",
                "hex": "0xe299e280e1f8a678a0387e299e280e1f8a678a0187e31a62841f8a6180638a00"
              },
              {
                "type": "BigNumber",
                "hex": "0x7e298609d67f8066d9261926f8266f946d84e61fe17987f86669077876690738"
              },
              {
                "type": "BigNumber",
                "hex": "0x01f9a41be107e718161f9ae13adc19492719c4ed5a3d19ac3ee4106c42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x07e61841f996007e6986e6f84e6191e7036659470049a059ae498640249811"
              },
              {
                "type": "BigNumber",
                "hex": "0xae41983184046806591668866920198e519621926900198649962194710019c4"
              },
              {
                "type": "BigNumber",
                "hex": "0x98623946390019c418e3146592019a49811a4199e4180398418039be481e4180"
              },
              {
                "type": "BigNumber",
                "hex": "0x59b6418199b61d9a607b5419a824d90306074458c54115fa1d34107442069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x387e30061f880086107e3102841f8c400e1f8c400e"
              },
              {
                "type": "BigNumber",
                "hex": "0x1f896107e2103041f8840a40061f885021f880102108188001f8a92c198a5188"
              },
              {
                "type": "BigNumber",
                "hex": "0x2c82819902106216a83e47a0ea20b04641a06226a0062391681a85a888063122"
              },
              {
                "type": "BigNumber",
                "hex": "0x1926a36038a48c51a8f80e2022824988288d85e828687981ba8e88482880261f"
              },
              {
                "type": "BigNumber",
                "hex": "0xa801c0419072ce1c9f6df465b8ef1187c0a346ab83c51cce8f14207c42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x461fc80f87e44c0787"
              },
              {
                "type": "BigNumber",
                "hex": "0xe42125841fc8423201291287e44884084a0ca24a1bca83084a01ca2486403f34"
              },
              {
                "type": "BigNumber",
                "hex": "0x2c4a05c821ca481e44a40903121009c848894ae888d100bc864a423a4432e480"
              },
              {
                "type": "BigNumber",
                "hex": "0xfcae4c421e6bd284723872992b9684a11cae3cae19a83123120472b8721ae1b0"
              },
              {
                "type": "BigNumber",
                "hex": "0x188b1231204f2b8a4c6486a5033284f23aa3929c0d4815caea923c1242cca17c"
              },
              {
                "type": "BigNumber",
                "hex": "0xaf48f049031286733923c12587f2f841fc9e15d8c19a8ab0114316d45da67951"
              },
              {
                "type": "BigNumber",
                "hex": "0x192036468ef3c513a4d8344d67fd1124669b44792ea112882f14408442069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0b88e1b8"
              },
              {
                "type": "BigNumber",
                "hex": "0x8638819886086086081592218e210607906088e019401921f87e1f87e1f87e1f"
              },
              {
                "type": "BigNumber",
                "hex": "0x87ea016a856b04aa213a2a80aa06a03681ac81aa0baa81ac8aa0faa8aa028613"
              },
              {
                "type": "BigNumber",
                "hex": "0xa86023418c624b97a5eb2473afbb91cebeee5e9a9a9978668c45a08c42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x99"
              },
              {
                "type": "BigNumber",
                "hex": "0x8e1d9960f9c418e671166826611e3b936601661263b93e0398498f64f981184b"
              },
              {
                "type": "BigNumber",
                "hex": "0x8f651980984b8fe519a4d8fe519a4d8fe519a4d8fe519a4d8fe4f980184f8f64"
              },
              {
                "type": "BigNumber",
                "hex": "0xf980184f8ee51980984d8ee4f981184d8e6519801984b8e6519801984d8d6519"
              },
              {
                "type": "BigNumber",
                "hex": "0x805984d8ce519805984f8be519809984f8a6559809985397e603661465f980d9"
              },
              {
                "type": "BigNumber",
                "hex": "0x84f97e6046612e5f9815984997e605e61165f9819984397e60766145f98007e6"
              },
              {
                "type": "BigNumber",
                "hex": "0x105f98107e6176600e1f9859980787e6156602e1f9851980f87e6136604e1f9a"
              },
              {
                "type": "BigNumber",
                "hex": "0x459a1987e6926801f87e6821fe241a8bcb59c6d74f9519cafba1909442069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x198179a059c139c059841a1198418059849a0d9a418059851a099a498059"
              },
              {
                "type": "BigNumber",
                "hex": "0x8508611e68849805985084188438849805985084188438849805985084188438"
              },
              {
                "type": "BigNumber",
                "hex": "0x8498059849884998059c49c518649c019a41a41841a41a498641a11851a51a45"
              },
              {
                "type": "BigNumber",
                "hex": "0x9851a098497e6006145f9a517e6006145f9801a49851851c51851a0986418641"
              },
              {
                "type": "BigNumber",
                "hex": "0xa01a41c41a059c09c11a09a01d0419e6a8c9c7fffffd14242454109c42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x107e4201204003d9081c8123b9289a8903b9091a89035b442272240b6c3aa4"
              },
              {
                "type": "BigNumber",
                "hex": "0x226006a040acba9689a0988b4b7a06046a0bfb003b0b5b1603b0a5b2eab009b2"
              },
              {
                "type": "BigNumber",
                "hex": "0x6b32a1b00bb2a1b0a1b2b300db0a1b2a1b0b300db2a1b0a1b0ab211b2ab2b30a"
              },
              {
                "type": "BigNumber",
                "hex": "0x3215b4ab0ab0a301fb1e087ecaac87eca86c07ec286c801fb2a32107ed01f170"
              },
              {
                "type": "BigNumber",
                "hex": "0x679cbb443031f910707f444c317ad1a6d4df4449ea5510404481a8a442069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0xa0e0787e809690061f"
              },
              {
                "type": "BigNumber",
                "hex": "0xa0220e322087e8b8c81856918a22e21a160788601aa3a2a25e21ac09c418e525"
              },
              {
                "type": "BigNumber",
                "hex": "0x6b01e620662045a2ea82e9106c20d20c9462817a04306fa2a86ec206b0818c20"
              },
              {
                "type": "BigNumber",
                "hex": "0xc188aa1db46b06a0624a001fb46a0620622a821fb463063082c0387ec585ee30"
              },
              {
                "type": "BigNumber",
                "hex": "0x64a27c24f1961519ac3ee457e874d14f83ab4499761d16dbaf5428ac42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0120d87e4581e1f9160587e50c40"
              },
              {
                "type": "BigNumber",
                "hex": "0x161f9025900387e409e40061f9025941988059025922846281e409648a0d8a40"
              },
              {
                "type": "BigNumber",
                "hex": "0x2e48b603886403e48ee404e438ae40a4076508650a4021f90e21900587e40864"
              },
              {
                "type": "BigNumber",
                "hex": "0x0161f902181e1f903100587e48c40161f903100787e40c40161f903100787e48"
              },
              {
                "type": "BigNumber",
                "hex": "0xa401e1f9060987e50261f9060987e5016f506910d3e7100dcf5408b442069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x056286630562384e2380650c60"
              },
              {
                "type": "BigNumber",
                "hex": "0x3942d808016418840c028803641a881a17a8620a048280fa801882a11a8605e8"
              },
              {
                "type": "BigNumber",
                "hex": "0xa80998c19469899eab1da47c73fa11c090b34594b95918a4276420bc42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x87e418407e41801415946822140990e29208c518c4806408e41c408641"
              },
              {
                "type": "BigNumber",
                "hex": "0x8064389e4780649841884f80e418418a479a079a4188459a401e4184188439a0"
              },
              {
                "type": "BigNumber",
                "hex": "0xf906292705650849809a5419061ab916f0fc445b43e911198ba410c442069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0187e8"
              },
              {
                "type": "BigNumber",
                "hex": "0x87668466201ba270366a219a221a0b986806680a4180b98212806680a4206026"
              },
              {
                "type": "BigNumber",
                "hex": "0x60a42219884a407a0292805e890898801e88a42017a04226a007a0a20210884e"
              },
              {
                "type": "BigNumber",
                "hex": "0x89081c801e81880a42011a242272007a06222a20fa0672209a06224a20ba8818"
              },
              {
                "type": "BigNumber",
                "hex": "0xe882e82a8980e8186a2211a069a88048286a888568a867a80a0a2061da4e0f87"
              },
              {
                "type": "BigNumber",
                "hex": "0xeaa21587ea4c41a09a5191c31504713b568f466b0fb9166a0d9420cc42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0f940f92294111e23901102f8040c409e5004086408e4806488641826409"
              },
              {
                "type": "BigNumber",
                "hex": "0x641816489e481e488e482e48c483643825f0651e620711414e5408d442069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1c"
              },
              {
                "type": "BigNumber",
                "hex": "0x65db46a3469966c198c1a8c80c286b1e61b6e632628c84c287306b066b766a8c"
              },
              {
                "type": "BigNumber",
                "hex": "0x80ec2a63b2230236e6a8c82662861b023b56728c8366287323356728c84662a6"
              },
              {
                "type": "BigNumber",
                "hex": "0x30230230232a1b1e6a8c856630a3023b2a32ab16628c86ec28c3aa81a8c7a8c0"
              },
              {
                "type": "BigNumber",
                "hex": "0x76c2ac1a885a8c3a8c87ec2cc2a85b0a34ab0007ed2c89a8ec841fb760b87ec7"
              },
              {
                "type": "BigNumber",
                "hex": "0x8671d066a87d27166a0d944d080891000a11453535347ffffff428dc42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1a03baa05a43bac01ac3fa"
              },
              {
                "type": "BigNumber",
                "hex": "0xc1288a83baa82a02a898a2035aa8180a1a89890ae89a8198a20722624a7a0720"
              },
              {
                "type": "BigNumber",
                "hex": "0x66aa61a46da166a0aa063a2aba463a0b19e4d99682a028818e4184998418e828"
              },
              {
                "type": "BigNumber",
                "hex": "0x0aa818641a49a49a418ea84a22712610619061272c03a889c49a49a4986aa005"
              },
              {
                "type": "BigNumber",
                "hex": "0xa889c49986b026a2271a0a83ea226da2a04ea2467a2a066a247241fac818061f"
              },
              {
                "type": "BigNumber",
                "hex": "0xac13cf419c7aae10d0d6a4450528511414e547fffffd11414a11a0e442069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x680eea816d0eed006caa"
              },
              {
                "type": "BigNumber",
                "hex": "0x3b98d18032b0ee6aac18c29635a96ca2aa0b0aeaa0a1a2ca4aa0afa4a1a2ca06"
              },
              {
                "type": "BigNumber",
                "hex": "0xa1a2ea5a4ca883a8682ae83a8ca88d9068baa032a22642064226a300b2a21643"
              },
              {
                "type": "BigNumber",
                "hex": "0xa04a16a3001b2a20e43a04a0ec9803b2a20643a04a06c9807b2a20641a04206c"
              },
              {
                "type": "BigNumber",
                "hex": "0x980bb2a20641a06a320fb2a236a3213b2aa16a18c866c2c8aac87ec2cd03f250"
              },
              {
                "type": "BigNumber",
                "hex": "0x671ea384e4f0c912f694b44c2f9a9134202247fffffd12f694b1a8ec42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0987e203e1f8a0d87e2280b87ec08a8261fb022a0987ec0aa02e1fb8d07ec5"
              },
              {
                "type": "BigNumber",
                "hex": "0xb8ca8c38c01e2816e306e34ab8b38c026a8a6d10ab88b8a30e3209a863384b88"
              },
              {
                "type": "BigNumber",
                "hex": "0x38810e20e20e28c38c03ea1baa3889065a0a38c85eea8898c39a828e3019ba42"
              },
              {
                "type": "BigNumber",
                "hex": "0x073066a0e3219bca22a18d18828e321bbaaa263262ce301fbaaa0c1aa30a38c8"
              },
              {
                "type": "BigNumber",
                "hex": "0x01fbaa1a02c038c041fbcaa0b300587ef286c0261fbcab00d87ef58419e9ad01"
              },
              {
                "type": "BigNumber",
                "hex": "0x6a6a694531214d1a6a6a647a77b6111d274247fffffd15e5443430f442069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x02e1f87e1f87e1f87eb1ae8041"
              },
              {
                "type": "BigNumber",
                "hex": "0xfac75876a98e81c098418e805ea1c42041c8048184986804ea1c4886a203a060"
              },
              {
                "type": "BigNumber",
                "hex": "0xa41c803ea1c48a62205988182906a8802ea1c48a6a009a0688498aa009a86142"
              },
              {
                "type": "BigNumber",
                "hex": "0x9a80368182926aa05a8614318803e70a41ca2001aa812318804e81a21272801a"
              },
              {
                "type": "BigNumber",
                "hex": "0x861231a179c21081aa82aa048a686681a212680a02a1821021a80767084206a8"
              },
              {
                "type": "BigNumber",
                "hex": "0x09a4086a0007e68a41a0200184a0620087e7084206a001840868061f9a210a20"
              },
              {
                "type": "BigNumber",
                "hex": "0x02229880161f98210aa002062a0787e710a20020a82e1f9ca200a00d87e72880"
              },
              {
                "type": "BigNumber",
                "hex": "0x561f988280fcc1b09b129525954471a6a6a647fffffd1f9f5f2420fc42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x2e1f8c1d87e25921587e2995001e1f8c641c06107e2d91707821"
              },
              {
                "type": "BigNumber",
                "hex": "0xf8ae43c2ee801f93f0fbc087f13919b86107f17b8f0b8107f0fb9f118f07efbc"
              },
              {
                "type": "BigNumber",
                "hex": "0x26f06ef7c4ef05f01baf0980f03ad00370c7e09b8d29002f147e09b90b108271"
              },
              {
                "type": "BigNumber",
                "hex": "0x3b118313a07b90182f0bb0fb803c2e816e182f0ba142ee0170bc1bc0e0171380"
              },
              {
                "type": "BigNumber",
                "hex": "0x44e01f0186703807c4e030b80bc0885703a07c2e050b80dc060bb80c0e027100"
              },
              {
                "type": "BigNumber",
                "hex": "0x70b809b9032a4005bb1280bc205c2e01ee42cc005b9130a00eec2e01f101ee44"
              },
              {
                "type": "BigNumber",
                "hex": "0xc4005b903403bb0ab000eec0a4205bb08270a9000ee44c290006ec2c2900261f"
              },
              {
                "type": "BigNumber",
                "hex": "0xb90b3000ee44c2900361fb30016ec2c42007e1fbb0186ff906cb4eda4629b891"
              },
              {
                "type": "BigNumber",
                "hex": "0x128abd45f77bc5100dcf544e2cb5d11d87c644318a1d12153741b90442069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x11ac1dac0987ea24a066aa2a80e1fa88a86a817a862a8a"
              },
              {
                "type": "BigNumber",
                "hex": "0xc007ea22a1ca816a806b1c4206a86ea22a1072882a0aa92c828714a206a05ea2"
              },
              {
                "type": "BigNumber",
                "hex": "0x451a81aa85a88a8218419aa24a84ea22a10e9288da88a851c42a92811a2a1c4a"
              },
              {
                "type": "BigNumber",
                "hex": "0x881aa89a892841865289280da8898e421eaa06aa0ea1c4198a22a036a20a1061"
              },
              {
                "type": "BigNumber",
                "hex": "0xa887a8028602885a861067288a809a889472887a807a883aa518ea22a01ea224"
              },
              {
                "type": "BigNumber",
                "hex": "0x198a21ea026a216a9063928a807a882841aa87a80ba887a86194a20a01ea2071"
              },
              {
                "type": "BigNumber",
                "hex": "0x2a21ea03ea21ea9851a82805a882861a889a811a887aa49aa22a00ea2049aa22"
              },
              {
                "type": "BigNumber",
                "hex": "0x6a056a226b1842882803a8814a226a066a22ea9282801a882852889a81baa8b9"
              },
              {
                "type": "BigNumber",
                "hex": "0x0a22a04a2071089a8007eaa26a22a02a227226a041faa8ba81288286a887a805"
              },
              {
                "type": "BigNumber",
                "hex": "0x87eaa1ea04a204aa85a80987eaa16a02a20a10aa16a03e1fa883a80a8818aa16"
              },
              {
                "type": "BigNumber",
                "hex": "0xa04e1faa9280a882887a81987ea22a02a216b0761fa88280288a8e087e1faa12"
              },
              {
                "type": "BigNumber",
                "hex": "0xa0f87e1f80c301b0db9a1c733c3d11128abd44318a1d118a6e24210c42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1f8850164184e31201922183e239209021225900"
              },
              {
                "type": "BigNumber",
                "hex": "0x39231229001029431205906239221902120b9027922390139262190179031001"
              },
              {
                "type": "BigNumber",
                "hex": "0x0621017902900902941590310090310179060190212159029005922101390210"
              },
              {
                "type": "BigNumber",
                "hex": "0x099021011902100d902100f921192007edb0671c8367196fcff4091442069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x01587e30fe108e0588e0588e0588e0588e0588e0588e0588e0588e0588e0"
              },
              {
                "type": "BigNumber",
                "hex": "0x588e0588e0588e0588e0588e0588e0588e0588e11441ae32e59c011c42069001"
              }
            ]
          ],
          [
            [
              {
                "type": "BigNumber",
                "hex": "0x4e1f900187e1"
              },
              {
                "type": "BigNumber",
                "hex": "0xf8c4041f87e40864021f87e40864041f901d902190007e40c485e4086407e219"
              },
              {
                "type": "BigNumber",
                "hex": "0x01b9021901b903101f88e199021801f9021901790310087e4086404e40860187"
              },
              {
                "type": "BigNumber",
                "hex": "0xe4086403e4086400e1f88e403640c40161f902390099021900787e408e401640"
              },
              {
                "type": "BigNumber",
                "hex": "0x86402e1f902190039023900b87e50c404408408502e1f9029029021001031031"
              },
              {
                "type": "BigNumber",
                "hex": "0x987e40a40848a48840840840840261f922902940102102102100d87e408408"
              },
              {
                "type": "BigNumber",
                "hex": "0x40a40440c40461f9031203941587e500785066b0b5c6342b0f90881542069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0389e0d8a4388098a4824880988480648262100388485e485e2101788485"
              },
              {
                "type": "BigNumber",
                "hex": "0xe2101788405e2101788405e2101790205e40817921990205e4081790205e4081"
              },
              {
                "type": "BigNumber",
                "hex": "0x792205e4081790202e28064080988480640809920390201e2100392201e21001"
              },
              {
                "type": "BigNumber",
                "hex": "0x922026212092282e21430464184e7068a2fa24910e083212b4a0881d42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1b2fdb40bb4fdb0e300bb2ffb0607b4ebfec81"
              },
              {
                "type": "BigNumber",
                "hex": "0xed39e29b96c38c016cb962fb8ed00ed38e33b8ed006cb9635b8ed04c39637b96"
              },
              {
                "type": "BigNumber",
                "hex": "0xc82d38639b96d00d38639b9ec80cb8e3bb96c80cb863db96c38d3863db96c3b8"
              },
              {
                "type": "BigNumber",
                "hex": "0x63fbcc7b8620feeb1ee18fec3ac7b863fb2e326f0fecfb8c383d98e346e0e660"
              },
              {
                "type": "BigNumber",
                "hex": "0x86a0c3bad1c379882a620c1bad18a8e6620a1aeb2eb262c8183198428620a18a"
              },
              {
                "type": "BigNumber",
                "hex": "0x38c38e62a8182d9829882a6aae7aa818aa2609662029882a62ae7aa62a81a409"
              },
              {
                "type": "BigNumber",
                "hex": "0xe808a9aa1b8603cb1a520c08e620a7bac3a0386a1aa108b26728ee32e02e32ea"
              },
              {
                "type": "BigNumber",
                "hex": "0xc8336a5bccb80b8d38ecdb9ec1b8138cb7ee316e04e32edfb80008001a28c309"
              },
              {
                "type": "BigNumber",
                "hex": "0x212b4a0c5c6cbc32443826ffffffdb2e10386ced5a3db3a4d830b02542069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x87ea1a13aa6ac0da86ac6a013a0622a04e8ac15aa80815a881817a0610"
              },
              {
                "type": "BigNumber",
                "hex": "0x15a2405e82817a0a85ea1017a8405e4181790605e885e82815a2a056b056a85e"
              },
              {
                "type": "BigNumber",
                "hex": "0xa2017a217a06056818a05682a15aa15ac07aa03a407ac0a881a09a4a582e622b"
              },
              {
                "type": "BigNumber",
                "hex": "0x041fb441a28c2892593f10c84ad2832f3e6a0c4a2bac33b568f0a02d42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x016a"
              },
              {
                "type": "BigNumber",
                "hex": "0x1a042a13a8810a83ea80808a8366028022036680a02a03622a110a05e81013ac"
              },
              {
                "type": "BigNumber",
                "hex": "0x8046a048046680a8462286a013886008066803ea006803ea18090a0466008281"
              },
              {
                "type": "BigNumber",
                "hex": "0x5aa0a6c1a28a289a37eed0dfd8ed83baa0ee0d792a203cebeee0a03542069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x66287e30762385e298462d83e2f83e25866238662d84e2002d8362802d82e3"
              },
              {
                "type": "BigNumber",
                "hex": "0x02278363042383e21822184621806204e1f87e1f96c18cb24b18803d42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1e4184e458364b826438a502e418a482e438a4826290e2100988650840"
              },
              {
                "type": "BigNumber",
                "hex": "0x2631062100b884782e2942120b8850848364188483650a403e5084080d942102"
              },
              {
                "type": "BigNumber",
                "hex": "0x10202e4380282643880f94290203650840a0d90e1194303e418c0d94212203e5"
              },
              {
                "type": "BigNumber",
                "hex": "0x08404650840a0f906303e408502e1068a2e224912d4832040460884542069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x5ea181e1fa865a80187ea1ae087ea1c21986a06ea9a30463a8199c281e"
              },
              {
                "type": "BigNumber",
                "hex": "0x72817a860c0b9ca04ea1a203e72811aa608139aa0466184e6a8119c159aa0361"
              },
              {
                "type": "BigNumber",
                "hex": "0xf886280d87e218a02e1f8a6280987e29aa01e1f8a6a80987e21aa0261f8a6280"
              },
              {
                "type": "BigNumber",
                "hex": "0x987e298a02e1f886a80987e298a006b021f886a802882852a1f8862a020419c8"
              },
              {
                "type": "BigNumber",
                "hex": "0x0766a809411c1d9aa00a18400e6a81b9aa00a1a01a09aa06ea18a02a186092a0"
              },
              {
                "type": "BigNumber",
                "hex": "0x6ea1c0286112a076a980794007ea9a11068021faa61928a8107eb1aa20a0261f"
              },
              {
                "type": "BigNumber",
                "hex": "0xac03e8c1a7043010734480de6363c30c62870f33c3d03128abd0a04d42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0bcb6087f289ed4a1dca2c9e23224a"
              },
              {
                "type": "BigNumber",
                "hex": "0x17c8e47ca233284f294f2b32847211e711720d203f2106a79a41c82c80fc84ac"
              },
              {
                "type": "BigNumber",
                "hex": "0x661520b2046b99320b204eac96a390a912092057201721a8e44a0587f2a8f281"
              },
              {
                "type": "BigNumber",
                "hex": "0xe1fc8a3c80987f2aa6480b87f2ab20361fc8ac80d87f22b20361fc8ac80d87f2"
              },
              {
                "type": "BigNumber",
                "hex": "0x2b301e1fc8c38cbb2041fcae30ab8cb92821fc8e33022abb2001fc8e3283282c"
              },
              {
                "type": "BigNumber",
                "hex": "0xe48007f238c22c288ad2001fcb021030a308c0a48007f239021030a32a3b2021"
              },
              {
                "type": "BigNumber",
                "hex": "0xfc9029030a3303920061fc8a44c4328061fcae42c40e480587f2c07281e1fcb1"
              },
              {
                "type": "BigNumber",
                "hex": "0x480b87f24320361fc90c80f87f0481187f28461fc805ff41a8f49098c0d13ac3"
              },
              {
                "type": "BigNumber",
                "hex": "0x18a6e20c0373d432882f10e5bf3fc34f77dd0c95573831ca7e20c05542069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x022987627826"
              },
              {
                "type": "BigNumber",
                "hex": "0x2b8762b80e2d87e2d842382e1f89e08c1387e2580305e1f88608a1987e218028"
              },
              {
                "type": "BigNumber",
                "hex": "0x661f88600a1987e30428561f886108e0f87e300e2382e1f8860388e0987e2181"
              },
              {
                "type": "BigNumber",
                "hex": "0xe2180e1f89e098a0587e2387e1f886007e1f8c03a7c194ba3518805d42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x118be1f886a98861"
              },
              {
                "type": "BigNumber",
                "hex": "0x58d00842ae40860db2240f10ab90e42282ec08e390ab910bb002ec40e80e90ab"
              },
              {
                "type": "BigNumber",
                "hex": "0x9103d002ec38f010a790a1105826c1aec24296892f4409b273a428e4a04b90bb"
              },
              {
                "type": "BigNumber",
                "hex": "0x26630640710a5a0420442f400998c38e429e428440e3826630e392a990e5c0"
              },
              {
                "type": "BigNumber",
                "hex": "0x0798c1cf10a9910bd081e630e9aec0a792ec06e01e630e427404ac53d01b807b"
              },
              {
                "type": "BigNumber",
                "hex": "0x0e1c2640e10ef42f4207b0e9b03b01b8f0b970016c406b9f1390ba70016c1aed"
              },
              {
                "type": "BigNumber",
                "hex": "0xc06e9c005b063a713d13871016c1ae5c2e7c16e4005b063bb0baf01bb001e639"
              },
              {
                "type": "BigNumber",
                "hex": "0x0986e9c4ec2e4007b0f1d01b8f038f0826c38738f13845bd0026c1aebc0420b2"
              },
              {
                "type": "BigNumber",
                "hex": "0x043d0026c18e9c4428e4b90826cb971384a964440bb303a6c0e1908ac840ec00"
              },
              {
                "type": "BigNumber",
                "hex": "0xdb301b038e41c0440ec00f90cbb138f1390b9003651ae1c2ec2e1c40d90a1b96"
              },
              {
                "type": "BigNumber",
                "hex": "0x6b9f003e4280b067c4e1c011aa0b463970bb00468a801b4e5c0e4017a805b10b"
              },
              {
                "type": "BigNumber",
                "hex": "0x87080e1fd1f2821fd52d525128774c8f4cb4cc19d121d121d1250e1dd323d128"
              },
              {
                "type": "BigNumber",
                "hex": "0x21fd32d1251201448007f44c05120120144a1fd12052812034c8107f4480ca0d"
              },
              {
                "type": "BigNumber",
                "hex": "0x187f4480d120461fca0f87f4026038a06ec18c04bda52c330be6a0ced5a3c3"
              },
              {
                "type": "BigNumber",
                "hex": "0x66a0d90cf0a1143fcdbcb0ce4f0c833139660e1dfa1031c31500c86542069001"
              }
            ]
          ],
          [
            [
              {
                "type": "BigNumber",
                "hex": "0x012710e7580e49829461266980e4182943790680e418"
              },
              {
                "type": "BigNumber",
                "hex": "0x418851b6408668449848a7026639029a01926920f9962980390e119269060860"
              },
              {
                "type": "BigNumber",
                "hex": "0x1650666106180e1f984184980587e70060161f9c01a0387e600680600e1f9a01"
              },
              {
                "type": "BigNumber",
                "hex": "0x80987e60060261f9801b3419689ef12e10382c5c6cbcb66b0d92901642069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x10e2184e211e210e0988478847856418a506e4"
              },
              {
                "type": "BigNumber",
                "hex": "0x88507e4187e2941d8850762921d902141b902141b902921b9221219942121994"
              },
              {
                "type": "BigNumber",
                "hex": "0x2121994212199401217906012159201201215900900921590012092199011200"
              },
              {
                "type": "BigNumber",
                "hex": "0x7e487e5076480406e480487e480d106c24dac4a4a71cb2814502881e42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x22f6928600eb12bba2a00ea92b15eb00ea3a0488af8841aa128e49"
              },
              {
                "type": "BigNumber",
                "hex": "0x8a826a394a806a22a1836b22a12a00e828611ac8a842803a8619a882860387ea"
              },
              {
                "type": "BigNumber",
                "hex": "0x3a00587eb008280387ea18a00880e1fa80220280387ea200200987e800a0261f"
              },
              {
                "type": "BigNumber",
                "hex": "0xa801b1c19689ef12814502e2909d8b2e10382c5b43e8b171b2f2a02642069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x10239805902190600e61231063"
              },
              {
                "type": "BigNumber",
                "hex": "0x8069021906782e703668c418440c692814502e8dfbb4b562da92902e42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x5a80398a008aa098800a03ea00aa2028"
              },
              {
                "type": "BigNumber",
                "hex": "0x628022a82620aa0a02ea00b22a18aa0a18a00620a00a20a02a02a00a00a00a00"
              },
              {
                "type": "BigNumber",
                "hex": "0xa22a1aa80628818a1aa20a200280a80286a0a18a182a82a00a1aa988aa0ac01a"
              },
              {
                "type": "BigNumber",
                "hex": "0xa9aa82a04a8062a6a0aa2028420a9aa82ea80a988280a88aa422a126056a7a2a"
              },
              {
                "type": "BigNumber",
                "hex": "0xd84eb08424a80a1ab076a780b00606ea98ea84a186ea780ea201da88280baa1d"
              },
              {
                "type": "BigNumber",
                "hex": "0xac03da419089d012443822f3afbb8be9ded82e6b0fb8b2f3e6a2a03642069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x04886886618c09a2398609070a0590e6806239a010218281"
              },
              {
                "type": "BigNumber",
                "hex": "0x66126902181e418010218218118648a41a21806210692608658266188e49a090"
              },
              {
                "type": "BigNumber",
                "hex": "0xe604e619468161f98e0a3418680ef9a37eed2d58b6a4bcebeee2903e42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1c2780"
              },
              {
                "type": "BigNumber",
                "hex": "0x658468841a212e2198e290688419e418c68a49d650c6120980d986508686e694"
              },
              {
                "type": "BigNumber",
                "hex": "0x21a1f9840a6001f984086801f90298087e40a087e4841f984821f9a4041f9840"
              },
              {
                "type": "BigNumber",
                "hex": "0x41f9a0187e60061f980187e6041f906021f98418007e680407e6824021f9a400"
              },
              {
                "type": "BigNumber",
                "hex": "0x1f9a010107e6841f9803cc1ac9b4c12929c72dd0fcfcbffffff2904642069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x7623801f89e1b88e00a48562902006400212019425940394"
              },
              {
                "type": "BigNumber",
                "hex": "0x08a489e502e4022b940f900b87e4d060ae434727db7cb96e3bc2884e42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0316818c28c856"
              },
              {
                "type": "BigNumber",
                "hex": "0xc798c28ca2d021f90c2cd20007e430620a20622c28c06e430620c08c20007e42"
              },
              {
                "type": "BigNumber",
                "hex": "0x0620c08c021f90c0ad20087eca0a00e1fb0620a14087ec206300387ec81e1fa0"
              },
              {
                "type": "BigNumber",
                "hex": "0xa32ab0652e636450c5b4b24669b2eb38b2d72c250dccb56678f2a85642069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x025180648a40a40a40a48040840a40a4"
              },
              {
                "type": "BigNumber",
                "hex": "0x0a40a40848a48048048048a400483e48051061122a26b0202e62885e42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x011a1e1da061a0621a060ba26206022219c802689a107e8188"
              },
              {
                "type": "BigNumber",
                "hex": "0x841fa26200187e8120387e81080061fa060187e81a8041fa2422107e81280061"
              },
              {
                "type": "BigNumber",
                "hex": "0xfa0422107e8188841fa0e087e83821fa26206200187e818061fa00200387e800"
              },
              {
                "type": "BigNumber",
                "hex": "0x801e1fa0107ec30690cab658669f0bc8ead92dba50dcb2f694b2986642069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0683e67804184006f9"
              },
              {
                "type": "BigNumber",
                "hex": "0x06106f804184006982e6184e60b418440c79ad495964b6a6a692906e42069001"
              }
            ]
          ],
          [
            [
              {
                "type": "BigNumber",
                "hex": "0x059a0b87e682e1"
              },
              {
                "type": "BigNumber",
                "hex": "0xf9a0b87e681e1f8a68261f8860587e2381e1f8860587e238261f982821f9c11a"
              },
              {
                "type": "BigNumber",
                "hex": "0x11c199849a01a0984981b9849801a0184981f984986498007e6146946021f984"
              },
              {
                "type": "BigNumber",
                "hex": "0x598087e6126607e6136606e614660666191661801f9a5180587e614601e1f984"
              },
              {
                "type": "BigNumber",
                "hex": "0x180987e702e1f980d87e6041fbb41820b4f1d45bc3f153c82b75101742069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x011a0387e680e1f9a0387e680e1f9a03"
              },
              {
                "type": "BigNumber",
                "hex": "0x87e680e1f9a0387e680e1f9a0387e680e1f9a0387e680e1f9a0387e680e1f9a0"
              },
              {
                "type": "BigNumber",
                "hex": "0x387e680e1f9a0387e680e1f9a0387e68061f982106021f982146001f98214607"
              },
              {
                "type": "BigNumber",
                "hex": "0xe60a41981d98210e607660843981d98210e607660843981f8a518007e6085180"
              },
              {
                "type": "BigNumber",
                "hex": "0x87e6084180187e6821fbd419a0c0d1b4d4e5563e9ac953c82b75101f42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x04210087e210087e210087e210087e21"
              },
              {
                "type": "BigNumber",
                "hex": "0x87e210087e210087e210087e210087e210087e210087e210087e210007e81c"
              },
              {
                "type": "BigNumber",
                "hex": "0x1b98859817a01180a017a01180a215a011811815981181181598118118159811"
              },
              {
                "type": "BigNumber",
                "hex": "0x811815981181181598120602684e8006802884e81812012015a012012015a20a"
              },
              {
                "type": "BigNumber",
                "hex": "0x012017a0007f1106702e2e5a9a9a553f3b3554406ced52f3e6a5182742069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0139060787e50a480e1f922392087e48a64001"
              },
              {
                "type": "BigNumber",
                "hex": "0xf8840ae487633901d88648a6406e239029901b88e40a6406e239227901d88e40"
              },
              {
                "type": "BigNumber",
                "hex": "0x96487623902190e1d8c48a4886407e458c418061f902906622107e439868841f"
              },
              {
                "type": "BigNumber",
                "hex": "0x9281a81869021fa06a265a21fa072267a01ba06ba061a017a06fa00206a015a0"
              },
              {
                "type": "BigNumber",
                "hex": "0x6a272272002217a411c91a80061fa07200206a00187e81c80081a80061fa26a0"
              },
              {
                "type": "BigNumber",
                "hex": "0x0220787e88173f0653edc04002845566a0d954bda52c330be6a0982f42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1ec18061fb141b0087ec516c001fb145b012c15b06a54300"
              },
              {
                "type": "BigNumber",
                "hex": "0x08a40613b085b02c0615b04a06c0b018564a0422c102c41790c1283048b086e4"
              },
              {
                "type": "BigNumber",
                "hex": "0xb083048aa86e41b008a1dd0030e107ee30622c041fb8c381207f20340061fc94"
              },
              {
                "type": "BigNumber",
                "hex": "0x39439401403407f200f014021fd0051200e01238007ee0123a1dd001c94380d0"
              },
              {
                "type": "BigNumber",
                "hex": "0xe077400e4b401285f481404e0544a087ef012067400e81402e01201201405f48"
              },
              {
                "type": "BigNumber",
                "hex": "0x0f03250087ee4b40320061fb80381481fc80392381480d00501dba1481fc8048"
              },
              {
                "type": "BigNumber",
                "hex": "0xe05201e1fc80480187f400e1fd01387f4034021f87fd906a031b84c2f9a95fff"
              },
              {
                "type": "BigNumber",
                "hex": "0xfff57fffffc7eee9e65759f5b5b5d5a6a6a655d0fcfd5743f3f5483742069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x2640461f920f87e50361f88e0987e292202e1f8960987e214282"
              },
              {
                "type": "BigNumber",
                "hex": "0x61f88e0b901b8a488059061d8a480648c487e484488e407e50040a48c487e508"
              },
              {
                "type": "BigNumber",
                "hex": "0x438c406e50c40c40c405e508e48a40c4046508650a438a401e4388640a408408"
              },
              {
                "type": "BigNumber",
                "hex": "0x6408488401640ae40a408408641884016489e48a50b64016408640a50ae48c40"
              },
              {
                "type": "BigNumber",
                "hex": "0x1650c40840848965086401e40c40a4086508648864016488408e4189e4086401"
              },
              {
                "type": "BigNumber",
                "hex": "0xe40864084884388648c4816408640a508640c50c401e40c40c40840a48a48865"
              },
              {
                "type": "BigNumber",
                "hex": "0x01640c40c50ae4180401e3142f9411902902122794179221227941d922794087"
              },
              {
                "type": "BigNumber",
                "hex": "0xe408e50061f903140787e503e1f90007ff9061c11c075ffffff5083f42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0xa11ec0"
              },
              {
                "type": "BigNumber",
                "hex": "0x56a080080080084056a08008008008484ea08008008018c1013a820020060060"
              },
              {
                "type": "BigNumber",
                "hex": "0x0c04ea0800800801803013a8200200200600c04ea0800800801803013a820020"
              },
              {
                "type": "BigNumber",
                "hex": "0x0200200c04ea0800800800801013a8200200600200404ea0800801800801013a"
              },
              {
                "type": "BigNumber",
                "hex": "0x8200200600600404ea0800801801801013a8200200600600404ea08008008018"
              },
              {
                "type": "BigNumber",
                "hex": "0x01013a8200200200600404ea0801801801803013a820020020023213a8200200"
              },
              {
                "type": "BigNumber",
                "hex": "0x20043015a8200200600c05ea08018018c85ea08018018c066a08008010c066a0"
              },
              {
                "type": "BigNumber",
                "hex": "0x80180301ba86008321ba86204301da8620c07ea22c07ea32007ea30087e022a0"
              },
              {
                "type": "BigNumber",
                "hex": "0x6882fae4bcf9a95212b4a54910e095aae0f154e9360d5ffffff5284742069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x4c985621a6c04621b611b073067300fb06"
              },
              {
                "type": "BigNumber",
                "hex": "0xb2ab27300bb0730a1b07300bb0732ab27300bb0710c1986c02ec9a4b261b20db"
              },
              {
                "type": "BigNumber",
                "hex": "0x0692c986c03ec984b273211b24b2688c056c12c9a205ec1843268817b0610c9a"
              },
              {
                "type": "BigNumber",
                "hex": "0xc05ec184326b017b0610c9ac05ec084326308066c3a01fb2087ec821fb2087ec"
              },
              {
                "type": "BigNumber",
                "hex": "0x821fb2087ec821fb2087ec801fb0ab0007ea801fb0ab0007ea801fb0ab0007ec"
              },
              {
                "type": "BigNumber",
                "hex": "0x85f4d067830ae4a051415d4bcf9a956dbaf5550ac3e55150b2a5284f42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1da4107e90"
              },
              {
                "type": "BigNumber",
                "hex": "0x41f928041f8a4821f922821fa05021fa4107e9041fa41da36a05681aea05681a"
              },
              {
                "type": "BigNumber",
                "hex": "0xea056818eb18a05681882a62862862815a062062872862815a062c62c62815a0"
              },
              {
                "type": "BigNumber",
                "hex": "0x6ba815a0ada94186b24c9150b2a57530be6a550ac3e552665ac5205742069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x044387e409e406e2b9017902d9"
              },
              {
                "type": "BigNumber",
                "hex": "0x015902d90159021902390159031421901590314219015903142190178b619982"
              },
              {
                "type": "BigNumber",
                "hex": "0x9901b9825901f982190007e40864001f902190087e60a4041f9860187e680e1f"
              },
              {
                "type": "BigNumber",
                "hex": "0x9a0387e680e1f9a0387e680e1f9a0387e680e1f9a0187e41a40061f9a0387e68"
              },
              {
                "type": "BigNumber",
                "hex": "0x061f9061060061f9a1fbac1940bcd1212b4a545c6cbd52929c75105f42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1ead86ea1a16728e0daa8f9868aa09aa627e07a86a09f8"
              },
              {
                "type": "BigNumber",
                "hex": "0x1ea188a7e07a883aa625607a88598a18818887826a2222066286a42a0e09a888"
              },
              {
                "type": "BigNumber",
                "hex": "0x88398b188583ea22220ea00a5a20fa889a805aa11aa89a8007ea21ea187ea202"
              },
              {
                "type": "BigNumber",
                "hex": "0x206aa0b06eaa022462a8a81daa808918a22a07eaa02216a021fa885aa107eaa2"
              },
              {
                "type": "BigNumber",
                "hex": "0xa81e1fac1bc1c1860aaf1d4d67fd152665ac54964fc559ac3ee5206742069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0158a402e1f8a50261f8848a0987e210282e1f"
              },
              {
                "type": "BigNumber",
                "hex": "0x88418261f8a418165181b8a50065184981b8a50249864181d8c408498e418007"
              },
              {
                "type": "BigNumber",
                "hex": "0xe310602692107e212c0361f906340787e498c18161f906b2a00c00e1f90602c2"
              },
              {
                "type": "BigNumber",
                "hex": "0xa0300187e4180b2ab2107e418134a300987ed28c8261fb0e0987ed28c02e1fb2"
              },
              {
                "type": "BigNumber",
                "hex": "0x8320987ed28c0261fb4a320987eca8c8261fb0828c8261fb0828c8261fb0828c"
              },
              {
                "type": "BigNumber",
                "hex": "0x8261fb08340987ec20a3080261fb08340987ec20d0261fb0a340987ec28c82e1"
              },
              {
                "type": "BigNumber",
                "hex": "0xfb0a320b87ec18261fb0a320b87ec28c82e1fb20d87ec8361fb20f87ec01fbb0"
              },
              {
                "type": "BigNumber",
                "hex": "0x65c14c06deb66d5ffffff561dfa11566a0d954ed5a3d51c31505286f42069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x1a0387e618240040"
              },
              {
                "type": "BigNumber",
                "hex": "0x04036400400402618a40840840b640840840a618045836458061804041f98603"
              },
              {
                "type": "BigNumber",
                "hex": "0x87e680600e1f980980387e60461f87e1f87e1f87e1f87e1f87e1f87e1f87e1f8"
              },
              {
                "type": "BigNumber",
                "hex": "0x7e1f87e1f87e1f87e1fa7c194730e1b7ad9b550ac3e552040465107742069001"
              }
            ],
            [
              {
                "type": "BigNumber",
                "hex": "0x0218662585627856818a15a0"
              },
              {
                "type": "BigNumber",
                "hex": "0xe15906684e51849a11928985180f9081889a4180fa0610818890603e61261066"
              },
              {
                "type": "BigNumber",
                "hex": "0x04e620419813916604e500420604e49801081811926024206046498090818119"
              },
              {
                "type": "BigNumber",
                "hex": "0x06048876804eb5062829a850ac3e551e4ba854d67fd1587c0a35187f42069001"
              }
            ]
          ]
        ]
      ]
    },
    "decoded": {
      "from": "0x27b6E7032F3800389D963DDba80CEB6f7815a4FC",
      "gasPrice": "4900000000",
      "gasLimit": "29039104",
      "to": null,
      "value": "0",
      "nonce": 1,
      "data": "",
      "r": "0x7e40dd82af2a4dcad65027a69567573eb62db822a9fa0b9d7c9faf8660953cd9",
      "s": "0x74ef862ca281f82478a724f955cdade0bb846e1f84644a1a00240271c42535b3",
      "v": 45,
      "chainId": 5
    }
  }
}